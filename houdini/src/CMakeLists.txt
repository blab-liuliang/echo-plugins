# Set Module Name
SET(MODULE_NAME HoudiniEngine)

MESSAGE( STATUS "Configuring module: ${MODULE_NAME} ...")

# include diirectories
INCLUDE_DIRECTORIES( ${BIG_NUMBER_ROOT_PATH})
INCLUDE_DIRECTORIES( ${CMAKE_CURRENT_SOURCE_DIR})
INCLUDE_DIRECTORIES( ${ECHO_ROOT_PATH})

# link directories
LINK_DIRECTORIES(${CMAKE_LIBRARY_OUTPUT_DIRECTORY})
IF(${ECHO_BUILD_PLATFORM_MAC})
    LINK_DIRECTORIES(${ECHO_ROOT_PATH}/lib/OSX/${CMAKE_BUILD_TYPE})
ELSE()
	LINK_DIRECTORIES(${ECHO_ROOT_PATH}/lib/Win64/${CMAKE_BUILD_TYPE})
ENDIF()

# Locate Houdini's libraries and header files.
FIND_PACKAGE(Houdini REQUIRED)

# query all files
FILE( GLOB_RECURSE HEADER_FILES *.h *.inl)
FILE( GLOB_RECURSE SOURCE_FILES *.c *.cpp *.mm)

SET(ALL_FILES ${HEADER_FILES} ${SOURCE_FILES})

# group
GROUP_FILES(ALL_FILES ${CMAKE_CURRENT_SOURCE_DIR})

# add library
ADD_LIBRARY(${MODULE_NAME} SHARED ${ALL_FILES})

# set target properties
SET_TARGET_PROPERTIES(${MODULE_NAME} PROPERTIES FOLDER "")

# Link libraries
TARGET_LINK_LIBRARIES(${MODULE_NAME} zlib engine lua freeimage)
TARGET_LINK_LIBRARIES(${MODULE_NAME} Houdini)

IF(ECHO_BUILD_PLATFORM_MAC)
    # AddFrameWork Macro
    MACRO(ADD_FRAMEWORK fwname)
        SET(FRAMEWORKS "${FRAMEWORKS} -framework ${fwname}")
    ENDMACRO(ADD_FRAMEWORK)

    ADD_FRAMEWORK(AppKit)
    ADD_FRAMEWORK(QuartzCore)

    SET(FRAMEWORKS "${FRAMEWORKS} -ObjC")
    SET(CMAKE_SHARED_LINKER_FLAGS ${FRAMEWORKS})
ELSE()
ENDIF()

# succeed message
MESSAGE(STATUS "Configure ${MODULE_NAME} success!")
