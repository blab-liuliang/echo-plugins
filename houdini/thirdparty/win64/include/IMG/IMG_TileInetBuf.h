/*
 * PROPRIETARY INFORMATION.  This software is proprietary to
 * Side Effects Software Inc., and is not to be reproduced,
 * transmitted, or disclosed in any way without written permission.
 *
 * NAME:	IMG library internet socket interface (C++)
 *
 * COMMENTS:	This provides a shared memory interface for read/write
 *		of tiles generated by Mantra.  Mantra will write to
 *		the buffer and flag it as readable.  Until the buffer
 *		has been read, the buffer is flagged as "non-writable".
 */

#ifndef __IMG_TileInetBuf_h__
#define __IMG_TileInetBuf_h__

#include "IMG_API.h"
#include <UT/UT_SysClone.h>
#include <UT/UT_NetSocket.h>
#include "IMG_TileBuffer.h"

class UT_String;

class IMG_API IMG_TileInetBuf : public IMG_TileBuffer {
public:
      IMG_TileInetBuf( char *host = NULL, UT_NetSocket *theServer = NULL,
		      int port = 0 );

     ~IMG_TileInetBuf();

    virtual int		 getTileWidth() const { return myTW; }
    virtual int		 getTileHeight() const { return myTH; }

    virtual void	 setQuitFlag(int val=1);	
    virtual int		 getQuitFlag() const;

    virtual void	 setMouseXY(int x, int y)
			 { myMX = x; myMY = y; };
    virtual void	 getMouseXY(int &x, int &y) const
			 { x = myMX; y = myMY; };

    virtual int		 canWriteTile() const;
    virtual int		 canReadTile() const;

    virtual void	 writeTile(int xl, int xr, int yb, int yt,
				   const void *data);
    virtual void	 readTile(IMG_Raster &rp, int *coords=0);
    virtual void	 getKeyString( char *str );

    int			 getPort()
			 {
			     return myInetSocket ? myInetSocket->getPort() : 0;
			 }
    void		 getStartupCommand( UT_String &cmd );
    void		 sendStartupCommand( int pid, int x, int y,
					     int w, int h );

    int			 promptRetry();

    static int		 getServerPort();

protected:
    virtual void	 setTileSize(int w, int h)
			 {
			     myTW = w; myTH = h;
			 }
    
private:
    int			 myTW, myTH, myQuitFlag;
    int			 myMX, myMY;
    int			 myTotalData, myDataSoFar;
    UT_NetSocket	*myInetSocket;
};

#endif
