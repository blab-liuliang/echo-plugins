/*
 * PROPRIETARY INFORMATION.  This software is proprietary to
 * Side Effects Software Inc., and is not to be reproduced,
 * transmitted, or disclosed in any way without written permission.
 *
 * NAME:	GA_AIFStat.h ( GA Library, C++)
 *
 * COMMENTS:	Allows attribute to fill out information for the stat()
 *		interface.
 */

#ifndef __GA_AIFStat__
#define __GA_AIFStat__

#include "GA_API.h"

#include <SYS/SYS_Types.h>


class GA_Attribute;
class UT_WorkBuffer;


/// @brief Class to fill GA_Stat information about an attribute.
/// This AIF is used to fill GA_Stat type information about an attribute.
/// The string generated by the info() method will be appended to the
/// GA_Stat::myPointAttributes (or other attribute lists).
///
/// The default method is typically sufficient for most attributes.
class GA_API GA_AIFStat 
{
public:
	     GA_AIFStat();
    virtual ~GA_AIFStat();

    /// Fill out GA_Stat information about the given attribute.
    ///
    /// @param attrib - The attribute to stat
    /// @param info - The buffer containing the resulting stat information
    /// @param level - The verbosity level (see @ref GA_STAT_LEVEL)
    ///
    /// @return false if no stat information was filled out
    ///
    /// The base class implementation will be sufficient for most attributes.
    /// - If the attribute has no GA_AIFJSON implementation (that is, the
    ///   attribute can't be saved or loaded), then the info() method will
    ///   return false.
    /// - If the attribute has a GA_AIFTuple interface, the info will be @code
    ///     info.sprintf("%s %s::%s[%d]", tuple->getStorage(),
    ///              getType().getName(), getName(), tuple->getTupleSize());
    ///   @endcode
    /// - Otherwise, the format will be @code
    ///     info.sprintf("%s::%s", getType().getName(), getName());
    ///   @endcode
    virtual bool	info(const GA_Attribute *attrib,
				UT_WorkBuffer &info,
				uint level) const;
};

#endif
