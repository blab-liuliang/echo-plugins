/*
 * Distributed under the Boost Software License, Version 1.0.
 * (See accompanying file LICENSE_1_0.txt or copy at
 * http://www.boost.org/LICENSE_1_0.txt)
 *
 * Copyright (c) 2014 Andrey Semashev
 */
/*!
 * \file   atomic/capabilities.hpp
 *
 * This header defines feature capabilities macros.
 */

#ifndef HBOOST_ATOMIC_CAPABILITIES_HPP_INCLUDED_
#define HBOOST_ATOMIC_CAPABILITIES_HPP_INCLUDED_

#include <hboost/atomic/detail/config.hpp>
#include <hboost/atomic/detail/platform.hpp>
#include <hboost/atomic/detail/int_sizes.hpp>

#if !defined(HBOOST_ATOMIC_EMULATED)
#include HBOOST_ATOMIC_DETAIL_HEADER(hboost/atomic/detail/caps_)
#endif

#ifdef HBOOST_HAS_PRAGMA_ONCE
#pragma once
#endif

#ifndef HBOOST_ATOMIC_INT8_LOCK_FREE
#define HBOOST_ATOMIC_INT8_LOCK_FREE 0
#endif

#ifndef HBOOST_ATOMIC_INT16_LOCK_FREE
#define HBOOST_ATOMIC_INT16_LOCK_FREE 0
#endif

#ifndef HBOOST_ATOMIC_INT32_LOCK_FREE
#define HBOOST_ATOMIC_INT32_LOCK_FREE 0
#endif

#ifndef HBOOST_ATOMIC_INT64_LOCK_FREE
#define HBOOST_ATOMIC_INT64_LOCK_FREE 0
#endif

#ifndef HBOOST_ATOMIC_INT128_LOCK_FREE
#define HBOOST_ATOMIC_INT128_LOCK_FREE 0
#endif


#ifndef HBOOST_ATOMIC_CHAR_LOCK_FREE
#define HBOOST_ATOMIC_CHAR_LOCK_FREE HBOOST_ATOMIC_INT8_LOCK_FREE
#endif

#ifndef HBOOST_ATOMIC_CHAR16_T_LOCK_FREE
#define HBOOST_ATOMIC_CHAR16_T_LOCK_FREE HBOOST_ATOMIC_INT16_LOCK_FREE
#endif

#ifndef HBOOST_ATOMIC_CHAR32_T_LOCK_FREE
#define HBOOST_ATOMIC_CHAR32_T_LOCK_FREE HBOOST_ATOMIC_INT32_LOCK_FREE
#endif

#ifndef HBOOST_ATOMIC_WCHAR_T_LOCK_FREE
#if HBOOST_ATOMIC_DETAIL_SIZEOF_WCHAR_T == 1
#define HBOOST_ATOMIC_WCHAR_T_LOCK_FREE HBOOST_ATOMIC_INT8_LOCK_FREE
#elif HBOOST_ATOMIC_DETAIL_SIZEOF_WCHAR_T == 2
#define HBOOST_ATOMIC_WCHAR_T_LOCK_FREE HBOOST_ATOMIC_INT16_LOCK_FREE
#elif HBOOST_ATOMIC_DETAIL_SIZEOF_WCHAR_T == 4
#define HBOOST_ATOMIC_WCHAR_T_LOCK_FREE HBOOST_ATOMIC_INT32_LOCK_FREE
#elif HBOOST_ATOMIC_DETAIL_SIZEOF_WCHAR_T == 8
#define HBOOST_ATOMIC_WCHAR_T_LOCK_FREE HBOOST_ATOMIC_INT64_LOCK_FREE
#else
#define HBOOST_ATOMIC_WCHAR_T_LOCK_FREE 0
#endif
#endif

#ifndef HBOOST_ATOMIC_SHORT_LOCK_FREE
#if HBOOST_ATOMIC_DETAIL_SIZEOF_SHORT == 1
#define HBOOST_ATOMIC_SHORT_LOCK_FREE HBOOST_ATOMIC_INT8_LOCK_FREE
#elif HBOOST_ATOMIC_DETAIL_SIZEOF_SHORT == 2
#define HBOOST_ATOMIC_SHORT_LOCK_FREE HBOOST_ATOMIC_INT16_LOCK_FREE
#elif HBOOST_ATOMIC_DETAIL_SIZEOF_SHORT == 4
#define HBOOST_ATOMIC_SHORT_LOCK_FREE HBOOST_ATOMIC_INT32_LOCK_FREE
#elif HBOOST_ATOMIC_DETAIL_SIZEOF_SHORT == 8
#define HBOOST_ATOMIC_SHORT_LOCK_FREE HBOOST_ATOMIC_INT64_LOCK_FREE
#else
#define HBOOST_ATOMIC_SHORT_LOCK_FREE 0
#endif
#endif

#ifndef HBOOST_ATOMIC_INT_LOCK_FREE
#if HBOOST_ATOMIC_DETAIL_SIZEOF_INT == 1
#define HBOOST_ATOMIC_INT_LOCK_FREE HBOOST_ATOMIC_INT8_LOCK_FREE
#elif HBOOST_ATOMIC_DETAIL_SIZEOF_INT == 2
#define HBOOST_ATOMIC_INT_LOCK_FREE HBOOST_ATOMIC_INT16_LOCK_FREE
#elif HBOOST_ATOMIC_DETAIL_SIZEOF_INT == 4
#define HBOOST_ATOMIC_INT_LOCK_FREE HBOOST_ATOMIC_INT32_LOCK_FREE
#elif HBOOST_ATOMIC_DETAIL_SIZEOF_INT == 8
#define HBOOST_ATOMIC_INT_LOCK_FREE HBOOST_ATOMIC_INT64_LOCK_FREE
#else
#define HBOOST_ATOMIC_INT_LOCK_FREE 0
#endif
#endif

#ifndef HBOOST_ATOMIC_LONG_LOCK_FREE
#if HBOOST_ATOMIC_DETAIL_SIZEOF_LONG == 1
#define HBOOST_ATOMIC_LONG_LOCK_FREE HBOOST_ATOMIC_INT8_LOCK_FREE
#elif HBOOST_ATOMIC_DETAIL_SIZEOF_LONG == 2
#define HBOOST_ATOMIC_LONG_LOCK_FREE HBOOST_ATOMIC_INT16_LOCK_FREE
#elif HBOOST_ATOMIC_DETAIL_SIZEOF_LONG == 4
#define HBOOST_ATOMIC_LONG_LOCK_FREE HBOOST_ATOMIC_INT32_LOCK_FREE
#elif HBOOST_ATOMIC_DETAIL_SIZEOF_LONG == 8
#define HBOOST_ATOMIC_LONG_LOCK_FREE HBOOST_ATOMIC_INT64_LOCK_FREE
#else
#define HBOOST_ATOMIC_LONG_LOCK_FREE 0
#endif
#endif

#ifndef HBOOST_ATOMIC_LLONG_LOCK_FREE
#if HBOOST_ATOMIC_DETAIL_SIZEOF_LLONG == 1
#define HBOOST_ATOMIC_LLONG_LOCK_FREE HBOOST_ATOMIC_INT8_LOCK_FREE
#elif HBOOST_ATOMIC_DETAIL_SIZEOF_LLONG == 2
#define HBOOST_ATOMIC_LLONG_LOCK_FREE HBOOST_ATOMIC_INT16_LOCK_FREE
#elif HBOOST_ATOMIC_DETAIL_SIZEOF_LLONG == 4
#define HBOOST_ATOMIC_LLONG_LOCK_FREE HBOOST_ATOMIC_INT32_LOCK_FREE
#elif HBOOST_ATOMIC_DETAIL_SIZEOF_LLONG == 8
#define HBOOST_ATOMIC_LLONG_LOCK_FREE HBOOST_ATOMIC_INT64_LOCK_FREE
#else
#define HBOOST_ATOMIC_LLONG_LOCK_FREE 0
#endif
#endif

#ifndef HBOOST_ATOMIC_POINTER_LOCK_FREE
#if (HBOOST_ATOMIC_DETAIL_SIZEOF_POINTER + 0) == 8
#define HBOOST_ATOMIC_POINTER_LOCK_FREE HBOOST_ATOMIC_INT64_LOCK_FREE
#elif (HBOOST_ATOMIC_DETAIL_SIZEOF_POINTER + 0) == 4
#define HBOOST_ATOMIC_POINTER_LOCK_FREE HBOOST_ATOMIC_INT32_LOCK_FREE
#else
#define HBOOST_ATOMIC_POINTER_LOCK_FREE 0
#endif
#endif

#define HBOOST_ATOMIC_ADDRESS_LOCK_FREE HBOOST_ATOMIC_POINTER_LOCK_FREE

#ifndef HBOOST_ATOMIC_BOOL_LOCK_FREE
// We store bools in 1-byte storage in all backends
#define HBOOST_ATOMIC_BOOL_LOCK_FREE HBOOST_ATOMIC_INT8_LOCK_FREE
#endif

#ifndef HBOOST_ATOMIC_FLAG_LOCK_FREE
#define HBOOST_ATOMIC_FLAG_LOCK_FREE HBOOST_ATOMIC_BOOL_LOCK_FREE
#endif

#ifndef HBOOST_ATOMIC_THREAD_FENCE
#define HBOOST_ATOMIC_THREAD_FENCE 0
#endif

#ifndef HBOOST_ATOMIC_SIGNAL_FENCE
#define HBOOST_ATOMIC_SIGNAL_FENCE 0
#endif

#endif // HBOOST_ATOMIC_CAPABILITIES_HPP_INCLUDED_
