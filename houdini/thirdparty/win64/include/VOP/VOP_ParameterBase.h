/*
 * PROPRIETARY INFORMATION.  This software is proprietary to
 * Side Effects Software Inc., and is not to be reproduced,
 * transmitted, or disclosed in any way without written permission.
 *
 * NAME:	VOP Library (C++)
 *
 */

#ifndef __VOP_ParameterBase__
#define __VOP_ParameterBase__

#include "VOP_API.h"
#include "VOP_ParmGenerator.h"

class VOP_ParameterBase : public VOP_ParmGenerator
{
public:
    
    
protected:
    VOP_ParameterBase(OP_Network *parent, const char *name,
		 OP_Operator *entry);
    virtual ~VOP_ParameterBase();
    
    /// Inherited from VOP_Node.
    /// Generate the node errors.
    /// Return true if an error was generated and false otherwise.
    virtual bool	 generateErrorsSubclass();
    
    // Handles the case of having our parameter name changed. This
    // implementation changes disable when strings in other parameter
    // nodes.
    virtual void		 handleParmNameChange(
	const UT_StringRef &oldparmname,
	const UT_StringRef &newparmname);
    
    void		 CONDITIONALSTR(PRM_ConditionalType type,
					UT_String &str);
    
    // Return true if our parm name conflicts with a global variable or
    // reserved word or reserved operator parameter.
    bool		 hasNameConflicts();

    void		 addSharedPragmas(std::ostream &os);
    void		 addSharedParamBlockItems(std::ostream &buf);

    static void		 changeConditionalFields(
			    OP_Node *node,
			    const UT_StringRef &oldparmname,
			    const UT_StringRef &newparmname);
    
private:
    // Return value same as hasNameConflicts() 
    bool		 findAndAddNameConflictErrors();

    // Store any errors generated by our conditional strings.
    UT_DeepString	 myConditionalErrs[NB_PRM_CONDTYPES];
    
};

#endif // __VOP_ParameterBase__
