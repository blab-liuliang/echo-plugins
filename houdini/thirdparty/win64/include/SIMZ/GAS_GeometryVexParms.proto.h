/* Automagically Generated by generate_proto.py
 * Do not Edit
 */
#pragma once


#include <OP/OP_Utils.h>
#include <PRM/PRM_Parm.h>
#include <UT/UT_IStream.h>
#include <UT/UT_NTStreamUtil.h>
#include <UT/UT_Ramp.h>
#include <UT/UT_SharedPtr.h>
#include <UT/UT_StringHolder.h>
#include <UT/UT_StringStream.h>
#include <UT/UT_VectorTypes.h>
#include <SYS/SYS_Types.h>

using namespace UT::Literal;

class DEP_MicroNode;

class SIMZ_API GAS_GeometryVexParms 
{
public:
    static int version() { return 1; }
    struct Bindings
    {
        UT_StringHolder binddata;
        UT_StringHolder bindparm;


        Bindings()
        {
            binddata = ""_sh;
            bindparm = ""_sh;

        }

        bool operator==(const Bindings &src) const
        {
            if (binddata != src.binddata) return false;
            if (bindparm != src.bindparm) return false;

            return true;
        }
        bool operator!=(const Bindings &src) const
        {
            return !operator==(src);
        }

    };

    UT_StringHolder createString(const UT_Array<Bindings> &list) const
    {
        UT_WorkBuffer   buf;

        buf.strcat("[ ");
        for (int i = 0; i < list.entries(); i++)
        {
            if (i)
                buf.strcat(", ");
            buf.strcat("( ");
            buf.append("");
            { UT_String tmp; tmp = UT_StringWrap(list(i).binddata).makeQuotedString('"'); buf.strcat(tmp); }
            buf.append(", ");
            { UT_String tmp; tmp = UT_StringWrap(list(i).bindparm).makeQuotedString('"'); buf.strcat(tmp); }

            buf.strcat(" )");
        }
        buf.strcat(" ]");

        UT_StringHolder result = buf;
        return result;
    }
    struct FieldBindings
    {
        UT_StringHolder binddata;
        UT_StringHolder bindparm;


        FieldBindings()
        {
            binddata = ""_sh;
            bindparm = ""_sh;

        }

        bool operator==(const FieldBindings &src) const
        {
            if (binddata != src.binddata) return false;
            if (bindparm != src.bindparm) return false;

            return true;
        }
        bool operator!=(const FieldBindings &src) const
        {
            return !operator==(src);
        }

    };

    UT_StringHolder createString(const UT_Array<FieldBindings> &list) const
    {
        UT_WorkBuffer   buf;

        buf.strcat("[ ");
        for (int i = 0; i < list.entries(); i++)
        {
            if (i)
                buf.strcat(", ");
            buf.strcat("( ");
            buf.append("");
            { UT_String tmp; tmp = UT_StringWrap(list(i).binddata).makeQuotedString('"'); buf.strcat(tmp); }
            buf.append(", ");
            { UT_String tmp; tmp = UT_StringWrap(list(i).bindparm).makeQuotedString('"'); buf.strcat(tmp); }

            buf.strcat(" )");
        }
        buf.strcat(" ]");

        UT_StringHolder result = buf;
        return result;
    }
    struct GroupBindings
    {
        UT_StringHolder binddata;
        UT_StringHolder bindparm;


        GroupBindings()
        {
            binddata = ""_sh;
            bindparm = ""_sh;

        }

        bool operator==(const GroupBindings &src) const
        {
            if (binddata != src.binddata) return false;
            if (bindparm != src.bindparm) return false;

            return true;
        }
        bool operator!=(const GroupBindings &src) const
        {
            return !operator==(src);
        }

    };

    UT_StringHolder createString(const UT_Array<GroupBindings> &list) const
    {
        UT_WorkBuffer   buf;

        buf.strcat("[ ");
        for (int i = 0; i < list.entries(); i++)
        {
            if (i)
                buf.strcat(", ");
            buf.strcat("( ");
            buf.append("");
            { UT_String tmp; tmp = UT_StringWrap(list(i).binddata).makeQuotedString('"'); buf.strcat(tmp); }
            buf.append(", ");
            { UT_String tmp; tmp = UT_StringWrap(list(i).bindparm).makeQuotedString('"'); buf.strcat(tmp); }

            buf.strcat(" )");
        }
        buf.strcat(" ]");

        UT_StringHolder result = buf;
        return result;
    }
    struct InputBindings
    {
        int64 inputnum;
        UT_StringHolder inputtype;


        InputBindings()
        {
            inputnum = 0;
            inputtype = ""_sh;

        }

        bool operator==(const InputBindings &src) const
        {
            if (inputnum != src.inputnum) return false;
            if (inputtype != src.inputtype) return false;

            return true;
        }
        bool operator!=(const InputBindings &src) const
        {
            return !operator==(src);
        }

    };

    UT_StringHolder createString(const UT_Array<InputBindings> &list) const
    {
        UT_WorkBuffer   buf;

        buf.strcat("[ ");
        for (int i = 0; i < list.entries(); i++)
        {
            if (i)
                buf.strcat(", ");
            buf.strcat("( ");
            buf.append("");
            buf.appendSprintf("%d", (int) list(i).inputnum);
            buf.append(", ");
            { UT_String tmp; tmp = UT_StringWrap(list(i).inputtype).makeQuotedString('"'); buf.strcat(tmp); }

            buf.strcat(" )");
        }
        buf.strcat(" ]");

        UT_StringHolder result = buf;
        return result;
    }

    GAS_GeometryVexParms()
    {
        myVexScript = ""_sh;
        myVexCWD = ""_sh;
        myVexOutputMask = ""_sh;
        myAutobind = false;
        myGroupAutobind = false;
        myGeometryName = ""_sh;
        myAttribClass = 0;
        myGroup = ""_sh;
        myGroupType = 0;
        myUseTimeStep = false;
        myTimeScale = 0;
        myActivate = false;
        myMultiThread = false;
        myUpdateNormals = false;
        myNumCount = 0;
        myThreadJobSize = 0;

    }

    explicit GAS_GeometryVexParms(const GAS_GeometryVexParms &) = default;

    ~GAS_GeometryVexParms() {}

    bool operator==(const GAS_GeometryVexParms &src) const
    {
        if (myVexScript != src.myVexScript) return false;
        if (myVexCWD != src.myVexCWD) return false;
        if (myVexOutputMask != src.myVexOutputMask) return false;
        if (myBindings != src.myBindings) return false;
        if (myFieldBindings != src.myFieldBindings) return false;
        if (myGroupBindings != src.myGroupBindings) return false;
        if (myInputBindings != src.myInputBindings) return false;
        if (myAutobind != src.myAutobind) return false;
        if (myGroupAutobind != src.myGroupAutobind) return false;
        if (myGeometryName != src.myGeometryName) return false;
        if (myAttribClass != src.myAttribClass) return false;
        if (myGroup != src.myGroup) return false;
        if (myGroupType != src.myGroupType) return false;
        if (myUseTimeStep != src.myUseTimeStep) return false;
        if (myTimeScale != src.myTimeScale) return false;
        if (myActivate != src.myActivate) return false;
        if (myMultiThread != src.myMultiThread) return false;
        if (myUpdateNormals != src.myUpdateNormals) return false;
        if (myNumCount != src.myNumCount) return false;
        if (myThreadJobSize != src.myThreadJobSize) return false;

        return true;
    }
    bool operator!=(const GAS_GeometryVexParms &src) const
    {
        return !operator==(src);
    }


    class Query : public SIM_Query
    {
    public:
        explicit Query(const SIM_Data *owner, const GAS_GeometryVexParms &parms) 
                    : SIM_Query(owner)
                    , myParms(parms)
        { }
        virtual ~Query() {}

    protected:
        bool            isMyRecord(const char *recordtype) const
        { return !strcmp(recordtype, "Params"); }

        virtual int     getNumRecordTypesSubclass() const { return 1; }
        virtual const char *getRecordTypeNameSubclass(int recordtypenum) const
        { 
            if (recordtypenum == 0) return "Params"; 
            return 0; 
        }
        virtual int     getNumRecordsSubclass(const char *recordtype) const
        { 
            if (isMyRecord(recordtype)) return 1; 
            return 0; 
        }
        virtual int     getNumFieldsSubclass(const char *recordtype) const
        {
            if (isMyRecord(recordtype))
                return 20;
            return 0;
        }

        virtual const char *getFieldNameSubclass(const char *recordtype,
                                        int fieldnum) const
        {
            if (!isMyRecord(recordtype))
                return 0;

            switch (fieldnum)
            {
            case 0:
                return "vexscript";
            case 1:
                return "vex_cwdpath";
            case 2:
                return "vex_outputmask";
                case 3:
                    return "bindings";
                case 4:
                    return "fieldbindings";
                case 5:
                    return "groupbindings";
                case 6:
                    return "inputbindings";
            case 7:
                return "autobind";
            case 8:
                return "groupautobind";
            case 9:
                return "geometry";
            case 10:
                return "attribclass";
            case 11:
                return "group";
            case 12:
                return "grouptype";
            case 13:
                return "usetimestep";
            case 14:
                return "timescale";
            case 15:
                return "activate";
            case 16:
                return "vex_multithread";
            case 17:
                return "vex_updatenmls";
            case 18:
                return "vex_numcount";
            case 19:
                return "vex_threadjobsize";

            }
            return 0;
        }
        virtual UT_OptionType getFieldTypeSubclass(const char *recordtype,
                                        int fieldnum) const
        {
            if (!isMyRecord(recordtype))
                return UT_OPTION_INVALID;

            switch (fieldnum)
            {
            case 0:
                return UT_OPTION_STRING;
            case 1:
                return UT_OPTION_STRING;
            case 2:
                return UT_OPTION_STRING;
                case 3:
                    return UT_OPTION_STRING;
                case 4:
                    return UT_OPTION_STRING;
                case 5:
                    return UT_OPTION_STRING;
                case 6:
                    return UT_OPTION_STRING;
            case 7:
                return UT_OPTION_BOOL;
            case 8:
                return UT_OPTION_BOOL;
            case 9:
                return UT_OPTION_STRING;
            case 10:
                return UT_OPTION_INT;
            case 11:
                return UT_OPTION_STRING;
            case 12:
                return UT_OPTION_INT;
            case 13:
                return UT_OPTION_BOOL;
            case 14:
                return UT_OPTION_FPREAL;
            case 15:
                return UT_OPTION_BOOL;
            case 16:
                return UT_OPTION_BOOL;
            case 17:
                return UT_OPTION_BOOL;
            case 18:
                return UT_OPTION_INT;
            case 19:
                return UT_OPTION_INT;

            }
            return UT_OPTION_INVALID;
        }

        virtual bool getFieldRawSubclass(const char *recordtype,
                                        int recordnum,
                                        const char *fieldname,
                                        UT_OptionEntry *&result) const
        {
            if (!isMyRecord(recordtype))
                return false;
            if (recordnum != 0)
                return false;
            // This is less optimal, but if we are in SIM_Query
            // land we have already given up on performance.
            if (!strcmp(fieldname, "vexscript"))
            {
                result = new UT_OptionString(myParms.myVexScript);
                return true;
            }
            if (!strcmp(fieldname, "vex_cwdpath"))
            {
                result = new UT_OptionString(myParms.myVexCWD);
                return true;
            }
            if (!strcmp(fieldname, "vex_outputmask"))
            {
                result = new UT_OptionString(myParms.myVexOutputMask);
                return true;
            }
            if (!strcmp(fieldname, "bindings"))
            {
                result = new UT_OptionString(myParms.createString(myParms.myBindings));
                return true;
            }
            if (!strcmp(fieldname, "fieldbindings"))
            {
                result = new UT_OptionString(myParms.createString(myParms.myFieldBindings));
                return true;
            }
            if (!strcmp(fieldname, "groupbindings"))
            {
                result = new UT_OptionString(myParms.createString(myParms.myGroupBindings));
                return true;
            }
            if (!strcmp(fieldname, "inputbindings"))
            {
                result = new UT_OptionString(myParms.createString(myParms.myInputBindings));
                return true;
            }
            if (!strcmp(fieldname, "autobind"))
            {
                result = new UT_OptionBool(myParms.myAutobind);
                return true;
            }
            if (!strcmp(fieldname, "groupautobind"))
            {
                result = new UT_OptionBool(myParms.myGroupAutobind);
                return true;
            }
            if (!strcmp(fieldname, "geometry"))
            {
                result = new UT_OptionString(myParms.myGeometryName);
                return true;
            }
            if (!strcmp(fieldname, "attribclass"))
            {
                result = new UT_OptionInt(myParms.myAttribClass);
                return true;
            }
            if (!strcmp(fieldname, "group"))
            {
                result = new UT_OptionString(myParms.myGroup);
                return true;
            }
            if (!strcmp(fieldname, "grouptype"))
            {
                result = new UT_OptionInt(myParms.myGroupType);
                return true;
            }
            if (!strcmp(fieldname, "usetimestep"))
            {
                result = new UT_OptionBool(myParms.myUseTimeStep);
                return true;
            }
            if (!strcmp(fieldname, "timescale"))
            {
                result = new UT_OptionFpreal(myParms.myTimeScale);
                return true;
            }
            if (!strcmp(fieldname, "activate"))
            {
                result = new UT_OptionBool(myParms.myActivate);
                return true;
            }
            if (!strcmp(fieldname, "vex_multithread"))
            {
                result = new UT_OptionBool(myParms.myMultiThread);
                return true;
            }
            if (!strcmp(fieldname, "vex_updatenmls"))
            {
                result = new UT_OptionBool(myParms.myUpdateNormals);
                return true;
            }
            if (!strcmp(fieldname, "vex_numcount"))
            {
                result = new UT_OptionInt(myParms.myNumCount);
                return true;
            }
            if (!strcmp(fieldname, "vex_threadjobsize"))
            {
                result = new UT_OptionInt(myParms.myThreadJobSize);
                return true;
            }

            // Failed to find
            return false;
        }

        const GAS_GeometryVexParms &myParms;
    };

    SIM_Query   *createQueryObject(const SIM_Data *owner) const
    { return new Query(owner, *this); }




    // Boiler plate to load individual types.
    static void  loadData(UT_IStream &is, int64 &v)
    { is.bread(&v, 1); }
    static void  loadData(UT_IStream &is, bool &v)
    { int64     iv; is.bread(&iv, 1); v = iv; }
    static void  loadData(UT_IStream &is, fpreal64 &v)
    { is.bread<fpreal64>(&v, 1); }
    static void  loadData(UT_IStream &is, UT_Vector2D &v)
    { is.bread<fpreal64>(&v.x(), 1); is.bread<fpreal64>(&v.y(), 1); }
    static void  loadData(UT_IStream &is, UT_Vector3D &v)
    { is.bread<fpreal64>(&v.x(), 1); is.bread<fpreal64>(&v.y(), 1);
      is.bread<fpreal64>(&v.z(), 1); }
    static void  loadData(UT_IStream &is, UT_Vector4D &v)
    { is.bread<fpreal64>(&v.x(), 1); is.bread<fpreal64>(&v.y(), 1);
      is.bread<fpreal64>(&v.z(), 1); is.bread<fpreal64>(&v.w(), 1); }
    static void  loadData(UT_IStream &is, UT_Matrix2D &v)
    { for (int r = 0; r < 2; r++) for (int c = 0; c < 2; c++) is.bread<fpreal64>(&v(r, c), 1); }
    static void  loadData(UT_IStream &is, UT_Matrix3D &v)
    { for (int r = 0; r < 3; r++) for (int c = 0; c < 3; c++) is.bread<fpreal64>(&v(r, c), 1); }
    static void  loadData(UT_IStream &is, UT_Matrix4D &v)
    { for (int r = 0; r < 4; r++) for (int c = 0; c < 4; c++) is.bread<fpreal64>(&v(r, c), 1); }
    static void  loadData(UT_IStream &is, UT_Vector2I &v)
    { is.bread<int64>(&v.x(), 1); is.bread<int64>(&v.y(), 1); }
    static void  loadData(UT_IStream &is, UT_Vector3I &v)
    { is.bread<int64>(&v.x(), 1); is.bread<int64>(&v.y(), 1);
      is.bread<int64>(&v.z(), 1); }
    static void  loadData(UT_IStream &is, UT_Vector4I &v)
    { is.bread<int64>(&v.x(), 1); is.bread<int64>(&v.y(), 1);
      is.bread<int64>(&v.z(), 1); is.bread<int64>(&v.w(), 1); }
    static void  loadData(UT_IStream &is, UT_StringHolder &v)
    { is.bread(v); }
    static void  loadData(UT_IStream &is, UT_SharedPtr<UT_Ramp> &v)
    {   UT_StringHolder   rampdata;
        loadData(is, rampdata);
        if (rampdata.isstring())
        {
            v.reset(new UT_Ramp());
            UT_IStream  istr((const char *) rampdata, rampdata.length(), UT_ISTREAM_ASCII);
            v->load(istr);
        }
        else v.reset();
    }
    static void  loadData(UT_IStream &is, PRM_DataItemHandle &v)
    {   UT_StringHolder   data;
        loadData(is, data);
        if (data.isstring())
        {
            // Find the data type.
            char *colon = UT_StringWrap(data).findChar(':');
            if (colon)
            {
                int             typelen = colon - data.buffer();
                UT_WorkBuffer   type;
                type.strncpy(data.buffer(), typelen);
                UT_IStream  istr(((const char *) data) + typelen + 1, data.length() - (typelen + 1), UT_ISTREAM_BINARY);
                
                v = PRM_DataFactory::parseBinary(type.buffer(), istr);
            }
        }
        else v.reset();
    }

    static void  saveData(std::ostream &os, int64 v)
    { UTwrite(os, &v); }
    static void  saveData(std::ostream &os, bool v)
    { int64 iv = v; UTwrite(os, &iv); }
    static void  saveData(std::ostream &os, fpreal64 v)
    { UTwrite<fpreal64>(os, &v); }
    static void  saveData(std::ostream &os, UT_Vector2D v)
    { UTwrite<fpreal64>(os, &v.x()); UTwrite<fpreal64>(os, &v.y()); }
    static void  saveData(std::ostream &os, UT_Vector3D v)
    { UTwrite<fpreal64>(os, &v.x()); UTwrite<fpreal64>(os, &v.y());
      UTwrite<fpreal64>(os, &v.z()); }
    static void  saveData(std::ostream &os, UT_Vector4D v)
    { UTwrite<fpreal64>(os, &v.x()); UTwrite<fpreal64>(os, &v.y());
      UTwrite<fpreal64>(os, &v.z()); UTwrite<fpreal64>(os, &v.w()); }
    static void  saveData(std::ostream &os, UT_Matrix2D v)
    { for (int r = 0; r < 2; r++) for (int c = 0; c < 2; c++) UTwrite<fpreal64>(os, &v(r, c)); }
    static void  saveData(std::ostream &os, UT_Matrix3D v)
    { for (int r = 0; r < 3; r++) for (int c = 0; c < 3; c++) UTwrite<fpreal64>(os, &v(r, c)); }
    static void  saveData(std::ostream &os, UT_Matrix4D v)
    { for (int r = 0; r < 4; r++) for (int c = 0; c < 4; c++) UTwrite<fpreal64>(os, &v(r, c)); }
    static void  saveData(std::ostream &os, UT_StringHolder s)
    { UT_StringWrap(s).saveBinary(os); }
    static void  saveData(std::ostream &os, UT_SharedPtr<UT_Ramp> s)
    {   UT_StringHolder         result;
        UT_OStringStream        ostr;
        if (s) s->save(ostr);
        result = ostr.str();
        saveData(os, result);
    }
    static void  saveData(std::ostream &os, PRM_DataItemHandle s)
    {   UT_StringHolder         result;
        UT_OStringStream        ostr;
        if (s) 
        {
            ostr << s->getDataTypeToken();
            ostr << ":";
            s->saveBinary(ostr);
        }
        result = ostr.str();
        saveData(os, result);
    }


    void         save(std::ostream &os) const
    {
        int32           v = version();
        UTwrite(os, &v);
        saveData(os, myVexScript);
        saveData(os, myVexCWD);
        saveData(os, myVexOutputMask);
        {
            int64   length = myBindings.entries();
            UTwrite(os, &length);
            for (exint i = 0; i < length; i++)
            {
                saveData(os, myBindings(i).binddata);
                saveData(os, myBindings(i).bindparm);

            }
        }
        {
            int64   length = myFieldBindings.entries();
            UTwrite(os, &length);
            for (exint i = 0; i < length; i++)
            {
                saveData(os, myFieldBindings(i).binddata);
                saveData(os, myFieldBindings(i).bindparm);

            }
        }
        {
            int64   length = myGroupBindings.entries();
            UTwrite(os, &length);
            for (exint i = 0; i < length; i++)
            {
                saveData(os, myGroupBindings(i).binddata);
                saveData(os, myGroupBindings(i).bindparm);

            }
        }
        {
            int64   length = myInputBindings.entries();
            UTwrite(os, &length);
            for (exint i = 0; i < length; i++)
            {
                saveData(os, myInputBindings(i).inputnum);
                saveData(os, myInputBindings(i).inputtype);

            }
        }
        saveData(os, myAutobind);
        saveData(os, myGroupAutobind);
        saveData(os, myGeometryName);
        saveData(os, myAttribClass);
        saveData(os, myGroup);
        saveData(os, myGroupType);
        saveData(os, myUseTimeStep);
        saveData(os, myTimeScale);
        saveData(os, myActivate);
        saveData(os, myMultiThread);
        saveData(os, myUpdateNormals);
        saveData(os, myNumCount);
        saveData(os, myThreadJobSize);

    }

    bool         load(UT_IStream &is)
    {
        int32           v;
        is.bread(&v, 1);
        if (version() != v)
        {
            // Fail incompatible versions
            return false;
        }
        loadData(is, myVexScript);
        loadData(is, myVexCWD);
        loadData(is, myVexOutputMask);
        {
            int64   length;
            is.read(&length, 1);
            myBindings.entries(length);
            for (exint i = 0; i < length; i++)
            {
                loadData(is, myBindings(i).binddata);
                loadData(is, myBindings(i).bindparm);

            }
        }
        {
            int64   length;
            is.read(&length, 1);
            myFieldBindings.entries(length);
            for (exint i = 0; i < length; i++)
            {
                loadData(is, myFieldBindings(i).binddata);
                loadData(is, myFieldBindings(i).bindparm);

            }
        }
        {
            int64   length;
            is.read(&length, 1);
            myGroupBindings.entries(length);
            for (exint i = 0; i < length; i++)
            {
                loadData(is, myGroupBindings(i).binddata);
                loadData(is, myGroupBindings(i).bindparm);

            }
        }
        {
            int64   length;
            is.read(&length, 1);
            myInputBindings.entries(length);
            for (exint i = 0; i < length; i++)
            {
                loadData(is, myInputBindings(i).inputnum);
                loadData(is, myInputBindings(i).inputtype);

            }
        }
        loadData(is, myAutobind);
        loadData(is, myGroupAutobind);
        loadData(is, myGeometryName);
        loadData(is, myAttribClass);
        loadData(is, myGroup);
        loadData(is, myGroupType);
        loadData(is, myUseTimeStep);
        loadData(is, myTimeScale);
        loadData(is, myActivate);
        loadData(is, myMultiThread);
        loadData(is, myUpdateNormals);
        loadData(is, myNumCount);
        loadData(is, myThreadJobSize);

        return true;
    }

    const UT_StringHolder & getVexScript() const { return myVexScript; }
    void setVexScript(const UT_StringHolder & val) { myVexScript = val; }
    const UT_StringHolder & getVexCWD() const { return myVexCWD; }
    void setVexCWD(const UT_StringHolder & val) { myVexCWD = val; }
    const UT_StringHolder & getVexOutputMask() const { return myVexOutputMask; }
    void setVexOutputMask(const UT_StringHolder & val) { myVexOutputMask = val; }
    const UT_Array<Bindings> &getBindings() const { return myBindings; }
    void setBindings(const UT_Array<Bindings> &val) { myBindings = val; }
    const UT_Array<FieldBindings> &getFieldBindings() const { return myFieldBindings; }
    void setFieldBindings(const UT_Array<FieldBindings> &val) { myFieldBindings = val; }
    const UT_Array<GroupBindings> &getGroupBindings() const { return myGroupBindings; }
    void setGroupBindings(const UT_Array<GroupBindings> &val) { myGroupBindings = val; }
    const UT_Array<InputBindings> &getInputBindings() const { return myInputBindings; }
    void setInputBindings(const UT_Array<InputBindings> &val) { myInputBindings = val; }
    bool getAutobind() const { return myAutobind; }
    void setAutobind(bool val) { myAutobind = val; }
    bool getGroupAutobind() const { return myGroupAutobind; }
    void setGroupAutobind(bool val) { myGroupAutobind = val; }
    const UT_StringHolder & getGeometryName() const { return myGeometryName; }
    void setGeometryName(const UT_StringHolder & val) { myGeometryName = val; }
    int64 getAttribClass() const { return myAttribClass; }
    void setAttribClass(int64 val) { myAttribClass = val; }
    const UT_StringHolder & getGroup() const { return myGroup; }
    void setGroup(const UT_StringHolder & val) { myGroup = val; }
    int64 getGroupType() const { return myGroupType; }
    void setGroupType(int64 val) { myGroupType = val; }
    bool getUseTimeStep() const { return myUseTimeStep; }
    void setUseTimeStep(bool val) { myUseTimeStep = val; }
    fpreal64 getTimeScale() const { return myTimeScale; }
    void setTimeScale(fpreal64 val) { myTimeScale = val; }
    bool getActivate() const { return myActivate; }
    void setActivate(bool val) { myActivate = val; }
    bool getMultiThread() const { return myMultiThread; }
    void setMultiThread(bool val) { myMultiThread = val; }
    bool getUpdateNormals() const { return myUpdateNormals; }
    void setUpdateNormals(bool val) { myUpdateNormals = val; }
    int64 getNumCount() const { return myNumCount; }
    void setNumCount(int64 val) { myNumCount = val; }
    int64 getThreadJobSize() const { return myThreadJobSize; }
    void setThreadJobSize(int64 val) { myThreadJobSize = val; }

private:
    UT_StringHolder myVexScript;
    UT_StringHolder myVexCWD;
    UT_StringHolder myVexOutputMask;
    UT_Array<Bindings> myBindings;
    UT_Array<FieldBindings> myFieldBindings;
    UT_Array<GroupBindings> myGroupBindings;
    UT_Array<InputBindings> myInputBindings;
    bool myAutobind;
    bool myGroupAutobind;
    UT_StringHolder myGeometryName;
    int64 myAttribClass;
    UT_StringHolder myGroup;
    int64 myGroupType;
    bool myUseTimeStep;
    fpreal64 myTimeScale;
    bool myActivate;
    bool myMultiThread;
    bool myUpdateNormals;
    int64 myNumCount;
    int64 myThreadJobSize;

};
