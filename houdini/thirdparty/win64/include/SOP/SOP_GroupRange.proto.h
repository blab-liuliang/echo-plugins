/* Automagically Generated by generate_proto.py
 * Do not Edit
 */
#pragma once

#include <SOP/SOP_NodeVerb.h>
#include <OP/OP_Utils.h>
#include <PRM/PRM_Parm.h>
#include <UT/UT_IStream.h>
#include <UT/UT_NTStreamUtil.h>
#include <UT/UT_Ramp.h>
#include <UT/UT_SharedPtr.h>
#include <UT/UT_StringHolder.h>
#include <UT/UT_StringStream.h>
#include <UT/UT_VectorTypes.h>
#include <SYS/SYS_Types.h>

using namespace UT::Literal;

class DEP_MicroNode;
namespace SOP_GroupRangeEnums
{
    enum class Grouptype
    {
        POINTS = 0,
        PRIMS
    };
    enum class Mergeop
    {
        REPLACE = 0,
        UNION,
        INTERSECT,
        SUBTRACT
    };
    enum class Method
    {
        ABSOLUTE = 0,
        RELATIVE,
        LENGTH,
        PARTITION
    };
}


class SOP_API SOP_GroupRangeParms  : public SOP_NodeParms
{
public:
    static int version() { return 1; }
    struct Numrange
    {
        bool enable;
        UT_StringHolder groupname;
        int64 grouptype;
        int64 mergeop;
        int64 method;
        int64 start;
        int64 end;
        int64 length;
        int64 partition;
        int64 numpartition;
        bool invert;
        int64 selectamount;
        int64 selecttotal;
        int64 selectoffset;


        Numrange()
        {
            enable = false;
            groupname = "group#"_sh;
            grouptype = 1;
            mergeop = 0;
            method = 1;
            start = 0;
            end = 0;
            length = 1;
            partition = 0;
            numpartition = 1;
            invert = false;
            selectamount = 1;
            selecttotal = 1;
            selectoffset = 0;

        }

        bool operator==(const Numrange &src) const
        {
            if (enable != src.enable) return false;
            if (groupname != src.groupname) return false;
            if (grouptype != src.grouptype) return false;
            if (mergeop != src.mergeop) return false;
            if (method != src.method) return false;
            if (start != src.start) return false;
            if (end != src.end) return false;
            if (length != src.length) return false;
            if (partition != src.partition) return false;
            if (numpartition != src.numpartition) return false;
            if (invert != src.invert) return false;
            if (selectamount != src.selectamount) return false;
            if (selecttotal != src.selecttotal) return false;
            if (selectoffset != src.selectoffset) return false;

            return true;
        }
        bool operator!=(const Numrange &src) const
        {
            return !operator==(src);
        }

    };

    UT_StringHolder createString(const UT_Array<Numrange> &list) const
    {
        UT_WorkBuffer   buf;

        buf.strcat("[ ");
        for (int i = 0; i < list.entries(); i++)
        {
            if (i)
                buf.strcat(", ");
            buf.strcat("( ");
            buf.append("");
            buf.appendSprintf("%s", (list(i).enable) ? "true" : "false");
            buf.append(", ");
            { UT_String tmp; tmp = UT_StringWrap(list(i).groupname).makeQuotedString('"'); buf.strcat(tmp); }
            buf.append(", ");
            buf.appendSprintf("%d", (int) list(i).grouptype);
            buf.append(", ");
            buf.appendSprintf("%d", (int) list(i).mergeop);
            buf.append(", ");
            buf.appendSprintf("%d", (int) list(i).method);
            buf.append(", ");
            buf.appendSprintf("%d", (int) list(i).start);
            buf.append(", ");
            buf.appendSprintf("%d", (int) list(i).end);
            buf.append(", ");
            buf.appendSprintf("%d", (int) list(i).length);
            buf.append(", ");
            buf.appendSprintf("%d", (int) list(i).partition);
            buf.append(", ");
            buf.appendSprintf("%d", (int) list(i).numpartition);
            buf.append(", ");
            buf.appendSprintf("%s", (list(i).invert) ? "true" : "false");
            buf.append(", ");
            buf.appendSprintf("%d", (int) list(i).selectamount);
            buf.append(", ");
            buf.appendSprintf("%d", (int) list(i).selecttotal);
            buf.append(", ");
            buf.appendSprintf("%d", (int) list(i).selectoffset);

            buf.strcat(" )");
        }
        buf.strcat(" ]");

        UT_StringHolder result = buf;
        return result;
    }

    SOP_GroupRangeParms()
    {

    }

    explicit SOP_GroupRangeParms(const SOP_GroupRangeParms &) = default;

    virtual ~SOP_GroupRangeParms() {}

    bool operator==(const SOP_GroupRangeParms &src) const
    {
        if (myNumrange != src.myNumrange) return false;

        return true;
    }
    bool operator!=(const SOP_GroupRangeParms &src) const
    {
        return !operator==(src);
    }
    using Grouptype = SOP_GroupRangeEnums::Grouptype;
    using Mergeop = SOP_GroupRangeEnums::Mergeop;
    using Method = SOP_GroupRangeEnums::Method;



    void        buildFromOp(const OP_Node *node, fpreal time, DEP_MicroNode *depnode)
    {
            if (true)
            {
                int64   length;
                OP_Utils::evalOpParm(length, node, "numrange", time, 0);
                myNumrange.entries(length);
                for (exint i = 0; i < length; i++)
                {
                    int     parmidx = i+1;
                    auto && _curentry = myNumrange(i);
                    (void) _curentry;
                    if (true)
                        OP_Utils::evalOpParmInst(myNumrange(i).enable, node, "enable#", &parmidx, time, 0);
                    else myNumrange(i).enable = false;
                    if (true && ( (!(((_curentry.enable==0)))) ) )
                        OP_Utils::evalOpParmInst(myNumrange(i).groupname, node, "groupname#", &parmidx, time, 0);
                    else myNumrange(i).groupname = "group#"_sh;
                    if (true)
                        OP_Utils::evalOpParmInst(myNumrange(i).grouptype, node, "grouptype#", &parmidx, time, 0);
                    else myNumrange(i).grouptype = 1;
                    if (true)
                        OP_Utils::evalOpParmInst(myNumrange(i).mergeop, node, "mergeop#", &parmidx, time, 0);
                    else myNumrange(i).mergeop = 0;
                    if (true)
                        OP_Utils::evalOpParmInst(myNumrange(i).method, node, "method#", &parmidx, time, 0);
                    else myNumrange(i).method = 1;
                    if (true && ( (!(((_curentry.method==3)))) ) )
                        OP_Utils::evalOpParmInst(myNumrange(i).start, node, "start#", &parmidx, time, 0);
                    else myNumrange(i).start = 0;
                    if (true && ( (!(((_curentry.method!=0)&&(_curentry.method!=1)))) ) )
                        OP_Utils::evalOpParmInst(myNumrange(i).end, node, "end#", &parmidx, time, 0);
                    else myNumrange(i).end = 0;
                    if (true && ( (!(((_curentry.method!=2)))) ) )
                        OP_Utils::evalOpParmInst(myNumrange(i).length, node, "length#", &parmidx, time, 0);
                    else myNumrange(i).length = 1;
                    if (true && ( (!(((_curentry.method!=3)))) ) )
                        OP_Utils::evalOpParmInst(myNumrange(i).partition, node, "partition#", &parmidx, time, 0);
                    else myNumrange(i).partition = 0;
                    if (true && ( (!(((_curentry.method!=3)))) ) )
                        OP_Utils::evalOpParmInst(myNumrange(i).numpartition, node, "numpartition#", &parmidx, time, 0);
                    else myNumrange(i).numpartition = 1;
                    if (true)
                        OP_Utils::evalOpParmInst(myNumrange(i).invert, node, "invert#", &parmidx, time, 0);
                    else myNumrange(i).invert = false;
                    if (true)
                        OP_Utils::evalOpParmInst(myNumrange(i).selectamount, node, "selectamount#", &parmidx, time, 0);
                    else myNumrange(i).selectamount = 1;
                    if (true)
                        OP_Utils::evalOpParmInst(myNumrange(i).selecttotal, node, "selecttotal#", &parmidx, time, 0);
                    else myNumrange(i).selecttotal = 1;
                    if (true)
                        OP_Utils::evalOpParmInst(myNumrange(i).selectoffset, node, "selectoffset#", &parmidx, time, 0);
                    else myNumrange(i).selectoffset = 0;

                }
            }
            else
                myNumrange.clear();

    }


    virtual void loadFromOpSubclass(const LoadParms &loadparms)
    {
        buildFromOp(loadparms.node(), loadparms.context().getTime(), loadparms.depnode());
    }


    virtual void copyFrom(const SOP_NodeParms *src)
    {
        *this = *((const SOP_GroupRangeParms *)src);
    }

    template <typename T>
    void
    doGetParmValue(exint idx, T &value) const
    {
        switch (idx)
        {

        }
    }

    void        getParmValue(exint idx, exint &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, fpreal &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Vector2D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Vector3D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Vector4D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Matrix2D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Matrix3D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Matrix4D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_StringHolder &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_SharedPtr<UT_Ramp> &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, PRM_DataItemHandle &value) const
    { doGetParmValue(idx, value); }

    template <typename T>
    void
    doSetParmValue(exint idx, const T &value) 
    {
        switch (idx)
        {

        }
    }

    void        setParmValue(exint idx, const exint &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const fpreal &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Vector2D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Vector3D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Vector4D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Matrix2D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Matrix3D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Matrix4D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_StringHolder &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_SharedPtr<UT_Ramp> &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const PRM_DataItemHandle &value) 
    { doSetParmValue(idx, value); }

    virtual exint    getNumParms() const
    {
        return 1;
    }

    virtual const char *getParmName(exint fieldnum) const
    {
        switch (fieldnum)
        {
                case 0:
                    return "numrange";

        }
        return 0;
    }

    virtual ParmType getParmType(exint fieldnum) const
    {
        switch (fieldnum)
        {

        }
        return PARM_UNSUPPORTED;
    }

    // Boiler plate to load individual types.
    static void  loadData(UT_IStream &is, int64 &v)
    { is.bread(&v, 1); }
    static void  loadData(UT_IStream &is, bool &v)
    { int64     iv; is.bread(&iv, 1); v = iv; }
    static void  loadData(UT_IStream &is, fpreal64 &v)
    { is.bread<fpreal64>(&v, 1); }
    static void  loadData(UT_IStream &is, UT_Vector2D &v)
    { is.bread<fpreal64>(&v.x(), 1); is.bread<fpreal64>(&v.y(), 1); }
    static void  loadData(UT_IStream &is, UT_Vector3D &v)
    { is.bread<fpreal64>(&v.x(), 1); is.bread<fpreal64>(&v.y(), 1);
      is.bread<fpreal64>(&v.z(), 1); }
    static void  loadData(UT_IStream &is, UT_Vector4D &v)
    { is.bread<fpreal64>(&v.x(), 1); is.bread<fpreal64>(&v.y(), 1);
      is.bread<fpreal64>(&v.z(), 1); is.bread<fpreal64>(&v.w(), 1); }
    static void  loadData(UT_IStream &is, UT_Matrix2D &v)
    { for (int r = 0; r < 2; r++) for (int c = 0; c < 2; c++) is.bread<fpreal64>(&v(r, c), 1); }
    static void  loadData(UT_IStream &is, UT_Matrix3D &v)
    { for (int r = 0; r < 3; r++) for (int c = 0; c < 3; c++) is.bread<fpreal64>(&v(r, c), 1); }
    static void  loadData(UT_IStream &is, UT_Matrix4D &v)
    { for (int r = 0; r < 4; r++) for (int c = 0; c < 4; c++) is.bread<fpreal64>(&v(r, c), 1); }
    static void  loadData(UT_IStream &is, UT_Vector2I &v)
    { is.bread<int64>(&v.x(), 1); is.bread<int64>(&v.y(), 1); }
    static void  loadData(UT_IStream &is, UT_Vector3I &v)
    { is.bread<int64>(&v.x(), 1); is.bread<int64>(&v.y(), 1);
      is.bread<int64>(&v.z(), 1); }
    static void  loadData(UT_IStream &is, UT_Vector4I &v)
    { is.bread<int64>(&v.x(), 1); is.bread<int64>(&v.y(), 1);
      is.bread<int64>(&v.z(), 1); is.bread<int64>(&v.w(), 1); }
    static void  loadData(UT_IStream &is, UT_StringHolder &v)
    { is.bread(v); }
    static void  loadData(UT_IStream &is, UT_SharedPtr<UT_Ramp> &v)
    {   UT_StringHolder   rampdata;
        loadData(is, rampdata);
        if (rampdata.isstring())
        {
            v.reset(new UT_Ramp());
            UT_IStream  istr((const char *) rampdata, rampdata.length(), UT_ISTREAM_ASCII);
            v->load(istr);
        }
        else v.reset();
    }
    static void  loadData(UT_IStream &is, PRM_DataItemHandle &v)
    {   UT_StringHolder   data;
        loadData(is, data);
        if (data.isstring())
        {
            // Find the data type.
            char *colon = UT_StringWrap(data).findChar(':');
            if (colon)
            {
                int             typelen = colon - data.buffer();
                UT_WorkBuffer   type;
                type.strncpy(data.buffer(), typelen);
                UT_IStream  istr(((const char *) data) + typelen + 1, data.length() - (typelen + 1), UT_ISTREAM_BINARY);
                
                v = PRM_DataFactory::parseBinary(type.buffer(), istr);
            }
        }
        else v.reset();
    }

    static void  saveData(std::ostream &os, int64 v)
    { UTwrite(os, &v); }
    static void  saveData(std::ostream &os, bool v)
    { int64 iv = v; UTwrite(os, &iv); }
    static void  saveData(std::ostream &os, fpreal64 v)
    { UTwrite<fpreal64>(os, &v); }
    static void  saveData(std::ostream &os, UT_Vector2D v)
    { UTwrite<fpreal64>(os, &v.x()); UTwrite<fpreal64>(os, &v.y()); }
    static void  saveData(std::ostream &os, UT_Vector3D v)
    { UTwrite<fpreal64>(os, &v.x()); UTwrite<fpreal64>(os, &v.y());
      UTwrite<fpreal64>(os, &v.z()); }
    static void  saveData(std::ostream &os, UT_Vector4D v)
    { UTwrite<fpreal64>(os, &v.x()); UTwrite<fpreal64>(os, &v.y());
      UTwrite<fpreal64>(os, &v.z()); UTwrite<fpreal64>(os, &v.w()); }
    static void  saveData(std::ostream &os, UT_Matrix2D v)
    { for (int r = 0; r < 2; r++) for (int c = 0; c < 2; c++) UTwrite<fpreal64>(os, &v(r, c)); }
    static void  saveData(std::ostream &os, UT_Matrix3D v)
    { for (int r = 0; r < 3; r++) for (int c = 0; c < 3; c++) UTwrite<fpreal64>(os, &v(r, c)); }
    static void  saveData(std::ostream &os, UT_Matrix4D v)
    { for (int r = 0; r < 4; r++) for (int c = 0; c < 4; c++) UTwrite<fpreal64>(os, &v(r, c)); }
    static void  saveData(std::ostream &os, UT_StringHolder s)
    { UT_StringWrap(s).saveBinary(os); }
    static void  saveData(std::ostream &os, UT_SharedPtr<UT_Ramp> s)
    {   UT_StringHolder         result;
        UT_OStringStream        ostr;
        if (s) s->save(ostr);
        result = ostr.str();
        saveData(os, result);
    }
    static void  saveData(std::ostream &os, PRM_DataItemHandle s)
    {   UT_StringHolder         result;
        UT_OStringStream        ostr;
        if (s) 
        {
            ostr << s->getDataTypeToken();
            ostr << ":";
            s->saveBinary(ostr);
        }
        result = ostr.str();
        saveData(os, result);
    }


    void         save(std::ostream &os) const
    {
        int32           v = version();
        UTwrite(os, &v);
        {
            int64   length = myNumrange.entries();
            UTwrite(os, &length);
            for (exint i = 0; i < length; i++)
            {
                saveData(os, myNumrange(i).enable);
                saveData(os, myNumrange(i).groupname);
                saveData(os, myNumrange(i).grouptype);
                saveData(os, myNumrange(i).mergeop);
                saveData(os, myNumrange(i).method);
                saveData(os, myNumrange(i).start);
                saveData(os, myNumrange(i).end);
                saveData(os, myNumrange(i).length);
                saveData(os, myNumrange(i).partition);
                saveData(os, myNumrange(i).numpartition);
                saveData(os, myNumrange(i).invert);
                saveData(os, myNumrange(i).selectamount);
                saveData(os, myNumrange(i).selecttotal);
                saveData(os, myNumrange(i).selectoffset);

            }
        }

    }

    bool         load(UT_IStream &is)
    {
        int32           v;
        is.bread(&v, 1);
        if (version() != v)
        {
            // Fail incompatible versions
            return false;
        }
        {
            int64   length;
            is.read(&length, 1);
            myNumrange.entries(length);
            for (exint i = 0; i < length; i++)
            {
                loadData(is, myNumrange(i).enable);
                loadData(is, myNumrange(i).groupname);
                loadData(is, myNumrange(i).grouptype);
                loadData(is, myNumrange(i).mergeop);
                loadData(is, myNumrange(i).method);
                loadData(is, myNumrange(i).start);
                loadData(is, myNumrange(i).end);
                loadData(is, myNumrange(i).length);
                loadData(is, myNumrange(i).partition);
                loadData(is, myNumrange(i).numpartition);
                loadData(is, myNumrange(i).invert);
                loadData(is, myNumrange(i).selectamount);
                loadData(is, myNumrange(i).selecttotal);
                loadData(is, myNumrange(i).selectoffset);

            }
        }

        return true;
    }

    const UT_Array<Numrange> &getNumrange() const { return myNumrange; }
    void setNumrange(const UT_Array<Numrange> &val) { myNumrange = val; }
    exint opNumrange(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getNumrange().entries();
        exint result;
        OP_Utils::evalOpParm(result, thissop, "numrange", cookparms.getCookTime(), 0);
        return result;
    }
            bool opNumrange_enable(const SOP_NodeVerb::CookParms &cookparms, exint _idx) const
        {
            SOP_Node *thissop = cookparms.getNode();
            if (!thissop) return (myNumrange(_idx).enable);
            int _parmidx = _idx + 1;
            bool result;
            OP_Utils::evalOpParmInst(result, thissop, "enable#", &_parmidx, cookparms.getCookTime(), 0);
            return (result);
        }
        UT_StringHolder opNumrange_groupname(const SOP_NodeVerb::CookParms &cookparms, exint _idx) const
        {
            SOP_Node *thissop = cookparms.getNode();
            if (!thissop) return (myNumrange(_idx).groupname);
            int _parmidx = _idx + 1;
            UT_StringHolder result;
            OP_Utils::evalOpParmInst(result, thissop, "groupname#", &_parmidx, cookparms.getCookTime(), 0);
            return (result);
        }
        int64 opNumrange_grouptype(const SOP_NodeVerb::CookParms &cookparms, exint _idx) const
        {
            SOP_Node *thissop = cookparms.getNode();
            if (!thissop) return (myNumrange(_idx).grouptype);
            int _parmidx = _idx + 1;
            int64 result;
            OP_Utils::evalOpParmInst(result, thissop, "grouptype#", &_parmidx, cookparms.getCookTime(), 0);
            return (result);
        }
        int64 opNumrange_mergeop(const SOP_NodeVerb::CookParms &cookparms, exint _idx) const
        {
            SOP_Node *thissop = cookparms.getNode();
            if (!thissop) return (myNumrange(_idx).mergeop);
            int _parmidx = _idx + 1;
            int64 result;
            OP_Utils::evalOpParmInst(result, thissop, "mergeop#", &_parmidx, cookparms.getCookTime(), 0);
            return (result);
        }
        int64 opNumrange_method(const SOP_NodeVerb::CookParms &cookparms, exint _idx) const
        {
            SOP_Node *thissop = cookparms.getNode();
            if (!thissop) return (myNumrange(_idx).method);
            int _parmidx = _idx + 1;
            int64 result;
            OP_Utils::evalOpParmInst(result, thissop, "method#", &_parmidx, cookparms.getCookTime(), 0);
            return (result);
        }
        int64 opNumrange_start(const SOP_NodeVerb::CookParms &cookparms, exint _idx) const
        {
            SOP_Node *thissop = cookparms.getNode();
            if (!thissop) return (myNumrange(_idx).start);
            int _parmidx = _idx + 1;
            int64 result;
            OP_Utils::evalOpParmInst(result, thissop, "start#", &_parmidx, cookparms.getCookTime(), 0);
            return (result);
        }
        int64 opNumrange_end(const SOP_NodeVerb::CookParms &cookparms, exint _idx) const
        {
            SOP_Node *thissop = cookparms.getNode();
            if (!thissop) return (myNumrange(_idx).end);
            int _parmidx = _idx + 1;
            int64 result;
            OP_Utils::evalOpParmInst(result, thissop, "end#", &_parmidx, cookparms.getCookTime(), 0);
            return (result);
        }
        int64 opNumrange_length(const SOP_NodeVerb::CookParms &cookparms, exint _idx) const
        {
            SOP_Node *thissop = cookparms.getNode();
            if (!thissop) return (myNumrange(_idx).length);
            int _parmidx = _idx + 1;
            int64 result;
            OP_Utils::evalOpParmInst(result, thissop, "length#", &_parmidx, cookparms.getCookTime(), 0);
            return (result);
        }
        int64 opNumrange_partition(const SOP_NodeVerb::CookParms &cookparms, exint _idx) const
        {
            SOP_Node *thissop = cookparms.getNode();
            if (!thissop) return (myNumrange(_idx).partition);
            int _parmidx = _idx + 1;
            int64 result;
            OP_Utils::evalOpParmInst(result, thissop, "partition#", &_parmidx, cookparms.getCookTime(), 0);
            return (result);
        }
        int64 opNumrange_numpartition(const SOP_NodeVerb::CookParms &cookparms, exint _idx) const
        {
            SOP_Node *thissop = cookparms.getNode();
            if (!thissop) return (myNumrange(_idx).numpartition);
            int _parmidx = _idx + 1;
            int64 result;
            OP_Utils::evalOpParmInst(result, thissop, "numpartition#", &_parmidx, cookparms.getCookTime(), 0);
            return (result);
        }
        bool opNumrange_invert(const SOP_NodeVerb::CookParms &cookparms, exint _idx) const
        {
            SOP_Node *thissop = cookparms.getNode();
            if (!thissop) return (myNumrange(_idx).invert);
            int _parmidx = _idx + 1;
            bool result;
            OP_Utils::evalOpParmInst(result, thissop, "invert#", &_parmidx, cookparms.getCookTime(), 0);
            return (result);
        }
        int64 opNumrange_selectamount(const SOP_NodeVerb::CookParms &cookparms, exint _idx) const
        {
            SOP_Node *thissop = cookparms.getNode();
            if (!thissop) return (myNumrange(_idx).selectamount);
            int _parmidx = _idx + 1;
            int64 result;
            OP_Utils::evalOpParmInst(result, thissop, "selectamount#", &_parmidx, cookparms.getCookTime(), 0);
            return (result);
        }
        int64 opNumrange_selecttotal(const SOP_NodeVerb::CookParms &cookparms, exint _idx) const
        {
            SOP_Node *thissop = cookparms.getNode();
            if (!thissop) return (myNumrange(_idx).selecttotal);
            int _parmidx = _idx + 1;
            int64 result;
            OP_Utils::evalOpParmInst(result, thissop, "selecttotal#", &_parmidx, cookparms.getCookTime(), 0);
            return (result);
        }
        int64 opNumrange_selectoffset(const SOP_NodeVerb::CookParms &cookparms, exint _idx) const
        {
            SOP_Node *thissop = cookparms.getNode();
            if (!thissop) return (myNumrange(_idx).selectoffset);
            int _parmidx = _idx + 1;
            int64 result;
            OP_Utils::evalOpParmInst(result, thissop, "selectoffset#", &_parmidx, cookparms.getCookTime(), 0);
            return (result);
        }


private:
    UT_Array<Numrange> myNumrange;

};
