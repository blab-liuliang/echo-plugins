/* Automagically Generated by generate_proto.py
 * Do not Edit
 */
#pragma once

#include <SOP/SOP_NodeVerb.h>
#include <OP/OP_Utils.h>
#include <PRM/PRM_Parm.h>
#include <UT/UT_IStream.h>
#include <UT/UT_NTStreamUtil.h>
#include <UT/UT_Ramp.h>
#include <UT/UT_SharedPtr.h>
#include <UT/UT_StringHolder.h>
#include <UT/UT_StringStream.h>
#include <UT/UT_VectorTypes.h>
#include <SYS/SYS_Types.h>

using namespace UT::Literal;

class DEP_MicroNode;
namespace SOP_AttribInterpolateEnums
{
    enum class Totype
    {
        POINTS = 0,
        VERTICES,
        PRIMS,
        DETAIL
    };
    enum class Interpby
    {
        PRIMUVW = 0,
        POINTWEIGHTS,
        VERTWEIGHTS,
        PRIMWEIGHTS
    };
    enum class Computenumberstype
    {
        NUMBERTYPEPOINT = 0,
        NUMBERTYPEVERTEX
    };
}


class SOP_API SOP_AttribInterpolateParms  : public SOP_NodeParms
{
public:
    static int version() { return 1; }

    SOP_AttribInterpolateParms()
    {
        myTotype = 0;
        myInterpby = 0;
        myNumberattrib = "sourceprim"_sh;
        myWeightsattrib = "sourceprimuv"_sh;
        myPointattribs = "*"_sh;
        myVertattribs = ""_sh;
        myPrimattribs = ""_sh;
        myDetailattribs = ""_sh;
        myComputeweights = false;
        myComputenumberstype = 1;
        myComputednumbersattrib = "sourcevtxnums"_sh;
        myComputedweightsattrib = "sourcevtxweights"_sh;
        myGroup = ""_sh;

    }

    explicit SOP_AttribInterpolateParms(const SOP_AttribInterpolateParms &) = default;

    virtual ~SOP_AttribInterpolateParms() {}

    bool operator==(const SOP_AttribInterpolateParms &src) const
    {
        if (myTotype != src.myTotype) return false;
        if (myInterpby != src.myInterpby) return false;
        if (myNumberattrib != src.myNumberattrib) return false;
        if (myWeightsattrib != src.myWeightsattrib) return false;
        if (myPointattribs != src.myPointattribs) return false;
        if (myVertattribs != src.myVertattribs) return false;
        if (myPrimattribs != src.myPrimattribs) return false;
        if (myDetailattribs != src.myDetailattribs) return false;
        if (myComputeweights != src.myComputeweights) return false;
        if (myComputenumberstype != src.myComputenumberstype) return false;
        if (myComputednumbersattrib != src.myComputednumbersattrib) return false;
        if (myComputedweightsattrib != src.myComputedweightsattrib) return false;
        if (myGroup != src.myGroup) return false;

        return true;
    }
    bool operator!=(const SOP_AttribInterpolateParms &src) const
    {
        return !operator==(src);
    }
    using Totype = SOP_AttribInterpolateEnums::Totype;
    using Interpby = SOP_AttribInterpolateEnums::Interpby;
    using Computenumberstype = SOP_AttribInterpolateEnums::Computenumberstype;



    void        buildFromOp(const OP_Node *node, fpreal time, DEP_MicroNode *depnode)
    {
        if (true)
            OP_Utils::evalOpParm(myTotype, node, "totype", time, 0);
        else myTotype = 0;
        if (true)
            OP_Utils::evalOpParm(myInterpby, node, "interpby", time, 0);
        else myInterpby = 0;
        if (true)
            OP_Utils::evalOpParm(myNumberattrib, node, "numberattrib", time, 0);
        else myNumberattrib = "sourceprim"_sh;
        if (true)
            OP_Utils::evalOpParm(myWeightsattrib, node, "weightsattrib", time, 0);
        else myWeightsattrib = "sourceprimuv"_sh;
        if (true && ( (!(((int64(getInterpby())==3)))) ) )
            OP_Utils::evalOpParm(myPointattribs, node, "pointattribs", time, 0);
        else myPointattribs = "*"_sh;
        if (true && ( (!(((int64(getInterpby())==3))||((int64(getInterpby())==1)))) ) )
            OP_Utils::evalOpParm(myVertattribs, node, "vertattribs", time, 0);
        else myVertattribs = ""_sh;
        if (true && ( (!(((int64(getInterpby())==1)))) ) )
            OP_Utils::evalOpParm(myPrimattribs, node, "primattribs", time, 0);
        else myPrimattribs = ""_sh;
        if (true)
            OP_Utils::evalOpParm(myDetailattribs, node, "detailattribs", time, 0);
        else myDetailattribs = ""_sh;
        if (true && ( (!(((int64(getInterpby())!=0)))) ) )
            OP_Utils::evalOpParm(myComputeweights, node, "computeweights", time, 0);
        else myComputeweights = false;
        if (true && ( (!(((int64(getInterpby())!=0))||((getComputeweights()==0)))) ) )
            OP_Utils::evalOpParm(myComputenumberstype, node, "computenumberstype", time, 0);
        else myComputenumberstype = 1;
        if (true && ( (!(((int64(getInterpby())!=0))||((getComputeweights()==0)))) ) )
            OP_Utils::evalOpParm(myComputednumbersattrib, node, "computednumbersattrib", time, 0);
        else myComputednumbersattrib = "sourcevtxnums"_sh;
        if (true && ( (!(((int64(getInterpby())!=0))||((getComputeweights()==0)))) ) )
            OP_Utils::evalOpParm(myComputedweightsattrib, node, "computedweightsattrib", time, 0);
        else myComputedweightsattrib = "sourcevtxweights"_sh;
        if (true && ( (!(((int64(getTotype())==3)))) ) )
            OP_Utils::evalOpParm(myGroup, node, "group", time, 0);
        else myGroup = ""_sh;

    }


    virtual void loadFromOpSubclass(const LoadParms &loadparms)
    {
        buildFromOp(loadparms.node(), loadparms.context().getTime(), loadparms.depnode());
    }


    virtual void copyFrom(const SOP_NodeParms *src)
    {
        *this = *((const SOP_AttribInterpolateParms *)src);
    }

    template <typename T>
    void
    doGetParmValue(exint idx, T &value) const
    {
        switch (idx)
        {
            case 0:
                coerceValue(value, myTotype);
                break;
            case 1:
                coerceValue(value, myInterpby);
                break;
            case 2:
                coerceValue(value, myNumberattrib);
                break;
            case 3:
                coerceValue(value, myWeightsattrib);
                break;
            case 4:
                coerceValue(value, myPointattribs);
                break;
            case 5:
                coerceValue(value, myVertattribs);
                break;
            case 6:
                coerceValue(value, myPrimattribs);
                break;
            case 7:
                coerceValue(value, myDetailattribs);
                break;
            case 8:
                coerceValue(value, myComputeweights);
                break;
            case 9:
                coerceValue(value, myComputenumberstype);
                break;
            case 10:
                coerceValue(value, myComputednumbersattrib);
                break;
            case 11:
                coerceValue(value, myComputedweightsattrib);
                break;
            case 12:
                coerceValue(value, myGroup);
                break;

        }
    }

    void        getParmValue(exint idx, exint &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, fpreal &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Vector2D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Vector3D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Vector4D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Matrix2D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Matrix3D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Matrix4D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_StringHolder &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_SharedPtr<UT_Ramp> &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, PRM_DataItemHandle &value) const
    { doGetParmValue(idx, value); }

    template <typename T>
    void
    doSetParmValue(exint idx, const T &value) 
    {
        switch (idx)
        {
            case 0:
                coerceValue(myTotype, value);
                break;
            case 1:
                coerceValue(myInterpby, value);
                break;
            case 2:
                coerceValue(myNumberattrib, value);
                break;
            case 3:
                coerceValue(myWeightsattrib, value);
                break;
            case 4:
                coerceValue(myPointattribs, value);
                break;
            case 5:
                coerceValue(myVertattribs, value);
                break;
            case 6:
                coerceValue(myPrimattribs, value);
                break;
            case 7:
                coerceValue(myDetailattribs, value);
                break;
            case 8:
                coerceValue(myComputeweights, value);
                break;
            case 9:
                coerceValue(myComputenumberstype, value);
                break;
            case 10:
                coerceValue(myComputednumbersattrib, value);
                break;
            case 11:
                coerceValue(myComputedweightsattrib, value);
                break;
            case 12:
                coerceValue(myGroup, value);
                break;

        }
    }

    void        setParmValue(exint idx, const exint &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const fpreal &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Vector2D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Vector3D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Vector4D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Matrix2D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Matrix3D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Matrix4D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_StringHolder &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_SharedPtr<UT_Ramp> &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const PRM_DataItemHandle &value) 
    { doSetParmValue(idx, value); }

    virtual exint    getNumParms() const
    {
        return 13;
    }

    virtual const char *getParmName(exint fieldnum) const
    {
        switch (fieldnum)
        {
            case 0:
                return "totype";
            case 1:
                return "interpby";
            case 2:
                return "numberattrib";
            case 3:
                return "weightsattrib";
            case 4:
                return "pointattribs";
            case 5:
                return "vertattribs";
            case 6:
                return "primattribs";
            case 7:
                return "detailattribs";
            case 8:
                return "computeweights";
            case 9:
                return "computenumberstype";
            case 10:
                return "computednumbersattrib";
            case 11:
                return "computedweightsattrib";
            case 12:
                return "group";

        }
        return 0;
    }

    virtual ParmType getParmType(exint fieldnum) const
    {
        switch (fieldnum)
        {
                case 0:
                    return PARM_INTEGER;
                case 1:
                    return PARM_INTEGER;
                case 2:
                    return PARM_STRING;
                case 3:
                    return PARM_STRING;
                case 4:
                    return PARM_STRING;
                case 5:
                    return PARM_STRING;
                case 6:
                    return PARM_STRING;
                case 7:
                    return PARM_STRING;
                case 8:
                    return PARM_INTEGER;
                case 9:
                    return PARM_INTEGER;
                case 10:
                    return PARM_STRING;
                case 11:
                    return PARM_STRING;
                case 12:
                    return PARM_STRING;

        }
        return PARM_UNSUPPORTED;
    }

    // Boiler plate to load individual types.
    static void  loadData(UT_IStream &is, int64 &v)
    { is.bread(&v, 1); }
    static void  loadData(UT_IStream &is, bool &v)
    { int64     iv; is.bread(&iv, 1); v = iv; }
    static void  loadData(UT_IStream &is, fpreal64 &v)
    { is.bread<fpreal64>(&v, 1); }
    static void  loadData(UT_IStream &is, UT_Vector2D &v)
    { is.bread<fpreal64>(&v.x(), 1); is.bread<fpreal64>(&v.y(), 1); }
    static void  loadData(UT_IStream &is, UT_Vector3D &v)
    { is.bread<fpreal64>(&v.x(), 1); is.bread<fpreal64>(&v.y(), 1);
      is.bread<fpreal64>(&v.z(), 1); }
    static void  loadData(UT_IStream &is, UT_Vector4D &v)
    { is.bread<fpreal64>(&v.x(), 1); is.bread<fpreal64>(&v.y(), 1);
      is.bread<fpreal64>(&v.z(), 1); is.bread<fpreal64>(&v.w(), 1); }
    static void  loadData(UT_IStream &is, UT_Matrix2D &v)
    { for (int r = 0; r < 2; r++) for (int c = 0; c < 2; c++) is.bread<fpreal64>(&v(r, c), 1); }
    static void  loadData(UT_IStream &is, UT_Matrix3D &v)
    { for (int r = 0; r < 3; r++) for (int c = 0; c < 3; c++) is.bread<fpreal64>(&v(r, c), 1); }
    static void  loadData(UT_IStream &is, UT_Matrix4D &v)
    { for (int r = 0; r < 4; r++) for (int c = 0; c < 4; c++) is.bread<fpreal64>(&v(r, c), 1); }
    static void  loadData(UT_IStream &is, UT_Vector2I &v)
    { is.bread<int64>(&v.x(), 1); is.bread<int64>(&v.y(), 1); }
    static void  loadData(UT_IStream &is, UT_Vector3I &v)
    { is.bread<int64>(&v.x(), 1); is.bread<int64>(&v.y(), 1);
      is.bread<int64>(&v.z(), 1); }
    static void  loadData(UT_IStream &is, UT_Vector4I &v)
    { is.bread<int64>(&v.x(), 1); is.bread<int64>(&v.y(), 1);
      is.bread<int64>(&v.z(), 1); is.bread<int64>(&v.w(), 1); }
    static void  loadData(UT_IStream &is, UT_StringHolder &v)
    { is.bread(v); }
    static void  loadData(UT_IStream &is, UT_SharedPtr<UT_Ramp> &v)
    {   UT_StringHolder   rampdata;
        loadData(is, rampdata);
        if (rampdata.isstring())
        {
            v.reset(new UT_Ramp());
            UT_IStream  istr((const char *) rampdata, rampdata.length(), UT_ISTREAM_ASCII);
            v->load(istr);
        }
        else v.reset();
    }
    static void  loadData(UT_IStream &is, PRM_DataItemHandle &v)
    {   UT_StringHolder   data;
        loadData(is, data);
        if (data.isstring())
        {
            // Find the data type.
            char *colon = UT_StringWrap(data).findChar(':');
            if (colon)
            {
                int             typelen = colon - data.buffer();
                UT_WorkBuffer   type;
                type.strncpy(data.buffer(), typelen);
                UT_IStream  istr(((const char *) data) + typelen + 1, data.length() - (typelen + 1), UT_ISTREAM_BINARY);
                
                v = PRM_DataFactory::parseBinary(type.buffer(), istr);
            }
        }
        else v.reset();
    }

    static void  saveData(std::ostream &os, int64 v)
    { UTwrite(os, &v); }
    static void  saveData(std::ostream &os, bool v)
    { int64 iv = v; UTwrite(os, &iv); }
    static void  saveData(std::ostream &os, fpreal64 v)
    { UTwrite<fpreal64>(os, &v); }
    static void  saveData(std::ostream &os, UT_Vector2D v)
    { UTwrite<fpreal64>(os, &v.x()); UTwrite<fpreal64>(os, &v.y()); }
    static void  saveData(std::ostream &os, UT_Vector3D v)
    { UTwrite<fpreal64>(os, &v.x()); UTwrite<fpreal64>(os, &v.y());
      UTwrite<fpreal64>(os, &v.z()); }
    static void  saveData(std::ostream &os, UT_Vector4D v)
    { UTwrite<fpreal64>(os, &v.x()); UTwrite<fpreal64>(os, &v.y());
      UTwrite<fpreal64>(os, &v.z()); UTwrite<fpreal64>(os, &v.w()); }
    static void  saveData(std::ostream &os, UT_Matrix2D v)
    { for (int r = 0; r < 2; r++) for (int c = 0; c < 2; c++) UTwrite<fpreal64>(os, &v(r, c)); }
    static void  saveData(std::ostream &os, UT_Matrix3D v)
    { for (int r = 0; r < 3; r++) for (int c = 0; c < 3; c++) UTwrite<fpreal64>(os, &v(r, c)); }
    static void  saveData(std::ostream &os, UT_Matrix4D v)
    { for (int r = 0; r < 4; r++) for (int c = 0; c < 4; c++) UTwrite<fpreal64>(os, &v(r, c)); }
    static void  saveData(std::ostream &os, UT_StringHolder s)
    { UT_StringWrap(s).saveBinary(os); }
    static void  saveData(std::ostream &os, UT_SharedPtr<UT_Ramp> s)
    {   UT_StringHolder         result;
        UT_OStringStream        ostr;
        if (s) s->save(ostr);
        result = ostr.str();
        saveData(os, result);
    }
    static void  saveData(std::ostream &os, PRM_DataItemHandle s)
    {   UT_StringHolder         result;
        UT_OStringStream        ostr;
        if (s) 
        {
            ostr << s->getDataTypeToken();
            ostr << ":";
            s->saveBinary(ostr);
        }
        result = ostr.str();
        saveData(os, result);
    }


    void         save(std::ostream &os) const
    {
        int32           v = version();
        UTwrite(os, &v);
        saveData(os, myTotype);
        saveData(os, myInterpby);
        saveData(os, myNumberattrib);
        saveData(os, myWeightsattrib);
        saveData(os, myPointattribs);
        saveData(os, myVertattribs);
        saveData(os, myPrimattribs);
        saveData(os, myDetailattribs);
        saveData(os, myComputeweights);
        saveData(os, myComputenumberstype);
        saveData(os, myComputednumbersattrib);
        saveData(os, myComputedweightsattrib);
        saveData(os, myGroup);

    }

    bool         load(UT_IStream &is)
    {
        int32           v;
        is.bread(&v, 1);
        if (version() != v)
        {
            // Fail incompatible versions
            return false;
        }
        loadData(is, myTotype);
        loadData(is, myInterpby);
        loadData(is, myNumberattrib);
        loadData(is, myWeightsattrib);
        loadData(is, myPointattribs);
        loadData(is, myVertattribs);
        loadData(is, myPrimattribs);
        loadData(is, myDetailattribs);
        loadData(is, myComputeweights);
        loadData(is, myComputenumberstype);
        loadData(is, myComputednumbersattrib);
        loadData(is, myComputedweightsattrib);
        loadData(is, myGroup);

        return true;
    }

    Totype getTotype() const { return Totype(myTotype); }
    void setTotype(Totype val) { myTotype = int64(val); }
    Totype opTotype(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getTotype();
        int64 result;
        OP_Utils::evalOpParm(result, thissop, "totype", cookparms.getCookTime(), 0);
        return Totype(result);
    }
    Interpby getInterpby() const { return Interpby(myInterpby); }
    void setInterpby(Interpby val) { myInterpby = int64(val); }
    Interpby opInterpby(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getInterpby();
        int64 result;
        OP_Utils::evalOpParm(result, thissop, "interpby", cookparms.getCookTime(), 0);
        return Interpby(result);
    }
    const UT_StringHolder & getNumberattrib() const { return myNumberattrib; }
    void setNumberattrib(const UT_StringHolder & val) { myNumberattrib = val; }
    UT_StringHolder opNumberattrib(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getNumberattrib();
        UT_StringHolder result;
        OP_Utils::evalOpParm(result, thissop, "numberattrib", cookparms.getCookTime(), 0);
        return result;
    }
    const UT_StringHolder & getWeightsattrib() const { return myWeightsattrib; }
    void setWeightsattrib(const UT_StringHolder & val) { myWeightsattrib = val; }
    UT_StringHolder opWeightsattrib(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getWeightsattrib();
        UT_StringHolder result;
        OP_Utils::evalOpParm(result, thissop, "weightsattrib", cookparms.getCookTime(), 0);
        return result;
    }
    const UT_StringHolder & getPointattribs() const { return myPointattribs; }
    void setPointattribs(const UT_StringHolder & val) { myPointattribs = val; }
    UT_StringHolder opPointattribs(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getPointattribs();
        UT_StringHolder result;
        OP_Utils::evalOpParm(result, thissop, "pointattribs", cookparms.getCookTime(), 0);
        return result;
    }
    const UT_StringHolder & getVertattribs() const { return myVertattribs; }
    void setVertattribs(const UT_StringHolder & val) { myVertattribs = val; }
    UT_StringHolder opVertattribs(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getVertattribs();
        UT_StringHolder result;
        OP_Utils::evalOpParm(result, thissop, "vertattribs", cookparms.getCookTime(), 0);
        return result;
    }
    const UT_StringHolder & getPrimattribs() const { return myPrimattribs; }
    void setPrimattribs(const UT_StringHolder & val) { myPrimattribs = val; }
    UT_StringHolder opPrimattribs(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getPrimattribs();
        UT_StringHolder result;
        OP_Utils::evalOpParm(result, thissop, "primattribs", cookparms.getCookTime(), 0);
        return result;
    }
    const UT_StringHolder & getDetailattribs() const { return myDetailattribs; }
    void setDetailattribs(const UT_StringHolder & val) { myDetailattribs = val; }
    UT_StringHolder opDetailattribs(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getDetailattribs();
        UT_StringHolder result;
        OP_Utils::evalOpParm(result, thissop, "detailattribs", cookparms.getCookTime(), 0);
        return result;
    }
    bool getComputeweights() const { return myComputeweights; }
    void setComputeweights(bool val) { myComputeweights = val; }
    bool opComputeweights(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getComputeweights();
        bool result;
        OP_Utils::evalOpParm(result, thissop, "computeweights", cookparms.getCookTime(), 0);
        return result;
    }
    Computenumberstype getComputenumberstype() const { return Computenumberstype(myComputenumberstype); }
    void setComputenumberstype(Computenumberstype val) { myComputenumberstype = int64(val); }
    Computenumberstype opComputenumberstype(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getComputenumberstype();
        int64 result;
        OP_Utils::evalOpParm(result, thissop, "computenumberstype", cookparms.getCookTime(), 0);
        return Computenumberstype(result);
    }
    const UT_StringHolder & getComputednumbersattrib() const { return myComputednumbersattrib; }
    void setComputednumbersattrib(const UT_StringHolder & val) { myComputednumbersattrib = val; }
    UT_StringHolder opComputednumbersattrib(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getComputednumbersattrib();
        UT_StringHolder result;
        OP_Utils::evalOpParm(result, thissop, "computednumbersattrib", cookparms.getCookTime(), 0);
        return result;
    }
    const UT_StringHolder & getComputedweightsattrib() const { return myComputedweightsattrib; }
    void setComputedweightsattrib(const UT_StringHolder & val) { myComputedweightsattrib = val; }
    UT_StringHolder opComputedweightsattrib(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getComputedweightsattrib();
        UT_StringHolder result;
        OP_Utils::evalOpParm(result, thissop, "computedweightsattrib", cookparms.getCookTime(), 0);
        return result;
    }
    const UT_StringHolder & getGroup() const { return myGroup; }
    void setGroup(const UT_StringHolder & val) { myGroup = val; }
    UT_StringHolder opGroup(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getGroup();
        UT_StringHolder result;
        OP_Utils::evalOpParm(result, thissop, "group", cookparms.getCookTime(), 0);
        return result;
    }

private:
    int64 myTotype;
    int64 myInterpby;
    UT_StringHolder myNumberattrib;
    UT_StringHolder myWeightsattrib;
    UT_StringHolder myPointattribs;
    UT_StringHolder myVertattribs;
    UT_StringHolder myPrimattribs;
    UT_StringHolder myDetailattribs;
    bool myComputeweights;
    int64 myComputenumberstype;
    UT_StringHolder myComputednumbersattrib;
    UT_StringHolder myComputedweightsattrib;
    UT_StringHolder myGroup;

};
