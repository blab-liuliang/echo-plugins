/* Automagically Generated by generate_proto.py
 * Do not Edit
 */
#pragma once

#include <SOP/SOP_NodeVerb.h>
#include <OP/OP_Utils.h>
#include <PRM/PRM_Parm.h>
#include <UT/UT_IStream.h>
#include <UT/UT_NTStreamUtil.h>
#include <UT/UT_Ramp.h>
#include <UT/UT_SharedPtr.h>
#include <UT/UT_StringHolder.h>
#include <UT/UT_StringStream.h>
#include <UT/UT_VectorTypes.h>
#include <SYS/SYS_Types.h>

using namespace UT::Literal;

class DEP_MicroNode;
namespace SOP_PolyReduce_2_0Enums
{
    enum class Target
    {
        POLY_PERCENT = 0,
        PT_PERCENT,
        POLY_COUNT,
        PT_COUNT
    };
}


class SOP_API SOP_PolyReduce_2_0Parms  : public SOP_NodeParms
{
public:
    static int version() { return 1; }
    struct Controlattribs
    {
        bool attribenabled;
        UT_StringHolder attribname;
        fpreal64 attribweight;


        Controlattribs()
        {
            attribenabled = false;
            attribname = ""_sh;
            attribweight = 1;

        }

        bool operator==(const Controlattribs &src) const
        {
            if (attribenabled != src.attribenabled) return false;
            if (attribname != src.attribname) return false;
            if (attribweight != src.attribweight) return false;

            return true;
        }
        bool operator!=(const Controlattribs &src) const
        {
            return !operator==(src);
        }

    };

    UT_StringHolder createString(const UT_Array<Controlattribs> &list) const
    {
        UT_WorkBuffer   buf;

        buf.strcat("[ ");
        for (int i = 0; i < list.entries(); i++)
        {
            if (i)
                buf.strcat(", ");
            buf.strcat("( ");
            buf.append("");
            buf.appendSprintf("%s", (list(i).attribenabled) ? "true" : "false");
            buf.append(", ");
            { UT_String tmp; tmp = UT_StringWrap(list(i).attribname).makeQuotedString('"'); buf.strcat(tmp); }
            buf.append(", ");
            buf.appendSprintf("%f", (list(i).attribweight));

            buf.strcat(" )");
        }
        buf.strcat(" ]");

        UT_StringHolder result = buf;
        return result;
    }

    SOP_PolyReduce_2_0Parms()
    {
        myGroup = ""_sh;
        myTarget = 0;
        myPercentage = 100;
        myFinalCount = 1000;
        myReducePassedTarget = false;
        myQualityToleance = 1e-5;
        myOriginalPoints = false;
        myPreserveQuads = false;
        myEqualizeLengths = 1e-10;
        myBoundaryWeight = 1;
        myVAttribSeamWeight = 1;
        mySeamAttribs = "* ^N"_sh;
        myHardFeaturePoints = ""_sh;
        myHardFeatureEdges = ""_sh;
        mySoftFeaturePoints = ""_sh;
        mySoftFeaturePointWeight = 1;
        mySoftFeatureEdges = ""_sh;
        mySoftFeatureEdgeWeight = 1;
        myUseRetainAttrib = false;
        myRetainAttrib = "retention"_sh;
        myRetainWeight = 1;
        mySilhouetteWeight = 1;
        myUseSilhouetteFalloff = false;
        mySilhouetteFalloffDist = 1;
        myFrontFacingWeight = 1;
        myUseFrontFacingFalloff = false;
        myFrontFacingFalloffDist = 1;

    }

    explicit SOP_PolyReduce_2_0Parms(const SOP_PolyReduce_2_0Parms &) = default;

    virtual ~SOP_PolyReduce_2_0Parms() {}

    bool operator==(const SOP_PolyReduce_2_0Parms &src) const
    {
        if (myGroup != src.myGroup) return false;
        if (myTarget != src.myTarget) return false;
        if (myPercentage != src.myPercentage) return false;
        if (myFinalCount != src.myFinalCount) return false;
        if (myReducePassedTarget != src.myReducePassedTarget) return false;
        if (myQualityToleance != src.myQualityToleance) return false;
        if (myOriginalPoints != src.myOriginalPoints) return false;
        if (myPreserveQuads != src.myPreserveQuads) return false;
        if (myEqualizeLengths != src.myEqualizeLengths) return false;
        if (myBoundaryWeight != src.myBoundaryWeight) return false;
        if (myVAttribSeamWeight != src.myVAttribSeamWeight) return false;
        if (mySeamAttribs != src.mySeamAttribs) return false;
        if (myHardFeaturePoints != src.myHardFeaturePoints) return false;
        if (myHardFeatureEdges != src.myHardFeatureEdges) return false;
        if (mySoftFeaturePoints != src.mySoftFeaturePoints) return false;
        if (mySoftFeaturePointWeight != src.mySoftFeaturePointWeight) return false;
        if (mySoftFeatureEdges != src.mySoftFeatureEdges) return false;
        if (mySoftFeatureEdgeWeight != src.mySoftFeatureEdgeWeight) return false;
        if (myUseRetainAttrib != src.myUseRetainAttrib) return false;
        if (myRetainAttrib != src.myRetainAttrib) return false;
        if (myRetainWeight != src.myRetainWeight) return false;
        if (mySilhouetteWeight != src.mySilhouetteWeight) return false;
        if (myUseSilhouetteFalloff != src.myUseSilhouetteFalloff) return false;
        if (mySilhouetteFalloffDist != src.mySilhouetteFalloffDist) return false;
        if (myFrontFacingWeight != src.myFrontFacingWeight) return false;
        if (myUseFrontFacingFalloff != src.myUseFrontFacingFalloff) return false;
        if (myFrontFacingFalloffDist != src.myFrontFacingFalloffDist) return false;
        if (myControlattribs != src.myControlattribs) return false;

        return true;
    }
    bool operator!=(const SOP_PolyReduce_2_0Parms &src) const
    {
        return !operator==(src);
    }
    using Target = SOP_PolyReduce_2_0Enums::Target;



    void        buildFromOp(const OP_Node *node, fpreal time, DEP_MicroNode *depnode)
    {
        if (true)
            OP_Utils::evalOpParm(myGroup, node, "group", time, 0);
        else myGroup = ""_sh;
        if (true)
            OP_Utils::evalOpParm(myTarget, node, "target", time, 0);
        else myTarget = 0;
        if (true && ( (!(((int64(getTarget())==2))||((int64(getTarget())==3)))) ) )
            OP_Utils::evalOpParm(myPercentage, node, "percentage", time, 0);
        else myPercentage = 100;
        if (true && ( (!(((int64(getTarget())==0))||((int64(getTarget())==1)))) ) )
            OP_Utils::evalOpParm(myFinalCount, node, "finalcount", time, 0);
        else myFinalCount = 1000;
        if (true)
            OP_Utils::evalOpParm(myReducePassedTarget, node, "reducepassedtarget", time, 0);
        else myReducePassedTarget = false;
        if (true && ( (!(((getReducePassedTarget()==0)))) ) )
            OP_Utils::evalOpParm(myQualityToleance, node, "qualitytolerance", time, 0);
        else myQualityToleance = 1e-5;
        if (true)
            OP_Utils::evalOpParm(myOriginalPoints, node, "originalpoints", time, 0);
        else myOriginalPoints = false;
        if (true)
            OP_Utils::evalOpParm(myPreserveQuads, node, "preservequads", time, 0);
        else myPreserveQuads = false;
        if (true)
            OP_Utils::evalOpParm(myEqualizeLengths, node, "equalizelengths", time, 0);
        else myEqualizeLengths = 1e-10;
        if (true)
            OP_Utils::evalOpParm(myBoundaryWeight, node, "boundaryweight", time, 0);
        else myBoundaryWeight = 1;
        if (true)
            OP_Utils::evalOpParm(myVAttribSeamWeight, node, "vattribseamweight", time, 0);
        else myVAttribSeamWeight = 1;
        if (true && ( (!(((getVAttribSeamWeight()==0)))) ) )
            OP_Utils::evalOpParm(mySeamAttribs, node, "seamattribs", time, 0);
        else mySeamAttribs = "* ^N"_sh;
        if (true)
            OP_Utils::evalOpParm(myHardFeaturePoints, node, "hardfeaturepoints", time, 0);
        else myHardFeaturePoints = ""_sh;
        if (true)
            OP_Utils::evalOpParm(myHardFeatureEdges, node, "hardfeatureedges", time, 0);
        else myHardFeatureEdges = ""_sh;
        if (true)
            OP_Utils::evalOpParm(mySoftFeaturePoints, node, "softfeaturepoints", time, 0);
        else mySoftFeaturePoints = ""_sh;
        if (true)
            OP_Utils::evalOpParm(mySoftFeaturePointWeight, node, "softfeaturepointweight", time, 0);
        else mySoftFeaturePointWeight = 1;
        if (true)
            OP_Utils::evalOpParm(mySoftFeatureEdges, node, "softfeatureedges", time, 0);
        else mySoftFeatureEdges = ""_sh;
        if (true)
            OP_Utils::evalOpParm(mySoftFeatureEdgeWeight, node, "softfeatureedgeweight", time, 0);
        else mySoftFeatureEdgeWeight = 1;
        if (true)
            OP_Utils::evalOpParm(myUseRetainAttrib, node, "useretainattrib", time, 0);
        else myUseRetainAttrib = false;
        if (true && ( (!(((getUseRetainAttrib()==0)))) ) )
            OP_Utils::evalOpParm(myRetainAttrib, node, "retainattrib", time, 0);
        else myRetainAttrib = "retention"_sh;
        if (true && ( (!(((getUseRetainAttrib()==0)))) ) )
            OP_Utils::evalOpParm(myRetainWeight, node, "retainattribweight", time, 0);
        else myRetainWeight = 1;
        if (true && ( (!((((node->getInput(2)!=0)==0)))) ) )
            OP_Utils::evalOpParm(mySilhouetteWeight, node, "silhouetteweight", time, 0);
        else mySilhouetteWeight = 1;
        if (true && ( (!((((node->getInput(2)!=0)==0)))) ) )
            OP_Utils::evalOpParm(myUseSilhouetteFalloff, node, "usesilhouettefalloff", time, 0);
        else myUseSilhouetteFalloff = false;
        if (true && ( (!((((node->getInput(2)!=0)==0))||((getUseSilhouetteFalloff()==0)))) ) )
            OP_Utils::evalOpParm(mySilhouetteFalloffDist, node, "silhouettefalloffdist", time, 0);
        else mySilhouetteFalloffDist = 1;
        if (true && ( (!((((node->getInput(2)!=0)==0)))) ) )
            OP_Utils::evalOpParm(myFrontFacingWeight, node, "frontfacingweight", time, 0);
        else myFrontFacingWeight = 1;
        if (true && ( (!((((node->getInput(2)!=0)==0)))) ) )
            OP_Utils::evalOpParm(myUseFrontFacingFalloff, node, "usefrontfacingfalloff", time, 0);
        else myUseFrontFacingFalloff = false;
        if (true && ( (!((((node->getInput(2)!=0)==0))||((getUseFrontFacingFalloff()==0)))) ) )
            OP_Utils::evalOpParm(myFrontFacingFalloffDist, node, "frontfacingfalloffdist", time, 0);
        else myFrontFacingFalloffDist = 1;
            if (true)
            {
                int64   length;
                OP_Utils::evalOpParm(length, node, "controlattribs", time, 0);
                myControlattribs.entries(length);
                for (exint i = 0; i < length; i++)
                {
                    int     parmidx = i+1;
                    auto && _curentry = myControlattribs(i);
                    (void) _curentry;
                    if (true)
                        OP_Utils::evalOpParmInst(myControlattribs(i).attribenabled, node, "attribenabled#", &parmidx, time, 0);
                    else myControlattribs(i).attribenabled = false;
                    if (true && ( (!(((_curentry.attribenabled==0)))) ) )
                        OP_Utils::evalOpParmInst(myControlattribs(i).attribname, node, "attribname#", &parmidx, time, 0);
                    else myControlattribs(i).attribname = ""_sh;
                    if (true && ( (!(((_curentry.attribenabled==0)))) ) )
                        OP_Utils::evalOpParmInst(myControlattribs(i).attribweight, node, "attribweight#", &parmidx, time, 0);
                    else myControlattribs(i).attribweight = 1;

                }
            }
            else
                myControlattribs.clear();

    }


    virtual void loadFromOpSubclass(const LoadParms &loadparms)
    {
        buildFromOp(loadparms.node(), loadparms.context().getTime(), loadparms.depnode());
    }


    virtual void copyFrom(const SOP_NodeParms *src)
    {
        *this = *((const SOP_PolyReduce_2_0Parms *)src);
    }

    template <typename T>
    void
    doGetParmValue(exint idx, T &value) const
    {
        switch (idx)
        {
            case 0:
                coerceValue(value, myGroup);
                break;
            case 1:
                coerceValue(value, myTarget);
                break;
            case 2:
                coerceValue(value, myPercentage);
                break;
            case 3:
                coerceValue(value, myFinalCount);
                break;
            case 4:
                coerceValue(value, myReducePassedTarget);
                break;
            case 5:
                coerceValue(value, myQualityToleance);
                break;
            case 6:
                coerceValue(value, myOriginalPoints);
                break;
            case 7:
                coerceValue(value, myPreserveQuads);
                break;
            case 8:
                coerceValue(value, myEqualizeLengths);
                break;
            case 9:
                coerceValue(value, myBoundaryWeight);
                break;
            case 10:
                coerceValue(value, myVAttribSeamWeight);
                break;
            case 11:
                coerceValue(value, mySeamAttribs);
                break;
            case 12:
                coerceValue(value, myHardFeaturePoints);
                break;
            case 13:
                coerceValue(value, myHardFeatureEdges);
                break;
            case 14:
                coerceValue(value, mySoftFeaturePoints);
                break;
            case 15:
                coerceValue(value, mySoftFeaturePointWeight);
                break;
            case 16:
                coerceValue(value, mySoftFeatureEdges);
                break;
            case 17:
                coerceValue(value, mySoftFeatureEdgeWeight);
                break;
            case 18:
                coerceValue(value, myUseRetainAttrib);
                break;
            case 19:
                coerceValue(value, myRetainAttrib);
                break;
            case 20:
                coerceValue(value, myRetainWeight);
                break;
            case 21:
                coerceValue(value, mySilhouetteWeight);
                break;
            case 22:
                coerceValue(value, myUseSilhouetteFalloff);
                break;
            case 23:
                coerceValue(value, mySilhouetteFalloffDist);
                break;
            case 24:
                coerceValue(value, myFrontFacingWeight);
                break;
            case 25:
                coerceValue(value, myUseFrontFacingFalloff);
                break;
            case 26:
                coerceValue(value, myFrontFacingFalloffDist);
                break;

        }
    }

    void        getParmValue(exint idx, exint &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, fpreal &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Vector2D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Vector3D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Vector4D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Matrix2D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Matrix3D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Matrix4D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_StringHolder &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_SharedPtr<UT_Ramp> &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, PRM_DataItemHandle &value) const
    { doGetParmValue(idx, value); }

    template <typename T>
    void
    doSetParmValue(exint idx, const T &value) 
    {
        switch (idx)
        {
            case 0:
                coerceValue(myGroup, value);
                break;
            case 1:
                coerceValue(myTarget, value);
                break;
            case 2:
                coerceValue(myPercentage, value);
                break;
            case 3:
                coerceValue(myFinalCount, value);
                break;
            case 4:
                coerceValue(myReducePassedTarget, value);
                break;
            case 5:
                coerceValue(myQualityToleance, value);
                break;
            case 6:
                coerceValue(myOriginalPoints, value);
                break;
            case 7:
                coerceValue(myPreserveQuads, value);
                break;
            case 8:
                coerceValue(myEqualizeLengths, value);
                break;
            case 9:
                coerceValue(myBoundaryWeight, value);
                break;
            case 10:
                coerceValue(myVAttribSeamWeight, value);
                break;
            case 11:
                coerceValue(mySeamAttribs, value);
                break;
            case 12:
                coerceValue(myHardFeaturePoints, value);
                break;
            case 13:
                coerceValue(myHardFeatureEdges, value);
                break;
            case 14:
                coerceValue(mySoftFeaturePoints, value);
                break;
            case 15:
                coerceValue(mySoftFeaturePointWeight, value);
                break;
            case 16:
                coerceValue(mySoftFeatureEdges, value);
                break;
            case 17:
                coerceValue(mySoftFeatureEdgeWeight, value);
                break;
            case 18:
                coerceValue(myUseRetainAttrib, value);
                break;
            case 19:
                coerceValue(myRetainAttrib, value);
                break;
            case 20:
                coerceValue(myRetainWeight, value);
                break;
            case 21:
                coerceValue(mySilhouetteWeight, value);
                break;
            case 22:
                coerceValue(myUseSilhouetteFalloff, value);
                break;
            case 23:
                coerceValue(mySilhouetteFalloffDist, value);
                break;
            case 24:
                coerceValue(myFrontFacingWeight, value);
                break;
            case 25:
                coerceValue(myUseFrontFacingFalloff, value);
                break;
            case 26:
                coerceValue(myFrontFacingFalloffDist, value);
                break;

        }
    }

    void        setParmValue(exint idx, const exint &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const fpreal &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Vector2D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Vector3D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Vector4D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Matrix2D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Matrix3D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Matrix4D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_StringHolder &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_SharedPtr<UT_Ramp> &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const PRM_DataItemHandle &value) 
    { doSetParmValue(idx, value); }

    virtual exint    getNumParms() const
    {
        return 28;
    }

    virtual const char *getParmName(exint fieldnum) const
    {
        switch (fieldnum)
        {
            case 0:
                return "group";
            case 1:
                return "target";
            case 2:
                return "percentage";
            case 3:
                return "finalcount";
            case 4:
                return "reducepassedtarget";
            case 5:
                return "qualitytolerance";
            case 6:
                return "originalpoints";
            case 7:
                return "preservequads";
            case 8:
                return "equalizelengths";
            case 9:
                return "boundaryweight";
            case 10:
                return "vattribseamweight";
            case 11:
                return "seamattribs";
            case 12:
                return "hardfeaturepoints";
            case 13:
                return "hardfeatureedges";
            case 14:
                return "softfeaturepoints";
            case 15:
                return "softfeaturepointweight";
            case 16:
                return "softfeatureedges";
            case 17:
                return "softfeatureedgeweight";
            case 18:
                return "useretainattrib";
            case 19:
                return "retainattrib";
            case 20:
                return "retainattribweight";
            case 21:
                return "silhouetteweight";
            case 22:
                return "usesilhouettefalloff";
            case 23:
                return "silhouettefalloffdist";
            case 24:
                return "frontfacingweight";
            case 25:
                return "usefrontfacingfalloff";
            case 26:
                return "frontfacingfalloffdist";
                case 27:
                    return "controlattribs";

        }
        return 0;
    }

    virtual ParmType getParmType(exint fieldnum) const
    {
        switch (fieldnum)
        {
                case 0:
                    return PARM_STRING;
                case 1:
                    return PARM_INTEGER;
                case 2:
                    return PARM_FLOAT;
                case 3:
                    return PARM_INTEGER;
                case 4:
                    return PARM_INTEGER;
                case 5:
                    return PARM_FLOAT;
                case 6:
                    return PARM_INTEGER;
                case 7:
                    return PARM_INTEGER;
                case 8:
                    return PARM_FLOAT;
                case 9:
                    return PARM_FLOAT;
                case 10:
                    return PARM_FLOAT;
                case 11:
                    return PARM_STRING;
                case 12:
                    return PARM_STRING;
                case 13:
                    return PARM_STRING;
                case 14:
                    return PARM_STRING;
                case 15:
                    return PARM_FLOAT;
                case 16:
                    return PARM_STRING;
                case 17:
                    return PARM_FLOAT;
                case 18:
                    return PARM_INTEGER;
                case 19:
                    return PARM_STRING;
                case 20:
                    return PARM_FLOAT;
                case 21:
                    return PARM_FLOAT;
                case 22:
                    return PARM_INTEGER;
                case 23:
                    return PARM_FLOAT;
                case 24:
                    return PARM_FLOAT;
                case 25:
                    return PARM_INTEGER;
                case 26:
                    return PARM_FLOAT;

        }
        return PARM_UNSUPPORTED;
    }

    // Boiler plate to load individual types.
    static void  loadData(UT_IStream &is, int64 &v)
    { is.bread(&v, 1); }
    static void  loadData(UT_IStream &is, bool &v)
    { int64     iv; is.bread(&iv, 1); v = iv; }
    static void  loadData(UT_IStream &is, fpreal64 &v)
    { is.bread<fpreal64>(&v, 1); }
    static void  loadData(UT_IStream &is, UT_Vector2D &v)
    { is.bread<fpreal64>(&v.x(), 1); is.bread<fpreal64>(&v.y(), 1); }
    static void  loadData(UT_IStream &is, UT_Vector3D &v)
    { is.bread<fpreal64>(&v.x(), 1); is.bread<fpreal64>(&v.y(), 1);
      is.bread<fpreal64>(&v.z(), 1); }
    static void  loadData(UT_IStream &is, UT_Vector4D &v)
    { is.bread<fpreal64>(&v.x(), 1); is.bread<fpreal64>(&v.y(), 1);
      is.bread<fpreal64>(&v.z(), 1); is.bread<fpreal64>(&v.w(), 1); }
    static void  loadData(UT_IStream &is, UT_Matrix2D &v)
    { for (int r = 0; r < 2; r++) for (int c = 0; c < 2; c++) is.bread<fpreal64>(&v(r, c), 1); }
    static void  loadData(UT_IStream &is, UT_Matrix3D &v)
    { for (int r = 0; r < 3; r++) for (int c = 0; c < 3; c++) is.bread<fpreal64>(&v(r, c), 1); }
    static void  loadData(UT_IStream &is, UT_Matrix4D &v)
    { for (int r = 0; r < 4; r++) for (int c = 0; c < 4; c++) is.bread<fpreal64>(&v(r, c), 1); }
    static void  loadData(UT_IStream &is, UT_Vector2I &v)
    { is.bread<int64>(&v.x(), 1); is.bread<int64>(&v.y(), 1); }
    static void  loadData(UT_IStream &is, UT_Vector3I &v)
    { is.bread<int64>(&v.x(), 1); is.bread<int64>(&v.y(), 1);
      is.bread<int64>(&v.z(), 1); }
    static void  loadData(UT_IStream &is, UT_Vector4I &v)
    { is.bread<int64>(&v.x(), 1); is.bread<int64>(&v.y(), 1);
      is.bread<int64>(&v.z(), 1); is.bread<int64>(&v.w(), 1); }
    static void  loadData(UT_IStream &is, UT_StringHolder &v)
    { is.bread(v); }
    static void  loadData(UT_IStream &is, UT_SharedPtr<UT_Ramp> &v)
    {   UT_StringHolder   rampdata;
        loadData(is, rampdata);
        if (rampdata.isstring())
        {
            v.reset(new UT_Ramp());
            UT_IStream  istr((const char *) rampdata, rampdata.length(), UT_ISTREAM_ASCII);
            v->load(istr);
        }
        else v.reset();
    }
    static void  loadData(UT_IStream &is, PRM_DataItemHandle &v)
    {   UT_StringHolder   data;
        loadData(is, data);
        if (data.isstring())
        {
            // Find the data type.
            char *colon = UT_StringWrap(data).findChar(':');
            if (colon)
            {
                int             typelen = colon - data.buffer();
                UT_WorkBuffer   type;
                type.strncpy(data.buffer(), typelen);
                UT_IStream  istr(((const char *) data) + typelen + 1, data.length() - (typelen + 1), UT_ISTREAM_BINARY);
                
                v = PRM_DataFactory::parseBinary(type.buffer(), istr);
            }
        }
        else v.reset();
    }

    static void  saveData(std::ostream &os, int64 v)
    { UTwrite(os, &v); }
    static void  saveData(std::ostream &os, bool v)
    { int64 iv = v; UTwrite(os, &iv); }
    static void  saveData(std::ostream &os, fpreal64 v)
    { UTwrite<fpreal64>(os, &v); }
    static void  saveData(std::ostream &os, UT_Vector2D v)
    { UTwrite<fpreal64>(os, &v.x()); UTwrite<fpreal64>(os, &v.y()); }
    static void  saveData(std::ostream &os, UT_Vector3D v)
    { UTwrite<fpreal64>(os, &v.x()); UTwrite<fpreal64>(os, &v.y());
      UTwrite<fpreal64>(os, &v.z()); }
    static void  saveData(std::ostream &os, UT_Vector4D v)
    { UTwrite<fpreal64>(os, &v.x()); UTwrite<fpreal64>(os, &v.y());
      UTwrite<fpreal64>(os, &v.z()); UTwrite<fpreal64>(os, &v.w()); }
    static void  saveData(std::ostream &os, UT_Matrix2D v)
    { for (int r = 0; r < 2; r++) for (int c = 0; c < 2; c++) UTwrite<fpreal64>(os, &v(r, c)); }
    static void  saveData(std::ostream &os, UT_Matrix3D v)
    { for (int r = 0; r < 3; r++) for (int c = 0; c < 3; c++) UTwrite<fpreal64>(os, &v(r, c)); }
    static void  saveData(std::ostream &os, UT_Matrix4D v)
    { for (int r = 0; r < 4; r++) for (int c = 0; c < 4; c++) UTwrite<fpreal64>(os, &v(r, c)); }
    static void  saveData(std::ostream &os, UT_StringHolder s)
    { UT_StringWrap(s).saveBinary(os); }
    static void  saveData(std::ostream &os, UT_SharedPtr<UT_Ramp> s)
    {   UT_StringHolder         result;
        UT_OStringStream        ostr;
        if (s) s->save(ostr);
        result = ostr.str();
        saveData(os, result);
    }
    static void  saveData(std::ostream &os, PRM_DataItemHandle s)
    {   UT_StringHolder         result;
        UT_OStringStream        ostr;
        if (s) 
        {
            ostr << s->getDataTypeToken();
            ostr << ":";
            s->saveBinary(ostr);
        }
        result = ostr.str();
        saveData(os, result);
    }


    void         save(std::ostream &os) const
    {
        int32           v = version();
        UTwrite(os, &v);
        saveData(os, myGroup);
        saveData(os, myTarget);
        saveData(os, myPercentage);
        saveData(os, myFinalCount);
        saveData(os, myReducePassedTarget);
        saveData(os, myQualityToleance);
        saveData(os, myOriginalPoints);
        saveData(os, myPreserveQuads);
        saveData(os, myEqualizeLengths);
        saveData(os, myBoundaryWeight);
        saveData(os, myVAttribSeamWeight);
        saveData(os, mySeamAttribs);
        saveData(os, myHardFeaturePoints);
        saveData(os, myHardFeatureEdges);
        saveData(os, mySoftFeaturePoints);
        saveData(os, mySoftFeaturePointWeight);
        saveData(os, mySoftFeatureEdges);
        saveData(os, mySoftFeatureEdgeWeight);
        saveData(os, myUseRetainAttrib);
        saveData(os, myRetainAttrib);
        saveData(os, myRetainWeight);
        saveData(os, mySilhouetteWeight);
        saveData(os, myUseSilhouetteFalloff);
        saveData(os, mySilhouetteFalloffDist);
        saveData(os, myFrontFacingWeight);
        saveData(os, myUseFrontFacingFalloff);
        saveData(os, myFrontFacingFalloffDist);
        {
            int64   length = myControlattribs.entries();
            UTwrite(os, &length);
            for (exint i = 0; i < length; i++)
            {
                saveData(os, myControlattribs(i).attribenabled);
                saveData(os, myControlattribs(i).attribname);
                saveData(os, myControlattribs(i).attribweight);

            }
        }

    }

    bool         load(UT_IStream &is)
    {
        int32           v;
        is.bread(&v, 1);
        if (version() != v)
        {
            // Fail incompatible versions
            return false;
        }
        loadData(is, myGroup);
        loadData(is, myTarget);
        loadData(is, myPercentage);
        loadData(is, myFinalCount);
        loadData(is, myReducePassedTarget);
        loadData(is, myQualityToleance);
        loadData(is, myOriginalPoints);
        loadData(is, myPreserveQuads);
        loadData(is, myEqualizeLengths);
        loadData(is, myBoundaryWeight);
        loadData(is, myVAttribSeamWeight);
        loadData(is, mySeamAttribs);
        loadData(is, myHardFeaturePoints);
        loadData(is, myHardFeatureEdges);
        loadData(is, mySoftFeaturePoints);
        loadData(is, mySoftFeaturePointWeight);
        loadData(is, mySoftFeatureEdges);
        loadData(is, mySoftFeatureEdgeWeight);
        loadData(is, myUseRetainAttrib);
        loadData(is, myRetainAttrib);
        loadData(is, myRetainWeight);
        loadData(is, mySilhouetteWeight);
        loadData(is, myUseSilhouetteFalloff);
        loadData(is, mySilhouetteFalloffDist);
        loadData(is, myFrontFacingWeight);
        loadData(is, myUseFrontFacingFalloff);
        loadData(is, myFrontFacingFalloffDist);
        {
            int64   length;
            is.read(&length, 1);
            myControlattribs.entries(length);
            for (exint i = 0; i < length; i++)
            {
                loadData(is, myControlattribs(i).attribenabled);
                loadData(is, myControlattribs(i).attribname);
                loadData(is, myControlattribs(i).attribweight);

            }
        }

        return true;
    }

    const UT_StringHolder & getGroup() const { return myGroup; }
    void setGroup(const UT_StringHolder & val) { myGroup = val; }
    UT_StringHolder opGroup(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getGroup();
        UT_StringHolder result;
        OP_Utils::evalOpParm(result, thissop, "group", cookparms.getCookTime(), 0);
        return result;
    }
    Target getTarget() const { return Target(myTarget); }
    void setTarget(Target val) { myTarget = int64(val); }
    Target opTarget(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getTarget();
        int64 result;
        OP_Utils::evalOpParm(result, thissop, "target", cookparms.getCookTime(), 0);
        return Target(result);
    }
    fpreal64 getPercentage() const { return myPercentage; }
    void setPercentage(fpreal64 val) { myPercentage = val; }
    fpreal64 opPercentage(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getPercentage();
        fpreal64 result;
        OP_Utils::evalOpParm(result, thissop, "percentage", cookparms.getCookTime(), 0);
        return result;
    }
    int64 getFinalCount() const { return myFinalCount; }
    void setFinalCount(int64 val) { myFinalCount = val; }
    int64 opFinalCount(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getFinalCount();
        int64 result;
        OP_Utils::evalOpParm(result, thissop, "finalcount", cookparms.getCookTime(), 0);
        return result;
    }
    bool getReducePassedTarget() const { return myReducePassedTarget; }
    void setReducePassedTarget(bool val) { myReducePassedTarget = val; }
    bool opReducePassedTarget(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getReducePassedTarget();
        bool result;
        OP_Utils::evalOpParm(result, thissop, "reducepassedtarget", cookparms.getCookTime(), 0);
        return result;
    }
    fpreal64 getQualityToleance() const { return myQualityToleance; }
    void setQualityToleance(fpreal64 val) { myQualityToleance = val; }
    fpreal64 opQualityToleance(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getQualityToleance();
        fpreal64 result;
        OP_Utils::evalOpParm(result, thissop, "qualitytolerance", cookparms.getCookTime(), 0);
        return result;
    }
    bool getOriginalPoints() const { return myOriginalPoints; }
    void setOriginalPoints(bool val) { myOriginalPoints = val; }
    bool opOriginalPoints(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getOriginalPoints();
        bool result;
        OP_Utils::evalOpParm(result, thissop, "originalpoints", cookparms.getCookTime(), 0);
        return result;
    }
    bool getPreserveQuads() const { return myPreserveQuads; }
    void setPreserveQuads(bool val) { myPreserveQuads = val; }
    bool opPreserveQuads(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getPreserveQuads();
        bool result;
        OP_Utils::evalOpParm(result, thissop, "preservequads", cookparms.getCookTime(), 0);
        return result;
    }
    fpreal64 getEqualizeLengths() const { return myEqualizeLengths; }
    void setEqualizeLengths(fpreal64 val) { myEqualizeLengths = val; }
    fpreal64 opEqualizeLengths(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getEqualizeLengths();
        fpreal64 result;
        OP_Utils::evalOpParm(result, thissop, "equalizelengths", cookparms.getCookTime(), 0);
        return result;
    }
    fpreal64 getBoundaryWeight() const { return myBoundaryWeight; }
    void setBoundaryWeight(fpreal64 val) { myBoundaryWeight = val; }
    fpreal64 opBoundaryWeight(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getBoundaryWeight();
        fpreal64 result;
        OP_Utils::evalOpParm(result, thissop, "boundaryweight", cookparms.getCookTime(), 0);
        return result;
    }
    fpreal64 getVAttribSeamWeight() const { return myVAttribSeamWeight; }
    void setVAttribSeamWeight(fpreal64 val) { myVAttribSeamWeight = val; }
    fpreal64 opVAttribSeamWeight(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getVAttribSeamWeight();
        fpreal64 result;
        OP_Utils::evalOpParm(result, thissop, "vattribseamweight", cookparms.getCookTime(), 0);
        return result;
    }
    const UT_StringHolder & getSeamAttribs() const { return mySeamAttribs; }
    void setSeamAttribs(const UT_StringHolder & val) { mySeamAttribs = val; }
    UT_StringHolder opSeamAttribs(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getSeamAttribs();
        UT_StringHolder result;
        OP_Utils::evalOpParm(result, thissop, "seamattribs", cookparms.getCookTime(), 0);
        return result;
    }
    const UT_StringHolder & getHardFeaturePoints() const { return myHardFeaturePoints; }
    void setHardFeaturePoints(const UT_StringHolder & val) { myHardFeaturePoints = val; }
    UT_StringHolder opHardFeaturePoints(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getHardFeaturePoints();
        UT_StringHolder result;
        OP_Utils::evalOpParm(result, thissop, "hardfeaturepoints", cookparms.getCookTime(), 0);
        return result;
    }
    const UT_StringHolder & getHardFeatureEdges() const { return myHardFeatureEdges; }
    void setHardFeatureEdges(const UT_StringHolder & val) { myHardFeatureEdges = val; }
    UT_StringHolder opHardFeatureEdges(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getHardFeatureEdges();
        UT_StringHolder result;
        OP_Utils::evalOpParm(result, thissop, "hardfeatureedges", cookparms.getCookTime(), 0);
        return result;
    }
    const UT_StringHolder & getSoftFeaturePoints() const { return mySoftFeaturePoints; }
    void setSoftFeaturePoints(const UT_StringHolder & val) { mySoftFeaturePoints = val; }
    UT_StringHolder opSoftFeaturePoints(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getSoftFeaturePoints();
        UT_StringHolder result;
        OP_Utils::evalOpParm(result, thissop, "softfeaturepoints", cookparms.getCookTime(), 0);
        return result;
    }
    fpreal64 getSoftFeaturePointWeight() const { return mySoftFeaturePointWeight; }
    void setSoftFeaturePointWeight(fpreal64 val) { mySoftFeaturePointWeight = val; }
    fpreal64 opSoftFeaturePointWeight(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getSoftFeaturePointWeight();
        fpreal64 result;
        OP_Utils::evalOpParm(result, thissop, "softfeaturepointweight", cookparms.getCookTime(), 0);
        return result;
    }
    const UT_StringHolder & getSoftFeatureEdges() const { return mySoftFeatureEdges; }
    void setSoftFeatureEdges(const UT_StringHolder & val) { mySoftFeatureEdges = val; }
    UT_StringHolder opSoftFeatureEdges(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getSoftFeatureEdges();
        UT_StringHolder result;
        OP_Utils::evalOpParm(result, thissop, "softfeatureedges", cookparms.getCookTime(), 0);
        return result;
    }
    fpreal64 getSoftFeatureEdgeWeight() const { return mySoftFeatureEdgeWeight; }
    void setSoftFeatureEdgeWeight(fpreal64 val) { mySoftFeatureEdgeWeight = val; }
    fpreal64 opSoftFeatureEdgeWeight(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getSoftFeatureEdgeWeight();
        fpreal64 result;
        OP_Utils::evalOpParm(result, thissop, "softfeatureedgeweight", cookparms.getCookTime(), 0);
        return result;
    }
    bool getUseRetainAttrib() const { return myUseRetainAttrib; }
    void setUseRetainAttrib(bool val) { myUseRetainAttrib = val; }
    bool opUseRetainAttrib(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getUseRetainAttrib();
        bool result;
        OP_Utils::evalOpParm(result, thissop, "useretainattrib", cookparms.getCookTime(), 0);
        return result;
    }
    const UT_StringHolder & getRetainAttrib() const { return myRetainAttrib; }
    void setRetainAttrib(const UT_StringHolder & val) { myRetainAttrib = val; }
    UT_StringHolder opRetainAttrib(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getRetainAttrib();
        UT_StringHolder result;
        OP_Utils::evalOpParm(result, thissop, "retainattrib", cookparms.getCookTime(), 0);
        return result;
    }
    fpreal64 getRetainWeight() const { return myRetainWeight; }
    void setRetainWeight(fpreal64 val) { myRetainWeight = val; }
    fpreal64 opRetainWeight(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getRetainWeight();
        fpreal64 result;
        OP_Utils::evalOpParm(result, thissop, "retainattribweight", cookparms.getCookTime(), 0);
        return result;
    }
    fpreal64 getSilhouetteWeight() const { return mySilhouetteWeight; }
    void setSilhouetteWeight(fpreal64 val) { mySilhouetteWeight = val; }
    fpreal64 opSilhouetteWeight(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getSilhouetteWeight();
        fpreal64 result;
        OP_Utils::evalOpParm(result, thissop, "silhouetteweight", cookparms.getCookTime(), 0);
        return result;
    }
    bool getUseSilhouetteFalloff() const { return myUseSilhouetteFalloff; }
    void setUseSilhouetteFalloff(bool val) { myUseSilhouetteFalloff = val; }
    bool opUseSilhouetteFalloff(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getUseSilhouetteFalloff();
        bool result;
        OP_Utils::evalOpParm(result, thissop, "usesilhouettefalloff", cookparms.getCookTime(), 0);
        return result;
    }
    fpreal64 getSilhouetteFalloffDist() const { return mySilhouetteFalloffDist; }
    void setSilhouetteFalloffDist(fpreal64 val) { mySilhouetteFalloffDist = val; }
    fpreal64 opSilhouetteFalloffDist(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getSilhouetteFalloffDist();
        fpreal64 result;
        OP_Utils::evalOpParm(result, thissop, "silhouettefalloffdist", cookparms.getCookTime(), 0);
        return result;
    }
    fpreal64 getFrontFacingWeight() const { return myFrontFacingWeight; }
    void setFrontFacingWeight(fpreal64 val) { myFrontFacingWeight = val; }
    fpreal64 opFrontFacingWeight(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getFrontFacingWeight();
        fpreal64 result;
        OP_Utils::evalOpParm(result, thissop, "frontfacingweight", cookparms.getCookTime(), 0);
        return result;
    }
    bool getUseFrontFacingFalloff() const { return myUseFrontFacingFalloff; }
    void setUseFrontFacingFalloff(bool val) { myUseFrontFacingFalloff = val; }
    bool opUseFrontFacingFalloff(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getUseFrontFacingFalloff();
        bool result;
        OP_Utils::evalOpParm(result, thissop, "usefrontfacingfalloff", cookparms.getCookTime(), 0);
        return result;
    }
    fpreal64 getFrontFacingFalloffDist() const { return myFrontFacingFalloffDist; }
    void setFrontFacingFalloffDist(fpreal64 val) { myFrontFacingFalloffDist = val; }
    fpreal64 opFrontFacingFalloffDist(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getFrontFacingFalloffDist();
        fpreal64 result;
        OP_Utils::evalOpParm(result, thissop, "frontfacingfalloffdist", cookparms.getCookTime(), 0);
        return result;
    }
    const UT_Array<Controlattribs> &getControlattribs() const { return myControlattribs; }
    void setControlattribs(const UT_Array<Controlattribs> &val) { myControlattribs = val; }
    exint opControlattribs(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getControlattribs().entries();
        exint result;
        OP_Utils::evalOpParm(result, thissop, "controlattribs", cookparms.getCookTime(), 0);
        return result;
    }
            bool opControlattribs_attribenabled(const SOP_NodeVerb::CookParms &cookparms, exint _idx) const
        {
            SOP_Node *thissop = cookparms.getNode();
            if (!thissop) return (myControlattribs(_idx).attribenabled);
            int _parmidx = _idx + 1;
            bool result;
            OP_Utils::evalOpParmInst(result, thissop, "attribenabled#", &_parmidx, cookparms.getCookTime(), 0);
            return (result);
        }
        UT_StringHolder opControlattribs_attribname(const SOP_NodeVerb::CookParms &cookparms, exint _idx) const
        {
            SOP_Node *thissop = cookparms.getNode();
            if (!thissop) return (myControlattribs(_idx).attribname);
            int _parmidx = _idx + 1;
            UT_StringHolder result;
            OP_Utils::evalOpParmInst(result, thissop, "attribname#", &_parmidx, cookparms.getCookTime(), 0);
            return (result);
        }
        fpreal64 opControlattribs_attribweight(const SOP_NodeVerb::CookParms &cookparms, exint _idx) const
        {
            SOP_Node *thissop = cookparms.getNode();
            if (!thissop) return (myControlattribs(_idx).attribweight);
            int _parmidx = _idx + 1;
            fpreal64 result;
            OP_Utils::evalOpParmInst(result, thissop, "attribweight#", &_parmidx, cookparms.getCookTime(), 0);
            return (result);
        }


private:
    UT_StringHolder myGroup;
    int64 myTarget;
    fpreal64 myPercentage;
    int64 myFinalCount;
    bool myReducePassedTarget;
    fpreal64 myQualityToleance;
    bool myOriginalPoints;
    bool myPreserveQuads;
    fpreal64 myEqualizeLengths;
    fpreal64 myBoundaryWeight;
    fpreal64 myVAttribSeamWeight;
    UT_StringHolder mySeamAttribs;
    UT_StringHolder myHardFeaturePoints;
    UT_StringHolder myHardFeatureEdges;
    UT_StringHolder mySoftFeaturePoints;
    fpreal64 mySoftFeaturePointWeight;
    UT_StringHolder mySoftFeatureEdges;
    fpreal64 mySoftFeatureEdgeWeight;
    bool myUseRetainAttrib;
    UT_StringHolder myRetainAttrib;
    fpreal64 myRetainWeight;
    fpreal64 mySilhouetteWeight;
    bool myUseSilhouetteFalloff;
    fpreal64 mySilhouetteFalloffDist;
    fpreal64 myFrontFacingWeight;
    bool myUseFrontFacingFalloff;
    fpreal64 myFrontFacingFalloffDist;
    UT_Array<Controlattribs> myControlattribs;

};
