/* Automagically Generated by generate_proto.py
 * Do not Edit
 */
#pragma once

#include <SOP/SOP_NodeVerb.h>
#include <OP/OP_Utils.h>
#include <PRM/PRM_Parm.h>
#include <UT/UT_IStream.h>
#include <UT/UT_NTStreamUtil.h>
#include <UT/UT_Ramp.h>
#include <UT/UT_SharedPtr.h>
#include <UT/UT_StringHolder.h>
#include <UT/UT_StringStream.h>
#include <UT/UT_VectorTypes.h>
#include <SYS/SYS_Types.h>

using namespace UT::Literal;

class DEP_MicroNode;
namespace SOP_AgentUnpackEnums
{
    enum class Output
    {
        DEFORMED = 0,
        REST,
        JOINTS
    };
}


class SOP_API SOP_AgentUnpackParms  : public SOP_NodeParms
{
public:
    static int version() { return 1; }
    struct Filters
    {
        UT_StringHolder jointnames;
        fpreal64 percentage;
        fpreal64 seed;


        Filters()
        {
            jointnames = ""_sh;
            percentage = 100;
            seed = 1;

        }

        bool operator==(const Filters &src) const
        {
            if (jointnames != src.jointnames) return false;
            if (percentage != src.percentage) return false;
            if (seed != src.seed) return false;

            return true;
        }
        bool operator!=(const Filters &src) const
        {
            return !operator==(src);
        }

    };

    UT_StringHolder createString(const UT_Array<Filters> &list) const
    {
        UT_WorkBuffer   buf;

        buf.strcat("[ ");
        for (int i = 0; i < list.entries(); i++)
        {
            if (i)
                buf.strcat(", ");
            buf.strcat("( ");
            buf.append("");
            { UT_String tmp; tmp = UT_StringWrap(list(i).jointnames).makeQuotedString('"'); buf.strcat(tmp); }
            buf.append(", ");
            buf.appendSprintf("%f", (list(i).percentage));
            buf.append(", ");
            buf.appendSprintf("%f", (list(i).seed));

            buf.strcat(" )");
        }
        buf.strcat(" ]");

        UT_StringHolder result = buf;
        return result;
    }

    SOP_AgentUnpackParms()
    {
        myGroup = ""_sh;
        myOutput = 0;
        myShapeFilter = "*"_sh;
        myLimitIterations = false;
        myIterations = 1;
        myTransferAttributes = ""_sh;
        myTransferGroups = ""_sh;

    }

    explicit SOP_AgentUnpackParms(const SOP_AgentUnpackParms &) = default;

    virtual ~SOP_AgentUnpackParms() {}

    bool operator==(const SOP_AgentUnpackParms &src) const
    {
        if (myGroup != src.myGroup) return false;
        if (myOutput != src.myOutput) return false;
        if (myShapeFilter != src.myShapeFilter) return false;
        if (myLimitIterations != src.myLimitIterations) return false;
        if (myIterations != src.myIterations) return false;
        if (myTransferAttributes != src.myTransferAttributes) return false;
        if (myTransferGroups != src.myTransferGroups) return false;
        if (myFilters != src.myFilters) return false;

        return true;
    }
    bool operator!=(const SOP_AgentUnpackParms &src) const
    {
        return !operator==(src);
    }
    using Output = SOP_AgentUnpackEnums::Output;



    void        buildFromOp(const OP_Node *node, fpreal time, DEP_MicroNode *depnode)
    {
        if (true)
            OP_Utils::evalOpParm(myGroup, node, "group", time, 0);
        else myGroup = ""_sh;
        if (true)
            OP_Utils::evalOpParm(myOutput, node, "output", time, 0);
        else myOutput = 0;
        if (true && ( (!(((int64(getOutput())==2))||((int64(getOutput())==2)))) ) )
            OP_Utils::evalOpParm(myShapeFilter, node, "shapefilter", time, 0);
        else myShapeFilter = "*"_sh;
        if (true && ( (!(((int64(getOutput())==2))||((int64(getOutput())==2)))) ) )
            OP_Utils::evalOpParm(myLimitIterations, node, "limititerations", time, 0);
        else myLimitIterations = false;
        if (true && ( (!(((int64(getOutput())==2))||((getLimitIterations()==0))||((int64(getOutput())==2)))) ) )
            OP_Utils::evalOpParm(myIterations, node, "iterations", time, 0);
        else myIterations = 1;
        if (true)
            OP_Utils::evalOpParm(myTransferAttributes, node, "transferattributes", time, 0);
        else myTransferAttributes = ""_sh;
        if (true)
            OP_Utils::evalOpParm(myTransferGroups, node, "transfergroups", time, 0);
        else myTransferGroups = ""_sh;
            if (true && ( (!(((int64(getOutput())!=2))||((int64(getOutput())!=2)))) ) )
            {
                int64   length;
                OP_Utils::evalOpParm(length, node, "numjointfilters", time, 0);
                myFilters.entries(length);
                for (exint i = 0; i < length; i++)
                {
                    int     parmidx = i+1;
                    auto && _curentry = myFilters(i);
                    (void) _curentry;
                    if (true && ( (!(((int64(getOutput())!=2))||((int64(getOutput())!=2)))) )  && ( (!(((int64(getOutput())!=2))||((int64(getOutput())!=2)))) ) )
                        OP_Utils::evalOpParmInst(myFilters(i).jointnames, node, "jointnames#", &parmidx, time, 0);
                    else myFilters(i).jointnames = ""_sh;
                    if (true && ( (!(((int64(getOutput())!=2))||((int64(getOutput())!=2)))) )  && ( (!(((int64(getOutput())!=2))||((int64(getOutput())!=2)))) ) )
                        OP_Utils::evalOpParmInst(myFilters(i).percentage, node, "percentage#", &parmidx, time, 0);
                    else myFilters(i).percentage = 100;
                    if (true && ( (!(((int64(getOutput())!=2))||((int64(getOutput())!=2)))) )  && ( (!(((int64(getOutput())!=2))||((int64(getOutput())!=2)))) ) )
                        OP_Utils::evalOpParmInst(myFilters(i).seed, node, "seed#", &parmidx, time, 0);
                    else myFilters(i).seed = 1;

                }
            }
            else
                myFilters.clear();

    }


    virtual void loadFromOpSubclass(const LoadParms &loadparms)
    {
        buildFromOp(loadparms.node(), loadparms.context().getTime(), loadparms.depnode());
    }


    virtual void copyFrom(const SOP_NodeParms *src)
    {
        *this = *((const SOP_AgentUnpackParms *)src);
    }

    template <typename T>
    void
    doGetParmValue(exint idx, T &value) const
    {
        switch (idx)
        {
            case 0:
                coerceValue(value, myGroup);
                break;
            case 1:
                coerceValue(value, myOutput);
                break;
            case 2:
                coerceValue(value, myShapeFilter);
                break;
            case 3:
                coerceValue(value, myLimitIterations);
                break;
            case 4:
                coerceValue(value, myIterations);
                break;
            case 5:
                coerceValue(value, myTransferAttributes);
                break;
            case 6:
                coerceValue(value, myTransferGroups);
                break;

        }
    }

    void        getParmValue(exint idx, exint &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, fpreal &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Vector2D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Vector3D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Vector4D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Matrix2D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Matrix3D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Matrix4D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_StringHolder &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_SharedPtr<UT_Ramp> &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, PRM_DataItemHandle &value) const
    { doGetParmValue(idx, value); }

    template <typename T>
    void
    doSetParmValue(exint idx, const T &value) 
    {
        switch (idx)
        {
            case 0:
                coerceValue(myGroup, value);
                break;
            case 1:
                coerceValue(myOutput, value);
                break;
            case 2:
                coerceValue(myShapeFilter, value);
                break;
            case 3:
                coerceValue(myLimitIterations, value);
                break;
            case 4:
                coerceValue(myIterations, value);
                break;
            case 5:
                coerceValue(myTransferAttributes, value);
                break;
            case 6:
                coerceValue(myTransferGroups, value);
                break;

        }
    }

    void        setParmValue(exint idx, const exint &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const fpreal &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Vector2D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Vector3D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Vector4D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Matrix2D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Matrix3D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Matrix4D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_StringHolder &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_SharedPtr<UT_Ramp> &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const PRM_DataItemHandle &value) 
    { doSetParmValue(idx, value); }

    virtual exint    getNumParms() const
    {
        return 8;
    }

    virtual const char *getParmName(exint fieldnum) const
    {
        switch (fieldnum)
        {
            case 0:
                return "group";
            case 1:
                return "output";
            case 2:
                return "shapefilter";
            case 3:
                return "limititerations";
            case 4:
                return "iterations";
            case 5:
                return "transferattributes";
            case 6:
                return "transfergroups";
                case 7:
                    return "numjointfilters";

        }
        return 0;
    }

    virtual ParmType getParmType(exint fieldnum) const
    {
        switch (fieldnum)
        {
                case 0:
                    return PARM_STRING;
                case 1:
                    return PARM_INTEGER;
                case 2:
                    return PARM_STRING;
                case 3:
                    return PARM_INTEGER;
                case 4:
                    return PARM_INTEGER;
                case 5:
                    return PARM_STRING;
                case 6:
                    return PARM_STRING;

        }
        return PARM_UNSUPPORTED;
    }

    // Boiler plate to load individual types.
    static void  loadData(UT_IStream &is, int64 &v)
    { is.bread(&v, 1); }
    static void  loadData(UT_IStream &is, bool &v)
    { int64     iv; is.bread(&iv, 1); v = iv; }
    static void  loadData(UT_IStream &is, fpreal64 &v)
    { is.bread<fpreal64>(&v, 1); }
    static void  loadData(UT_IStream &is, UT_Vector2D &v)
    { is.bread<fpreal64>(&v.x(), 1); is.bread<fpreal64>(&v.y(), 1); }
    static void  loadData(UT_IStream &is, UT_Vector3D &v)
    { is.bread<fpreal64>(&v.x(), 1); is.bread<fpreal64>(&v.y(), 1);
      is.bread<fpreal64>(&v.z(), 1); }
    static void  loadData(UT_IStream &is, UT_Vector4D &v)
    { is.bread<fpreal64>(&v.x(), 1); is.bread<fpreal64>(&v.y(), 1);
      is.bread<fpreal64>(&v.z(), 1); is.bread<fpreal64>(&v.w(), 1); }
    static void  loadData(UT_IStream &is, UT_Matrix2D &v)
    { for (int r = 0; r < 2; r++) for (int c = 0; c < 2; c++) is.bread<fpreal64>(&v(r, c), 1); }
    static void  loadData(UT_IStream &is, UT_Matrix3D &v)
    { for (int r = 0; r < 3; r++) for (int c = 0; c < 3; c++) is.bread<fpreal64>(&v(r, c), 1); }
    static void  loadData(UT_IStream &is, UT_Matrix4D &v)
    { for (int r = 0; r < 4; r++) for (int c = 0; c < 4; c++) is.bread<fpreal64>(&v(r, c), 1); }
    static void  loadData(UT_IStream &is, UT_Vector2I &v)
    { is.bread<int64>(&v.x(), 1); is.bread<int64>(&v.y(), 1); }
    static void  loadData(UT_IStream &is, UT_Vector3I &v)
    { is.bread<int64>(&v.x(), 1); is.bread<int64>(&v.y(), 1);
      is.bread<int64>(&v.z(), 1); }
    static void  loadData(UT_IStream &is, UT_Vector4I &v)
    { is.bread<int64>(&v.x(), 1); is.bread<int64>(&v.y(), 1);
      is.bread<int64>(&v.z(), 1); is.bread<int64>(&v.w(), 1); }
    static void  loadData(UT_IStream &is, UT_StringHolder &v)
    { is.bread(v); }
    static void  loadData(UT_IStream &is, UT_SharedPtr<UT_Ramp> &v)
    {   UT_StringHolder   rampdata;
        loadData(is, rampdata);
        if (rampdata.isstring())
        {
            v.reset(new UT_Ramp());
            UT_IStream  istr((const char *) rampdata, rampdata.length(), UT_ISTREAM_ASCII);
            v->load(istr);
        }
        else v.reset();
    }
    static void  loadData(UT_IStream &is, PRM_DataItemHandle &v)
    {   UT_StringHolder   data;
        loadData(is, data);
        if (data.isstring())
        {
            // Find the data type.
            char *colon = UT_StringWrap(data).findChar(':');
            if (colon)
            {
                int             typelen = colon - data.buffer();
                UT_WorkBuffer   type;
                type.strncpy(data.buffer(), typelen);
                UT_IStream  istr(((const char *) data) + typelen + 1, data.length() - (typelen + 1), UT_ISTREAM_BINARY);
                
                v = PRM_DataFactory::parseBinary(type.buffer(), istr);
            }
        }
        else v.reset();
    }

    static void  saveData(std::ostream &os, int64 v)
    { UTwrite(os, &v); }
    static void  saveData(std::ostream &os, bool v)
    { int64 iv = v; UTwrite(os, &iv); }
    static void  saveData(std::ostream &os, fpreal64 v)
    { UTwrite<fpreal64>(os, &v); }
    static void  saveData(std::ostream &os, UT_Vector2D v)
    { UTwrite<fpreal64>(os, &v.x()); UTwrite<fpreal64>(os, &v.y()); }
    static void  saveData(std::ostream &os, UT_Vector3D v)
    { UTwrite<fpreal64>(os, &v.x()); UTwrite<fpreal64>(os, &v.y());
      UTwrite<fpreal64>(os, &v.z()); }
    static void  saveData(std::ostream &os, UT_Vector4D v)
    { UTwrite<fpreal64>(os, &v.x()); UTwrite<fpreal64>(os, &v.y());
      UTwrite<fpreal64>(os, &v.z()); UTwrite<fpreal64>(os, &v.w()); }
    static void  saveData(std::ostream &os, UT_Matrix2D v)
    { for (int r = 0; r < 2; r++) for (int c = 0; c < 2; c++) UTwrite<fpreal64>(os, &v(r, c)); }
    static void  saveData(std::ostream &os, UT_Matrix3D v)
    { for (int r = 0; r < 3; r++) for (int c = 0; c < 3; c++) UTwrite<fpreal64>(os, &v(r, c)); }
    static void  saveData(std::ostream &os, UT_Matrix4D v)
    { for (int r = 0; r < 4; r++) for (int c = 0; c < 4; c++) UTwrite<fpreal64>(os, &v(r, c)); }
    static void  saveData(std::ostream &os, UT_StringHolder s)
    { UT_StringWrap(s).saveBinary(os); }
    static void  saveData(std::ostream &os, UT_SharedPtr<UT_Ramp> s)
    {   UT_StringHolder         result;
        UT_OStringStream        ostr;
        if (s) s->save(ostr);
        result = ostr.str();
        saveData(os, result);
    }
    static void  saveData(std::ostream &os, PRM_DataItemHandle s)
    {   UT_StringHolder         result;
        UT_OStringStream        ostr;
        if (s) 
        {
            ostr << s->getDataTypeToken();
            ostr << ":";
            s->saveBinary(ostr);
        }
        result = ostr.str();
        saveData(os, result);
    }


    void         save(std::ostream &os) const
    {
        int32           v = version();
        UTwrite(os, &v);
        saveData(os, myGroup);
        saveData(os, myOutput);
        saveData(os, myShapeFilter);
        saveData(os, myLimitIterations);
        saveData(os, myIterations);
        saveData(os, myTransferAttributes);
        saveData(os, myTransferGroups);
        {
            int64   length = myFilters.entries();
            UTwrite(os, &length);
            for (exint i = 0; i < length; i++)
            {
                saveData(os, myFilters(i).jointnames);
                saveData(os, myFilters(i).percentage);
                saveData(os, myFilters(i).seed);

            }
        }

    }

    bool         load(UT_IStream &is)
    {
        int32           v;
        is.bread(&v, 1);
        if (version() != v)
        {
            // Fail incompatible versions
            return false;
        }
        loadData(is, myGroup);
        loadData(is, myOutput);
        loadData(is, myShapeFilter);
        loadData(is, myLimitIterations);
        loadData(is, myIterations);
        loadData(is, myTransferAttributes);
        loadData(is, myTransferGroups);
        {
            int64   length;
            is.read(&length, 1);
            myFilters.entries(length);
            for (exint i = 0; i < length; i++)
            {
                loadData(is, myFilters(i).jointnames);
                loadData(is, myFilters(i).percentage);
                loadData(is, myFilters(i).seed);

            }
        }

        return true;
    }

    const UT_StringHolder & getGroup() const { return myGroup; }
    void setGroup(const UT_StringHolder & val) { myGroup = val; }
    UT_StringHolder opGroup(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getGroup();
        UT_StringHolder result;
        OP_Utils::evalOpParm(result, thissop, "group", cookparms.getCookTime(), 0);
        return result;
    }
    Output getOutput() const { return Output(myOutput); }
    void setOutput(Output val) { myOutput = int64(val); }
    Output opOutput(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getOutput();
        int64 result;
        OP_Utils::evalOpParm(result, thissop, "output", cookparms.getCookTime(), 0);
        return Output(result);
    }
    const UT_StringHolder & getShapeFilter() const { return myShapeFilter; }
    void setShapeFilter(const UT_StringHolder & val) { myShapeFilter = val; }
    UT_StringHolder opShapeFilter(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getShapeFilter();
        UT_StringHolder result;
        OP_Utils::evalOpParm(result, thissop, "shapefilter", cookparms.getCookTime(), 0);
        return result;
    }
    bool getLimitIterations() const { return myLimitIterations; }
    void setLimitIterations(bool val) { myLimitIterations = val; }
    bool opLimitIterations(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getLimitIterations();
        bool result;
        OP_Utils::evalOpParm(result, thissop, "limititerations", cookparms.getCookTime(), 0);
        return result;
    }
    int64 getIterations() const { return myIterations; }
    void setIterations(int64 val) { myIterations = val; }
    int64 opIterations(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getIterations();
        int64 result;
        OP_Utils::evalOpParm(result, thissop, "iterations", cookparms.getCookTime(), 0);
        return result;
    }
    const UT_StringHolder & getTransferAttributes() const { return myTransferAttributes; }
    void setTransferAttributes(const UT_StringHolder & val) { myTransferAttributes = val; }
    UT_StringHolder opTransferAttributes(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getTransferAttributes();
        UT_StringHolder result;
        OP_Utils::evalOpParm(result, thissop, "transferattributes", cookparms.getCookTime(), 0);
        return result;
    }
    const UT_StringHolder & getTransferGroups() const { return myTransferGroups; }
    void setTransferGroups(const UT_StringHolder & val) { myTransferGroups = val; }
    UT_StringHolder opTransferGroups(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getTransferGroups();
        UT_StringHolder result;
        OP_Utils::evalOpParm(result, thissop, "transfergroups", cookparms.getCookTime(), 0);
        return result;
    }
    const UT_Array<Filters> &getFilters() const { return myFilters; }
    void setFilters(const UT_Array<Filters> &val) { myFilters = val; }
    exint opFilters(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getFilters().entries();
        exint result;
        OP_Utils::evalOpParm(result, thissop, "numjointfilters", cookparms.getCookTime(), 0);
        return result;
    }
            UT_StringHolder opFilters_jointnames(const SOP_NodeVerb::CookParms &cookparms, exint _idx) const
        {
            SOP_Node *thissop = cookparms.getNode();
            if (!thissop) return (myFilters(_idx).jointnames);
            int _parmidx = _idx + 1;
            UT_StringHolder result;
            OP_Utils::evalOpParmInst(result, thissop, "jointnames#", &_parmidx, cookparms.getCookTime(), 0);
            return (result);
        }
        fpreal64 opFilters_percentage(const SOP_NodeVerb::CookParms &cookparms, exint _idx) const
        {
            SOP_Node *thissop = cookparms.getNode();
            if (!thissop) return (myFilters(_idx).percentage);
            int _parmidx = _idx + 1;
            fpreal64 result;
            OP_Utils::evalOpParmInst(result, thissop, "percentage#", &_parmidx, cookparms.getCookTime(), 0);
            return (result);
        }
        fpreal64 opFilters_seed(const SOP_NodeVerb::CookParms &cookparms, exint _idx) const
        {
            SOP_Node *thissop = cookparms.getNode();
            if (!thissop) return (myFilters(_idx).seed);
            int _parmidx = _idx + 1;
            fpreal64 result;
            OP_Utils::evalOpParmInst(result, thissop, "seed#", &_parmidx, cookparms.getCookTime(), 0);
            return (result);
        }


private:
    UT_StringHolder myGroup;
    int64 myOutput;
    UT_StringHolder myShapeFilter;
    bool myLimitIterations;
    int64 myIterations;
    UT_StringHolder myTransferAttributes;
    UT_StringHolder myTransferGroups;
    UT_Array<Filters> myFilters;

};
