/* Automagically Generated by generate_proto.py
 * Do not Edit
 */
#pragma once

#include <SOP/SOP_NodeVerb.h>
#include <OP/OP_Utils.h>
#include <PRM/PRM_Parm.h>
#include <UT/UT_IStream.h>
#include <UT/UT_NTStreamUtil.h>
#include <UT/UT_Ramp.h>
#include <UT/UT_SharedPtr.h>
#include <UT/UT_StringHolder.h>
#include <UT/UT_StringStream.h>
#include <UT/UT_VectorTypes.h>
#include <SYS/SYS_Types.h>

using namespace UT::Literal;

class DEP_MicroNode;
namespace SOP_GuideProcessCoreEnums
{
    enum class Grouptype
    {
        PRIMITIVE = 0,
        POINT,
        EDGE
    };
    enum class Blendoverride
    {
        NONE = 0,
        CURVEATTRIB,
        SKINATTRIB,
        TEXTURE
    };
    enum class Op
    {
        SETLENGTH = 0
    };
    enum class Setlength_mode
    {
        SET = 0,
        MULTIPLY,
        ADD,
        SUBTRACT,
        SETMIN,
        SETMAX
    };
    enum class Setlength_method
    {
        SCALE = 0,
        CUTEXTEND
    };
    enum class Setlength_lengthoverride
    {
        NONE = 0,
        CURVEATTRIB,
        SKINATTRIB,
        TEXTURE
    };
    enum class Setlength_lengthrandminoverride
    {
        NONE = 0,
        CURVEATTRIB,
        SKINATTRIB,
        TEXTURE
    };
    enum class Setlength_lengthrandmaxoverride
    {
        NONE = 0,
        CURVEATTRIB,
        SKINATTRIB,
        TEXTURE
    };
    enum class Setlength_scalefactoroverride
    {
        NONE = 0,
        CURVEATTRIB,
        SKINATTRIB,
        TEXTURE
    };
    enum class Setlength_scalefactorrandminoverride
    {
        NONE = 0,
        CURVEATTRIB,
        SKINATTRIB,
        TEXTURE
    };
    enum class Setlength_scalefactorrandmaxoverride
    {
        NONE = 0,
        CURVEATTRIB,
        SKINATTRIB,
        TEXTURE
    };
}


class SOP_API SOP_GuideProcessCoreParms  : public SOP_NodeParms
{
public:
    static int version() { return 1; }

    SOP_GuideProcessCoreParms()
    {
        myUvattrib = "uv"_sh;
        myGrouptype = 0;
        myGroup = ""_sh;
        mySeed = 0;
        myVismasks = false;
        myBlend = 1;
        myBlendoverride = 0;
        myBlendcurveattrib = "mask"_sh;
        myBlendattrib = "mask"_sh;
        myBlendtexture = ""_sh;
        myOp = 0;
        mySetlength_mode = 0;
        mySetlength_method = 1;
        mySetlength_blend = 1;
        mySetlength_randomize = false;
        mySetlength_length = 0.1;
        mySetlength_lengthoverride = 0;
        mySetlength_lengthcurveattrib = "length"_sh;
        mySetlength_lengthattrib = "length"_sh;
        mySetlength_lengthtexture = ""_sh;
        mySetlength_lengthrandmin = 0.1;
        mySetlength_lengthrandminoverride = 0;
        mySetlength_lengthrandmincurveattrib = "minlength"_sh;
        mySetlength_lengthrandminattrib = "minlength"_sh;
        mySetlength_lengthrandmintexture = ""_sh;
        mySetlength_lengthrandmax = 0.2;
        mySetlength_lengthrandmaxoverride = 0;
        mySetlength_lengthrandmaxcurveattrib = "maxlength"_sh;
        mySetlength_lengthrandmaxattrib = "maxlength"_sh;
        mySetlength_lengthrandmaxtexture = ""_sh;
        mySetlength_scalefactor = 1;
        mySetlength_scalefactoroverride = 0;
        mySetlength_scalefactorcurveattrib = "scalefactor"_sh;
        mySetlength_scalefactorattrib = "scalefactor"_sh;
        mySetlength_scalefactortexture = ""_sh;
        mySetlength_scalefactorrandmin = 1;
        mySetlength_scalefactorrandminoverride = 0;
        mySetlength_scalefactorrandmincurveattrib = "scalefactormin"_sh;
        mySetlength_scalefactorrandminattrib = "scalefactormin"_sh;
        mySetlength_scalefactorrandmintexture = ""_sh;
        mySetlength_scalefactorrandmax = 1;
        mySetlength_scalefactorrandmaxoverride = 0;
        mySetlength_scalefactorrandmaxcurveattrib = "scalefactormax"_sh;
        mySetlength_scalefactorrandmaxattrib = "scalefactormax"_sh;
        mySetlength_scalefactorrandmaxtexture = ""_sh;
        mySetlength_cullzerolen = false;
        mySetlength_cullthreshold = 0.0001;

    }

    explicit SOP_GuideProcessCoreParms(const SOP_GuideProcessCoreParms &) = default;

    virtual ~SOP_GuideProcessCoreParms() {}

    bool operator==(const SOP_GuideProcessCoreParms &src) const
    {
        if (myUvattrib != src.myUvattrib) return false;
        if (myGrouptype != src.myGrouptype) return false;
        if (myGroup != src.myGroup) return false;
        if (mySeed != src.mySeed) return false;
        if (myVismasks != src.myVismasks) return false;
        if (myBlend != src.myBlend) return false;
        if (myBlendoverride != src.myBlendoverride) return false;
        if (myBlendcurveattrib != src.myBlendcurveattrib) return false;
        if (myBlendattrib != src.myBlendattrib) return false;
        if (myBlendtexture != src.myBlendtexture) return false;
        if (myOp != src.myOp) return false;
        if (mySetlength_mode != src.mySetlength_mode) return false;
        if (mySetlength_method != src.mySetlength_method) return false;
        if (mySetlength_blend != src.mySetlength_blend) return false;
        if (mySetlength_randomize != src.mySetlength_randomize) return false;
        if (mySetlength_length != src.mySetlength_length) return false;
        if (mySetlength_lengthoverride != src.mySetlength_lengthoverride) return false;
        if (mySetlength_lengthcurveattrib != src.mySetlength_lengthcurveattrib) return false;
        if (mySetlength_lengthattrib != src.mySetlength_lengthattrib) return false;
        if (mySetlength_lengthtexture != src.mySetlength_lengthtexture) return false;
        if (mySetlength_lengthrandmin != src.mySetlength_lengthrandmin) return false;
        if (mySetlength_lengthrandminoverride != src.mySetlength_lengthrandminoverride) return false;
        if (mySetlength_lengthrandmincurveattrib != src.mySetlength_lengthrandmincurveattrib) return false;
        if (mySetlength_lengthrandminattrib != src.mySetlength_lengthrandminattrib) return false;
        if (mySetlength_lengthrandmintexture != src.mySetlength_lengthrandmintexture) return false;
        if (mySetlength_lengthrandmax != src.mySetlength_lengthrandmax) return false;
        if (mySetlength_lengthrandmaxoverride != src.mySetlength_lengthrandmaxoverride) return false;
        if (mySetlength_lengthrandmaxcurveattrib != src.mySetlength_lengthrandmaxcurveattrib) return false;
        if (mySetlength_lengthrandmaxattrib != src.mySetlength_lengthrandmaxattrib) return false;
        if (mySetlength_lengthrandmaxtexture != src.mySetlength_lengthrandmaxtexture) return false;
        if (mySetlength_scalefactor != src.mySetlength_scalefactor) return false;
        if (mySetlength_scalefactoroverride != src.mySetlength_scalefactoroverride) return false;
        if (mySetlength_scalefactorcurveattrib != src.mySetlength_scalefactorcurveattrib) return false;
        if (mySetlength_scalefactorattrib != src.mySetlength_scalefactorattrib) return false;
        if (mySetlength_scalefactortexture != src.mySetlength_scalefactortexture) return false;
        if (mySetlength_scalefactorrandmin != src.mySetlength_scalefactorrandmin) return false;
        if (mySetlength_scalefactorrandminoverride != src.mySetlength_scalefactorrandminoverride) return false;
        if (mySetlength_scalefactorrandmincurveattrib != src.mySetlength_scalefactorrandmincurveattrib) return false;
        if (mySetlength_scalefactorrandminattrib != src.mySetlength_scalefactorrandminattrib) return false;
        if (mySetlength_scalefactorrandmintexture != src.mySetlength_scalefactorrandmintexture) return false;
        if (mySetlength_scalefactorrandmax != src.mySetlength_scalefactorrandmax) return false;
        if (mySetlength_scalefactorrandmaxoverride != src.mySetlength_scalefactorrandmaxoverride) return false;
        if (mySetlength_scalefactorrandmaxcurveattrib != src.mySetlength_scalefactorrandmaxcurveattrib) return false;
        if (mySetlength_scalefactorrandmaxattrib != src.mySetlength_scalefactorrandmaxattrib) return false;
        if (mySetlength_scalefactorrandmaxtexture != src.mySetlength_scalefactorrandmaxtexture) return false;
        if (mySetlength_cullzerolen != src.mySetlength_cullzerolen) return false;
        if (mySetlength_cullthreshold != src.mySetlength_cullthreshold) return false;

        return true;
    }
    bool operator!=(const SOP_GuideProcessCoreParms &src) const
    {
        return !operator==(src);
    }
    using Grouptype = SOP_GuideProcessCoreEnums::Grouptype;
    using Blendoverride = SOP_GuideProcessCoreEnums::Blendoverride;
    using Op = SOP_GuideProcessCoreEnums::Op;
    using Setlength_mode = SOP_GuideProcessCoreEnums::Setlength_mode;
    using Setlength_method = SOP_GuideProcessCoreEnums::Setlength_method;
    using Setlength_lengthoverride = SOP_GuideProcessCoreEnums::Setlength_lengthoverride;
    using Setlength_lengthrandminoverride = SOP_GuideProcessCoreEnums::Setlength_lengthrandminoverride;
    using Setlength_lengthrandmaxoverride = SOP_GuideProcessCoreEnums::Setlength_lengthrandmaxoverride;
    using Setlength_scalefactoroverride = SOP_GuideProcessCoreEnums::Setlength_scalefactoroverride;
    using Setlength_scalefactorrandminoverride = SOP_GuideProcessCoreEnums::Setlength_scalefactorrandminoverride;
    using Setlength_scalefactorrandmaxoverride = SOP_GuideProcessCoreEnums::Setlength_scalefactorrandmaxoverride;



    void        buildFromOp(const OP_Node *node, fpreal time, DEP_MicroNode *depnode)
    {
        if (true)
            OP_Utils::evalOpParm(myUvattrib, node, "uvattrib", time, 0);
        else myUvattrib = "uv"_sh;
        if (true)
            OP_Utils::evalOpParm(myGrouptype, node, "grouptype", time, 0);
        else myGrouptype = 0;
        if (true)
            OP_Utils::evalOpParm(myGroup, node, "group", time, 0);
        else myGroup = ""_sh;
        if (true)
            OP_Utils::evalOpParm(mySeed, node, "seed", time, 0);
        else mySeed = 0;
        if (true)
            OP_Utils::evalOpParm(myVismasks, node, "vismasks", time, 0);
        else myVismasks = false;
        if (true)
            OP_Utils::evalOpParm(myBlend, node, "blend", time, 0);
        else myBlend = 1;
        if (true)
            OP_Utils::evalOpParm(myBlendoverride, node, "blendoverride", time, 0);
        else myBlendoverride = 0;
        if (true && ( (!(((int64(getBlendoverride())!=1)))) ) )
            OP_Utils::evalOpParm(myBlendcurveattrib, node, "blendcurveattrib", time, 0);
        else myBlendcurveattrib = "mask"_sh;
        if (true && ( (!(((int64(getBlendoverride())!=2)))) ) )
            OP_Utils::evalOpParm(myBlendattrib, node, "blendattrib", time, 0);
        else myBlendattrib = "mask"_sh;
        if (true && ( (!(((int64(getBlendoverride())!=3)))) ) )
            OP_Utils::evalOpParm(myBlendtexture, node, "blendtexture", time, 0);
        else myBlendtexture = ""_sh;
        if (true)
            OP_Utils::evalOpParm(myOp, node, "op", time, 0);
        else myOp = 0;
        if (true && ( (!(((int64(getOp())!=0)))) ) )
            OP_Utils::evalOpParm(mySetlength_mode, node, "setlength_mode", time, 0);
        else mySetlength_mode = 0;
        if (true && ( (!(((int64(getOp())!=0)))) ) )
            OP_Utils::evalOpParm(mySetlength_method, node, "setlength_method", time, 0);
        else mySetlength_method = 1;
        if (true && ( (!(((int64(getOp())!=0)))) ) )
            OP_Utils::evalOpParm(mySetlength_blend, node, "setlength_blend", time, 0);
        else mySetlength_blend = 1;
        if (true && ( (!(((int64(getOp())!=0)))) ) )
            OP_Utils::evalOpParm(mySetlength_randomize, node, "setlength_randomize", time, 0);
        else mySetlength_randomize = false;
        if (true && ( (!(((int64(getOp())!=0))||((int64(getSetlength_mode())==1))||((getSetlength_randomize()!=0)))) ) )
            OP_Utils::evalOpParm(mySetlength_length, node, "setlength_length", time, 0);
        else mySetlength_length = 0.1;
        if (true && ( (!(((int64(getOp())!=0))||((int64(getSetlength_mode())==1))||((getSetlength_randomize()!=0)))) ) )
            OP_Utils::evalOpParm(mySetlength_lengthoverride, node, "setlength_lengthoverride", time, 0);
        else mySetlength_lengthoverride = 0;
        if (true && ( (!(((int64(getOp())!=0))||((int64(getSetlength_mode())==1))||((getSetlength_randomize()!=0))||((int64(getSetlength_lengthoverride())!=1)))) ) )
            OP_Utils::evalOpParm(mySetlength_lengthcurveattrib, node, "setlength_lengthcurveattrib", time, 0);
        else mySetlength_lengthcurveattrib = "length"_sh;
        if (true && ( (!(((int64(getOp())!=0))||((int64(getSetlength_mode())==1))||((getSetlength_randomize()!=0))||((int64(getSetlength_lengthoverride())!=2)))) ) )
            OP_Utils::evalOpParm(mySetlength_lengthattrib, node, "setlength_lengthattrib", time, 0);
        else mySetlength_lengthattrib = "length"_sh;
        if (true && ( (!(((int64(getOp())!=0))||((int64(getSetlength_mode())==1))||((getSetlength_randomize()!=0))||((int64(getSetlength_lengthoverride())!=3)))) ) )
            OP_Utils::evalOpParm(mySetlength_lengthtexture, node, "setlength_lengthtexture", time, 0);
        else mySetlength_lengthtexture = ""_sh;
        if (true && ( (!(((int64(getOp())!=0))||((int64(getSetlength_mode())==1))||((getSetlength_randomize()==0)))) ) )
            OP_Utils::evalOpParm(mySetlength_lengthrandmin, node, "setlength_lengthrandmin", time, 0);
        else mySetlength_lengthrandmin = 0.1;
        if (true && ( (!(((int64(getOp())!=0))||((int64(getSetlength_mode())==1))||((getSetlength_randomize()==0)))) ) )
            OP_Utils::evalOpParm(mySetlength_lengthrandminoverride, node, "setlength_lengthrandminoverride", time, 0);
        else mySetlength_lengthrandminoverride = 0;
        if (true && ( (!(((int64(getOp())!=0))||((int64(getSetlength_mode())==1))||((getSetlength_randomize()==0))||((int64(getSetlength_lengthrandminoverride())!=1)))) ) )
            OP_Utils::evalOpParm(mySetlength_lengthrandmincurveattrib, node, "setlength_lengthrandmincurveattrib", time, 0);
        else mySetlength_lengthrandmincurveattrib = "minlength"_sh;
        if (true && ( (!(((int64(getOp())!=0))||((int64(getSetlength_mode())==1))||((getSetlength_randomize()==0))||((int64(getSetlength_lengthrandminoverride())!=2)))) ) )
            OP_Utils::evalOpParm(mySetlength_lengthrandminattrib, node, "setlength_lengthrandminattrib", time, 0);
        else mySetlength_lengthrandminattrib = "minlength"_sh;
        if (true && ( (!(((int64(getOp())!=0))||((int64(getSetlength_mode())==1))||((getSetlength_randomize()==0))||((int64(getSetlength_lengthrandminoverride())!=3)))) ) )
            OP_Utils::evalOpParm(mySetlength_lengthrandmintexture, node, "setlength_lengthrandmintexture", time, 0);
        else mySetlength_lengthrandmintexture = ""_sh;
        if (true && ( (!(((int64(getOp())!=0))||((int64(getSetlength_mode())==1))||((getSetlength_randomize()==0)))) ) )
            OP_Utils::evalOpParm(mySetlength_lengthrandmax, node, "setlength_lengthrandmax", time, 0);
        else mySetlength_lengthrandmax = 0.2;
        if (true && ( (!(((int64(getOp())!=0))||((int64(getSetlength_mode())==1))||((getSetlength_randomize()==0)))) ) )
            OP_Utils::evalOpParm(mySetlength_lengthrandmaxoverride, node, "setlength_lengthrandmaxoverride", time, 0);
        else mySetlength_lengthrandmaxoverride = 0;
        if (true && ( (!(((int64(getOp())!=0))||((int64(getSetlength_mode())==1))||((getSetlength_randomize()==0))||((int64(getSetlength_lengthrandmaxoverride())!=1)))) ) )
            OP_Utils::evalOpParm(mySetlength_lengthrandmaxcurveattrib, node, "setlength_lengthrandmaxcurveattrib", time, 0);
        else mySetlength_lengthrandmaxcurveattrib = "maxlength"_sh;
        if (true && ( (!(((int64(getOp())!=0))||((int64(getSetlength_mode())==1))||((getSetlength_randomize()==0))||((int64(getSetlength_lengthrandmaxoverride())!=2)))) ) )
            OP_Utils::evalOpParm(mySetlength_lengthrandmaxattrib, node, "setlength_lengthrandmaxattrib", time, 0);
        else mySetlength_lengthrandmaxattrib = "maxlength"_sh;
        if (true && ( (!(((int64(getOp())!=0))||((int64(getSetlength_mode())==1))||((getSetlength_randomize()==0))||((int64(getSetlength_lengthrandmaxoverride())!=3)))) ) )
            OP_Utils::evalOpParm(mySetlength_lengthrandmaxtexture, node, "setlength_lengthrandmaxtexture", time, 0);
        else mySetlength_lengthrandmaxtexture = ""_sh;
        if (true && ( (!(((int64(getOp())!=0))||((int64(getSetlength_mode())!=1))||((getSetlength_randomize()==1)))) ) )
            OP_Utils::evalOpParm(mySetlength_scalefactor, node, "setlength_scalefactor", time, 0);
        else mySetlength_scalefactor = 1;
        if (true && ( (!(((int64(getOp())!=0))||((int64(getSetlength_mode())!=1))||((getSetlength_randomize()==1)))) ) )
            OP_Utils::evalOpParm(mySetlength_scalefactoroverride, node, "setlength_scalefactoroverride", time, 0);
        else mySetlength_scalefactoroverride = 0;
        if (true && ( (!(((int64(getOp())!=0))||((int64(getSetlength_mode())!=1))||((getSetlength_randomize()==1))||((int64(getSetlength_scalefactoroverride())!=1)))) ) )
            OP_Utils::evalOpParm(mySetlength_scalefactorcurveattrib, node, "setlength_scalefactorcurveattrib", time, 0);
        else mySetlength_scalefactorcurveattrib = "scalefactor"_sh;
        if (true && ( (!(((int64(getOp())!=0))||((int64(getSetlength_mode())!=1))||((getSetlength_randomize()==1))||((int64(getSetlength_scalefactoroverride())!=2)))) ) )
            OP_Utils::evalOpParm(mySetlength_scalefactorattrib, node, "setlength_scalefactorattrib", time, 0);
        else mySetlength_scalefactorattrib = "scalefactor"_sh;
        if (true && ( (!(((int64(getOp())!=0))||((int64(getSetlength_mode())!=1))||((getSetlength_randomize()==1))||((int64(getSetlength_scalefactoroverride())!=3)))) ) )
            OP_Utils::evalOpParm(mySetlength_scalefactortexture, node, "setlength_scalefactortexture", time, 0);
        else mySetlength_scalefactortexture = ""_sh;
        if (true && ( (!(((int64(getOp())!=0))||((int64(getSetlength_mode())!=1))||((getSetlength_randomize()==0)))) ) )
            OP_Utils::evalOpParm(mySetlength_scalefactorrandmin, node, "setlength_scalefactorrandmin", time, 0);
        else mySetlength_scalefactorrandmin = 1;
        if (true && ( (!(((int64(getOp())!=0))||((int64(getSetlength_mode())!=1))||((getSetlength_randomize()==0)))) ) )
            OP_Utils::evalOpParm(mySetlength_scalefactorrandminoverride, node, "setlength_scalefactorrandminoverride", time, 0);
        else mySetlength_scalefactorrandminoverride = 0;
        if (true && ( (!(((int64(getOp())!=0))||((int64(getSetlength_mode())!=1))||((getSetlength_randomize()==0))||((int64(getSetlength_scalefactorrandminoverride())!=1)))) ) )
            OP_Utils::evalOpParm(mySetlength_scalefactorrandmincurveattrib, node, "setlength_scalefactorrandmincurveattrib", time, 0);
        else mySetlength_scalefactorrandmincurveattrib = "scalefactormin"_sh;
        if (true && ( (!(((int64(getOp())!=0))||((int64(getSetlength_mode())!=1))||((getSetlength_randomize()==0))||((int64(getSetlength_scalefactorrandminoverride())!=2)))) ) )
            OP_Utils::evalOpParm(mySetlength_scalefactorrandminattrib, node, "setlength_scalefactorrandminattrib", time, 0);
        else mySetlength_scalefactorrandminattrib = "scalefactormin"_sh;
        if (true && ( (!(((int64(getOp())!=0))||((int64(getSetlength_mode())!=1))||((getSetlength_randomize()==0))||((int64(getSetlength_scalefactorrandminoverride())!=3)))) ) )
            OP_Utils::evalOpParm(mySetlength_scalefactorrandmintexture, node, "setlength_scalefactorrandmintexture", time, 0);
        else mySetlength_scalefactorrandmintexture = ""_sh;
        if (true && ( (!(((int64(getOp())!=0))||((int64(getSetlength_mode())!=1))||((getSetlength_randomize()==0)))) ) )
            OP_Utils::evalOpParm(mySetlength_scalefactorrandmax, node, "setlength_scalefactorrandmax", time, 0);
        else mySetlength_scalefactorrandmax = 1;
        if (true && ( (!(((int64(getOp())!=0))||((int64(getSetlength_mode())!=1))||((getSetlength_randomize()==0)))) ) )
            OP_Utils::evalOpParm(mySetlength_scalefactorrandmaxoverride, node, "setlength_scalefactorrandmaxoverride", time, 0);
        else mySetlength_scalefactorrandmaxoverride = 0;
        if (true && ( (!(((int64(getOp())!=0))||((int64(getSetlength_mode())!=1))||((getSetlength_randomize()==0))||((int64(getSetlength_scalefactorrandmaxoverride())!=1)))) ) )
            OP_Utils::evalOpParm(mySetlength_scalefactorrandmaxcurveattrib, node, "setlength_scalefactorrandmaxcurveattrib", time, 0);
        else mySetlength_scalefactorrandmaxcurveattrib = "scalefactormax"_sh;
        if (true && ( (!(((int64(getOp())!=0))||((int64(getSetlength_mode())!=1))||((getSetlength_randomize()==0))||((int64(getSetlength_scalefactorrandmaxoverride())!=2)))) ) )
            OP_Utils::evalOpParm(mySetlength_scalefactorrandmaxattrib, node, "setlength_scalefactorrandmaxattrib", time, 0);
        else mySetlength_scalefactorrandmaxattrib = "scalefactormax"_sh;
        if (true && ( (!(((int64(getOp())!=0))||((int64(getSetlength_mode())!=1))||((getSetlength_randomize()==0))||((int64(getSetlength_scalefactorrandmaxoverride())!=3)))) ) )
            OP_Utils::evalOpParm(mySetlength_scalefactorrandmaxtexture, node, "setlength_scalefactorrandmaxtexture", time, 0);
        else mySetlength_scalefactorrandmaxtexture = ""_sh;
        if (true && ( (!(((int64(getOp())!=0)))) ) )
            OP_Utils::evalOpParm(mySetlength_cullzerolen, node, "setlength_cullzerolen", time, 0);
        else mySetlength_cullzerolen = false;
        if (true && ( (!(((getSetlength_cullzerolen()==0))||((int64(getOp())!=0)))) ) )
            OP_Utils::evalOpParm(mySetlength_cullthreshold, node, "setlength_cullthreshold", time, 0);
        else mySetlength_cullthreshold = 0.0001;

    }


    virtual void loadFromOpSubclass(const LoadParms &loadparms)
    {
        buildFromOp(loadparms.node(), loadparms.context().getTime(), loadparms.depnode());
    }


    virtual void copyFrom(const SOP_NodeParms *src)
    {
        *this = *((const SOP_GuideProcessCoreParms *)src);
    }

    template <typename T>
    void
    doGetParmValue(exint idx, T &value) const
    {
        switch (idx)
        {
            case 0:
                coerceValue(value, myUvattrib);
                break;
            case 1:
                coerceValue(value, myGrouptype);
                break;
            case 2:
                coerceValue(value, myGroup);
                break;
            case 3:
                coerceValue(value, mySeed);
                break;
            case 4:
                coerceValue(value, myVismasks);
                break;
            case 5:
                coerceValue(value, myBlend);
                break;
            case 6:
                coerceValue(value, myBlendoverride);
                break;
            case 7:
                coerceValue(value, myBlendcurveattrib);
                break;
            case 8:
                coerceValue(value, myBlendattrib);
                break;
            case 9:
                coerceValue(value, myBlendtexture);
                break;
            case 10:
                coerceValue(value, myOp);
                break;
            case 11:
                coerceValue(value, mySetlength_mode);
                break;
            case 12:
                coerceValue(value, mySetlength_method);
                break;
            case 13:
                coerceValue(value, mySetlength_blend);
                break;
            case 14:
                coerceValue(value, mySetlength_randomize);
                break;
            case 15:
                coerceValue(value, mySetlength_length);
                break;
            case 16:
                coerceValue(value, mySetlength_lengthoverride);
                break;
            case 17:
                coerceValue(value, mySetlength_lengthcurveattrib);
                break;
            case 18:
                coerceValue(value, mySetlength_lengthattrib);
                break;
            case 19:
                coerceValue(value, mySetlength_lengthtexture);
                break;
            case 20:
                coerceValue(value, mySetlength_lengthrandmin);
                break;
            case 21:
                coerceValue(value, mySetlength_lengthrandminoverride);
                break;
            case 22:
                coerceValue(value, mySetlength_lengthrandmincurveattrib);
                break;
            case 23:
                coerceValue(value, mySetlength_lengthrandminattrib);
                break;
            case 24:
                coerceValue(value, mySetlength_lengthrandmintexture);
                break;
            case 25:
                coerceValue(value, mySetlength_lengthrandmax);
                break;
            case 26:
                coerceValue(value, mySetlength_lengthrandmaxoverride);
                break;
            case 27:
                coerceValue(value, mySetlength_lengthrandmaxcurveattrib);
                break;
            case 28:
                coerceValue(value, mySetlength_lengthrandmaxattrib);
                break;
            case 29:
                coerceValue(value, mySetlength_lengthrandmaxtexture);
                break;
            case 30:
                coerceValue(value, mySetlength_scalefactor);
                break;
            case 31:
                coerceValue(value, mySetlength_scalefactoroverride);
                break;
            case 32:
                coerceValue(value, mySetlength_scalefactorcurveattrib);
                break;
            case 33:
                coerceValue(value, mySetlength_scalefactorattrib);
                break;
            case 34:
                coerceValue(value, mySetlength_scalefactortexture);
                break;
            case 35:
                coerceValue(value, mySetlength_scalefactorrandmin);
                break;
            case 36:
                coerceValue(value, mySetlength_scalefactorrandminoverride);
                break;
            case 37:
                coerceValue(value, mySetlength_scalefactorrandmincurveattrib);
                break;
            case 38:
                coerceValue(value, mySetlength_scalefactorrandminattrib);
                break;
            case 39:
                coerceValue(value, mySetlength_scalefactorrandmintexture);
                break;
            case 40:
                coerceValue(value, mySetlength_scalefactorrandmax);
                break;
            case 41:
                coerceValue(value, mySetlength_scalefactorrandmaxoverride);
                break;
            case 42:
                coerceValue(value, mySetlength_scalefactorrandmaxcurveattrib);
                break;
            case 43:
                coerceValue(value, mySetlength_scalefactorrandmaxattrib);
                break;
            case 44:
                coerceValue(value, mySetlength_scalefactorrandmaxtexture);
                break;
            case 45:
                coerceValue(value, mySetlength_cullzerolen);
                break;
            case 46:
                coerceValue(value, mySetlength_cullthreshold);
                break;

        }
    }

    void        getParmValue(exint idx, exint &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, fpreal &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Vector2D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Vector3D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Vector4D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Matrix2D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Matrix3D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Matrix4D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_StringHolder &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_SharedPtr<UT_Ramp> &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, PRM_DataItemHandle &value) const
    { doGetParmValue(idx, value); }

    template <typename T>
    void
    doSetParmValue(exint idx, const T &value) 
    {
        switch (idx)
        {
            case 0:
                coerceValue(myUvattrib, value);
                break;
            case 1:
                coerceValue(myGrouptype, value);
                break;
            case 2:
                coerceValue(myGroup, value);
                break;
            case 3:
                coerceValue(mySeed, value);
                break;
            case 4:
                coerceValue(myVismasks, value);
                break;
            case 5:
                coerceValue(myBlend, value);
                break;
            case 6:
                coerceValue(myBlendoverride, value);
                break;
            case 7:
                coerceValue(myBlendcurveattrib, value);
                break;
            case 8:
                coerceValue(myBlendattrib, value);
                break;
            case 9:
                coerceValue(myBlendtexture, value);
                break;
            case 10:
                coerceValue(myOp, value);
                break;
            case 11:
                coerceValue(mySetlength_mode, value);
                break;
            case 12:
                coerceValue(mySetlength_method, value);
                break;
            case 13:
                coerceValue(mySetlength_blend, value);
                break;
            case 14:
                coerceValue(mySetlength_randomize, value);
                break;
            case 15:
                coerceValue(mySetlength_length, value);
                break;
            case 16:
                coerceValue(mySetlength_lengthoverride, value);
                break;
            case 17:
                coerceValue(mySetlength_lengthcurveattrib, value);
                break;
            case 18:
                coerceValue(mySetlength_lengthattrib, value);
                break;
            case 19:
                coerceValue(mySetlength_lengthtexture, value);
                break;
            case 20:
                coerceValue(mySetlength_lengthrandmin, value);
                break;
            case 21:
                coerceValue(mySetlength_lengthrandminoverride, value);
                break;
            case 22:
                coerceValue(mySetlength_lengthrandmincurveattrib, value);
                break;
            case 23:
                coerceValue(mySetlength_lengthrandminattrib, value);
                break;
            case 24:
                coerceValue(mySetlength_lengthrandmintexture, value);
                break;
            case 25:
                coerceValue(mySetlength_lengthrandmax, value);
                break;
            case 26:
                coerceValue(mySetlength_lengthrandmaxoverride, value);
                break;
            case 27:
                coerceValue(mySetlength_lengthrandmaxcurveattrib, value);
                break;
            case 28:
                coerceValue(mySetlength_lengthrandmaxattrib, value);
                break;
            case 29:
                coerceValue(mySetlength_lengthrandmaxtexture, value);
                break;
            case 30:
                coerceValue(mySetlength_scalefactor, value);
                break;
            case 31:
                coerceValue(mySetlength_scalefactoroverride, value);
                break;
            case 32:
                coerceValue(mySetlength_scalefactorcurveattrib, value);
                break;
            case 33:
                coerceValue(mySetlength_scalefactorattrib, value);
                break;
            case 34:
                coerceValue(mySetlength_scalefactortexture, value);
                break;
            case 35:
                coerceValue(mySetlength_scalefactorrandmin, value);
                break;
            case 36:
                coerceValue(mySetlength_scalefactorrandminoverride, value);
                break;
            case 37:
                coerceValue(mySetlength_scalefactorrandmincurveattrib, value);
                break;
            case 38:
                coerceValue(mySetlength_scalefactorrandminattrib, value);
                break;
            case 39:
                coerceValue(mySetlength_scalefactorrandmintexture, value);
                break;
            case 40:
                coerceValue(mySetlength_scalefactorrandmax, value);
                break;
            case 41:
                coerceValue(mySetlength_scalefactorrandmaxoverride, value);
                break;
            case 42:
                coerceValue(mySetlength_scalefactorrandmaxcurveattrib, value);
                break;
            case 43:
                coerceValue(mySetlength_scalefactorrandmaxattrib, value);
                break;
            case 44:
                coerceValue(mySetlength_scalefactorrandmaxtexture, value);
                break;
            case 45:
                coerceValue(mySetlength_cullzerolen, value);
                break;
            case 46:
                coerceValue(mySetlength_cullthreshold, value);
                break;

        }
    }

    void        setParmValue(exint idx, const exint &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const fpreal &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Vector2D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Vector3D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Vector4D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Matrix2D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Matrix3D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Matrix4D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_StringHolder &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_SharedPtr<UT_Ramp> &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const PRM_DataItemHandle &value) 
    { doSetParmValue(idx, value); }

    virtual exint    getNumParms() const
    {
        return 47;
    }

    virtual const char *getParmName(exint fieldnum) const
    {
        switch (fieldnum)
        {
            case 0:
                return "uvattrib";
            case 1:
                return "grouptype";
            case 2:
                return "group";
            case 3:
                return "seed";
            case 4:
                return "vismasks";
            case 5:
                return "blend";
            case 6:
                return "blendoverride";
            case 7:
                return "blendcurveattrib";
            case 8:
                return "blendattrib";
            case 9:
                return "blendtexture";
            case 10:
                return "op";
            case 11:
                return "setlength_mode";
            case 12:
                return "setlength_method";
            case 13:
                return "setlength_blend";
            case 14:
                return "setlength_randomize";
            case 15:
                return "setlength_length";
            case 16:
                return "setlength_lengthoverride";
            case 17:
                return "setlength_lengthcurveattrib";
            case 18:
                return "setlength_lengthattrib";
            case 19:
                return "setlength_lengthtexture";
            case 20:
                return "setlength_lengthrandmin";
            case 21:
                return "setlength_lengthrandminoverride";
            case 22:
                return "setlength_lengthrandmincurveattrib";
            case 23:
                return "setlength_lengthrandminattrib";
            case 24:
                return "setlength_lengthrandmintexture";
            case 25:
                return "setlength_lengthrandmax";
            case 26:
                return "setlength_lengthrandmaxoverride";
            case 27:
                return "setlength_lengthrandmaxcurveattrib";
            case 28:
                return "setlength_lengthrandmaxattrib";
            case 29:
                return "setlength_lengthrandmaxtexture";
            case 30:
                return "setlength_scalefactor";
            case 31:
                return "setlength_scalefactoroverride";
            case 32:
                return "setlength_scalefactorcurveattrib";
            case 33:
                return "setlength_scalefactorattrib";
            case 34:
                return "setlength_scalefactortexture";
            case 35:
                return "setlength_scalefactorrandmin";
            case 36:
                return "setlength_scalefactorrandminoverride";
            case 37:
                return "setlength_scalefactorrandmincurveattrib";
            case 38:
                return "setlength_scalefactorrandminattrib";
            case 39:
                return "setlength_scalefactorrandmintexture";
            case 40:
                return "setlength_scalefactorrandmax";
            case 41:
                return "setlength_scalefactorrandmaxoverride";
            case 42:
                return "setlength_scalefactorrandmaxcurveattrib";
            case 43:
                return "setlength_scalefactorrandmaxattrib";
            case 44:
                return "setlength_scalefactorrandmaxtexture";
            case 45:
                return "setlength_cullzerolen";
            case 46:
                return "setlength_cullthreshold";

        }
        return 0;
    }

    virtual ParmType getParmType(exint fieldnum) const
    {
        switch (fieldnum)
        {
                case 0:
                    return PARM_STRING;
                case 1:
                    return PARM_INTEGER;
                case 2:
                    return PARM_STRING;
                case 3:
                    return PARM_FLOAT;
                case 4:
                    return PARM_INTEGER;
                case 5:
                    return PARM_FLOAT;
                case 6:
                    return PARM_INTEGER;
                case 7:
                    return PARM_STRING;
                case 8:
                    return PARM_STRING;
                case 9:
                    return PARM_STRING;
                case 10:
                    return PARM_INTEGER;
                case 11:
                    return PARM_INTEGER;
                case 12:
                    return PARM_INTEGER;
                case 13:
                    return PARM_FLOAT;
                case 14:
                    return PARM_INTEGER;
                case 15:
                    return PARM_FLOAT;
                case 16:
                    return PARM_INTEGER;
                case 17:
                    return PARM_STRING;
                case 18:
                    return PARM_STRING;
                case 19:
                    return PARM_STRING;
                case 20:
                    return PARM_FLOAT;
                case 21:
                    return PARM_INTEGER;
                case 22:
                    return PARM_STRING;
                case 23:
                    return PARM_STRING;
                case 24:
                    return PARM_STRING;
                case 25:
                    return PARM_FLOAT;
                case 26:
                    return PARM_INTEGER;
                case 27:
                    return PARM_STRING;
                case 28:
                    return PARM_STRING;
                case 29:
                    return PARM_STRING;
                case 30:
                    return PARM_FLOAT;
                case 31:
                    return PARM_INTEGER;
                case 32:
                    return PARM_STRING;
                case 33:
                    return PARM_STRING;
                case 34:
                    return PARM_STRING;
                case 35:
                    return PARM_FLOAT;
                case 36:
                    return PARM_INTEGER;
                case 37:
                    return PARM_STRING;
                case 38:
                    return PARM_STRING;
                case 39:
                    return PARM_STRING;
                case 40:
                    return PARM_FLOAT;
                case 41:
                    return PARM_INTEGER;
                case 42:
                    return PARM_STRING;
                case 43:
                    return PARM_STRING;
                case 44:
                    return PARM_STRING;
                case 45:
                    return PARM_INTEGER;
                case 46:
                    return PARM_FLOAT;

        }
        return PARM_UNSUPPORTED;
    }

    // Boiler plate to load individual types.
    static void  loadData(UT_IStream &is, int64 &v)
    { is.bread(&v, 1); }
    static void  loadData(UT_IStream &is, bool &v)
    { int64     iv; is.bread(&iv, 1); v = iv; }
    static void  loadData(UT_IStream &is, fpreal64 &v)
    { is.bread<fpreal64>(&v, 1); }
    static void  loadData(UT_IStream &is, UT_Vector2D &v)
    { is.bread<fpreal64>(&v.x(), 1); is.bread<fpreal64>(&v.y(), 1); }
    static void  loadData(UT_IStream &is, UT_Vector3D &v)
    { is.bread<fpreal64>(&v.x(), 1); is.bread<fpreal64>(&v.y(), 1);
      is.bread<fpreal64>(&v.z(), 1); }
    static void  loadData(UT_IStream &is, UT_Vector4D &v)
    { is.bread<fpreal64>(&v.x(), 1); is.bread<fpreal64>(&v.y(), 1);
      is.bread<fpreal64>(&v.z(), 1); is.bread<fpreal64>(&v.w(), 1); }
    static void  loadData(UT_IStream &is, UT_Matrix2D &v)
    { for (int r = 0; r < 2; r++) for (int c = 0; c < 2; c++) is.bread<fpreal64>(&v(r, c), 1); }
    static void  loadData(UT_IStream &is, UT_Matrix3D &v)
    { for (int r = 0; r < 3; r++) for (int c = 0; c < 3; c++) is.bread<fpreal64>(&v(r, c), 1); }
    static void  loadData(UT_IStream &is, UT_Matrix4D &v)
    { for (int r = 0; r < 4; r++) for (int c = 0; c < 4; c++) is.bread<fpreal64>(&v(r, c), 1); }
    static void  loadData(UT_IStream &is, UT_Vector2I &v)
    { is.bread<int64>(&v.x(), 1); is.bread<int64>(&v.y(), 1); }
    static void  loadData(UT_IStream &is, UT_Vector3I &v)
    { is.bread<int64>(&v.x(), 1); is.bread<int64>(&v.y(), 1);
      is.bread<int64>(&v.z(), 1); }
    static void  loadData(UT_IStream &is, UT_Vector4I &v)
    { is.bread<int64>(&v.x(), 1); is.bread<int64>(&v.y(), 1);
      is.bread<int64>(&v.z(), 1); is.bread<int64>(&v.w(), 1); }
    static void  loadData(UT_IStream &is, UT_StringHolder &v)
    { is.bread(v); }
    static void  loadData(UT_IStream &is, UT_SharedPtr<UT_Ramp> &v)
    {   UT_StringHolder   rampdata;
        loadData(is, rampdata);
        if (rampdata.isstring())
        {
            v.reset(new UT_Ramp());
            UT_IStream  istr((const char *) rampdata, rampdata.length(), UT_ISTREAM_ASCII);
            v->load(istr);
        }
        else v.reset();
    }
    static void  loadData(UT_IStream &is, PRM_DataItemHandle &v)
    {   UT_StringHolder   data;
        loadData(is, data);
        if (data.isstring())
        {
            // Find the data type.
            char *colon = UT_StringWrap(data).findChar(':');
            if (colon)
            {
                int             typelen = colon - data.buffer();
                UT_WorkBuffer   type;
                type.strncpy(data.buffer(), typelen);
                UT_IStream  istr(((const char *) data) + typelen + 1, data.length() - (typelen + 1), UT_ISTREAM_BINARY);
                
                v = PRM_DataFactory::parseBinary(type.buffer(), istr);
            }
        }
        else v.reset();
    }

    static void  saveData(std::ostream &os, int64 v)
    { UTwrite(os, &v); }
    static void  saveData(std::ostream &os, bool v)
    { int64 iv = v; UTwrite(os, &iv); }
    static void  saveData(std::ostream &os, fpreal64 v)
    { UTwrite<fpreal64>(os, &v); }
    static void  saveData(std::ostream &os, UT_Vector2D v)
    { UTwrite<fpreal64>(os, &v.x()); UTwrite<fpreal64>(os, &v.y()); }
    static void  saveData(std::ostream &os, UT_Vector3D v)
    { UTwrite<fpreal64>(os, &v.x()); UTwrite<fpreal64>(os, &v.y());
      UTwrite<fpreal64>(os, &v.z()); }
    static void  saveData(std::ostream &os, UT_Vector4D v)
    { UTwrite<fpreal64>(os, &v.x()); UTwrite<fpreal64>(os, &v.y());
      UTwrite<fpreal64>(os, &v.z()); UTwrite<fpreal64>(os, &v.w()); }
    static void  saveData(std::ostream &os, UT_Matrix2D v)
    { for (int r = 0; r < 2; r++) for (int c = 0; c < 2; c++) UTwrite<fpreal64>(os, &v(r, c)); }
    static void  saveData(std::ostream &os, UT_Matrix3D v)
    { for (int r = 0; r < 3; r++) for (int c = 0; c < 3; c++) UTwrite<fpreal64>(os, &v(r, c)); }
    static void  saveData(std::ostream &os, UT_Matrix4D v)
    { for (int r = 0; r < 4; r++) for (int c = 0; c < 4; c++) UTwrite<fpreal64>(os, &v(r, c)); }
    static void  saveData(std::ostream &os, UT_StringHolder s)
    { UT_StringWrap(s).saveBinary(os); }
    static void  saveData(std::ostream &os, UT_SharedPtr<UT_Ramp> s)
    {   UT_StringHolder         result;
        UT_OStringStream        ostr;
        if (s) s->save(ostr);
        result = ostr.str();
        saveData(os, result);
    }
    static void  saveData(std::ostream &os, PRM_DataItemHandle s)
    {   UT_StringHolder         result;
        UT_OStringStream        ostr;
        if (s) 
        {
            ostr << s->getDataTypeToken();
            ostr << ":";
            s->saveBinary(ostr);
        }
        result = ostr.str();
        saveData(os, result);
    }


    void         save(std::ostream &os) const
    {
        int32           v = version();
        UTwrite(os, &v);
        saveData(os, myUvattrib);
        saveData(os, myGrouptype);
        saveData(os, myGroup);
        saveData(os, mySeed);
        saveData(os, myVismasks);
        saveData(os, myBlend);
        saveData(os, myBlendoverride);
        saveData(os, myBlendcurveattrib);
        saveData(os, myBlendattrib);
        saveData(os, myBlendtexture);
        saveData(os, myOp);
        saveData(os, mySetlength_mode);
        saveData(os, mySetlength_method);
        saveData(os, mySetlength_blend);
        saveData(os, mySetlength_randomize);
        saveData(os, mySetlength_length);
        saveData(os, mySetlength_lengthoverride);
        saveData(os, mySetlength_lengthcurveattrib);
        saveData(os, mySetlength_lengthattrib);
        saveData(os, mySetlength_lengthtexture);
        saveData(os, mySetlength_lengthrandmin);
        saveData(os, mySetlength_lengthrandminoverride);
        saveData(os, mySetlength_lengthrandmincurveattrib);
        saveData(os, mySetlength_lengthrandminattrib);
        saveData(os, mySetlength_lengthrandmintexture);
        saveData(os, mySetlength_lengthrandmax);
        saveData(os, mySetlength_lengthrandmaxoverride);
        saveData(os, mySetlength_lengthrandmaxcurveattrib);
        saveData(os, mySetlength_lengthrandmaxattrib);
        saveData(os, mySetlength_lengthrandmaxtexture);
        saveData(os, mySetlength_scalefactor);
        saveData(os, mySetlength_scalefactoroverride);
        saveData(os, mySetlength_scalefactorcurveattrib);
        saveData(os, mySetlength_scalefactorattrib);
        saveData(os, mySetlength_scalefactortexture);
        saveData(os, mySetlength_scalefactorrandmin);
        saveData(os, mySetlength_scalefactorrandminoverride);
        saveData(os, mySetlength_scalefactorrandmincurveattrib);
        saveData(os, mySetlength_scalefactorrandminattrib);
        saveData(os, mySetlength_scalefactorrandmintexture);
        saveData(os, mySetlength_scalefactorrandmax);
        saveData(os, mySetlength_scalefactorrandmaxoverride);
        saveData(os, mySetlength_scalefactorrandmaxcurveattrib);
        saveData(os, mySetlength_scalefactorrandmaxattrib);
        saveData(os, mySetlength_scalefactorrandmaxtexture);
        saveData(os, mySetlength_cullzerolen);
        saveData(os, mySetlength_cullthreshold);

    }

    bool         load(UT_IStream &is)
    {
        int32           v;
        is.bread(&v, 1);
        if (version() != v)
        {
            // Fail incompatible versions
            return false;
        }
        loadData(is, myUvattrib);
        loadData(is, myGrouptype);
        loadData(is, myGroup);
        loadData(is, mySeed);
        loadData(is, myVismasks);
        loadData(is, myBlend);
        loadData(is, myBlendoverride);
        loadData(is, myBlendcurveattrib);
        loadData(is, myBlendattrib);
        loadData(is, myBlendtexture);
        loadData(is, myOp);
        loadData(is, mySetlength_mode);
        loadData(is, mySetlength_method);
        loadData(is, mySetlength_blend);
        loadData(is, mySetlength_randomize);
        loadData(is, mySetlength_length);
        loadData(is, mySetlength_lengthoverride);
        loadData(is, mySetlength_lengthcurveattrib);
        loadData(is, mySetlength_lengthattrib);
        loadData(is, mySetlength_lengthtexture);
        loadData(is, mySetlength_lengthrandmin);
        loadData(is, mySetlength_lengthrandminoverride);
        loadData(is, mySetlength_lengthrandmincurveattrib);
        loadData(is, mySetlength_lengthrandminattrib);
        loadData(is, mySetlength_lengthrandmintexture);
        loadData(is, mySetlength_lengthrandmax);
        loadData(is, mySetlength_lengthrandmaxoverride);
        loadData(is, mySetlength_lengthrandmaxcurveattrib);
        loadData(is, mySetlength_lengthrandmaxattrib);
        loadData(is, mySetlength_lengthrandmaxtexture);
        loadData(is, mySetlength_scalefactor);
        loadData(is, mySetlength_scalefactoroverride);
        loadData(is, mySetlength_scalefactorcurveattrib);
        loadData(is, mySetlength_scalefactorattrib);
        loadData(is, mySetlength_scalefactortexture);
        loadData(is, mySetlength_scalefactorrandmin);
        loadData(is, mySetlength_scalefactorrandminoverride);
        loadData(is, mySetlength_scalefactorrandmincurveattrib);
        loadData(is, mySetlength_scalefactorrandminattrib);
        loadData(is, mySetlength_scalefactorrandmintexture);
        loadData(is, mySetlength_scalefactorrandmax);
        loadData(is, mySetlength_scalefactorrandmaxoverride);
        loadData(is, mySetlength_scalefactorrandmaxcurveattrib);
        loadData(is, mySetlength_scalefactorrandmaxattrib);
        loadData(is, mySetlength_scalefactorrandmaxtexture);
        loadData(is, mySetlength_cullzerolen);
        loadData(is, mySetlength_cullthreshold);

        return true;
    }

    const UT_StringHolder & getUvattrib() const { return myUvattrib; }
    void setUvattrib(const UT_StringHolder & val) { myUvattrib = val; }
    UT_StringHolder opUvattrib(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getUvattrib();
        UT_StringHolder result;
        OP_Utils::evalOpParm(result, thissop, "uvattrib", cookparms.getCookTime(), 0);
        return result;
    }
    Grouptype getGrouptype() const { return Grouptype(myGrouptype); }
    void setGrouptype(Grouptype val) { myGrouptype = int64(val); }
    Grouptype opGrouptype(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getGrouptype();
        int64 result;
        OP_Utils::evalOpParm(result, thissop, "grouptype", cookparms.getCookTime(), 0);
        return Grouptype(result);
    }
    const UT_StringHolder & getGroup() const { return myGroup; }
    void setGroup(const UT_StringHolder & val) { myGroup = val; }
    UT_StringHolder opGroup(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getGroup();
        UT_StringHolder result;
        OP_Utils::evalOpParm(result, thissop, "group", cookparms.getCookTime(), 0);
        return result;
    }
    fpreal64 getSeed() const { return mySeed; }
    void setSeed(fpreal64 val) { mySeed = val; }
    fpreal64 opSeed(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getSeed();
        fpreal64 result;
        OP_Utils::evalOpParm(result, thissop, "seed", cookparms.getCookTime(), 0);
        return result;
    }
    bool getVismasks() const { return myVismasks; }
    void setVismasks(bool val) { myVismasks = val; }
    bool opVismasks(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getVismasks();
        bool result;
        OP_Utils::evalOpParm(result, thissop, "vismasks", cookparms.getCookTime(), 0);
        return result;
    }
    fpreal64 getBlend() const { return myBlend; }
    void setBlend(fpreal64 val) { myBlend = val; }
    fpreal64 opBlend(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getBlend();
        fpreal64 result;
        OP_Utils::evalOpParm(result, thissop, "blend", cookparms.getCookTime(), 0);
        return result;
    }
    Blendoverride getBlendoverride() const { return Blendoverride(myBlendoverride); }
    void setBlendoverride(Blendoverride val) { myBlendoverride = int64(val); }
    Blendoverride opBlendoverride(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getBlendoverride();
        int64 result;
        OP_Utils::evalOpParm(result, thissop, "blendoverride", cookparms.getCookTime(), 0);
        return Blendoverride(result);
    }
    const UT_StringHolder & getBlendcurveattrib() const { return myBlendcurveattrib; }
    void setBlendcurveattrib(const UT_StringHolder & val) { myBlendcurveattrib = val; }
    UT_StringHolder opBlendcurveattrib(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getBlendcurveattrib();
        UT_StringHolder result;
        OP_Utils::evalOpParm(result, thissop, "blendcurveattrib", cookparms.getCookTime(), 0);
        return result;
    }
    const UT_StringHolder & getBlendattrib() const { return myBlendattrib; }
    void setBlendattrib(const UT_StringHolder & val) { myBlendattrib = val; }
    UT_StringHolder opBlendattrib(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getBlendattrib();
        UT_StringHolder result;
        OP_Utils::evalOpParm(result, thissop, "blendattrib", cookparms.getCookTime(), 0);
        return result;
    }
    const UT_StringHolder & getBlendtexture() const { return myBlendtexture; }
    void setBlendtexture(const UT_StringHolder & val) { myBlendtexture = val; }
    UT_StringHolder opBlendtexture(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getBlendtexture();
        UT_StringHolder result;
        OP_Utils::evalOpParm(result, thissop, "blendtexture", cookparms.getCookTime(), 0);
        return result;
    }
    Op getOp() const { return Op(myOp); }
    void setOp(Op val) { myOp = int64(val); }
    Op opOp(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getOp();
        int64 result;
        OP_Utils::evalOpParm(result, thissop, "op", cookparms.getCookTime(), 0);
        return Op(result);
    }
    Setlength_mode getSetlength_mode() const { return Setlength_mode(mySetlength_mode); }
    void setSetlength_mode(Setlength_mode val) { mySetlength_mode = int64(val); }
    Setlength_mode opSetlength_mode(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getSetlength_mode();
        int64 result;
        OP_Utils::evalOpParm(result, thissop, "setlength_mode", cookparms.getCookTime(), 0);
        return Setlength_mode(result);
    }
    Setlength_method getSetlength_method() const { return Setlength_method(mySetlength_method); }
    void setSetlength_method(Setlength_method val) { mySetlength_method = int64(val); }
    Setlength_method opSetlength_method(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getSetlength_method();
        int64 result;
        OP_Utils::evalOpParm(result, thissop, "setlength_method", cookparms.getCookTime(), 0);
        return Setlength_method(result);
    }
    fpreal64 getSetlength_blend() const { return mySetlength_blend; }
    void setSetlength_blend(fpreal64 val) { mySetlength_blend = val; }
    fpreal64 opSetlength_blend(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getSetlength_blend();
        fpreal64 result;
        OP_Utils::evalOpParm(result, thissop, "setlength_blend", cookparms.getCookTime(), 0);
        return result;
    }
    bool getSetlength_randomize() const { return mySetlength_randomize; }
    void setSetlength_randomize(bool val) { mySetlength_randomize = val; }
    bool opSetlength_randomize(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getSetlength_randomize();
        bool result;
        OP_Utils::evalOpParm(result, thissop, "setlength_randomize", cookparms.getCookTime(), 0);
        return result;
    }
    fpreal64 getSetlength_length() const { return mySetlength_length; }
    void setSetlength_length(fpreal64 val) { mySetlength_length = val; }
    fpreal64 opSetlength_length(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getSetlength_length();
        fpreal64 result;
        OP_Utils::evalOpParm(result, thissop, "setlength_length", cookparms.getCookTime(), 0);
        return result;
    }
    Setlength_lengthoverride getSetlength_lengthoverride() const { return Setlength_lengthoverride(mySetlength_lengthoverride); }
    void setSetlength_lengthoverride(Setlength_lengthoverride val) { mySetlength_lengthoverride = int64(val); }
    Setlength_lengthoverride opSetlength_lengthoverride(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getSetlength_lengthoverride();
        int64 result;
        OP_Utils::evalOpParm(result, thissop, "setlength_lengthoverride", cookparms.getCookTime(), 0);
        return Setlength_lengthoverride(result);
    }
    const UT_StringHolder & getSetlength_lengthcurveattrib() const { return mySetlength_lengthcurveattrib; }
    void setSetlength_lengthcurveattrib(const UT_StringHolder & val) { mySetlength_lengthcurveattrib = val; }
    UT_StringHolder opSetlength_lengthcurveattrib(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getSetlength_lengthcurveattrib();
        UT_StringHolder result;
        OP_Utils::evalOpParm(result, thissop, "setlength_lengthcurveattrib", cookparms.getCookTime(), 0);
        return result;
    }
    const UT_StringHolder & getSetlength_lengthattrib() const { return mySetlength_lengthattrib; }
    void setSetlength_lengthattrib(const UT_StringHolder & val) { mySetlength_lengthattrib = val; }
    UT_StringHolder opSetlength_lengthattrib(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getSetlength_lengthattrib();
        UT_StringHolder result;
        OP_Utils::evalOpParm(result, thissop, "setlength_lengthattrib", cookparms.getCookTime(), 0);
        return result;
    }
    const UT_StringHolder & getSetlength_lengthtexture() const { return mySetlength_lengthtexture; }
    void setSetlength_lengthtexture(const UT_StringHolder & val) { mySetlength_lengthtexture = val; }
    UT_StringHolder opSetlength_lengthtexture(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getSetlength_lengthtexture();
        UT_StringHolder result;
        OP_Utils::evalOpParm(result, thissop, "setlength_lengthtexture", cookparms.getCookTime(), 0);
        return result;
    }
    fpreal64 getSetlength_lengthrandmin() const { return mySetlength_lengthrandmin; }
    void setSetlength_lengthrandmin(fpreal64 val) { mySetlength_lengthrandmin = val; }
    fpreal64 opSetlength_lengthrandmin(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getSetlength_lengthrandmin();
        fpreal64 result;
        OP_Utils::evalOpParm(result, thissop, "setlength_lengthrandmin", cookparms.getCookTime(), 0);
        return result;
    }
    Setlength_lengthrandminoverride getSetlength_lengthrandminoverride() const { return Setlength_lengthrandminoverride(mySetlength_lengthrandminoverride); }
    void setSetlength_lengthrandminoverride(Setlength_lengthrandminoverride val) { mySetlength_lengthrandminoverride = int64(val); }
    Setlength_lengthrandminoverride opSetlength_lengthrandminoverride(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getSetlength_lengthrandminoverride();
        int64 result;
        OP_Utils::evalOpParm(result, thissop, "setlength_lengthrandminoverride", cookparms.getCookTime(), 0);
        return Setlength_lengthrandminoverride(result);
    }
    const UT_StringHolder & getSetlength_lengthrandmincurveattrib() const { return mySetlength_lengthrandmincurveattrib; }
    void setSetlength_lengthrandmincurveattrib(const UT_StringHolder & val) { mySetlength_lengthrandmincurveattrib = val; }
    UT_StringHolder opSetlength_lengthrandmincurveattrib(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getSetlength_lengthrandmincurveattrib();
        UT_StringHolder result;
        OP_Utils::evalOpParm(result, thissop, "setlength_lengthrandmincurveattrib", cookparms.getCookTime(), 0);
        return result;
    }
    const UT_StringHolder & getSetlength_lengthrandminattrib() const { return mySetlength_lengthrandminattrib; }
    void setSetlength_lengthrandminattrib(const UT_StringHolder & val) { mySetlength_lengthrandminattrib = val; }
    UT_StringHolder opSetlength_lengthrandminattrib(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getSetlength_lengthrandminattrib();
        UT_StringHolder result;
        OP_Utils::evalOpParm(result, thissop, "setlength_lengthrandminattrib", cookparms.getCookTime(), 0);
        return result;
    }
    const UT_StringHolder & getSetlength_lengthrandmintexture() const { return mySetlength_lengthrandmintexture; }
    void setSetlength_lengthrandmintexture(const UT_StringHolder & val) { mySetlength_lengthrandmintexture = val; }
    UT_StringHolder opSetlength_lengthrandmintexture(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getSetlength_lengthrandmintexture();
        UT_StringHolder result;
        OP_Utils::evalOpParm(result, thissop, "setlength_lengthrandmintexture", cookparms.getCookTime(), 0);
        return result;
    }
    fpreal64 getSetlength_lengthrandmax() const { return mySetlength_lengthrandmax; }
    void setSetlength_lengthrandmax(fpreal64 val) { mySetlength_lengthrandmax = val; }
    fpreal64 opSetlength_lengthrandmax(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getSetlength_lengthrandmax();
        fpreal64 result;
        OP_Utils::evalOpParm(result, thissop, "setlength_lengthrandmax", cookparms.getCookTime(), 0);
        return result;
    }
    Setlength_lengthrandmaxoverride getSetlength_lengthrandmaxoverride() const { return Setlength_lengthrandmaxoverride(mySetlength_lengthrandmaxoverride); }
    void setSetlength_lengthrandmaxoverride(Setlength_lengthrandmaxoverride val) { mySetlength_lengthrandmaxoverride = int64(val); }
    Setlength_lengthrandmaxoverride opSetlength_lengthrandmaxoverride(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getSetlength_lengthrandmaxoverride();
        int64 result;
        OP_Utils::evalOpParm(result, thissop, "setlength_lengthrandmaxoverride", cookparms.getCookTime(), 0);
        return Setlength_lengthrandmaxoverride(result);
    }
    const UT_StringHolder & getSetlength_lengthrandmaxcurveattrib() const { return mySetlength_lengthrandmaxcurveattrib; }
    void setSetlength_lengthrandmaxcurveattrib(const UT_StringHolder & val) { mySetlength_lengthrandmaxcurveattrib = val; }
    UT_StringHolder opSetlength_lengthrandmaxcurveattrib(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getSetlength_lengthrandmaxcurveattrib();
        UT_StringHolder result;
        OP_Utils::evalOpParm(result, thissop, "setlength_lengthrandmaxcurveattrib", cookparms.getCookTime(), 0);
        return result;
    }
    const UT_StringHolder & getSetlength_lengthrandmaxattrib() const { return mySetlength_lengthrandmaxattrib; }
    void setSetlength_lengthrandmaxattrib(const UT_StringHolder & val) { mySetlength_lengthrandmaxattrib = val; }
    UT_StringHolder opSetlength_lengthrandmaxattrib(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getSetlength_lengthrandmaxattrib();
        UT_StringHolder result;
        OP_Utils::evalOpParm(result, thissop, "setlength_lengthrandmaxattrib", cookparms.getCookTime(), 0);
        return result;
    }
    const UT_StringHolder & getSetlength_lengthrandmaxtexture() const { return mySetlength_lengthrandmaxtexture; }
    void setSetlength_lengthrandmaxtexture(const UT_StringHolder & val) { mySetlength_lengthrandmaxtexture = val; }
    UT_StringHolder opSetlength_lengthrandmaxtexture(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getSetlength_lengthrandmaxtexture();
        UT_StringHolder result;
        OP_Utils::evalOpParm(result, thissop, "setlength_lengthrandmaxtexture", cookparms.getCookTime(), 0);
        return result;
    }
    fpreal64 getSetlength_scalefactor() const { return mySetlength_scalefactor; }
    void setSetlength_scalefactor(fpreal64 val) { mySetlength_scalefactor = val; }
    fpreal64 opSetlength_scalefactor(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getSetlength_scalefactor();
        fpreal64 result;
        OP_Utils::evalOpParm(result, thissop, "setlength_scalefactor", cookparms.getCookTime(), 0);
        return result;
    }
    Setlength_scalefactoroverride getSetlength_scalefactoroverride() const { return Setlength_scalefactoroverride(mySetlength_scalefactoroverride); }
    void setSetlength_scalefactoroverride(Setlength_scalefactoroverride val) { mySetlength_scalefactoroverride = int64(val); }
    Setlength_scalefactoroverride opSetlength_scalefactoroverride(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getSetlength_scalefactoroverride();
        int64 result;
        OP_Utils::evalOpParm(result, thissop, "setlength_scalefactoroverride", cookparms.getCookTime(), 0);
        return Setlength_scalefactoroverride(result);
    }
    const UT_StringHolder & getSetlength_scalefactorcurveattrib() const { return mySetlength_scalefactorcurveattrib; }
    void setSetlength_scalefactorcurveattrib(const UT_StringHolder & val) { mySetlength_scalefactorcurveattrib = val; }
    UT_StringHolder opSetlength_scalefactorcurveattrib(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getSetlength_scalefactorcurveattrib();
        UT_StringHolder result;
        OP_Utils::evalOpParm(result, thissop, "setlength_scalefactorcurveattrib", cookparms.getCookTime(), 0);
        return result;
    }
    const UT_StringHolder & getSetlength_scalefactorattrib() const { return mySetlength_scalefactorattrib; }
    void setSetlength_scalefactorattrib(const UT_StringHolder & val) { mySetlength_scalefactorattrib = val; }
    UT_StringHolder opSetlength_scalefactorattrib(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getSetlength_scalefactorattrib();
        UT_StringHolder result;
        OP_Utils::evalOpParm(result, thissop, "setlength_scalefactorattrib", cookparms.getCookTime(), 0);
        return result;
    }
    const UT_StringHolder & getSetlength_scalefactortexture() const { return mySetlength_scalefactortexture; }
    void setSetlength_scalefactortexture(const UT_StringHolder & val) { mySetlength_scalefactortexture = val; }
    UT_StringHolder opSetlength_scalefactortexture(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getSetlength_scalefactortexture();
        UT_StringHolder result;
        OP_Utils::evalOpParm(result, thissop, "setlength_scalefactortexture", cookparms.getCookTime(), 0);
        return result;
    }
    fpreal64 getSetlength_scalefactorrandmin() const { return mySetlength_scalefactorrandmin; }
    void setSetlength_scalefactorrandmin(fpreal64 val) { mySetlength_scalefactorrandmin = val; }
    fpreal64 opSetlength_scalefactorrandmin(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getSetlength_scalefactorrandmin();
        fpreal64 result;
        OP_Utils::evalOpParm(result, thissop, "setlength_scalefactorrandmin", cookparms.getCookTime(), 0);
        return result;
    }
    Setlength_scalefactorrandminoverride getSetlength_scalefactorrandminoverride() const { return Setlength_scalefactorrandminoverride(mySetlength_scalefactorrandminoverride); }
    void setSetlength_scalefactorrandminoverride(Setlength_scalefactorrandminoverride val) { mySetlength_scalefactorrandminoverride = int64(val); }
    Setlength_scalefactorrandminoverride opSetlength_scalefactorrandminoverride(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getSetlength_scalefactorrandminoverride();
        int64 result;
        OP_Utils::evalOpParm(result, thissop, "setlength_scalefactorrandminoverride", cookparms.getCookTime(), 0);
        return Setlength_scalefactorrandminoverride(result);
    }
    const UT_StringHolder & getSetlength_scalefactorrandmincurveattrib() const { return mySetlength_scalefactorrandmincurveattrib; }
    void setSetlength_scalefactorrandmincurveattrib(const UT_StringHolder & val) { mySetlength_scalefactorrandmincurveattrib = val; }
    UT_StringHolder opSetlength_scalefactorrandmincurveattrib(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getSetlength_scalefactorrandmincurveattrib();
        UT_StringHolder result;
        OP_Utils::evalOpParm(result, thissop, "setlength_scalefactorrandmincurveattrib", cookparms.getCookTime(), 0);
        return result;
    }
    const UT_StringHolder & getSetlength_scalefactorrandminattrib() const { return mySetlength_scalefactorrandminattrib; }
    void setSetlength_scalefactorrandminattrib(const UT_StringHolder & val) { mySetlength_scalefactorrandminattrib = val; }
    UT_StringHolder opSetlength_scalefactorrandminattrib(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getSetlength_scalefactorrandminattrib();
        UT_StringHolder result;
        OP_Utils::evalOpParm(result, thissop, "setlength_scalefactorrandminattrib", cookparms.getCookTime(), 0);
        return result;
    }
    const UT_StringHolder & getSetlength_scalefactorrandmintexture() const { return mySetlength_scalefactorrandmintexture; }
    void setSetlength_scalefactorrandmintexture(const UT_StringHolder & val) { mySetlength_scalefactorrandmintexture = val; }
    UT_StringHolder opSetlength_scalefactorrandmintexture(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getSetlength_scalefactorrandmintexture();
        UT_StringHolder result;
        OP_Utils::evalOpParm(result, thissop, "setlength_scalefactorrandmintexture", cookparms.getCookTime(), 0);
        return result;
    }
    fpreal64 getSetlength_scalefactorrandmax() const { return mySetlength_scalefactorrandmax; }
    void setSetlength_scalefactorrandmax(fpreal64 val) { mySetlength_scalefactorrandmax = val; }
    fpreal64 opSetlength_scalefactorrandmax(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getSetlength_scalefactorrandmax();
        fpreal64 result;
        OP_Utils::evalOpParm(result, thissop, "setlength_scalefactorrandmax", cookparms.getCookTime(), 0);
        return result;
    }
    Setlength_scalefactorrandmaxoverride getSetlength_scalefactorrandmaxoverride() const { return Setlength_scalefactorrandmaxoverride(mySetlength_scalefactorrandmaxoverride); }
    void setSetlength_scalefactorrandmaxoverride(Setlength_scalefactorrandmaxoverride val) { mySetlength_scalefactorrandmaxoverride = int64(val); }
    Setlength_scalefactorrandmaxoverride opSetlength_scalefactorrandmaxoverride(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getSetlength_scalefactorrandmaxoverride();
        int64 result;
        OP_Utils::evalOpParm(result, thissop, "setlength_scalefactorrandmaxoverride", cookparms.getCookTime(), 0);
        return Setlength_scalefactorrandmaxoverride(result);
    }
    const UT_StringHolder & getSetlength_scalefactorrandmaxcurveattrib() const { return mySetlength_scalefactorrandmaxcurveattrib; }
    void setSetlength_scalefactorrandmaxcurveattrib(const UT_StringHolder & val) { mySetlength_scalefactorrandmaxcurveattrib = val; }
    UT_StringHolder opSetlength_scalefactorrandmaxcurveattrib(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getSetlength_scalefactorrandmaxcurveattrib();
        UT_StringHolder result;
        OP_Utils::evalOpParm(result, thissop, "setlength_scalefactorrandmaxcurveattrib", cookparms.getCookTime(), 0);
        return result;
    }
    const UT_StringHolder & getSetlength_scalefactorrandmaxattrib() const { return mySetlength_scalefactorrandmaxattrib; }
    void setSetlength_scalefactorrandmaxattrib(const UT_StringHolder & val) { mySetlength_scalefactorrandmaxattrib = val; }
    UT_StringHolder opSetlength_scalefactorrandmaxattrib(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getSetlength_scalefactorrandmaxattrib();
        UT_StringHolder result;
        OP_Utils::evalOpParm(result, thissop, "setlength_scalefactorrandmaxattrib", cookparms.getCookTime(), 0);
        return result;
    }
    const UT_StringHolder & getSetlength_scalefactorrandmaxtexture() const { return mySetlength_scalefactorrandmaxtexture; }
    void setSetlength_scalefactorrandmaxtexture(const UT_StringHolder & val) { mySetlength_scalefactorrandmaxtexture = val; }
    UT_StringHolder opSetlength_scalefactorrandmaxtexture(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getSetlength_scalefactorrandmaxtexture();
        UT_StringHolder result;
        OP_Utils::evalOpParm(result, thissop, "setlength_scalefactorrandmaxtexture", cookparms.getCookTime(), 0);
        return result;
    }
    bool getSetlength_cullzerolen() const { return mySetlength_cullzerolen; }
    void setSetlength_cullzerolen(bool val) { mySetlength_cullzerolen = val; }
    bool opSetlength_cullzerolen(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getSetlength_cullzerolen();
        bool result;
        OP_Utils::evalOpParm(result, thissop, "setlength_cullzerolen", cookparms.getCookTime(), 0);
        return result;
    }
    fpreal64 getSetlength_cullthreshold() const { return mySetlength_cullthreshold; }
    void setSetlength_cullthreshold(fpreal64 val) { mySetlength_cullthreshold = val; }
    fpreal64 opSetlength_cullthreshold(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getSetlength_cullthreshold();
        fpreal64 result;
        OP_Utils::evalOpParm(result, thissop, "setlength_cullthreshold", cookparms.getCookTime(), 0);
        return result;
    }

private:
    UT_StringHolder myUvattrib;
    int64 myGrouptype;
    UT_StringHolder myGroup;
    fpreal64 mySeed;
    bool myVismasks;
    fpreal64 myBlend;
    int64 myBlendoverride;
    UT_StringHolder myBlendcurveattrib;
    UT_StringHolder myBlendattrib;
    UT_StringHolder myBlendtexture;
    int64 myOp;
    int64 mySetlength_mode;
    int64 mySetlength_method;
    fpreal64 mySetlength_blend;
    bool mySetlength_randomize;
    fpreal64 mySetlength_length;
    int64 mySetlength_lengthoverride;
    UT_StringHolder mySetlength_lengthcurveattrib;
    UT_StringHolder mySetlength_lengthattrib;
    UT_StringHolder mySetlength_lengthtexture;
    fpreal64 mySetlength_lengthrandmin;
    int64 mySetlength_lengthrandminoverride;
    UT_StringHolder mySetlength_lengthrandmincurveattrib;
    UT_StringHolder mySetlength_lengthrandminattrib;
    UT_StringHolder mySetlength_lengthrandmintexture;
    fpreal64 mySetlength_lengthrandmax;
    int64 mySetlength_lengthrandmaxoverride;
    UT_StringHolder mySetlength_lengthrandmaxcurveattrib;
    UT_StringHolder mySetlength_lengthrandmaxattrib;
    UT_StringHolder mySetlength_lengthrandmaxtexture;
    fpreal64 mySetlength_scalefactor;
    int64 mySetlength_scalefactoroverride;
    UT_StringHolder mySetlength_scalefactorcurveattrib;
    UT_StringHolder mySetlength_scalefactorattrib;
    UT_StringHolder mySetlength_scalefactortexture;
    fpreal64 mySetlength_scalefactorrandmin;
    int64 mySetlength_scalefactorrandminoverride;
    UT_StringHolder mySetlength_scalefactorrandmincurveattrib;
    UT_StringHolder mySetlength_scalefactorrandminattrib;
    UT_StringHolder mySetlength_scalefactorrandmintexture;
    fpreal64 mySetlength_scalefactorrandmax;
    int64 mySetlength_scalefactorrandmaxoverride;
    UT_StringHolder mySetlength_scalefactorrandmaxcurveattrib;
    UT_StringHolder mySetlength_scalefactorrandmaxattrib;
    UT_StringHolder mySetlength_scalefactorrandmaxtexture;
    bool mySetlength_cullzerolen;
    fpreal64 mySetlength_cullthreshold;

};
