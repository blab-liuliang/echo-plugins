/* Automagically Generated by generate_proto.py
 * Do not Edit
 */
#pragma once

#include <SOP/SOP_NodeVerb.h>
#include <OP/OP_Utils.h>
#include <PRM/PRM_Parm.h>
#include <UT/UT_IStream.h>
#include <UT/UT_NTStreamUtil.h>
#include <UT/UT_Ramp.h>
#include <UT/UT_SharedPtr.h>
#include <UT/UT_StringHolder.h>
#include <UT/UT_StringStream.h>
#include <UT/UT_VectorTypes.h>
#include <SYS/SYS_Types.h>

using namespace UT::Literal;

class DEP_MicroNode;
namespace SOP_VolumeVopEnums
{
    enum class Vexsrc
    {
        MYSELF = 0,
        SHOP,
        SCRIPT
    };
}


class SOP_API SOP_VolumeVopParms  : public SOP_NodeParms
{
public:
    static int version() { return 1; }
    struct Bindings
    {
        UT_StringHolder bindprimname;
        int64 bindprim;
        UT_StringHolder bindname;


        Bindings()
        {
            bindprimname = ""_sh;
            bindprim = 0;
            bindname = ""_sh;

        }

        bool operator==(const Bindings &src) const
        {
            if (bindprimname != src.bindprimname) return false;
            if (bindprim != src.bindprim) return false;
            if (bindname != src.bindname) return false;

            return true;
        }
        bool operator!=(const Bindings &src) const
        {
            return !operator==(src);
        }

    };

    UT_StringHolder createString(const UT_Array<Bindings> &list) const
    {
        UT_WorkBuffer   buf;

        buf.strcat("[ ");
        for (int i = 0; i < list.entries(); i++)
        {
            if (i)
                buf.strcat(", ");
            buf.strcat("( ");
            buf.append("");
            { UT_String tmp; tmp = UT_StringWrap(list(i).bindprimname).makeQuotedString('"'); buf.strcat(tmp); }
            buf.append(", ");
            buf.appendSprintf("%d", (int) list(i).bindprim);
            buf.append(", ");
            { UT_String tmp; tmp = UT_StringWrap(list(i).bindname).makeQuotedString('"'); buf.strcat(tmp); }

            buf.strcat(" )");
        }
        buf.strcat(" ]");

        UT_StringHolder result = buf;
        return result;
    }

    SOP_VolumeVopParms()
    {
        myVexsrc = 0;
        myShoppath = ""_sh;
        myScript = "null"_sh;
        myVop_compiler = "vcc -q $VOP_INCLUDEPATH -o $VOP_OBJECTFILE -e $VOP_ERRORFILE $VOP_SOURCEFILE"_sh;
        myVex_cwdpath = ""_sh;
        myVex_outputmask = "*"_sh;
        myVex_multithread = false;
        myVex_geometrygenerator = false;
        myVdb_signedflood = false;
        myAutobind = false;
        myBindeach = false;

    }

    explicit SOP_VolumeVopParms(const SOP_VolumeVopParms &) = default;

    virtual ~SOP_VolumeVopParms() {}

    bool operator==(const SOP_VolumeVopParms &src) const
    {
        if (myVexsrc != src.myVexsrc) return false;
        if (myShoppath != src.myShoppath) return false;
        if (myScript != src.myScript) return false;
        if (myVop_compiler != src.myVop_compiler) return false;
        if (myVex_cwdpath != src.myVex_cwdpath) return false;
        if (myVex_outputmask != src.myVex_outputmask) return false;
        if (myVex_multithread != src.myVex_multithread) return false;
        if (myVex_geometrygenerator != src.myVex_geometrygenerator) return false;
        if (myVdb_signedflood != src.myVdb_signedflood) return false;
        if (myAutobind != src.myAutobind) return false;
        if (myBindeach != src.myBindeach) return false;
        if (myBindings != src.myBindings) return false;

        return true;
    }
    bool operator!=(const SOP_VolumeVopParms &src) const
    {
        return !operator==(src);
    }
    using Vexsrc = SOP_VolumeVopEnums::Vexsrc;



    void        buildFromOp(const OP_Node *node, fpreal time, DEP_MicroNode *depnode)
    {
        if (true)
            OP_Utils::evalOpParm(myVexsrc, node, "vexsrc", time, 0);
        else myVexsrc = 0;
        if (true && ( (!(((int64(getVexsrc())!=1)))) ) )
            OP_Utils::evalOpParm(myShoppath, node, "shoppath", time, 0);
        else myShoppath = ""_sh;
        if (true && ( (!(((int64(getVexsrc())!=2)))) ) )
            OP_Utils::evalOpParm(myScript, node, "script", time, 0);
        else myScript = "null"_sh;
        if (true && ( (!(((int64(getVexsrc())!=0)))) ) )
            OP_Utils::evalOpParm(myVop_compiler, node, "vop_compiler", time, 0);
        else myVop_compiler = "vcc -q $VOP_INCLUDEPATH -o $VOP_OBJECTFILE -e $VOP_ERRORFILE $VOP_SOURCEFILE"_sh;
        if (true)
            OP_Utils::evalOpParm(myVex_cwdpath, node, "vex_cwdpath", time, 0);
        else myVex_cwdpath = ""_sh;
        if (true)
            OP_Utils::evalOpParm(myVex_outputmask, node, "vex_outputmask", time, 0);
        else myVex_outputmask = "*"_sh;
        if (true)
            OP_Utils::evalOpParm(myVex_multithread, node, "vex_multithread", time, 0);
        else myVex_multithread = false;
        if (true)
            OP_Utils::evalOpParm(myVex_geometrygenerator, node, "vex_geometrygenerator", time, 0);
        else myVex_geometrygenerator = false;
        if (true)
            OP_Utils::evalOpParm(myVdb_signedflood, node, "vdb_signedflood", time, 0);
        else myVdb_signedflood = false;
        if (true)
            OP_Utils::evalOpParm(myAutobind, node, "autobind", time, 0);
        else myAutobind = false;
        if (true && ( (!(((getAutobind()==1)))) ) )
            OP_Utils::evalOpParm(myBindeach, node, "bindeach", time, 0);
        else myBindeach = false;
            if (true && ( (!(((getAutobind()==1))||((getBindeach()==1)))) ) )
            {
                int64   length;
                OP_Utils::evalOpParm(length, node, "bindings", time, 0);
                myBindings.entries(length);
                for (exint i = 0; i < length; i++)
                {
                    int     parmidx = i+1;
                    auto && _curentry = myBindings(i);
                    (void) _curentry;
                    if (true && ( (!(((getAutobind()==1))||((getBindeach()==1)))) )  && ( (!(((getAutobind()==1))||((getBindeach()==1))||((getAutobind()==1))||((getBindeach()==1)))) ) )
                        OP_Utils::evalOpParmInst(myBindings(i).bindprimname, node, "bindprimname#", &parmidx, time, 0);
                    else myBindings(i).bindprimname = ""_sh;
                    if (true && ( (!(((getAutobind()==1))||((getBindeach()==1)))) )  && ( (!(((getAutobind()==1))||((getBindeach()==1))||((getAutobind()==1))||((getBindeach()==1)))) ) )
                        OP_Utils::evalOpParmInst(myBindings(i).bindprim, node, "bindprim#", &parmidx, time, 0);
                    else myBindings(i).bindprim = 0;
                    if (true && ( (!(((getAutobind()==1))||((getBindeach()==1)))) )  && ( (!(((getAutobind()==1))||((getBindeach()==1))||((getAutobind()==1))||((getBindeach()==1)))) ) )
                        OP_Utils::evalOpParmInst(myBindings(i).bindname, node, "bindname#", &parmidx, time, 0);
                    else myBindings(i).bindname = ""_sh;

                }
            }
            else
                myBindings.clear();

    }


    virtual void loadFromOpSubclass(const LoadParms &loadparms)
    {
        buildFromOp(loadparms.node(), loadparms.context().getTime(), loadparms.depnode());
    }


    virtual void copyFrom(const SOP_NodeParms *src)
    {
        *this = *((const SOP_VolumeVopParms *)src);
    }

    template <typename T>
    void
    doGetParmValue(exint idx, T &value) const
    {
        switch (idx)
        {
            case 0:
                coerceValue(value, myVexsrc);
                break;
            case 1:
                coerceValue(value, myShoppath);
                break;
            case 2:
                coerceValue(value, myScript);
                break;
            case 3:
                coerceValue(value, myVop_compiler);
                break;
            case 4:
                coerceValue(value, myVex_cwdpath);
                break;
            case 5:
                coerceValue(value, myVex_outputmask);
                break;
            case 6:
                coerceValue(value, myVex_multithread);
                break;
            case 7:
                coerceValue(value, myVex_geometrygenerator);
                break;
            case 8:
                coerceValue(value, myVdb_signedflood);
                break;
            case 9:
                coerceValue(value, myAutobind);
                break;
            case 10:
                coerceValue(value, myBindeach);
                break;

        }
    }

    void        getParmValue(exint idx, exint &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, fpreal &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Vector2D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Vector3D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Vector4D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Matrix2D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Matrix3D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Matrix4D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_StringHolder &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_SharedPtr<UT_Ramp> &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, PRM_DataItemHandle &value) const
    { doGetParmValue(idx, value); }

    template <typename T>
    void
    doSetParmValue(exint idx, const T &value) 
    {
        switch (idx)
        {
            case 0:
                coerceValue(myVexsrc, value);
                break;
            case 1:
                coerceValue(myShoppath, value);
                break;
            case 2:
                coerceValue(myScript, value);
                break;
            case 3:
                coerceValue(myVop_compiler, value);
                break;
            case 4:
                coerceValue(myVex_cwdpath, value);
                break;
            case 5:
                coerceValue(myVex_outputmask, value);
                break;
            case 6:
                coerceValue(myVex_multithread, value);
                break;
            case 7:
                coerceValue(myVex_geometrygenerator, value);
                break;
            case 8:
                coerceValue(myVdb_signedflood, value);
                break;
            case 9:
                coerceValue(myAutobind, value);
                break;
            case 10:
                coerceValue(myBindeach, value);
                break;

        }
    }

    void        setParmValue(exint idx, const exint &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const fpreal &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Vector2D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Vector3D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Vector4D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Matrix2D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Matrix3D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Matrix4D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_StringHolder &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_SharedPtr<UT_Ramp> &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const PRM_DataItemHandle &value) 
    { doSetParmValue(idx, value); }

    virtual exint    getNumParms() const
    {
        return 12;
    }

    virtual const char *getParmName(exint fieldnum) const
    {
        switch (fieldnum)
        {
            case 0:
                return "vexsrc";
            case 1:
                return "shoppath";
            case 2:
                return "script";
            case 3:
                return "vop_compiler";
            case 4:
                return "vex_cwdpath";
            case 5:
                return "vex_outputmask";
            case 6:
                return "vex_multithread";
            case 7:
                return "vex_geometrygenerator";
            case 8:
                return "vdb_signedflood";
            case 9:
                return "autobind";
            case 10:
                return "bindeach";
                case 11:
                    return "bindings";

        }
        return 0;
    }

    virtual ParmType getParmType(exint fieldnum) const
    {
        switch (fieldnum)
        {
                case 0:
                    return PARM_INTEGER;
                case 1:
                    return PARM_STRING;
                case 2:
                    return PARM_STRING;
                case 3:
                    return PARM_STRING;
                case 4:
                    return PARM_STRING;
                case 5:
                    return PARM_STRING;
                case 6:
                    return PARM_INTEGER;
                case 7:
                    return PARM_INTEGER;
                case 8:
                    return PARM_INTEGER;
                case 9:
                    return PARM_INTEGER;
                case 10:
                    return PARM_INTEGER;

        }
        return PARM_UNSUPPORTED;
    }

    // Boiler plate to load individual types.
    static void  loadData(UT_IStream &is, int64 &v)
    { is.bread(&v, 1); }
    static void  loadData(UT_IStream &is, bool &v)
    { int64     iv; is.bread(&iv, 1); v = iv; }
    static void  loadData(UT_IStream &is, fpreal64 &v)
    { is.bread<fpreal64>(&v, 1); }
    static void  loadData(UT_IStream &is, UT_Vector2D &v)
    { is.bread<fpreal64>(&v.x(), 1); is.bread<fpreal64>(&v.y(), 1); }
    static void  loadData(UT_IStream &is, UT_Vector3D &v)
    { is.bread<fpreal64>(&v.x(), 1); is.bread<fpreal64>(&v.y(), 1);
      is.bread<fpreal64>(&v.z(), 1); }
    static void  loadData(UT_IStream &is, UT_Vector4D &v)
    { is.bread<fpreal64>(&v.x(), 1); is.bread<fpreal64>(&v.y(), 1);
      is.bread<fpreal64>(&v.z(), 1); is.bread<fpreal64>(&v.w(), 1); }
    static void  loadData(UT_IStream &is, UT_Matrix2D &v)
    { for (int r = 0; r < 2; r++) for (int c = 0; c < 2; c++) is.bread<fpreal64>(&v(r, c), 1); }
    static void  loadData(UT_IStream &is, UT_Matrix3D &v)
    { for (int r = 0; r < 3; r++) for (int c = 0; c < 3; c++) is.bread<fpreal64>(&v(r, c), 1); }
    static void  loadData(UT_IStream &is, UT_Matrix4D &v)
    { for (int r = 0; r < 4; r++) for (int c = 0; c < 4; c++) is.bread<fpreal64>(&v(r, c), 1); }
    static void  loadData(UT_IStream &is, UT_Vector2I &v)
    { is.bread<int64>(&v.x(), 1); is.bread<int64>(&v.y(), 1); }
    static void  loadData(UT_IStream &is, UT_Vector3I &v)
    { is.bread<int64>(&v.x(), 1); is.bread<int64>(&v.y(), 1);
      is.bread<int64>(&v.z(), 1); }
    static void  loadData(UT_IStream &is, UT_Vector4I &v)
    { is.bread<int64>(&v.x(), 1); is.bread<int64>(&v.y(), 1);
      is.bread<int64>(&v.z(), 1); is.bread<int64>(&v.w(), 1); }
    static void  loadData(UT_IStream &is, UT_StringHolder &v)
    { is.bread(v); }
    static void  loadData(UT_IStream &is, UT_SharedPtr<UT_Ramp> &v)
    {   UT_StringHolder   rampdata;
        loadData(is, rampdata);
        if (rampdata.isstring())
        {
            v.reset(new UT_Ramp());
            UT_IStream  istr((const char *) rampdata, rampdata.length(), UT_ISTREAM_ASCII);
            v->load(istr);
        }
        else v.reset();
    }
    static void  loadData(UT_IStream &is, PRM_DataItemHandle &v)
    {   UT_StringHolder   data;
        loadData(is, data);
        if (data.isstring())
        {
            // Find the data type.
            char *colon = UT_StringWrap(data).findChar(':');
            if (colon)
            {
                int             typelen = colon - data.buffer();
                UT_WorkBuffer   type;
                type.strncpy(data.buffer(), typelen);
                UT_IStream  istr(((const char *) data) + typelen + 1, data.length() - (typelen + 1), UT_ISTREAM_BINARY);
                
                v = PRM_DataFactory::parseBinary(type.buffer(), istr);
            }
        }
        else v.reset();
    }

    static void  saveData(std::ostream &os, int64 v)
    { UTwrite(os, &v); }
    static void  saveData(std::ostream &os, bool v)
    { int64 iv = v; UTwrite(os, &iv); }
    static void  saveData(std::ostream &os, fpreal64 v)
    { UTwrite<fpreal64>(os, &v); }
    static void  saveData(std::ostream &os, UT_Vector2D v)
    { UTwrite<fpreal64>(os, &v.x()); UTwrite<fpreal64>(os, &v.y()); }
    static void  saveData(std::ostream &os, UT_Vector3D v)
    { UTwrite<fpreal64>(os, &v.x()); UTwrite<fpreal64>(os, &v.y());
      UTwrite<fpreal64>(os, &v.z()); }
    static void  saveData(std::ostream &os, UT_Vector4D v)
    { UTwrite<fpreal64>(os, &v.x()); UTwrite<fpreal64>(os, &v.y());
      UTwrite<fpreal64>(os, &v.z()); UTwrite<fpreal64>(os, &v.w()); }
    static void  saveData(std::ostream &os, UT_Matrix2D v)
    { for (int r = 0; r < 2; r++) for (int c = 0; c < 2; c++) UTwrite<fpreal64>(os, &v(r, c)); }
    static void  saveData(std::ostream &os, UT_Matrix3D v)
    { for (int r = 0; r < 3; r++) for (int c = 0; c < 3; c++) UTwrite<fpreal64>(os, &v(r, c)); }
    static void  saveData(std::ostream &os, UT_Matrix4D v)
    { for (int r = 0; r < 4; r++) for (int c = 0; c < 4; c++) UTwrite<fpreal64>(os, &v(r, c)); }
    static void  saveData(std::ostream &os, UT_StringHolder s)
    { UT_StringWrap(s).saveBinary(os); }
    static void  saveData(std::ostream &os, UT_SharedPtr<UT_Ramp> s)
    {   UT_StringHolder         result;
        UT_OStringStream        ostr;
        if (s) s->save(ostr);
        result = ostr.str();
        saveData(os, result);
    }
    static void  saveData(std::ostream &os, PRM_DataItemHandle s)
    {   UT_StringHolder         result;
        UT_OStringStream        ostr;
        if (s) 
        {
            ostr << s->getDataTypeToken();
            ostr << ":";
            s->saveBinary(ostr);
        }
        result = ostr.str();
        saveData(os, result);
    }


    void         save(std::ostream &os) const
    {
        int32           v = version();
        UTwrite(os, &v);
        saveData(os, myVexsrc);
        saveData(os, myShoppath);
        saveData(os, myScript);
        saveData(os, myVop_compiler);
        saveData(os, myVex_cwdpath);
        saveData(os, myVex_outputmask);
        saveData(os, myVex_multithread);
        saveData(os, myVex_geometrygenerator);
        saveData(os, myVdb_signedflood);
        saveData(os, myAutobind);
        saveData(os, myBindeach);
        {
            int64   length = myBindings.entries();
            UTwrite(os, &length);
            for (exint i = 0; i < length; i++)
            {
                saveData(os, myBindings(i).bindprimname);
                saveData(os, myBindings(i).bindprim);
                saveData(os, myBindings(i).bindname);

            }
        }

    }

    bool         load(UT_IStream &is)
    {
        int32           v;
        is.bread(&v, 1);
        if (version() != v)
        {
            // Fail incompatible versions
            return false;
        }
        loadData(is, myVexsrc);
        loadData(is, myShoppath);
        loadData(is, myScript);
        loadData(is, myVop_compiler);
        loadData(is, myVex_cwdpath);
        loadData(is, myVex_outputmask);
        loadData(is, myVex_multithread);
        loadData(is, myVex_geometrygenerator);
        loadData(is, myVdb_signedflood);
        loadData(is, myAutobind);
        loadData(is, myBindeach);
        {
            int64   length;
            is.read(&length, 1);
            myBindings.entries(length);
            for (exint i = 0; i < length; i++)
            {
                loadData(is, myBindings(i).bindprimname);
                loadData(is, myBindings(i).bindprim);
                loadData(is, myBindings(i).bindname);

            }
        }

        return true;
    }

    Vexsrc getVexsrc() const { return Vexsrc(myVexsrc); }
    void setVexsrc(Vexsrc val) { myVexsrc = int64(val); }
    Vexsrc opVexsrc(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getVexsrc();
        int64 result;
        OP_Utils::evalOpParm(result, thissop, "vexsrc", cookparms.getCookTime(), 0);
        return Vexsrc(result);
    }
    const UT_StringHolder & getShoppath() const { return myShoppath; }
    void setShoppath(const UT_StringHolder & val) { myShoppath = val; }
    UT_StringHolder opShoppath(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getShoppath();
        UT_StringHolder result;
        OP_Utils::evalOpParm(result, thissop, "shoppath", cookparms.getCookTime(), 0);
        return result;
    }
    const UT_StringHolder & getScript() const { return myScript; }
    void setScript(const UT_StringHolder & val) { myScript = val; }
    UT_StringHolder opScript(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getScript();
        UT_StringHolder result;
        OP_Utils::evalOpParm(result, thissop, "script", cookparms.getCookTime(), 0);
        return result;
    }
    const UT_StringHolder & getVop_compiler() const { return myVop_compiler; }
    void setVop_compiler(const UT_StringHolder & val) { myVop_compiler = val; }
    UT_StringHolder opVop_compiler(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getVop_compiler();
        UT_StringHolder result;
        OP_Utils::evalOpParm(result, thissop, "vop_compiler", cookparms.getCookTime(), 0);
        return result;
    }
    const UT_StringHolder & getVex_cwdpath() const { return myVex_cwdpath; }
    void setVex_cwdpath(const UT_StringHolder & val) { myVex_cwdpath = val; }
    UT_StringHolder opVex_cwdpath(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getVex_cwdpath();
        UT_StringHolder result;
        OP_Utils::evalOpParm(result, thissop, "vex_cwdpath", cookparms.getCookTime(), 0);
        return result;
    }
    const UT_StringHolder & getVex_outputmask() const { return myVex_outputmask; }
    void setVex_outputmask(const UT_StringHolder & val) { myVex_outputmask = val; }
    UT_StringHolder opVex_outputmask(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getVex_outputmask();
        UT_StringHolder result;
        OP_Utils::evalOpParm(result, thissop, "vex_outputmask", cookparms.getCookTime(), 0);
        return result;
    }
    bool getVex_multithread() const { return myVex_multithread; }
    void setVex_multithread(bool val) { myVex_multithread = val; }
    bool opVex_multithread(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getVex_multithread();
        bool result;
        OP_Utils::evalOpParm(result, thissop, "vex_multithread", cookparms.getCookTime(), 0);
        return result;
    }
    bool getVex_geometrygenerator() const { return myVex_geometrygenerator; }
    void setVex_geometrygenerator(bool val) { myVex_geometrygenerator = val; }
    bool opVex_geometrygenerator(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getVex_geometrygenerator();
        bool result;
        OP_Utils::evalOpParm(result, thissop, "vex_geometrygenerator", cookparms.getCookTime(), 0);
        return result;
    }
    bool getVdb_signedflood() const { return myVdb_signedflood; }
    void setVdb_signedflood(bool val) { myVdb_signedflood = val; }
    bool opVdb_signedflood(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getVdb_signedflood();
        bool result;
        OP_Utils::evalOpParm(result, thissop, "vdb_signedflood", cookparms.getCookTime(), 0);
        return result;
    }
    bool getAutobind() const { return myAutobind; }
    void setAutobind(bool val) { myAutobind = val; }
    bool opAutobind(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getAutobind();
        bool result;
        OP_Utils::evalOpParm(result, thissop, "autobind", cookparms.getCookTime(), 0);
        return result;
    }
    bool getBindeach() const { return myBindeach; }
    void setBindeach(bool val) { myBindeach = val; }
    bool opBindeach(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getBindeach();
        bool result;
        OP_Utils::evalOpParm(result, thissop, "bindeach", cookparms.getCookTime(), 0);
        return result;
    }
    const UT_Array<Bindings> &getBindings() const { return myBindings; }
    void setBindings(const UT_Array<Bindings> &val) { myBindings = val; }
    exint opBindings(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getBindings().entries();
        exint result;
        OP_Utils::evalOpParm(result, thissop, "bindings", cookparms.getCookTime(), 0);
        return result;
    }
            UT_StringHolder opBindings_bindprimname(const SOP_NodeVerb::CookParms &cookparms, exint _idx) const
        {
            SOP_Node *thissop = cookparms.getNode();
            if (!thissop) return (myBindings(_idx).bindprimname);
            int _parmidx = _idx + 1;
            UT_StringHolder result;
            OP_Utils::evalOpParmInst(result, thissop, "bindprimname#", &_parmidx, cookparms.getCookTime(), 0);
            return (result);
        }
        int64 opBindings_bindprim(const SOP_NodeVerb::CookParms &cookparms, exint _idx) const
        {
            SOP_Node *thissop = cookparms.getNode();
            if (!thissop) return (myBindings(_idx).bindprim);
            int _parmidx = _idx + 1;
            int64 result;
            OP_Utils::evalOpParmInst(result, thissop, "bindprim#", &_parmidx, cookparms.getCookTime(), 0);
            return (result);
        }
        UT_StringHolder opBindings_bindname(const SOP_NodeVerb::CookParms &cookparms, exint _idx) const
        {
            SOP_Node *thissop = cookparms.getNode();
            if (!thissop) return (myBindings(_idx).bindname);
            int _parmidx = _idx + 1;
            UT_StringHolder result;
            OP_Utils::evalOpParmInst(result, thissop, "bindname#", &_parmidx, cookparms.getCookTime(), 0);
            return (result);
        }


private:
    int64 myVexsrc;
    UT_StringHolder myShoppath;
    UT_StringHolder myScript;
    UT_StringHolder myVop_compiler;
    UT_StringHolder myVex_cwdpath;
    UT_StringHolder myVex_outputmask;
    bool myVex_multithread;
    bool myVex_geometrygenerator;
    bool myVdb_signedflood;
    bool myAutobind;
    bool myBindeach;
    UT_Array<Bindings> myBindings;

};
