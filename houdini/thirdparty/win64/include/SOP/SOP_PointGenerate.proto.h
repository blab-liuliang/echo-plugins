/* Automagically Generated by generate_proto.py
 * Do not Edit
 */
#pragma once

#include <SOP/SOP_NodeVerb.h>
#include <OP/OP_Utils.h>
#include <PRM/PRM_Parm.h>
#include <UT/UT_IStream.h>
#include <UT/UT_NTStreamUtil.h>
#include <UT/UT_Ramp.h>
#include <UT/UT_SharedPtr.h>
#include <UT/UT_StringHolder.h>
#include <UT/UT_StringStream.h>
#include <UT/UT_VectorTypes.h>
#include <SYS/SYS_Types.h>

using namespace UT::Literal;

class DEP_MicroNode;

class SOP_API SOP_PointGenerateParms  : public SOP_NodeParms
{
public:
    static int version() { return 1; }

    SOP_PointGenerateParms()
    {
        myGroup = ""_sh;
        myKeep = false;
        myPtsperpt = false;
        myNpts = 5000;
        myNptsperpt = 10;
        myDoattrib = false;
        myAttrib = ""_sh;
        mySeed = 0;
        myDogroup = false;
        myGgroup = "generated"_sh;
        myDopointnum = false;
        mySpointnum = "pointnum"_sh;
        myDopointidx = false;
        mySpointidx = "pointidx"_sh;
        myDocopyattribs = false;
        myAttribstocopy = "*"_sh;

    }

    explicit SOP_PointGenerateParms(const SOP_PointGenerateParms &) = default;

    virtual ~SOP_PointGenerateParms() {}

    bool operator==(const SOP_PointGenerateParms &src) const
    {
        if (myGroup != src.myGroup) return false;
        if (myKeep != src.myKeep) return false;
        if (myPtsperpt != src.myPtsperpt) return false;
        if (myNpts != src.myNpts) return false;
        if (myNptsperpt != src.myNptsperpt) return false;
        if (myDoattrib != src.myDoattrib) return false;
        if (myAttrib != src.myAttrib) return false;
        if (mySeed != src.mySeed) return false;
        if (myDogroup != src.myDogroup) return false;
        if (myGgroup != src.myGgroup) return false;
        if (myDopointnum != src.myDopointnum) return false;
        if (mySpointnum != src.mySpointnum) return false;
        if (myDopointidx != src.myDopointidx) return false;
        if (mySpointidx != src.mySpointidx) return false;
        if (myDocopyattribs != src.myDocopyattribs) return false;
        if (myAttribstocopy != src.myAttribstocopy) return false;

        return true;
    }
    bool operator!=(const SOP_PointGenerateParms &src) const
    {
        return !operator==(src);
    }



    void        buildFromOp(const OP_Node *node, fpreal time, DEP_MicroNode *depnode)
    {
        if (true && ( (!((((node->getInput(0)!=0)==0)))) ) )
            OP_Utils::evalOpParm(myGroup, node, "group", time, 0);
        else myGroup = ""_sh;
        if (true && ( (!((((node->getInput(0)!=0)==0)))) ) )
            OP_Utils::evalOpParm(myKeep, node, "keep", time, 0);
        else myKeep = false;
        if (true && ( (!((((node->getInput(0)!=0)==0)))) ) )
            OP_Utils::evalOpParm(myPtsperpt, node, "ptsperpt", time, 0);
        else myPtsperpt = false;
        if (true && ( (!((((node->getInput(0)!=0)==1)&&(getPtsperpt()==1)))) ) )
            OP_Utils::evalOpParm(myNpts, node, "npts", time, 0);
        else myNpts = 5000;
        if (true && ( (!((((node->getInput(0)!=0)==0))||((getPtsperpt()==0)))) ) )
            OP_Utils::evalOpParm(myNptsperpt, node, "nptsperpt", time, 0);
        else myNptsperpt = 10;
        if (true && ( (!((((node->getInput(0)!=0)==0)))) ) )
            OP_Utils::evalOpParm(myDoattrib, node, "doattrib", time, 0);
        else myDoattrib = false;
        if (true && ( (!((((node->getInput(0)!=0)==0))||((getDoattrib()==0)))) ) )
            OP_Utils::evalOpParm(myAttrib, node, "attrib", time, 0);
        else myAttrib = ""_sh;
        if (true && ( (!((((node->getInput(0)!=0)==0)))) ) )
            OP_Utils::evalOpParm(mySeed, node, "seed", time, 0);
        else mySeed = 0;
        if (true)
            OP_Utils::evalOpParm(myDogroup, node, "dogroup", time, 0);
        else myDogroup = false;
        if (true && ( (!(((getDogroup()==0)))) ) )
            OP_Utils::evalOpParm(myGgroup, node, "ggroup", time, 0);
        else myGgroup = "generated"_sh;
        if (true && ( (!((((node->getInput(0)!=0)==0)))) ) )
            OP_Utils::evalOpParm(myDopointnum, node, "dopointnum", time, 0);
        else myDopointnum = false;
        if (true && ( (!((((node->getInput(0)!=0)==0))||((getDopointnum()==0)))) ) )
            OP_Utils::evalOpParm(mySpointnum, node, "spointnum", time, 0);
        else mySpointnum = "pointnum"_sh;
        if (true && ( (!((((node->getInput(0)!=0)==0)))) ) )
            OP_Utils::evalOpParm(myDopointidx, node, "dopointidx", time, 0);
        else myDopointidx = false;
        if (true && ( (!((((node->getInput(0)!=0)==0))||((getDopointidx()==0)))) ) )
            OP_Utils::evalOpParm(mySpointidx, node, "spointidx", time, 0);
        else mySpointidx = "pointidx"_sh;
        if (true && ( (!((((node->getInput(0)!=0)==0)))) ) )
            OP_Utils::evalOpParm(myDocopyattribs, node, "docopyattribs", time, 0);
        else myDocopyattribs = false;
        if (true && ( (!((((node->getInput(0)!=0)==0))||((getDocopyattribs()==0)))) ) )
            OP_Utils::evalOpParm(myAttribstocopy, node, "attribstocopy", time, 0);
        else myAttribstocopy = "*"_sh;

    }


    virtual void loadFromOpSubclass(const LoadParms &loadparms)
    {
        buildFromOp(loadparms.node(), loadparms.context().getTime(), loadparms.depnode());
    }


    virtual void copyFrom(const SOP_NodeParms *src)
    {
        *this = *((const SOP_PointGenerateParms *)src);
    }

    template <typename T>
    void
    doGetParmValue(exint idx, T &value) const
    {
        switch (idx)
        {
            case 0:
                coerceValue(value, myGroup);
                break;
            case 1:
                coerceValue(value, myKeep);
                break;
            case 2:
                coerceValue(value, myPtsperpt);
                break;
            case 3:
                coerceValue(value, myNpts);
                break;
            case 4:
                coerceValue(value, myNptsperpt);
                break;
            case 5:
                coerceValue(value, myDoattrib);
                break;
            case 6:
                coerceValue(value, myAttrib);
                break;
            case 7:
                coerceValue(value, mySeed);
                break;
            case 8:
                coerceValue(value, myDogroup);
                break;
            case 9:
                coerceValue(value, myGgroup);
                break;
            case 10:
                coerceValue(value, myDopointnum);
                break;
            case 11:
                coerceValue(value, mySpointnum);
                break;
            case 12:
                coerceValue(value, myDopointidx);
                break;
            case 13:
                coerceValue(value, mySpointidx);
                break;
            case 14:
                coerceValue(value, myDocopyattribs);
                break;
            case 15:
                coerceValue(value, myAttribstocopy);
                break;

        }
    }

    void        getParmValue(exint idx, exint &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, fpreal &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Vector2D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Vector3D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Vector4D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Matrix2D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Matrix3D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Matrix4D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_StringHolder &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_SharedPtr<UT_Ramp> &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, PRM_DataItemHandle &value) const
    { doGetParmValue(idx, value); }

    template <typename T>
    void
    doSetParmValue(exint idx, const T &value) 
    {
        switch (idx)
        {
            case 0:
                coerceValue(myGroup, value);
                break;
            case 1:
                coerceValue(myKeep, value);
                break;
            case 2:
                coerceValue(myPtsperpt, value);
                break;
            case 3:
                coerceValue(myNpts, value);
                break;
            case 4:
                coerceValue(myNptsperpt, value);
                break;
            case 5:
                coerceValue(myDoattrib, value);
                break;
            case 6:
                coerceValue(myAttrib, value);
                break;
            case 7:
                coerceValue(mySeed, value);
                break;
            case 8:
                coerceValue(myDogroup, value);
                break;
            case 9:
                coerceValue(myGgroup, value);
                break;
            case 10:
                coerceValue(myDopointnum, value);
                break;
            case 11:
                coerceValue(mySpointnum, value);
                break;
            case 12:
                coerceValue(myDopointidx, value);
                break;
            case 13:
                coerceValue(mySpointidx, value);
                break;
            case 14:
                coerceValue(myDocopyattribs, value);
                break;
            case 15:
                coerceValue(myAttribstocopy, value);
                break;

        }
    }

    void        setParmValue(exint idx, const exint &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const fpreal &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Vector2D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Vector3D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Vector4D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Matrix2D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Matrix3D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Matrix4D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_StringHolder &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_SharedPtr<UT_Ramp> &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const PRM_DataItemHandle &value) 
    { doSetParmValue(idx, value); }

    virtual exint    getNumParms() const
    {
        return 16;
    }

    virtual const char *getParmName(exint fieldnum) const
    {
        switch (fieldnum)
        {
            case 0:
                return "group";
            case 1:
                return "keep";
            case 2:
                return "ptsperpt";
            case 3:
                return "npts";
            case 4:
                return "nptsperpt";
            case 5:
                return "doattrib";
            case 6:
                return "attrib";
            case 7:
                return "seed";
            case 8:
                return "dogroup";
            case 9:
                return "ggroup";
            case 10:
                return "dopointnum";
            case 11:
                return "spointnum";
            case 12:
                return "dopointidx";
            case 13:
                return "spointidx";
            case 14:
                return "docopyattribs";
            case 15:
                return "attribstocopy";

        }
        return 0;
    }

    virtual ParmType getParmType(exint fieldnum) const
    {
        switch (fieldnum)
        {
                case 0:
                    return PARM_STRING;
                case 1:
                    return PARM_INTEGER;
                case 2:
                    return PARM_INTEGER;
                case 3:
                    return PARM_INTEGER;
                case 4:
                    return PARM_FLOAT;
                case 5:
                    return PARM_INTEGER;
                case 6:
                    return PARM_STRING;
                case 7:
                    return PARM_FLOAT;
                case 8:
                    return PARM_INTEGER;
                case 9:
                    return PARM_STRING;
                case 10:
                    return PARM_INTEGER;
                case 11:
                    return PARM_STRING;
                case 12:
                    return PARM_INTEGER;
                case 13:
                    return PARM_STRING;
                case 14:
                    return PARM_INTEGER;
                case 15:
                    return PARM_STRING;

        }
        return PARM_UNSUPPORTED;
    }

    // Boiler plate to load individual types.
    static void  loadData(UT_IStream &is, int64 &v)
    { is.bread(&v, 1); }
    static void  loadData(UT_IStream &is, bool &v)
    { int64     iv; is.bread(&iv, 1); v = iv; }
    static void  loadData(UT_IStream &is, fpreal64 &v)
    { is.bread<fpreal64>(&v, 1); }
    static void  loadData(UT_IStream &is, UT_Vector2D &v)
    { is.bread<fpreal64>(&v.x(), 1); is.bread<fpreal64>(&v.y(), 1); }
    static void  loadData(UT_IStream &is, UT_Vector3D &v)
    { is.bread<fpreal64>(&v.x(), 1); is.bread<fpreal64>(&v.y(), 1);
      is.bread<fpreal64>(&v.z(), 1); }
    static void  loadData(UT_IStream &is, UT_Vector4D &v)
    { is.bread<fpreal64>(&v.x(), 1); is.bread<fpreal64>(&v.y(), 1);
      is.bread<fpreal64>(&v.z(), 1); is.bread<fpreal64>(&v.w(), 1); }
    static void  loadData(UT_IStream &is, UT_Matrix2D &v)
    { for (int r = 0; r < 2; r++) for (int c = 0; c < 2; c++) is.bread<fpreal64>(&v(r, c), 1); }
    static void  loadData(UT_IStream &is, UT_Matrix3D &v)
    { for (int r = 0; r < 3; r++) for (int c = 0; c < 3; c++) is.bread<fpreal64>(&v(r, c), 1); }
    static void  loadData(UT_IStream &is, UT_Matrix4D &v)
    { for (int r = 0; r < 4; r++) for (int c = 0; c < 4; c++) is.bread<fpreal64>(&v(r, c), 1); }
    static void  loadData(UT_IStream &is, UT_Vector2I &v)
    { is.bread<int64>(&v.x(), 1); is.bread<int64>(&v.y(), 1); }
    static void  loadData(UT_IStream &is, UT_Vector3I &v)
    { is.bread<int64>(&v.x(), 1); is.bread<int64>(&v.y(), 1);
      is.bread<int64>(&v.z(), 1); }
    static void  loadData(UT_IStream &is, UT_Vector4I &v)
    { is.bread<int64>(&v.x(), 1); is.bread<int64>(&v.y(), 1);
      is.bread<int64>(&v.z(), 1); is.bread<int64>(&v.w(), 1); }
    static void  loadData(UT_IStream &is, UT_StringHolder &v)
    { is.bread(v); }
    static void  loadData(UT_IStream &is, UT_SharedPtr<UT_Ramp> &v)
    {   UT_StringHolder   rampdata;
        loadData(is, rampdata);
        if (rampdata.isstring())
        {
            v.reset(new UT_Ramp());
            UT_IStream  istr((const char *) rampdata, rampdata.length(), UT_ISTREAM_ASCII);
            v->load(istr);
        }
        else v.reset();
    }
    static void  loadData(UT_IStream &is, PRM_DataItemHandle &v)
    {   UT_StringHolder   data;
        loadData(is, data);
        if (data.isstring())
        {
            // Find the data type.
            char *colon = UT_StringWrap(data).findChar(':');
            if (colon)
            {
                int             typelen = colon - data.buffer();
                UT_WorkBuffer   type;
                type.strncpy(data.buffer(), typelen);
                UT_IStream  istr(((const char *) data) + typelen + 1, data.length() - (typelen + 1), UT_ISTREAM_BINARY);
                
                v = PRM_DataFactory::parseBinary(type.buffer(), istr);
            }
        }
        else v.reset();
    }

    static void  saveData(std::ostream &os, int64 v)
    { UTwrite(os, &v); }
    static void  saveData(std::ostream &os, bool v)
    { int64 iv = v; UTwrite(os, &iv); }
    static void  saveData(std::ostream &os, fpreal64 v)
    { UTwrite<fpreal64>(os, &v); }
    static void  saveData(std::ostream &os, UT_Vector2D v)
    { UTwrite<fpreal64>(os, &v.x()); UTwrite<fpreal64>(os, &v.y()); }
    static void  saveData(std::ostream &os, UT_Vector3D v)
    { UTwrite<fpreal64>(os, &v.x()); UTwrite<fpreal64>(os, &v.y());
      UTwrite<fpreal64>(os, &v.z()); }
    static void  saveData(std::ostream &os, UT_Vector4D v)
    { UTwrite<fpreal64>(os, &v.x()); UTwrite<fpreal64>(os, &v.y());
      UTwrite<fpreal64>(os, &v.z()); UTwrite<fpreal64>(os, &v.w()); }
    static void  saveData(std::ostream &os, UT_Matrix2D v)
    { for (int r = 0; r < 2; r++) for (int c = 0; c < 2; c++) UTwrite<fpreal64>(os, &v(r, c)); }
    static void  saveData(std::ostream &os, UT_Matrix3D v)
    { for (int r = 0; r < 3; r++) for (int c = 0; c < 3; c++) UTwrite<fpreal64>(os, &v(r, c)); }
    static void  saveData(std::ostream &os, UT_Matrix4D v)
    { for (int r = 0; r < 4; r++) for (int c = 0; c < 4; c++) UTwrite<fpreal64>(os, &v(r, c)); }
    static void  saveData(std::ostream &os, UT_StringHolder s)
    { UT_StringWrap(s).saveBinary(os); }
    static void  saveData(std::ostream &os, UT_SharedPtr<UT_Ramp> s)
    {   UT_StringHolder         result;
        UT_OStringStream        ostr;
        if (s) s->save(ostr);
        result = ostr.str();
        saveData(os, result);
    }
    static void  saveData(std::ostream &os, PRM_DataItemHandle s)
    {   UT_StringHolder         result;
        UT_OStringStream        ostr;
        if (s) 
        {
            ostr << s->getDataTypeToken();
            ostr << ":";
            s->saveBinary(ostr);
        }
        result = ostr.str();
        saveData(os, result);
    }


    void         save(std::ostream &os) const
    {
        int32           v = version();
        UTwrite(os, &v);
        saveData(os, myGroup);
        saveData(os, myKeep);
        saveData(os, myPtsperpt);
        saveData(os, myNpts);
        saveData(os, myNptsperpt);
        saveData(os, myDoattrib);
        saveData(os, myAttrib);
        saveData(os, mySeed);
        saveData(os, myDogroup);
        saveData(os, myGgroup);
        saveData(os, myDopointnum);
        saveData(os, mySpointnum);
        saveData(os, myDopointidx);
        saveData(os, mySpointidx);
        saveData(os, myDocopyattribs);
        saveData(os, myAttribstocopy);

    }

    bool         load(UT_IStream &is)
    {
        int32           v;
        is.bread(&v, 1);
        if (version() != v)
        {
            // Fail incompatible versions
            return false;
        }
        loadData(is, myGroup);
        loadData(is, myKeep);
        loadData(is, myPtsperpt);
        loadData(is, myNpts);
        loadData(is, myNptsperpt);
        loadData(is, myDoattrib);
        loadData(is, myAttrib);
        loadData(is, mySeed);
        loadData(is, myDogroup);
        loadData(is, myGgroup);
        loadData(is, myDopointnum);
        loadData(is, mySpointnum);
        loadData(is, myDopointidx);
        loadData(is, mySpointidx);
        loadData(is, myDocopyattribs);
        loadData(is, myAttribstocopy);

        return true;
    }

    const UT_StringHolder & getGroup() const { return myGroup; }
    void setGroup(const UT_StringHolder & val) { myGroup = val; }
    UT_StringHolder opGroup(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getGroup();
        UT_StringHolder result;
        OP_Utils::evalOpParm(result, thissop, "group", cookparms.getCookTime(), 0);
        return result;
    }
    bool getKeep() const { return myKeep; }
    void setKeep(bool val) { myKeep = val; }
    bool opKeep(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getKeep();
        bool result;
        OP_Utils::evalOpParm(result, thissop, "keep", cookparms.getCookTime(), 0);
        return result;
    }
    bool getPtsperpt() const { return myPtsperpt; }
    void setPtsperpt(bool val) { myPtsperpt = val; }
    bool opPtsperpt(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getPtsperpt();
        bool result;
        OP_Utils::evalOpParm(result, thissop, "ptsperpt", cookparms.getCookTime(), 0);
        return result;
    }
    int64 getNpts() const { return myNpts; }
    void setNpts(int64 val) { myNpts = val; }
    int64 opNpts(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getNpts();
        int64 result;
        OP_Utils::evalOpParm(result, thissop, "npts", cookparms.getCookTime(), 0);
        return result;
    }
    fpreal64 getNptsperpt() const { return myNptsperpt; }
    void setNptsperpt(fpreal64 val) { myNptsperpt = val; }
    fpreal64 opNptsperpt(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getNptsperpt();
        fpreal64 result;
        OP_Utils::evalOpParm(result, thissop, "nptsperpt", cookparms.getCookTime(), 0);
        return result;
    }
    bool getDoattrib() const { return myDoattrib; }
    void setDoattrib(bool val) { myDoattrib = val; }
    bool opDoattrib(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getDoattrib();
        bool result;
        OP_Utils::evalOpParm(result, thissop, "doattrib", cookparms.getCookTime(), 0);
        return result;
    }
    const UT_StringHolder & getAttrib() const { return myAttrib; }
    void setAttrib(const UT_StringHolder & val) { myAttrib = val; }
    UT_StringHolder opAttrib(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getAttrib();
        UT_StringHolder result;
        OP_Utils::evalOpParm(result, thissop, "attrib", cookparms.getCookTime(), 0);
        return result;
    }
    fpreal64 getSeed() const { return mySeed; }
    void setSeed(fpreal64 val) { mySeed = val; }
    fpreal64 opSeed(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getSeed();
        fpreal64 result;
        OP_Utils::evalOpParm(result, thissop, "seed", cookparms.getCookTime(), 0);
        return result;
    }
    bool getDogroup() const { return myDogroup; }
    void setDogroup(bool val) { myDogroup = val; }
    bool opDogroup(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getDogroup();
        bool result;
        OP_Utils::evalOpParm(result, thissop, "dogroup", cookparms.getCookTime(), 0);
        return result;
    }
    const UT_StringHolder & getGgroup() const { return myGgroup; }
    void setGgroup(const UT_StringHolder & val) { myGgroup = val; }
    UT_StringHolder opGgroup(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getGgroup();
        UT_StringHolder result;
        OP_Utils::evalOpParm(result, thissop, "ggroup", cookparms.getCookTime(), 0);
        return result;
    }
    bool getDopointnum() const { return myDopointnum; }
    void setDopointnum(bool val) { myDopointnum = val; }
    bool opDopointnum(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getDopointnum();
        bool result;
        OP_Utils::evalOpParm(result, thissop, "dopointnum", cookparms.getCookTime(), 0);
        return result;
    }
    const UT_StringHolder & getSpointnum() const { return mySpointnum; }
    void setSpointnum(const UT_StringHolder & val) { mySpointnum = val; }
    UT_StringHolder opSpointnum(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getSpointnum();
        UT_StringHolder result;
        OP_Utils::evalOpParm(result, thissop, "spointnum", cookparms.getCookTime(), 0);
        return result;
    }
    bool getDopointidx() const { return myDopointidx; }
    void setDopointidx(bool val) { myDopointidx = val; }
    bool opDopointidx(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getDopointidx();
        bool result;
        OP_Utils::evalOpParm(result, thissop, "dopointidx", cookparms.getCookTime(), 0);
        return result;
    }
    const UT_StringHolder & getSpointidx() const { return mySpointidx; }
    void setSpointidx(const UT_StringHolder & val) { mySpointidx = val; }
    UT_StringHolder opSpointidx(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getSpointidx();
        UT_StringHolder result;
        OP_Utils::evalOpParm(result, thissop, "spointidx", cookparms.getCookTime(), 0);
        return result;
    }
    bool getDocopyattribs() const { return myDocopyattribs; }
    void setDocopyattribs(bool val) { myDocopyattribs = val; }
    bool opDocopyattribs(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getDocopyattribs();
        bool result;
        OP_Utils::evalOpParm(result, thissop, "docopyattribs", cookparms.getCookTime(), 0);
        return result;
    }
    const UT_StringHolder & getAttribstocopy() const { return myAttribstocopy; }
    void setAttribstocopy(const UT_StringHolder & val) { myAttribstocopy = val; }
    UT_StringHolder opAttribstocopy(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getAttribstocopy();
        UT_StringHolder result;
        OP_Utils::evalOpParm(result, thissop, "attribstocopy", cookparms.getCookTime(), 0);
        return result;
    }

private:
    UT_StringHolder myGroup;
    bool myKeep;
    bool myPtsperpt;
    int64 myNpts;
    fpreal64 myNptsperpt;
    bool myDoattrib;
    UT_StringHolder myAttrib;
    fpreal64 mySeed;
    bool myDogroup;
    UT_StringHolder myGgroup;
    bool myDopointnum;
    UT_StringHolder mySpointnum;
    bool myDopointidx;
    UT_StringHolder mySpointidx;
    bool myDocopyattribs;
    UT_StringHolder myAttribstocopy;

};
