/* Automagically Generated by generate_proto.py
 * Do not Edit
 */
#pragma once

#include <SOP/SOP_NodeVerb.h>
#include <OP/OP_Utils.h>
#include <PRM/PRM_Parm.h>
#include <UT/UT_IStream.h>
#include <UT/UT_NTStreamUtil.h>
#include <UT/UT_Ramp.h>
#include <UT/UT_SharedPtr.h>
#include <UT/UT_StringHolder.h>
#include <UT/UT_StringStream.h>
#include <UT/UT_VectorTypes.h>
#include <SYS/SYS_Types.h>

using namespace UT::Literal;

class DEP_MicroNode;

class SOP_API SOP_DivideParms  : public SOP_NodeParms
{
public:
    static int version() { return 1; }

    SOP_DivideParms()
    {
        myGroup = ""_sh;
        myConvex = true;
        myUsemaxsides = true;
        myNumsides = 3;
        myPlanar = true;
        myPlantol = 0.0001;
        myNoslivers = false;
        myAvoidsmallangles = false;
        mySmooth = false;
        myWeight = UT_Vector2D(1,0.5);
        myDivs = 1;
        myBrick = false;
        mySize = UT_Vector3D(1,1,1);
        myOffset = UT_Vector3D(0,0,0);
        myAngle = UT_Vector3D(0,0,0);
        myFixsharededges = true;
        myRemovesh = false;
        myDual = false;
        myDualattribstoswap = "* ^P"_sh;

    }

    explicit SOP_DivideParms(const SOP_DivideParms &) = default;

    virtual ~SOP_DivideParms() {}

    bool operator==(const SOP_DivideParms &src) const
    {
        if (myGroup != src.myGroup) return false;
        if (myConvex != src.myConvex) return false;
        if (myUsemaxsides != src.myUsemaxsides) return false;
        if (myNumsides != src.myNumsides) return false;
        if (myPlanar != src.myPlanar) return false;
        if (myPlantol != src.myPlantol) return false;
        if (myNoslivers != src.myNoslivers) return false;
        if (myAvoidsmallangles != src.myAvoidsmallangles) return false;
        if (mySmooth != src.mySmooth) return false;
        if (myWeight != src.myWeight) return false;
        if (myDivs != src.myDivs) return false;
        if (myBrick != src.myBrick) return false;
        if (mySize != src.mySize) return false;
        if (myOffset != src.myOffset) return false;
        if (myAngle != src.myAngle) return false;
        if (myFixsharededges != src.myFixsharededges) return false;
        if (myRemovesh != src.myRemovesh) return false;
        if (myDual != src.myDual) return false;
        if (myDualattribstoswap != src.myDualattribstoswap) return false;

        return true;
    }
    bool operator!=(const SOP_DivideParms &src) const
    {
        return !operator==(src);
    }



    void        buildFromOp(const OP_Node *node, fpreal time, DEP_MicroNode *depnode)
    {
        if (true)
            OP_Utils::evalOpParm(myGroup, node, "group", time, 0);
        else myGroup = ""_sh;
        if (true)
            OP_Utils::evalOpParm(myConvex, node, "convex", time, 0);
        else myConvex = true;
        if (true && ( (!(((getConvex()==0)))) ) )
            OP_Utils::evalOpParm(myUsemaxsides, node, "usemaxsides", time, 0);
        else myUsemaxsides = true;
        if (true && ( (!(((getConvex()==0))||((getUsemaxsides()==0)))) ) )
            OP_Utils::evalOpParm(myNumsides, node, "numsides", time, 0);
        else myNumsides = 3;
        if (true && ( (!(((getConvex()==0)))) ) )
            OP_Utils::evalOpParm(myPlanar, node, "planar", time, 0);
        else myPlanar = true;
        if (true && ( (!(((getConvex()==0))||((getPlanar()==0)))) ) )
            OP_Utils::evalOpParm(myPlantol, node, "plantol", time, 0);
        else myPlantol = 0.0001;
        if (true)
            OP_Utils::evalOpParm(myNoslivers, node, "noslivers", time, 0);
        else myNoslivers = false;
        if (true)
            OP_Utils::evalOpParm(myAvoidsmallangles, node, "avoidsmallangles", time, 0);
        else myAvoidsmallangles = false;
        if (true)
            OP_Utils::evalOpParm(mySmooth, node, "smooth", time, 0);
        else mySmooth = false;
        if (true && ( (!(((getSmooth()==0)))) ) )
            OP_Utils::evalOpParm(myWeight, node, "weight", time, 0);
        else myWeight = UT_Vector2D(1,0.5);
        if (true && ( (!(((getSmooth()==0)))) ) )
            OP_Utils::evalOpParm(myDivs, node, "divs", time, 0);
        else myDivs = 1;
        if (true)
            OP_Utils::evalOpParm(myBrick, node, "brick", time, 0);
        else myBrick = false;
        if (true && ( (!(((getBrick()==0)))) ) )
            OP_Utils::evalOpParm(mySize, node, "size", time, 0);
        else mySize = UT_Vector3D(1,1,1);
        if (true && ( (!(((getBrick()==0)))) ) )
            OP_Utils::evalOpParm(myOffset, node, "offset", time, 0);
        else myOffset = UT_Vector3D(0,0,0);
        if (true && ( (!(((getBrick()==0)))) ) )
            OP_Utils::evalOpParm(myAngle, node, "angle", time, 0);
        else myAngle = UT_Vector3D(0,0,0);
        if (true && ( (!(((getBrick()==0)))) ) )
            OP_Utils::evalOpParm(myFixsharededges, node, "fixsharededges", time, 0);
        else myFixsharededges = true;
        if (true)
            OP_Utils::evalOpParm(myRemovesh, node, "removesh", time, 0);
        else myRemovesh = false;
        if (true)
            OP_Utils::evalOpParm(myDual, node, "dual", time, 0);
        else myDual = false;
        if (true && ( (!(((getDual()==0)))) ) )
            OP_Utils::evalOpParm(myDualattribstoswap, node, "dualattribstoswap", time, 0);
        else myDualattribstoswap = "* ^P"_sh;

    }


    virtual void loadFromOpSubclass(const LoadParms &loadparms)
    {
        buildFromOp(loadparms.node(), loadparms.context().getTime(), loadparms.depnode());
    }


    virtual void copyFrom(const SOP_NodeParms *src)
    {
        *this = *((const SOP_DivideParms *)src);
    }

    template <typename T>
    void
    doGetParmValue(exint idx, T &value) const
    {
        switch (idx)
        {
            case 0:
                coerceValue(value, myGroup);
                break;
            case 1:
                coerceValue(value, myConvex);
                break;
            case 2:
                coerceValue(value, myUsemaxsides);
                break;
            case 3:
                coerceValue(value, myNumsides);
                break;
            case 4:
                coerceValue(value, myPlanar);
                break;
            case 5:
                coerceValue(value, myPlantol);
                break;
            case 6:
                coerceValue(value, myNoslivers);
                break;
            case 7:
                coerceValue(value, myAvoidsmallangles);
                break;
            case 8:
                coerceValue(value, mySmooth);
                break;
            case 9:
                coerceValue(value, myWeight);
                break;
            case 10:
                coerceValue(value, myDivs);
                break;
            case 11:
                coerceValue(value, myBrick);
                break;
            case 12:
                coerceValue(value, mySize);
                break;
            case 13:
                coerceValue(value, myOffset);
                break;
            case 14:
                coerceValue(value, myAngle);
                break;
            case 15:
                coerceValue(value, myFixsharededges);
                break;
            case 16:
                coerceValue(value, myRemovesh);
                break;
            case 17:
                coerceValue(value, myDual);
                break;
            case 18:
                coerceValue(value, myDualattribstoswap);
                break;

        }
    }

    void        getParmValue(exint idx, exint &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, fpreal &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Vector2D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Vector3D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Vector4D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Matrix2D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Matrix3D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Matrix4D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_StringHolder &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_SharedPtr<UT_Ramp> &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, PRM_DataItemHandle &value) const
    { doGetParmValue(idx, value); }

    template <typename T>
    void
    doSetParmValue(exint idx, const T &value) 
    {
        switch (idx)
        {
            case 0:
                coerceValue(myGroup, value);
                break;
            case 1:
                coerceValue(myConvex, value);
                break;
            case 2:
                coerceValue(myUsemaxsides, value);
                break;
            case 3:
                coerceValue(myNumsides, value);
                break;
            case 4:
                coerceValue(myPlanar, value);
                break;
            case 5:
                coerceValue(myPlantol, value);
                break;
            case 6:
                coerceValue(myNoslivers, value);
                break;
            case 7:
                coerceValue(myAvoidsmallangles, value);
                break;
            case 8:
                coerceValue(mySmooth, value);
                break;
            case 9:
                coerceValue(myWeight, value);
                break;
            case 10:
                coerceValue(myDivs, value);
                break;
            case 11:
                coerceValue(myBrick, value);
                break;
            case 12:
                coerceValue(mySize, value);
                break;
            case 13:
                coerceValue(myOffset, value);
                break;
            case 14:
                coerceValue(myAngle, value);
                break;
            case 15:
                coerceValue(myFixsharededges, value);
                break;
            case 16:
                coerceValue(myRemovesh, value);
                break;
            case 17:
                coerceValue(myDual, value);
                break;
            case 18:
                coerceValue(myDualattribstoswap, value);
                break;

        }
    }

    void        setParmValue(exint idx, const exint &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const fpreal &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Vector2D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Vector3D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Vector4D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Matrix2D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Matrix3D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Matrix4D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_StringHolder &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_SharedPtr<UT_Ramp> &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const PRM_DataItemHandle &value) 
    { doSetParmValue(idx, value); }

    virtual exint    getNumParms() const
    {
        return 19;
    }

    virtual const char *getParmName(exint fieldnum) const
    {
        switch (fieldnum)
        {
            case 0:
                return "group";
            case 1:
                return "convex";
            case 2:
                return "usemaxsides";
            case 3:
                return "numsides";
            case 4:
                return "planar";
            case 5:
                return "plantol";
            case 6:
                return "noslivers";
            case 7:
                return "avoidsmallangles";
            case 8:
                return "smooth";
            case 9:
                return "weight";
            case 10:
                return "divs";
            case 11:
                return "brick";
            case 12:
                return "size";
            case 13:
                return "offset";
            case 14:
                return "angle";
            case 15:
                return "fixsharededges";
            case 16:
                return "removesh";
            case 17:
                return "dual";
            case 18:
                return "dualattribstoswap";

        }
        return 0;
    }

    virtual ParmType getParmType(exint fieldnum) const
    {
        switch (fieldnum)
        {
                case 0:
                    return PARM_STRING;
                case 1:
                    return PARM_INTEGER;
                case 2:
                    return PARM_INTEGER;
                case 3:
                    return PARM_INTEGER;
                case 4:
                    return PARM_INTEGER;
                case 5:
                    return PARM_FLOAT;
                case 6:
                    return PARM_INTEGER;
                case 7:
                    return PARM_INTEGER;
                case 8:
                    return PARM_INTEGER;
                case 9:
                    return PARM_VECTOR2;
                case 10:
                    return PARM_INTEGER;
                case 11:
                    return PARM_INTEGER;
                case 12:
                    return PARM_VECTOR3;
                case 13:
                    return PARM_VECTOR3;
                case 14:
                    return PARM_VECTOR3;
                case 15:
                    return PARM_INTEGER;
                case 16:
                    return PARM_INTEGER;
                case 17:
                    return PARM_INTEGER;
                case 18:
                    return PARM_STRING;

        }
        return PARM_UNSUPPORTED;
    }

    // Boiler plate to load individual types.
    static void  loadData(UT_IStream &is, int64 &v)
    { is.bread(&v, 1); }
    static void  loadData(UT_IStream &is, bool &v)
    { int64     iv; is.bread(&iv, 1); v = iv; }
    static void  loadData(UT_IStream &is, fpreal64 &v)
    { is.bread<fpreal64>(&v, 1); }
    static void  loadData(UT_IStream &is, UT_Vector2D &v)
    { is.bread<fpreal64>(&v.x(), 1); is.bread<fpreal64>(&v.y(), 1); }
    static void  loadData(UT_IStream &is, UT_Vector3D &v)
    { is.bread<fpreal64>(&v.x(), 1); is.bread<fpreal64>(&v.y(), 1);
      is.bread<fpreal64>(&v.z(), 1); }
    static void  loadData(UT_IStream &is, UT_Vector4D &v)
    { is.bread<fpreal64>(&v.x(), 1); is.bread<fpreal64>(&v.y(), 1);
      is.bread<fpreal64>(&v.z(), 1); is.bread<fpreal64>(&v.w(), 1); }
    static void  loadData(UT_IStream &is, UT_Matrix2D &v)
    { for (int r = 0; r < 2; r++) for (int c = 0; c < 2; c++) is.bread<fpreal64>(&v(r, c), 1); }
    static void  loadData(UT_IStream &is, UT_Matrix3D &v)
    { for (int r = 0; r < 3; r++) for (int c = 0; c < 3; c++) is.bread<fpreal64>(&v(r, c), 1); }
    static void  loadData(UT_IStream &is, UT_Matrix4D &v)
    { for (int r = 0; r < 4; r++) for (int c = 0; c < 4; c++) is.bread<fpreal64>(&v(r, c), 1); }
    static void  loadData(UT_IStream &is, UT_Vector2I &v)
    { is.bread<int64>(&v.x(), 1); is.bread<int64>(&v.y(), 1); }
    static void  loadData(UT_IStream &is, UT_Vector3I &v)
    { is.bread<int64>(&v.x(), 1); is.bread<int64>(&v.y(), 1);
      is.bread<int64>(&v.z(), 1); }
    static void  loadData(UT_IStream &is, UT_Vector4I &v)
    { is.bread<int64>(&v.x(), 1); is.bread<int64>(&v.y(), 1);
      is.bread<int64>(&v.z(), 1); is.bread<int64>(&v.w(), 1); }
    static void  loadData(UT_IStream &is, UT_StringHolder &v)
    { is.bread(v); }
    static void  loadData(UT_IStream &is, UT_SharedPtr<UT_Ramp> &v)
    {   UT_StringHolder   rampdata;
        loadData(is, rampdata);
        if (rampdata.isstring())
        {
            v.reset(new UT_Ramp());
            UT_IStream  istr((const char *) rampdata, rampdata.length(), UT_ISTREAM_ASCII);
            v->load(istr);
        }
        else v.reset();
    }
    static void  loadData(UT_IStream &is, PRM_DataItemHandle &v)
    {   UT_StringHolder   data;
        loadData(is, data);
        if (data.isstring())
        {
            // Find the data type.
            char *colon = UT_StringWrap(data).findChar(':');
            if (colon)
            {
                int             typelen = colon - data.buffer();
                UT_WorkBuffer   type;
                type.strncpy(data.buffer(), typelen);
                UT_IStream  istr(((const char *) data) + typelen + 1, data.length() - (typelen + 1), UT_ISTREAM_BINARY);
                
                v = PRM_DataFactory::parseBinary(type.buffer(), istr);
            }
        }
        else v.reset();
    }

    static void  saveData(std::ostream &os, int64 v)
    { UTwrite(os, &v); }
    static void  saveData(std::ostream &os, bool v)
    { int64 iv = v; UTwrite(os, &iv); }
    static void  saveData(std::ostream &os, fpreal64 v)
    { UTwrite<fpreal64>(os, &v); }
    static void  saveData(std::ostream &os, UT_Vector2D v)
    { UTwrite<fpreal64>(os, &v.x()); UTwrite<fpreal64>(os, &v.y()); }
    static void  saveData(std::ostream &os, UT_Vector3D v)
    { UTwrite<fpreal64>(os, &v.x()); UTwrite<fpreal64>(os, &v.y());
      UTwrite<fpreal64>(os, &v.z()); }
    static void  saveData(std::ostream &os, UT_Vector4D v)
    { UTwrite<fpreal64>(os, &v.x()); UTwrite<fpreal64>(os, &v.y());
      UTwrite<fpreal64>(os, &v.z()); UTwrite<fpreal64>(os, &v.w()); }
    static void  saveData(std::ostream &os, UT_Matrix2D v)
    { for (int r = 0; r < 2; r++) for (int c = 0; c < 2; c++) UTwrite<fpreal64>(os, &v(r, c)); }
    static void  saveData(std::ostream &os, UT_Matrix3D v)
    { for (int r = 0; r < 3; r++) for (int c = 0; c < 3; c++) UTwrite<fpreal64>(os, &v(r, c)); }
    static void  saveData(std::ostream &os, UT_Matrix4D v)
    { for (int r = 0; r < 4; r++) for (int c = 0; c < 4; c++) UTwrite<fpreal64>(os, &v(r, c)); }
    static void  saveData(std::ostream &os, UT_StringHolder s)
    { UT_StringWrap(s).saveBinary(os); }
    static void  saveData(std::ostream &os, UT_SharedPtr<UT_Ramp> s)
    {   UT_StringHolder         result;
        UT_OStringStream        ostr;
        if (s) s->save(ostr);
        result = ostr.str();
        saveData(os, result);
    }
    static void  saveData(std::ostream &os, PRM_DataItemHandle s)
    {   UT_StringHolder         result;
        UT_OStringStream        ostr;
        if (s) 
        {
            ostr << s->getDataTypeToken();
            ostr << ":";
            s->saveBinary(ostr);
        }
        result = ostr.str();
        saveData(os, result);
    }


    void         save(std::ostream &os) const
    {
        int32           v = version();
        UTwrite(os, &v);
        saveData(os, myGroup);
        saveData(os, myConvex);
        saveData(os, myUsemaxsides);
        saveData(os, myNumsides);
        saveData(os, myPlanar);
        saveData(os, myPlantol);
        saveData(os, myNoslivers);
        saveData(os, myAvoidsmallangles);
        saveData(os, mySmooth);
        saveData(os, myWeight);
        saveData(os, myDivs);
        saveData(os, myBrick);
        saveData(os, mySize);
        saveData(os, myOffset);
        saveData(os, myAngle);
        saveData(os, myFixsharededges);
        saveData(os, myRemovesh);
        saveData(os, myDual);
        saveData(os, myDualattribstoswap);

    }

    bool         load(UT_IStream &is)
    {
        int32           v;
        is.bread(&v, 1);
        if (version() != v)
        {
            // Fail incompatible versions
            return false;
        }
        loadData(is, myGroup);
        loadData(is, myConvex);
        loadData(is, myUsemaxsides);
        loadData(is, myNumsides);
        loadData(is, myPlanar);
        loadData(is, myPlantol);
        loadData(is, myNoslivers);
        loadData(is, myAvoidsmallangles);
        loadData(is, mySmooth);
        loadData(is, myWeight);
        loadData(is, myDivs);
        loadData(is, myBrick);
        loadData(is, mySize);
        loadData(is, myOffset);
        loadData(is, myAngle);
        loadData(is, myFixsharededges);
        loadData(is, myRemovesh);
        loadData(is, myDual);
        loadData(is, myDualattribstoswap);

        return true;
    }

    const UT_StringHolder & getGroup() const { return myGroup; }
    void setGroup(const UT_StringHolder & val) { myGroup = val; }
    UT_StringHolder opGroup(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getGroup();
        UT_StringHolder result;
        OP_Utils::evalOpParm(result, thissop, "group", cookparms.getCookTime(), 0);
        return result;
    }
    bool getConvex() const { return myConvex; }
    void setConvex(bool val) { myConvex = val; }
    bool opConvex(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getConvex();
        bool result;
        OP_Utils::evalOpParm(result, thissop, "convex", cookparms.getCookTime(), 0);
        return result;
    }
    bool getUsemaxsides() const { return myUsemaxsides; }
    void setUsemaxsides(bool val) { myUsemaxsides = val; }
    bool opUsemaxsides(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getUsemaxsides();
        bool result;
        OP_Utils::evalOpParm(result, thissop, "usemaxsides", cookparms.getCookTime(), 0);
        return result;
    }
    int64 getNumsides() const { return myNumsides; }
    void setNumsides(int64 val) { myNumsides = val; }
    int64 opNumsides(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getNumsides();
        int64 result;
        OP_Utils::evalOpParm(result, thissop, "numsides", cookparms.getCookTime(), 0);
        return result;
    }
    bool getPlanar() const { return myPlanar; }
    void setPlanar(bool val) { myPlanar = val; }
    bool opPlanar(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getPlanar();
        bool result;
        OP_Utils::evalOpParm(result, thissop, "planar", cookparms.getCookTime(), 0);
        return result;
    }
    fpreal64 getPlantol() const { return myPlantol; }
    void setPlantol(fpreal64 val) { myPlantol = val; }
    fpreal64 opPlantol(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getPlantol();
        fpreal64 result;
        OP_Utils::evalOpParm(result, thissop, "plantol", cookparms.getCookTime(), 0);
        return result;
    }
    bool getNoslivers() const { return myNoslivers; }
    void setNoslivers(bool val) { myNoslivers = val; }
    bool opNoslivers(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getNoslivers();
        bool result;
        OP_Utils::evalOpParm(result, thissop, "noslivers", cookparms.getCookTime(), 0);
        return result;
    }
    bool getAvoidsmallangles() const { return myAvoidsmallangles; }
    void setAvoidsmallangles(bool val) { myAvoidsmallangles = val; }
    bool opAvoidsmallangles(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getAvoidsmallangles();
        bool result;
        OP_Utils::evalOpParm(result, thissop, "avoidsmallangles", cookparms.getCookTime(), 0);
        return result;
    }
    bool getSmooth() const { return mySmooth; }
    void setSmooth(bool val) { mySmooth = val; }
    bool opSmooth(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getSmooth();
        bool result;
        OP_Utils::evalOpParm(result, thissop, "smooth", cookparms.getCookTime(), 0);
        return result;
    }
    UT_Vector2D getWeight() const { return myWeight; }
    void setWeight(UT_Vector2D val) { myWeight = val; }
    UT_Vector2D opWeight(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getWeight();
        UT_Vector2D result;
        OP_Utils::evalOpParm(result, thissop, "weight", cookparms.getCookTime(), 0);
        return result;
    }
    int64 getDivs() const { return myDivs; }
    void setDivs(int64 val) { myDivs = val; }
    int64 opDivs(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getDivs();
        int64 result;
        OP_Utils::evalOpParm(result, thissop, "divs", cookparms.getCookTime(), 0);
        return result;
    }
    bool getBrick() const { return myBrick; }
    void setBrick(bool val) { myBrick = val; }
    bool opBrick(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getBrick();
        bool result;
        OP_Utils::evalOpParm(result, thissop, "brick", cookparms.getCookTime(), 0);
        return result;
    }
    UT_Vector3D getSize() const { return mySize; }
    void setSize(UT_Vector3D val) { mySize = val; }
    UT_Vector3D opSize(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getSize();
        UT_Vector3D result;
        OP_Utils::evalOpParm(result, thissop, "size", cookparms.getCookTime(), 0);
        return result;
    }
    UT_Vector3D getOffset() const { return myOffset; }
    void setOffset(UT_Vector3D val) { myOffset = val; }
    UT_Vector3D opOffset(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getOffset();
        UT_Vector3D result;
        OP_Utils::evalOpParm(result, thissop, "offset", cookparms.getCookTime(), 0);
        return result;
    }
    UT_Vector3D getAngle() const { return myAngle; }
    void setAngle(UT_Vector3D val) { myAngle = val; }
    UT_Vector3D opAngle(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getAngle();
        UT_Vector3D result;
        OP_Utils::evalOpParm(result, thissop, "angle", cookparms.getCookTime(), 0);
        return result;
    }
    bool getFixsharededges() const { return myFixsharededges; }
    void setFixsharededges(bool val) { myFixsharededges = val; }
    bool opFixsharededges(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getFixsharededges();
        bool result;
        OP_Utils::evalOpParm(result, thissop, "fixsharededges", cookparms.getCookTime(), 0);
        return result;
    }
    bool getRemovesh() const { return myRemovesh; }
    void setRemovesh(bool val) { myRemovesh = val; }
    bool opRemovesh(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getRemovesh();
        bool result;
        OP_Utils::evalOpParm(result, thissop, "removesh", cookparms.getCookTime(), 0);
        return result;
    }
    bool getDual() const { return myDual; }
    void setDual(bool val) { myDual = val; }
    bool opDual(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getDual();
        bool result;
        OP_Utils::evalOpParm(result, thissop, "dual", cookparms.getCookTime(), 0);
        return result;
    }
    const UT_StringHolder & getDualattribstoswap() const { return myDualattribstoswap; }
    void setDualattribstoswap(const UT_StringHolder & val) { myDualattribstoswap = val; }
    UT_StringHolder opDualattribstoswap(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getDualattribstoswap();
        UT_StringHolder result;
        OP_Utils::evalOpParm(result, thissop, "dualattribstoswap", cookparms.getCookTime(), 0);
        return result;
    }

private:
    UT_StringHolder myGroup;
    bool myConvex;
    bool myUsemaxsides;
    int64 myNumsides;
    bool myPlanar;
    fpreal64 myPlantol;
    bool myNoslivers;
    bool myAvoidsmallangles;
    bool mySmooth;
    UT_Vector2D myWeight;
    int64 myDivs;
    bool myBrick;
    UT_Vector3D mySize;
    UT_Vector3D myOffset;
    UT_Vector3D myAngle;
    bool myFixsharededges;
    bool myRemovesh;
    bool myDual;
    UT_StringHolder myDualattribstoswap;

};
