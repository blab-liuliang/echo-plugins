/* Automagically Generated by generate_proto.py
 * Do not Edit
 */
#pragma once

#include <SOP/SOP_NodeVerb.h>
#include <OP/OP_Utils.h>
#include <PRM/PRM_Parm.h>
#include <UT/UT_IStream.h>
#include <UT/UT_NTStreamUtil.h>
#include <UT/UT_Ramp.h>
#include <UT/UT_SharedPtr.h>
#include <UT/UT_StringHolder.h>
#include <UT/UT_StringStream.h>
#include <UT/UT_VectorTypes.h>
#include <SYS/SYS_Types.h>

using namespace UT::Literal;

class DEP_MicroNode;
namespace SOP_AttribCreate_2_0Enums
{
    enum class Grouptype
    {
        GUESS = 0,
        VERTICES,
        EDGES,
        POINTS,
        PRIMS
    };
    enum class Existing
    {
        ERROR = 0,
        WARN,
        REPLACE,
        BETTER
    };
    enum class Class
    {
        DETAIL = 0,
        PRIMITIVE,
        POINT,
        VERTEX
    };
    enum class Type
    {
        FLOAT = 0,
        INT,
        VECTOR,
        INDEX,
        FLOATARRAY,
        INTARRAY,
        STRINGARRAY
    };
    enum class Typeinfo
    {
        GUESS = 0,
        NONE,
        POINT,
        VECTOR,
        NORMAL,
        COLOR,
        QUATERNION,
        TRANFORM,
        TEXTURECOORD
    };
    enum class Precision
    {
        _8 = 0,
        _16,
        _32,
        _64
    };
}


class SOP_API SOP_AttribCreate_2_0Parms  : public SOP_NodeParms
{
public:
    static int version() { return 1; }
    struct Numattr
    {
        bool enable;
        UT_StringHolder name;
        int64 existing;
        bool createvarmap;
        UT_StringHolder varname;
        int64 _class;
        bool savetoinfo;
        int64 type;
        int64 typeinfo;
        int64 precision;
        int64 size;
        UT_Vector4D defaultv;
        bool writevalues;
        bool uselocal;
        UT_Vector4D valuev;
        UT_StringHolder string;


        Numattr()
        {
            enable = false;
            name = "attribute#"_sh;
            existing = 3;
            createvarmap = false;
            varname = ""_sh;
            _class = 2;
            savetoinfo = false;
            type = 0;
            typeinfo = 0;
            precision = 2;
            size = 1;
            defaultv = UT_Vector4D(0,0,0,0);
            writevalues = false;
            uselocal = false;
            valuev = UT_Vector4D(0,0,0,0);
            string = ""_sh;

        }

        bool operator==(const Numattr &src) const
        {
            if (enable != src.enable) return false;
            if (name != src.name) return false;
            if (existing != src.existing) return false;
            if (createvarmap != src.createvarmap) return false;
            if (varname != src.varname) return false;
            if (_class != src._class) return false;
            if (savetoinfo != src.savetoinfo) return false;
            if (type != src.type) return false;
            if (typeinfo != src.typeinfo) return false;
            if (precision != src.precision) return false;
            if (size != src.size) return false;
            if (defaultv != src.defaultv) return false;
            if (writevalues != src.writevalues) return false;
            if (uselocal != src.uselocal) return false;
            if (valuev != src.valuev) return false;
            if (string != src.string) return false;

            return true;
        }
        bool operator!=(const Numattr &src) const
        {
            return !operator==(src);
        }

    };

    UT_StringHolder createString(const UT_Array<Numattr> &list) const
    {
        UT_WorkBuffer   buf;

        buf.strcat("[ ");
        for (int i = 0; i < list.entries(); i++)
        {
            if (i)
                buf.strcat(", ");
            buf.strcat("( ");
            buf.append("");
            buf.appendSprintf("%s", (list(i).enable) ? "true" : "false");
            buf.append(", ");
            { UT_String tmp; tmp = UT_StringWrap(list(i).name).makeQuotedString('"'); buf.strcat(tmp); }
            buf.append(", ");
            buf.appendSprintf("%d", (int) list(i).existing);
            buf.append(", ");
            buf.appendSprintf("%s", (list(i).createvarmap) ? "true" : "false");
            buf.append(", ");
            { UT_String tmp; tmp = UT_StringWrap(list(i).varname).makeQuotedString('"'); buf.strcat(tmp); }
            buf.append(", ");
            buf.appendSprintf("%d", (int) list(i)._class);
            buf.append(", ");
            buf.appendSprintf("%s", (list(i).savetoinfo) ? "true" : "false");
            buf.append(", ");
            buf.appendSprintf("%d", (int) list(i).type);
            buf.append(", ");
            buf.appendSprintf("%d", (int) list(i).typeinfo);
            buf.append(", ");
            buf.appendSprintf("%d", (int) list(i).precision);
            buf.append(", ");
            buf.appendSprintf("%d", (int) list(i).size);
            buf.append(", ");
            buf.appendSprintf("(%f, %f, %f, %f)", list(i).defaultv.x(), list(i).defaultv.y(), list(i).defaultv.z(), list(i).defaultv.w());
            buf.append(", ");
            buf.appendSprintf("%s", (list(i).writevalues) ? "true" : "false");
            buf.append(", ");
            buf.appendSprintf("%s", (list(i).uselocal) ? "true" : "false");
            buf.append(", ");
            buf.appendSprintf("(%f, %f, %f, %f)", list(i).valuev.x(), list(i).valuev.y(), list(i).valuev.z(), list(i).valuev.w());
            buf.append(", ");
            { UT_String tmp; tmp = UT_StringWrap(list(i).string).makeQuotedString('"'); buf.strcat(tmp); }

            buf.strcat(" )");
        }
        buf.strcat(" ]");

        UT_StringHolder result = buf;
        return result;
    }

    SOP_AttribCreate_2_0Parms()
    {
        myGroup = ""_sh;
        myGrouptype = 0;

    }

    explicit SOP_AttribCreate_2_0Parms(const SOP_AttribCreate_2_0Parms &) = default;

    virtual ~SOP_AttribCreate_2_0Parms() {}

    bool operator==(const SOP_AttribCreate_2_0Parms &src) const
    {
        if (myGroup != src.myGroup) return false;
        if (myGrouptype != src.myGrouptype) return false;
        if (myNumattr != src.myNumattr) return false;

        return true;
    }
    bool operator!=(const SOP_AttribCreate_2_0Parms &src) const
    {
        return !operator==(src);
    }
    using Grouptype = SOP_AttribCreate_2_0Enums::Grouptype;
    using Existing = SOP_AttribCreate_2_0Enums::Existing;
    using Class = SOP_AttribCreate_2_0Enums::Class;
    using Type = SOP_AttribCreate_2_0Enums::Type;
    using Typeinfo = SOP_AttribCreate_2_0Enums::Typeinfo;
    using Precision = SOP_AttribCreate_2_0Enums::Precision;



    void        buildFromOp(const OP_Node *node, fpreal time, DEP_MicroNode *depnode)
    {
        if (true)
            OP_Utils::evalOpParm(myGroup, node, "group", time, 0);
        else myGroup = ""_sh;
        if (true)
            OP_Utils::evalOpParm(myGrouptype, node, "grouptype", time, 0);
        else myGrouptype = 0;
            if (true)
            {
                int64   length;
                OP_Utils::evalOpParm(length, node, "numattr", time, 0);
                myNumattr.entries(length);
                for (exint i = 0; i < length; i++)
                {
                    int     parmidx = i+1;
                    auto && _curentry = myNumattr(i);
                    (void) _curentry;
                    if (true)
                        OP_Utils::evalOpParmInst(myNumattr(i).enable, node, "enable#", &parmidx, time, 0);
                    else myNumattr(i).enable = false;
                    if (true && ( (!(((_curentry.enable==0)))) ) )
                        OP_Utils::evalOpParmInst(myNumattr(i).name, node, "name#", &parmidx, time, 0);
                    else myNumattr(i).name = "attribute#"_sh;
                    if (true && ( (!(((_curentry.enable==0)))) ) )
                        OP_Utils::evalOpParmInst(myNumattr(i).existing, node, "existing#", &parmidx, time, 0);
                    else myNumattr(i).existing = 3;
                    if (true && ( (!(((_curentry.enable==0)))) ) )
                        OP_Utils::evalOpParmInst(myNumattr(i).createvarmap, node, "createvarmap#", &parmidx, time, 0);
                    else myNumattr(i).createvarmap = false;
                    if (true && ( (!(((_curentry.enable==0))||((_curentry.createvarmap==0)))) ) )
                        OP_Utils::evalOpParmInst(myNumattr(i).varname, node, "varname#", &parmidx, time, 0);
                    else myNumattr(i).varname = ""_sh;
                    if (true && ( (!(((_curentry.enable==0)))) ) )
                        OP_Utils::evalOpParmInst(myNumattr(i)._class, node, "class#", &parmidx, time, 0);
                    else myNumattr(i)._class = 2;
                    if (true && ( (!(((_curentry.enable==0))||((_curentry._class!=0)))) ) )
                        OP_Utils::evalOpParmInst(myNumattr(i).savetoinfo, node, "savetoinfo#", &parmidx, time, 0);
                    else myNumattr(i).savetoinfo = false;
                    if (true && ( (!(((_curentry.enable==0)))) ) )
                        OP_Utils::evalOpParmInst(myNumattr(i).type, node, "type#", &parmidx, time, 0);
                    else myNumattr(i).type = 0;
                    if (true && ( (!(((_curentry.enable==0))||((_curentry.type!=0)))) ) )
                        OP_Utils::evalOpParmInst(myNumattr(i).typeinfo, node, "typeinfo#", &parmidx, time, 0);
                    else myNumattr(i).typeinfo = 0;
                    if (true && ( (!(((_curentry.enable==0))||((_curentry.type==3))||((_curentry.type==6)))) ) )
                        OP_Utils::evalOpParmInst(myNumattr(i).precision, node, "precision#", &parmidx, time, 0);
                    else myNumattr(i).precision = 2;
                    if (true && ( (!(((_curentry.enable==0))||((_curentry.type==2))||((_curentry.type==3)))) ) )
                        OP_Utils::evalOpParmInst(myNumattr(i).size, node, "size#", &parmidx, time, 0);
                    else myNumattr(i).size = 1;
                    if (true && ( (!(((_curentry.enable==0))||((_curentry.type==3))||((_curentry.type==4))||((_curentry.type==5))||((_curentry.type==6)))) ) )
                        OP_Utils::evalOpParmInst(myNumattr(i).defaultv, node, "default#v", &parmidx, time, 0);
                    else myNumattr(i).defaultv = UT_Vector4D(0,0,0,0);
                    if (true && ( (!(((_curentry.enable==0))||((_curentry.type==4))||((_curentry.type==5))||((_curentry.type==6)))) ) )
                        OP_Utils::evalOpParmInst(myNumattr(i).writevalues, node, "writevalues#", &parmidx, time, 0);
                    else myNumattr(i).writevalues = false;
                    if (true && ( (!(((_curentry.enable==0))||((_curentry.writevalues==0))||((_curentry.type==4))||((_curentry.type==5))||((_curentry.type==6)))) ) )
                        OP_Utils::evalOpParmInst(myNumattr(i).uselocal, node, "uselocal#", &parmidx, time, 0);
                    else myNumattr(i).uselocal = false;
                    if (true && ( (!(((_curentry.enable==0))||((_curentry.writevalues==0))||((_curentry.type!=0)&&(_curentry.type!=1)&&(_curentry.type!=2)))) ) )
                        OP_Utils::evalOpParmInst(myNumattr(i).valuev, node, "value#v", &parmidx, time, 0);
                    else myNumattr(i).valuev = UT_Vector4D(0,0,0,0);
                    if (true && ( (!(((_curentry.enable==0))||((_curentry.writevalues==0))||((_curentry.type!=3)))) ) )
                        OP_Utils::evalOpParmInst(myNumattr(i).string, node, "string#", &parmidx, time, 0);
                    else myNumattr(i).string = ""_sh;

                }
            }
            else
                myNumattr.clear();

    }


    virtual void loadFromOpSubclass(const LoadParms &loadparms)
    {
        buildFromOp(loadparms.node(), loadparms.context().getTime(), loadparms.depnode());
    }


    virtual void copyFrom(const SOP_NodeParms *src)
    {
        *this = *((const SOP_AttribCreate_2_0Parms *)src);
    }

    template <typename T>
    void
    doGetParmValue(exint idx, T &value) const
    {
        switch (idx)
        {
            case 0:
                coerceValue(value, myGroup);
                break;
            case 1:
                coerceValue(value, myGrouptype);
                break;

        }
    }

    void        getParmValue(exint idx, exint &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, fpreal &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Vector2D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Vector3D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Vector4D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Matrix2D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Matrix3D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Matrix4D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_StringHolder &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_SharedPtr<UT_Ramp> &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, PRM_DataItemHandle &value) const
    { doGetParmValue(idx, value); }

    template <typename T>
    void
    doSetParmValue(exint idx, const T &value) 
    {
        switch (idx)
        {
            case 0:
                coerceValue(myGroup, value);
                break;
            case 1:
                coerceValue(myGrouptype, value);
                break;

        }
    }

    void        setParmValue(exint idx, const exint &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const fpreal &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Vector2D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Vector3D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Vector4D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Matrix2D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Matrix3D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Matrix4D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_StringHolder &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_SharedPtr<UT_Ramp> &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const PRM_DataItemHandle &value) 
    { doSetParmValue(idx, value); }

    virtual exint    getNumParms() const
    {
        return 3;
    }

    virtual const char *getParmName(exint fieldnum) const
    {
        switch (fieldnum)
        {
            case 0:
                return "group";
            case 1:
                return "grouptype";
                case 2:
                    return "numattr";

        }
        return 0;
    }

    virtual ParmType getParmType(exint fieldnum) const
    {
        switch (fieldnum)
        {
                case 0:
                    return PARM_STRING;
                case 1:
                    return PARM_INTEGER;

        }
        return PARM_UNSUPPORTED;
    }

    // Boiler plate to load individual types.
    static void  loadData(UT_IStream &is, int64 &v)
    { is.bread(&v, 1); }
    static void  loadData(UT_IStream &is, bool &v)
    { int64     iv; is.bread(&iv, 1); v = iv; }
    static void  loadData(UT_IStream &is, fpreal64 &v)
    { is.bread<fpreal64>(&v, 1); }
    static void  loadData(UT_IStream &is, UT_Vector2D &v)
    { is.bread<fpreal64>(&v.x(), 1); is.bread<fpreal64>(&v.y(), 1); }
    static void  loadData(UT_IStream &is, UT_Vector3D &v)
    { is.bread<fpreal64>(&v.x(), 1); is.bread<fpreal64>(&v.y(), 1);
      is.bread<fpreal64>(&v.z(), 1); }
    static void  loadData(UT_IStream &is, UT_Vector4D &v)
    { is.bread<fpreal64>(&v.x(), 1); is.bread<fpreal64>(&v.y(), 1);
      is.bread<fpreal64>(&v.z(), 1); is.bread<fpreal64>(&v.w(), 1); }
    static void  loadData(UT_IStream &is, UT_Matrix2D &v)
    { for (int r = 0; r < 2; r++) for (int c = 0; c < 2; c++) is.bread<fpreal64>(&v(r, c), 1); }
    static void  loadData(UT_IStream &is, UT_Matrix3D &v)
    { for (int r = 0; r < 3; r++) for (int c = 0; c < 3; c++) is.bread<fpreal64>(&v(r, c), 1); }
    static void  loadData(UT_IStream &is, UT_Matrix4D &v)
    { for (int r = 0; r < 4; r++) for (int c = 0; c < 4; c++) is.bread<fpreal64>(&v(r, c), 1); }
    static void  loadData(UT_IStream &is, UT_Vector2I &v)
    { is.bread<int64>(&v.x(), 1); is.bread<int64>(&v.y(), 1); }
    static void  loadData(UT_IStream &is, UT_Vector3I &v)
    { is.bread<int64>(&v.x(), 1); is.bread<int64>(&v.y(), 1);
      is.bread<int64>(&v.z(), 1); }
    static void  loadData(UT_IStream &is, UT_Vector4I &v)
    { is.bread<int64>(&v.x(), 1); is.bread<int64>(&v.y(), 1);
      is.bread<int64>(&v.z(), 1); is.bread<int64>(&v.w(), 1); }
    static void  loadData(UT_IStream &is, UT_StringHolder &v)
    { is.bread(v); }
    static void  loadData(UT_IStream &is, UT_SharedPtr<UT_Ramp> &v)
    {   UT_StringHolder   rampdata;
        loadData(is, rampdata);
        if (rampdata.isstring())
        {
            v.reset(new UT_Ramp());
            UT_IStream  istr((const char *) rampdata, rampdata.length(), UT_ISTREAM_ASCII);
            v->load(istr);
        }
        else v.reset();
    }
    static void  loadData(UT_IStream &is, PRM_DataItemHandle &v)
    {   UT_StringHolder   data;
        loadData(is, data);
        if (data.isstring())
        {
            // Find the data type.
            char *colon = UT_StringWrap(data).findChar(':');
            if (colon)
            {
                int             typelen = colon - data.buffer();
                UT_WorkBuffer   type;
                type.strncpy(data.buffer(), typelen);
                UT_IStream  istr(((const char *) data) + typelen + 1, data.length() - (typelen + 1), UT_ISTREAM_BINARY);
                
                v = PRM_DataFactory::parseBinary(type.buffer(), istr);
            }
        }
        else v.reset();
    }

    static void  saveData(std::ostream &os, int64 v)
    { UTwrite(os, &v); }
    static void  saveData(std::ostream &os, bool v)
    { int64 iv = v; UTwrite(os, &iv); }
    static void  saveData(std::ostream &os, fpreal64 v)
    { UTwrite<fpreal64>(os, &v); }
    static void  saveData(std::ostream &os, UT_Vector2D v)
    { UTwrite<fpreal64>(os, &v.x()); UTwrite<fpreal64>(os, &v.y()); }
    static void  saveData(std::ostream &os, UT_Vector3D v)
    { UTwrite<fpreal64>(os, &v.x()); UTwrite<fpreal64>(os, &v.y());
      UTwrite<fpreal64>(os, &v.z()); }
    static void  saveData(std::ostream &os, UT_Vector4D v)
    { UTwrite<fpreal64>(os, &v.x()); UTwrite<fpreal64>(os, &v.y());
      UTwrite<fpreal64>(os, &v.z()); UTwrite<fpreal64>(os, &v.w()); }
    static void  saveData(std::ostream &os, UT_Matrix2D v)
    { for (int r = 0; r < 2; r++) for (int c = 0; c < 2; c++) UTwrite<fpreal64>(os, &v(r, c)); }
    static void  saveData(std::ostream &os, UT_Matrix3D v)
    { for (int r = 0; r < 3; r++) for (int c = 0; c < 3; c++) UTwrite<fpreal64>(os, &v(r, c)); }
    static void  saveData(std::ostream &os, UT_Matrix4D v)
    { for (int r = 0; r < 4; r++) for (int c = 0; c < 4; c++) UTwrite<fpreal64>(os, &v(r, c)); }
    static void  saveData(std::ostream &os, UT_StringHolder s)
    { UT_StringWrap(s).saveBinary(os); }
    static void  saveData(std::ostream &os, UT_SharedPtr<UT_Ramp> s)
    {   UT_StringHolder         result;
        UT_OStringStream        ostr;
        if (s) s->save(ostr);
        result = ostr.str();
        saveData(os, result);
    }
    static void  saveData(std::ostream &os, PRM_DataItemHandle s)
    {   UT_StringHolder         result;
        UT_OStringStream        ostr;
        if (s) 
        {
            ostr << s->getDataTypeToken();
            ostr << ":";
            s->saveBinary(ostr);
        }
        result = ostr.str();
        saveData(os, result);
    }


    void         save(std::ostream &os) const
    {
        int32           v = version();
        UTwrite(os, &v);
        saveData(os, myGroup);
        saveData(os, myGrouptype);
        {
            int64   length = myNumattr.entries();
            UTwrite(os, &length);
            for (exint i = 0; i < length; i++)
            {
                saveData(os, myNumattr(i).enable);
                saveData(os, myNumattr(i).name);
                saveData(os, myNumattr(i).existing);
                saveData(os, myNumattr(i).createvarmap);
                saveData(os, myNumattr(i).varname);
                saveData(os, myNumattr(i)._class);
                saveData(os, myNumattr(i).savetoinfo);
                saveData(os, myNumattr(i).type);
                saveData(os, myNumattr(i).typeinfo);
                saveData(os, myNumattr(i).precision);
                saveData(os, myNumattr(i).size);
                saveData(os, myNumattr(i).defaultv);
                saveData(os, myNumattr(i).writevalues);
                saveData(os, myNumattr(i).uselocal);
                saveData(os, myNumattr(i).valuev);
                saveData(os, myNumattr(i).string);

            }
        }

    }

    bool         load(UT_IStream &is)
    {
        int32           v;
        is.bread(&v, 1);
        if (version() != v)
        {
            // Fail incompatible versions
            return false;
        }
        loadData(is, myGroup);
        loadData(is, myGrouptype);
        {
            int64   length;
            is.read(&length, 1);
            myNumattr.entries(length);
            for (exint i = 0; i < length; i++)
            {
                loadData(is, myNumattr(i).enable);
                loadData(is, myNumattr(i).name);
                loadData(is, myNumattr(i).existing);
                loadData(is, myNumattr(i).createvarmap);
                loadData(is, myNumattr(i).varname);
                loadData(is, myNumattr(i)._class);
                loadData(is, myNumattr(i).savetoinfo);
                loadData(is, myNumattr(i).type);
                loadData(is, myNumattr(i).typeinfo);
                loadData(is, myNumattr(i).precision);
                loadData(is, myNumattr(i).size);
                loadData(is, myNumattr(i).defaultv);
                loadData(is, myNumattr(i).writevalues);
                loadData(is, myNumattr(i).uselocal);
                loadData(is, myNumattr(i).valuev);
                loadData(is, myNumattr(i).string);

            }
        }

        return true;
    }

    const UT_StringHolder & getGroup() const { return myGroup; }
    void setGroup(const UT_StringHolder & val) { myGroup = val; }
    UT_StringHolder opGroup(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getGroup();
        UT_StringHolder result;
        OP_Utils::evalOpParm(result, thissop, "group", cookparms.getCookTime(), 0);
        return result;
    }
    Grouptype getGrouptype() const { return Grouptype(myGrouptype); }
    void setGrouptype(Grouptype val) { myGrouptype = int64(val); }
    Grouptype opGrouptype(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getGrouptype();
        int64 result;
        OP_Utils::evalOpParm(result, thissop, "grouptype", cookparms.getCookTime(), 0);
        return Grouptype(result);
    }
    const UT_Array<Numattr> &getNumattr() const { return myNumattr; }
    void setNumattr(const UT_Array<Numattr> &val) { myNumattr = val; }
    exint opNumattr(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getNumattr().entries();
        exint result;
        OP_Utils::evalOpParm(result, thissop, "numattr", cookparms.getCookTime(), 0);
        return result;
    }
            bool opNumattr_enable(const SOP_NodeVerb::CookParms &cookparms, exint _idx) const
        {
            SOP_Node *thissop = cookparms.getNode();
            if (!thissop) return (myNumattr(_idx).enable);
            int _parmidx = _idx + 1;
            bool result;
            OP_Utils::evalOpParmInst(result, thissop, "enable#", &_parmidx, cookparms.getCookTime(), 0);
            return (result);
        }
        UT_StringHolder opNumattr_name(const SOP_NodeVerb::CookParms &cookparms, exint _idx) const
        {
            SOP_Node *thissop = cookparms.getNode();
            if (!thissop) return (myNumattr(_idx).name);
            int _parmidx = _idx + 1;
            UT_StringHolder result;
            OP_Utils::evalOpParmInst(result, thissop, "name#", &_parmidx, cookparms.getCookTime(), 0);
            return (result);
        }
        int64 opNumattr_existing(const SOP_NodeVerb::CookParms &cookparms, exint _idx) const
        {
            SOP_Node *thissop = cookparms.getNode();
            if (!thissop) return (myNumattr(_idx).existing);
            int _parmidx = _idx + 1;
            int64 result;
            OP_Utils::evalOpParmInst(result, thissop, "existing#", &_parmidx, cookparms.getCookTime(), 0);
            return (result);
        }
        bool opNumattr_createvarmap(const SOP_NodeVerb::CookParms &cookparms, exint _idx) const
        {
            SOP_Node *thissop = cookparms.getNode();
            if (!thissop) return (myNumattr(_idx).createvarmap);
            int _parmidx = _idx + 1;
            bool result;
            OP_Utils::evalOpParmInst(result, thissop, "createvarmap#", &_parmidx, cookparms.getCookTime(), 0);
            return (result);
        }
        UT_StringHolder opNumattr_varname(const SOP_NodeVerb::CookParms &cookparms, exint _idx) const
        {
            SOP_Node *thissop = cookparms.getNode();
            if (!thissop) return (myNumattr(_idx).varname);
            int _parmidx = _idx + 1;
            UT_StringHolder result;
            OP_Utils::evalOpParmInst(result, thissop, "varname#", &_parmidx, cookparms.getCookTime(), 0);
            return (result);
        }
        int64 opNumattr__class(const SOP_NodeVerb::CookParms &cookparms, exint _idx) const
        {
            SOP_Node *thissop = cookparms.getNode();
            if (!thissop) return (myNumattr(_idx)._class);
            int _parmidx = _idx + 1;
            int64 result;
            OP_Utils::evalOpParmInst(result, thissop, "class#", &_parmidx, cookparms.getCookTime(), 0);
            return (result);
        }
        bool opNumattr_savetoinfo(const SOP_NodeVerb::CookParms &cookparms, exint _idx) const
        {
            SOP_Node *thissop = cookparms.getNode();
            if (!thissop) return (myNumattr(_idx).savetoinfo);
            int _parmidx = _idx + 1;
            bool result;
            OP_Utils::evalOpParmInst(result, thissop, "savetoinfo#", &_parmidx, cookparms.getCookTime(), 0);
            return (result);
        }
        int64 opNumattr_type(const SOP_NodeVerb::CookParms &cookparms, exint _idx) const
        {
            SOP_Node *thissop = cookparms.getNode();
            if (!thissop) return (myNumattr(_idx).type);
            int _parmidx = _idx + 1;
            int64 result;
            OP_Utils::evalOpParmInst(result, thissop, "type#", &_parmidx, cookparms.getCookTime(), 0);
            return (result);
        }
        int64 opNumattr_typeinfo(const SOP_NodeVerb::CookParms &cookparms, exint _idx) const
        {
            SOP_Node *thissop = cookparms.getNode();
            if (!thissop) return (myNumattr(_idx).typeinfo);
            int _parmidx = _idx + 1;
            int64 result;
            OP_Utils::evalOpParmInst(result, thissop, "typeinfo#", &_parmidx, cookparms.getCookTime(), 0);
            return (result);
        }
        int64 opNumattr_precision(const SOP_NodeVerb::CookParms &cookparms, exint _idx) const
        {
            SOP_Node *thissop = cookparms.getNode();
            if (!thissop) return (myNumattr(_idx).precision);
            int _parmidx = _idx + 1;
            int64 result;
            OP_Utils::evalOpParmInst(result, thissop, "precision#", &_parmidx, cookparms.getCookTime(), 0);
            return (result);
        }
        int64 opNumattr_size(const SOP_NodeVerb::CookParms &cookparms, exint _idx) const
        {
            SOP_Node *thissop = cookparms.getNode();
            if (!thissop) return (myNumattr(_idx).size);
            int _parmidx = _idx + 1;
            int64 result;
            OP_Utils::evalOpParmInst(result, thissop, "size#", &_parmidx, cookparms.getCookTime(), 0);
            return (result);
        }
        UT_Vector4D opNumattr_defaultv(const SOP_NodeVerb::CookParms &cookparms, exint _idx) const
        {
            SOP_Node *thissop = cookparms.getNode();
            if (!thissop) return (myNumattr(_idx).defaultv);
            int _parmidx = _idx + 1;
            UT_Vector4D result;
            OP_Utils::evalOpParmInst(result, thissop, "default#v", &_parmidx, cookparms.getCookTime(), 0);
            return (result);
        }
        bool opNumattr_writevalues(const SOP_NodeVerb::CookParms &cookparms, exint _idx) const
        {
            SOP_Node *thissop = cookparms.getNode();
            if (!thissop) return (myNumattr(_idx).writevalues);
            int _parmidx = _idx + 1;
            bool result;
            OP_Utils::evalOpParmInst(result, thissop, "writevalues#", &_parmidx, cookparms.getCookTime(), 0);
            return (result);
        }
        bool opNumattr_uselocal(const SOP_NodeVerb::CookParms &cookparms, exint _idx) const
        {
            SOP_Node *thissop = cookparms.getNode();
            if (!thissop) return (myNumattr(_idx).uselocal);
            int _parmidx = _idx + 1;
            bool result;
            OP_Utils::evalOpParmInst(result, thissop, "uselocal#", &_parmidx, cookparms.getCookTime(), 0);
            return (result);
        }
        UT_Vector4D opNumattr_valuev(const SOP_NodeVerb::CookParms &cookparms, exint _idx) const
        {
            SOP_Node *thissop = cookparms.getNode();
            if (!thissop) return (myNumattr(_idx).valuev);
            int _parmidx = _idx + 1;
            UT_Vector4D result;
            OP_Utils::evalOpParmInst(result, thissop, "value#v", &_parmidx, cookparms.getCookTime(), 0);
            return (result);
        }
        UT_StringHolder opNumattr_string(const SOP_NodeVerb::CookParms &cookparms, exint _idx) const
        {
            SOP_Node *thissop = cookparms.getNode();
            if (!thissop) return (myNumattr(_idx).string);
            int _parmidx = _idx + 1;
            UT_StringHolder result;
            OP_Utils::evalOpParmInst(result, thissop, "string#", &_parmidx, cookparms.getCookTime(), 0);
            return (result);
        }


private:
    UT_StringHolder myGroup;
    int64 myGrouptype;
    UT_Array<Numattr> myNumattr;

};
