/* Automagically Generated by generate_proto.py
 * Do not Edit
 */
#pragma once

#include <SOP/SOP_NodeVerb.h>
#include <OP/OP_Utils.h>
#include <PRM/PRM_Parm.h>
#include <UT/UT_IStream.h>
#include <UT/UT_NTStreamUtil.h>
#include <UT/UT_Ramp.h>
#include <UT/UT_SharedPtr.h>
#include <UT/UT_StringHolder.h>
#include <UT/UT_StringStream.h>
#include <UT/UT_VectorTypes.h>
#include <SYS/SYS_Types.h>

using namespace UT::Literal;

class DEP_MicroNode;
namespace SOP_ProximityCaptureEnums
{
    enum class Captureregionsop
    {
        DISPLAY = 0,
        RENDER,
        CAPTURE
    };
    enum class Cookat
    {
        CAPTUREFRAME = 0,
        EVERYFRAME
    };
    enum class Weightmethod
    {
        WEIGHTCLOSESTREGIONOBJECT = 0,
        WEIGHTCLOSESTCONNECTINGREGIONOBJECT
    };
    enum class Weightfrom
    {
        CV = 0,
        SURFACE
    };
    enum class Color
    {
        COLDEFAULT = 0,
        COLREGION
    };
}


class SOP_API SOP_ProximityCaptureParms  : public SOP_NodeParms
{
public:
    static int version() { return 1; }

    SOP_ProximityCaptureParms()
    {
        myGroup = ""_sh;
        myRootpath = ""_sh;
        myExtraregions = ""_sh;
        myCaptureregionsop = 2;
        myDosubnets = false;
        myRelativeskel = false;
        myUsecaptpose = false;
        myCookat = 0;
        myCaptframe = 0;
        myWeightmethod = 0;
        myWeightfrom = 0;
        myDropoff = 1;
        myMaxinfluences = 2;
        myNormweights = false;
        myDestroyweights = false;
        myBlendfactor = 1;
        myColor = 0;
        myZeroweightcolor = UT_Vector3D(1,1,1);

    }

    explicit SOP_ProximityCaptureParms(const SOP_ProximityCaptureParms &) = default;

    virtual ~SOP_ProximityCaptureParms() {}

    bool operator==(const SOP_ProximityCaptureParms &src) const
    {
        if (myGroup != src.myGroup) return false;
        if (myRootpath != src.myRootpath) return false;
        if (myExtraregions != src.myExtraregions) return false;
        if (myCaptureregionsop != src.myCaptureregionsop) return false;
        if (myDosubnets != src.myDosubnets) return false;
        if (myRelativeskel != src.myRelativeskel) return false;
        if (myUsecaptpose != src.myUsecaptpose) return false;
        if (myCookat != src.myCookat) return false;
        if (myCaptframe != src.myCaptframe) return false;
        if (myWeightmethod != src.myWeightmethod) return false;
        if (myWeightfrom != src.myWeightfrom) return false;
        if (myDropoff != src.myDropoff) return false;
        if (myMaxinfluences != src.myMaxinfluences) return false;
        if (myNormweights != src.myNormweights) return false;
        if (myDestroyweights != src.myDestroyweights) return false;
        if (myBlendfactor != src.myBlendfactor) return false;
        if (myColor != src.myColor) return false;
        if (myZeroweightcolor != src.myZeroweightcolor) return false;

        return true;
    }
    bool operator!=(const SOP_ProximityCaptureParms &src) const
    {
        return !operator==(src);
    }
    using Captureregionsop = SOP_ProximityCaptureEnums::Captureregionsop;
    using Cookat = SOP_ProximityCaptureEnums::Cookat;
    using Weightmethod = SOP_ProximityCaptureEnums::Weightmethod;
    using Weightfrom = SOP_ProximityCaptureEnums::Weightfrom;
    using Color = SOP_ProximityCaptureEnums::Color;



    void        buildFromOp(const OP_Node *node, fpreal time, DEP_MicroNode *depnode)
    {
        if (true)
            OP_Utils::evalOpParm(myGroup, node, "group", time, 0);
        else myGroup = ""_sh;
        if (true)
            OP_Utils::evalOpParm(myRootpath, node, "rootpath", time, 0);
        else myRootpath = ""_sh;
        if (true)
            OP_Utils::evalOpParm(myExtraregions, node, "extraregions", time, 0);
        else myExtraregions = ""_sh;
        if (true)
            OP_Utils::evalOpParm(myCaptureregionsop, node, "captureregionsop", time, 0);
        else myCaptureregionsop = 2;
        if (true)
            OP_Utils::evalOpParm(myDosubnets, node, "dosubnets", time, 0);
        else myDosubnets = false;
        if (true)
            OP_Utils::evalOpParm(myRelativeskel, node, "relativeskel", time, 0);
        else myRelativeskel = false;
        if (true)
            OP_Utils::evalOpParm(myUsecaptpose, node, "usecaptpose", time, 0);
        else myUsecaptpose = false;
        if (true && ( (!(((getUsecaptpose()!=0)))) ) )
            OP_Utils::evalOpParm(myCookat, node, "cookat", time, 0);
        else myCookat = 0;
        if (true && ( (!(((getUsecaptpose()!=0))||((int64(getCookat())==1)))) ) )
            OP_Utils::evalOpParm(myCaptframe, node, "captframe", time, 0);
        else myCaptframe = 0;
        if (true)
            OP_Utils::evalOpParm(myWeightmethod, node, "weightmethod", time, 0);
        else myWeightmethod = 0;
        if (true)
            OP_Utils::evalOpParm(myWeightfrom, node, "weightFrom", time, 0);
        else myWeightfrom = 0;
        if (true)
            OP_Utils::evalOpParm(myDropoff, node, "dropoff", time, 0);
        else myDropoff = 1;
        if (true)
            OP_Utils::evalOpParm(myMaxinfluences, node, "maxinfluences", time, 0);
        else myMaxinfluences = 2;
        if (true)
            OP_Utils::evalOpParm(myNormweights, node, "normweights", time, 0);
        else myNormweights = false;
        if (true)
            OP_Utils::evalOpParm(myDestroyweights, node, "destroyweights", time, 0);
        else myDestroyweights = false;
        if (true && ( (!(((getDestroyweights()!=0)))) ) )
            OP_Utils::evalOpParm(myBlendfactor, node, "blendfactor", time, 0);
        else myBlendfactor = 1;
        if (true)
            OP_Utils::evalOpParm(myColor, node, "color", time, 0);
        else myColor = 0;
        if (true)
            OP_Utils::evalOpParm(myZeroweightcolor, node, "zeroweightcolor", time, 0);
        else myZeroweightcolor = UT_Vector3D(1,1,1);

    }


    virtual void loadFromOpSubclass(const LoadParms &loadparms)
    {
        buildFromOp(loadparms.node(), loadparms.context().getTime(), loadparms.depnode());
    }


    virtual void copyFrom(const SOP_NodeParms *src)
    {
        *this = *((const SOP_ProximityCaptureParms *)src);
    }

    template <typename T>
    void
    doGetParmValue(exint idx, T &value) const
    {
        switch (idx)
        {
            case 0:
                coerceValue(value, myGroup);
                break;
            case 1:
                coerceValue(value, myRootpath);
                break;
            case 2:
                coerceValue(value, myExtraregions);
                break;
            case 3:
                coerceValue(value, myCaptureregionsop);
                break;
            case 4:
                coerceValue(value, myDosubnets);
                break;
            case 5:
                coerceValue(value, myRelativeskel);
                break;
            case 6:
                coerceValue(value, myUsecaptpose);
                break;
            case 7:
                coerceValue(value, myCookat);
                break;
            case 8:
                coerceValue(value, myCaptframe);
                break;
            case 9:
                coerceValue(value, myWeightmethod);
                break;
            case 10:
                coerceValue(value, myWeightfrom);
                break;
            case 11:
                coerceValue(value, myDropoff);
                break;
            case 12:
                coerceValue(value, myMaxinfluences);
                break;
            case 13:
                coerceValue(value, myNormweights);
                break;
            case 14:
                coerceValue(value, myDestroyweights);
                break;
            case 15:
                coerceValue(value, myBlendfactor);
                break;
            case 16:
                coerceValue(value, myColor);
                break;
            case 17:
                coerceValue(value, myZeroweightcolor);
                break;

        }
    }

    void        getParmValue(exint idx, exint &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, fpreal &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Vector2D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Vector3D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Vector4D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Matrix2D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Matrix3D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Matrix4D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_StringHolder &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_SharedPtr<UT_Ramp> &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, PRM_DataItemHandle &value) const
    { doGetParmValue(idx, value); }

    template <typename T>
    void
    doSetParmValue(exint idx, const T &value) 
    {
        switch (idx)
        {
            case 0:
                coerceValue(myGroup, value);
                break;
            case 1:
                coerceValue(myRootpath, value);
                break;
            case 2:
                coerceValue(myExtraregions, value);
                break;
            case 3:
                coerceValue(myCaptureregionsop, value);
                break;
            case 4:
                coerceValue(myDosubnets, value);
                break;
            case 5:
                coerceValue(myRelativeskel, value);
                break;
            case 6:
                coerceValue(myUsecaptpose, value);
                break;
            case 7:
                coerceValue(myCookat, value);
                break;
            case 8:
                coerceValue(myCaptframe, value);
                break;
            case 9:
                coerceValue(myWeightmethod, value);
                break;
            case 10:
                coerceValue(myWeightfrom, value);
                break;
            case 11:
                coerceValue(myDropoff, value);
                break;
            case 12:
                coerceValue(myMaxinfluences, value);
                break;
            case 13:
                coerceValue(myNormweights, value);
                break;
            case 14:
                coerceValue(myDestroyweights, value);
                break;
            case 15:
                coerceValue(myBlendfactor, value);
                break;
            case 16:
                coerceValue(myColor, value);
                break;
            case 17:
                coerceValue(myZeroweightcolor, value);
                break;

        }
    }

    void        setParmValue(exint idx, const exint &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const fpreal &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Vector2D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Vector3D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Vector4D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Matrix2D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Matrix3D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Matrix4D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_StringHolder &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_SharedPtr<UT_Ramp> &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const PRM_DataItemHandle &value) 
    { doSetParmValue(idx, value); }

    virtual exint    getNumParms() const
    {
        return 18;
    }

    virtual const char *getParmName(exint fieldnum) const
    {
        switch (fieldnum)
        {
            case 0:
                return "group";
            case 1:
                return "rootpath";
            case 2:
                return "extraregions";
            case 3:
                return "captureregionsop";
            case 4:
                return "dosubnets";
            case 5:
                return "relativeskel";
            case 6:
                return "usecaptpose";
            case 7:
                return "cookat";
            case 8:
                return "captframe";
            case 9:
                return "weightmethod";
            case 10:
                return "weightFrom";
            case 11:
                return "dropoff";
            case 12:
                return "maxinfluences";
            case 13:
                return "normweights";
            case 14:
                return "destroyweights";
            case 15:
                return "blendfactor";
            case 16:
                return "color";
            case 17:
                return "zeroweightcolor";

        }
        return 0;
    }

    virtual ParmType getParmType(exint fieldnum) const
    {
        switch (fieldnum)
        {
                case 0:
                    return PARM_STRING;
                case 1:
                    return PARM_STRING;
                case 2:
                    return PARM_STRING;
                case 3:
                    return PARM_INTEGER;
                case 4:
                    return PARM_INTEGER;
                case 5:
                    return PARM_INTEGER;
                case 6:
                    return PARM_INTEGER;
                case 7:
                    return PARM_INTEGER;
                case 8:
                    return PARM_FLOAT;
                case 9:
                    return PARM_INTEGER;
                case 10:
                    return PARM_INTEGER;
                case 11:
                    return PARM_FLOAT;
                case 12:
                    return PARM_INTEGER;
                case 13:
                    return PARM_INTEGER;
                case 14:
                    return PARM_INTEGER;
                case 15:
                    return PARM_FLOAT;
                case 16:
                    return PARM_INTEGER;
                case 17:
                    return PARM_VECTOR3;

        }
        return PARM_UNSUPPORTED;
    }

    // Boiler plate to load individual types.
    static void  loadData(UT_IStream &is, int64 &v)
    { is.bread(&v, 1); }
    static void  loadData(UT_IStream &is, bool &v)
    { int64     iv; is.bread(&iv, 1); v = iv; }
    static void  loadData(UT_IStream &is, fpreal64 &v)
    { is.bread<fpreal64>(&v, 1); }
    static void  loadData(UT_IStream &is, UT_Vector2D &v)
    { is.bread<fpreal64>(&v.x(), 1); is.bread<fpreal64>(&v.y(), 1); }
    static void  loadData(UT_IStream &is, UT_Vector3D &v)
    { is.bread<fpreal64>(&v.x(), 1); is.bread<fpreal64>(&v.y(), 1);
      is.bread<fpreal64>(&v.z(), 1); }
    static void  loadData(UT_IStream &is, UT_Vector4D &v)
    { is.bread<fpreal64>(&v.x(), 1); is.bread<fpreal64>(&v.y(), 1);
      is.bread<fpreal64>(&v.z(), 1); is.bread<fpreal64>(&v.w(), 1); }
    static void  loadData(UT_IStream &is, UT_Matrix2D &v)
    { for (int r = 0; r < 2; r++) for (int c = 0; c < 2; c++) is.bread<fpreal64>(&v(r, c), 1); }
    static void  loadData(UT_IStream &is, UT_Matrix3D &v)
    { for (int r = 0; r < 3; r++) for (int c = 0; c < 3; c++) is.bread<fpreal64>(&v(r, c), 1); }
    static void  loadData(UT_IStream &is, UT_Matrix4D &v)
    { for (int r = 0; r < 4; r++) for (int c = 0; c < 4; c++) is.bread<fpreal64>(&v(r, c), 1); }
    static void  loadData(UT_IStream &is, UT_Vector2I &v)
    { is.bread<int64>(&v.x(), 1); is.bread<int64>(&v.y(), 1); }
    static void  loadData(UT_IStream &is, UT_Vector3I &v)
    { is.bread<int64>(&v.x(), 1); is.bread<int64>(&v.y(), 1);
      is.bread<int64>(&v.z(), 1); }
    static void  loadData(UT_IStream &is, UT_Vector4I &v)
    { is.bread<int64>(&v.x(), 1); is.bread<int64>(&v.y(), 1);
      is.bread<int64>(&v.z(), 1); is.bread<int64>(&v.w(), 1); }
    static void  loadData(UT_IStream &is, UT_StringHolder &v)
    { is.bread(v); }
    static void  loadData(UT_IStream &is, UT_SharedPtr<UT_Ramp> &v)
    {   UT_StringHolder   rampdata;
        loadData(is, rampdata);
        if (rampdata.isstring())
        {
            v.reset(new UT_Ramp());
            UT_IStream  istr((const char *) rampdata, rampdata.length(), UT_ISTREAM_ASCII);
            v->load(istr);
        }
        else v.reset();
    }
    static void  loadData(UT_IStream &is, PRM_DataItemHandle &v)
    {   UT_StringHolder   data;
        loadData(is, data);
        if (data.isstring())
        {
            // Find the data type.
            char *colon = UT_StringWrap(data).findChar(':');
            if (colon)
            {
                int             typelen = colon - data.buffer();
                UT_WorkBuffer   type;
                type.strncpy(data.buffer(), typelen);
                UT_IStream  istr(((const char *) data) + typelen + 1, data.length() - (typelen + 1), UT_ISTREAM_BINARY);
                
                v = PRM_DataFactory::parseBinary(type.buffer(), istr);
            }
        }
        else v.reset();
    }

    static void  saveData(std::ostream &os, int64 v)
    { UTwrite(os, &v); }
    static void  saveData(std::ostream &os, bool v)
    { int64 iv = v; UTwrite(os, &iv); }
    static void  saveData(std::ostream &os, fpreal64 v)
    { UTwrite<fpreal64>(os, &v); }
    static void  saveData(std::ostream &os, UT_Vector2D v)
    { UTwrite<fpreal64>(os, &v.x()); UTwrite<fpreal64>(os, &v.y()); }
    static void  saveData(std::ostream &os, UT_Vector3D v)
    { UTwrite<fpreal64>(os, &v.x()); UTwrite<fpreal64>(os, &v.y());
      UTwrite<fpreal64>(os, &v.z()); }
    static void  saveData(std::ostream &os, UT_Vector4D v)
    { UTwrite<fpreal64>(os, &v.x()); UTwrite<fpreal64>(os, &v.y());
      UTwrite<fpreal64>(os, &v.z()); UTwrite<fpreal64>(os, &v.w()); }
    static void  saveData(std::ostream &os, UT_Matrix2D v)
    { for (int r = 0; r < 2; r++) for (int c = 0; c < 2; c++) UTwrite<fpreal64>(os, &v(r, c)); }
    static void  saveData(std::ostream &os, UT_Matrix3D v)
    { for (int r = 0; r < 3; r++) for (int c = 0; c < 3; c++) UTwrite<fpreal64>(os, &v(r, c)); }
    static void  saveData(std::ostream &os, UT_Matrix4D v)
    { for (int r = 0; r < 4; r++) for (int c = 0; c < 4; c++) UTwrite<fpreal64>(os, &v(r, c)); }
    static void  saveData(std::ostream &os, UT_StringHolder s)
    { UT_StringWrap(s).saveBinary(os); }
    static void  saveData(std::ostream &os, UT_SharedPtr<UT_Ramp> s)
    {   UT_StringHolder         result;
        UT_OStringStream        ostr;
        if (s) s->save(ostr);
        result = ostr.str();
        saveData(os, result);
    }
    static void  saveData(std::ostream &os, PRM_DataItemHandle s)
    {   UT_StringHolder         result;
        UT_OStringStream        ostr;
        if (s) 
        {
            ostr << s->getDataTypeToken();
            ostr << ":";
            s->saveBinary(ostr);
        }
        result = ostr.str();
        saveData(os, result);
    }


    void         save(std::ostream &os) const
    {
        int32           v = version();
        UTwrite(os, &v);
        saveData(os, myGroup);
        saveData(os, myRootpath);
        saveData(os, myExtraregions);
        saveData(os, myCaptureregionsop);
        saveData(os, myDosubnets);
        saveData(os, myRelativeskel);
        saveData(os, myUsecaptpose);
        saveData(os, myCookat);
        saveData(os, myCaptframe);
        saveData(os, myWeightmethod);
        saveData(os, myWeightfrom);
        saveData(os, myDropoff);
        saveData(os, myMaxinfluences);
        saveData(os, myNormweights);
        saveData(os, myDestroyweights);
        saveData(os, myBlendfactor);
        saveData(os, myColor);
        saveData(os, myZeroweightcolor);

    }

    bool         load(UT_IStream &is)
    {
        int32           v;
        is.bread(&v, 1);
        if (version() != v)
        {
            // Fail incompatible versions
            return false;
        }
        loadData(is, myGroup);
        loadData(is, myRootpath);
        loadData(is, myExtraregions);
        loadData(is, myCaptureregionsop);
        loadData(is, myDosubnets);
        loadData(is, myRelativeskel);
        loadData(is, myUsecaptpose);
        loadData(is, myCookat);
        loadData(is, myCaptframe);
        loadData(is, myWeightmethod);
        loadData(is, myWeightfrom);
        loadData(is, myDropoff);
        loadData(is, myMaxinfluences);
        loadData(is, myNormweights);
        loadData(is, myDestroyweights);
        loadData(is, myBlendfactor);
        loadData(is, myColor);
        loadData(is, myZeroweightcolor);

        return true;
    }

    const UT_StringHolder & getGroup() const { return myGroup; }
    void setGroup(const UT_StringHolder & val) { myGroup = val; }
    UT_StringHolder opGroup(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getGroup();
        UT_StringHolder result;
        OP_Utils::evalOpParm(result, thissop, "group", cookparms.getCookTime(), 0);
        return result;
    }
    const UT_StringHolder & getRootpath() const { return myRootpath; }
    void setRootpath(const UT_StringHolder & val) { myRootpath = val; }
    UT_StringHolder opRootpath(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getRootpath();
        UT_StringHolder result;
        OP_Utils::evalOpParm(result, thissop, "rootpath", cookparms.getCookTime(), 0);
        return result;
    }
    const UT_StringHolder & getExtraregions() const { return myExtraregions; }
    void setExtraregions(const UT_StringHolder & val) { myExtraregions = val; }
    UT_StringHolder opExtraregions(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getExtraregions();
        UT_StringHolder result;
        OP_Utils::evalOpParm(result, thissop, "extraregions", cookparms.getCookTime(), 0);
        return result;
    }
    Captureregionsop getCaptureregionsop() const { return Captureregionsop(myCaptureregionsop); }
    void setCaptureregionsop(Captureregionsop val) { myCaptureregionsop = int64(val); }
    Captureregionsop opCaptureregionsop(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getCaptureregionsop();
        int64 result;
        OP_Utils::evalOpParm(result, thissop, "captureregionsop", cookparms.getCookTime(), 0);
        return Captureregionsop(result);
    }
    bool getDosubnets() const { return myDosubnets; }
    void setDosubnets(bool val) { myDosubnets = val; }
    bool opDosubnets(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getDosubnets();
        bool result;
        OP_Utils::evalOpParm(result, thissop, "dosubnets", cookparms.getCookTime(), 0);
        return result;
    }
    bool getRelativeskel() const { return myRelativeskel; }
    void setRelativeskel(bool val) { myRelativeskel = val; }
    bool opRelativeskel(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getRelativeskel();
        bool result;
        OP_Utils::evalOpParm(result, thissop, "relativeskel", cookparms.getCookTime(), 0);
        return result;
    }
    bool getUsecaptpose() const { return myUsecaptpose; }
    void setUsecaptpose(bool val) { myUsecaptpose = val; }
    bool opUsecaptpose(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getUsecaptpose();
        bool result;
        OP_Utils::evalOpParm(result, thissop, "usecaptpose", cookparms.getCookTime(), 0);
        return result;
    }
    Cookat getCookat() const { return Cookat(myCookat); }
    void setCookat(Cookat val) { myCookat = int64(val); }
    Cookat opCookat(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getCookat();
        int64 result;
        OP_Utils::evalOpParm(result, thissop, "cookat", cookparms.getCookTime(), 0);
        return Cookat(result);
    }
    fpreal64 getCaptframe() const { return myCaptframe; }
    void setCaptframe(fpreal64 val) { myCaptframe = val; }
    fpreal64 opCaptframe(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getCaptframe();
        fpreal64 result;
        OP_Utils::evalOpParm(result, thissop, "captframe", cookparms.getCookTime(), 0);
        return result;
    }
    Weightmethod getWeightmethod() const { return Weightmethod(myWeightmethod); }
    void setWeightmethod(Weightmethod val) { myWeightmethod = int64(val); }
    Weightmethod opWeightmethod(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getWeightmethod();
        int64 result;
        OP_Utils::evalOpParm(result, thissop, "weightmethod", cookparms.getCookTime(), 0);
        return Weightmethod(result);
    }
    Weightfrom getWeightfrom() const { return Weightfrom(myWeightfrom); }
    void setWeightfrom(Weightfrom val) { myWeightfrom = int64(val); }
    Weightfrom opWeightfrom(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getWeightfrom();
        int64 result;
        OP_Utils::evalOpParm(result, thissop, "weightFrom", cookparms.getCookTime(), 0);
        return Weightfrom(result);
    }
    fpreal64 getDropoff() const { return myDropoff; }
    void setDropoff(fpreal64 val) { myDropoff = val; }
    fpreal64 opDropoff(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getDropoff();
        fpreal64 result;
        OP_Utils::evalOpParm(result, thissop, "dropoff", cookparms.getCookTime(), 0);
        return result;
    }
    int64 getMaxinfluences() const { return myMaxinfluences; }
    void setMaxinfluences(int64 val) { myMaxinfluences = val; }
    int64 opMaxinfluences(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getMaxinfluences();
        int64 result;
        OP_Utils::evalOpParm(result, thissop, "maxinfluences", cookparms.getCookTime(), 0);
        return result;
    }
    bool getNormweights() const { return myNormweights; }
    void setNormweights(bool val) { myNormweights = val; }
    bool opNormweights(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getNormweights();
        bool result;
        OP_Utils::evalOpParm(result, thissop, "normweights", cookparms.getCookTime(), 0);
        return result;
    }
    bool getDestroyweights() const { return myDestroyweights; }
    void setDestroyweights(bool val) { myDestroyweights = val; }
    bool opDestroyweights(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getDestroyweights();
        bool result;
        OP_Utils::evalOpParm(result, thissop, "destroyweights", cookparms.getCookTime(), 0);
        return result;
    }
    fpreal64 getBlendfactor() const { return myBlendfactor; }
    void setBlendfactor(fpreal64 val) { myBlendfactor = val; }
    fpreal64 opBlendfactor(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getBlendfactor();
        fpreal64 result;
        OP_Utils::evalOpParm(result, thissop, "blendfactor", cookparms.getCookTime(), 0);
        return result;
    }
    Color getColor() const { return Color(myColor); }
    void setColor(Color val) { myColor = int64(val); }
    Color opColor(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getColor();
        int64 result;
        OP_Utils::evalOpParm(result, thissop, "color", cookparms.getCookTime(), 0);
        return Color(result);
    }
    UT_Vector3D getZeroweightcolor() const { return myZeroweightcolor; }
    void setZeroweightcolor(UT_Vector3D val) { myZeroweightcolor = val; }
    UT_Vector3D opZeroweightcolor(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getZeroweightcolor();
        UT_Vector3D result;
        OP_Utils::evalOpParm(result, thissop, "zeroweightcolor", cookparms.getCookTime(), 0);
        return result;
    }

private:
    UT_StringHolder myGroup;
    UT_StringHolder myRootpath;
    UT_StringHolder myExtraregions;
    int64 myCaptureregionsop;
    bool myDosubnets;
    bool myRelativeskel;
    bool myUsecaptpose;
    int64 myCookat;
    fpreal64 myCaptframe;
    int64 myWeightmethod;
    int64 myWeightfrom;
    fpreal64 myDropoff;
    int64 myMaxinfluences;
    bool myNormweights;
    bool myDestroyweights;
    fpreal64 myBlendfactor;
    int64 myColor;
    UT_Vector3D myZeroweightcolor;

};
