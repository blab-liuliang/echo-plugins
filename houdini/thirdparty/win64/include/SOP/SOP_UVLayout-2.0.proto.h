/* Automagically Generated by generate_proto.py
 * Do not Edit
 */
#pragma once

#include <SOP/SOP_NodeVerb.h>
#include <OP/OP_Utils.h>
#include <PRM/PRM_Parm.h>
#include <UT/UT_IStream.h>
#include <UT/UT_NTStreamUtil.h>
#include <UT/UT_Ramp.h>
#include <UT/UT_SharedPtr.h>
#include <UT/UT_StringHolder.h>
#include <UT/UT_StringStream.h>
#include <UT/UT_VectorTypes.h>
#include <SYS/SYS_Types.h>

using namespace UT::Literal;

class DEP_MicroNode;
namespace SOP_UVLayout_2_0Enums
{
    enum class Packing
    {
        ONEFRAME = 0,
        MULTIFRAMES,
        USEUDIM,
        CURRENTTILE
    };
    enum class Resolution
    {
        RES1 = 0,
        RES2,
        RES3,
        RES4,
        RES5
    };
}


class SOP_API SOP_UVLayout_2_0Parms  : public SOP_NodeParms
{
public:
    static int version() { return 1; }

    SOP_UVLayout_2_0Parms()
    {
        myUvAttr = "uv"_sh;
        myGroup = ""_sh;
        myPackBetween = false;
        myAdditionalSeams = ""_sh;
        myPacking = 0;
        myScale = 1;
        myPadding = 1;
        myPaddingBoundary = false;
        myPackInCavities = false;
        myBboxCenter = UT_Vector2D(0.5,0.5);
        myBboxSize = UT_Vector2D(1,1);
        myCorrectAreas = false;
        myAxisAlignIslands = false;
        myRotations = 4;
        myIterations = 1;
        myRandSeed = 5489;
        myResolution = 2;
        myUvTolerance = 1e-05;
        myScaleTolerance = 0.005;

    }

    explicit SOP_UVLayout_2_0Parms(const SOP_UVLayout_2_0Parms &) = default;

    virtual ~SOP_UVLayout_2_0Parms() {}

    bool operator==(const SOP_UVLayout_2_0Parms &src) const
    {
        if (myUvAttr != src.myUvAttr) return false;
        if (myGroup != src.myGroup) return false;
        if (myPackBetween != src.myPackBetween) return false;
        if (myAdditionalSeams != src.myAdditionalSeams) return false;
        if (myPacking != src.myPacking) return false;
        if (myScale != src.myScale) return false;
        if (myPadding != src.myPadding) return false;
        if (myPaddingBoundary != src.myPaddingBoundary) return false;
        if (myPackInCavities != src.myPackInCavities) return false;
        if (myBboxCenter != src.myBboxCenter) return false;
        if (myBboxSize != src.myBboxSize) return false;
        if (myCorrectAreas != src.myCorrectAreas) return false;
        if (myAxisAlignIslands != src.myAxisAlignIslands) return false;
        if (myRotations != src.myRotations) return false;
        if (myIterations != src.myIterations) return false;
        if (myRandSeed != src.myRandSeed) return false;
        if (myResolution != src.myResolution) return false;
        if (myUvTolerance != src.myUvTolerance) return false;
        if (myScaleTolerance != src.myScaleTolerance) return false;

        return true;
    }
    bool operator!=(const SOP_UVLayout_2_0Parms &src) const
    {
        return !operator==(src);
    }
    using Packing = SOP_UVLayout_2_0Enums::Packing;
    using Resolution = SOP_UVLayout_2_0Enums::Resolution;



    void        buildFromOp(const OP_Node *node, fpreal time, DEP_MicroNode *depnode)
    {
        if (true)
            OP_Utils::evalOpParm(myUvAttr, node, "uvattr", time, 0);
        else myUvAttr = "uv"_sh;
        if (true)
            OP_Utils::evalOpParm(myGroup, node, "group", time, 0);
        else myGroup = ""_sh;
        if (true)
            OP_Utils::evalOpParm(myPackBetween, node, "packbetween", time, 0);
        else myPackBetween = false;
        if (true)
            OP_Utils::evalOpParm(myAdditionalSeams, node, "additionalseams", time, 0);
        else myAdditionalSeams = ""_sh;
        if (true)
            OP_Utils::evalOpParm(myPacking, node, "packing", time, 0);
        else myPacking = 0;
        if (true && ( (!(((int64(getPacking())!=1)))) ) )
            OP_Utils::evalOpParm(myScale, node, "scale", time, 0);
        else myScale = 1;
        if (true)
            OP_Utils::evalOpParm(myPadding, node, "padding", time, 0);
        else myPadding = 1;
        if (true)
            OP_Utils::evalOpParm(myPaddingBoundary, node, "paddingboundary", time, 0);
        else myPaddingBoundary = false;
        if (true)
            OP_Utils::evalOpParm(myPackInCavities, node, "packincavities", time, 0);
        else myPackInCavities = false;
        if (true && ( (!(((int64(getPacking())!=0)))) ) )
            OP_Utils::evalOpParm(myBboxCenter, node, "bboxcenter", time, 0);
        else myBboxCenter = UT_Vector2D(0.5,0.5);
        if (true && ( (!(((int64(getPacking())!=0)))) ) )
            OP_Utils::evalOpParm(myBboxSize, node, "bboxsize", time, 0);
        else myBboxSize = UT_Vector2D(1,1);
        if (true)
            OP_Utils::evalOpParm(myCorrectAreas, node, "correctareas", time, 0);
        else myCorrectAreas = false;
        if (true)
            OP_Utils::evalOpParm(myAxisAlignIslands, node, "axisalignislands", time, 0);
        else myAxisAlignIslands = false;
        if (true)
            OP_Utils::evalOpParm(myRotations, node, "rotations", time, 0);
        else myRotations = 4;
        if (true)
            OP_Utils::evalOpParm(myIterations, node, "iterations", time, 0);
        else myIterations = 1;
        if (true && ( (!(((int64(getIterations())==1)))) ) )
            OP_Utils::evalOpParm(myRandSeed, node, "randseed", time, 0);
        else myRandSeed = 5489;
        if (true)
            OP_Utils::evalOpParm(myResolution, node, "resolution", time, 0);
        else myResolution = 2;
        if (true)
            OP_Utils::evalOpParm(myUvTolerance, node, "uvtolerance", time, 0);
        else myUvTolerance = 1e-05;
        if (true && ( (!(((int64(getPacking())==1)))) ) )
            OP_Utils::evalOpParm(myScaleTolerance, node, "scaletolerance", time, 0);
        else myScaleTolerance = 0.005;

    }


    virtual void loadFromOpSubclass(const LoadParms &loadparms)
    {
        buildFromOp(loadparms.node(), loadparms.context().getTime(), loadparms.depnode());
    }


    virtual void copyFrom(const SOP_NodeParms *src)
    {
        *this = *((const SOP_UVLayout_2_0Parms *)src);
    }

    template <typename T>
    void
    doGetParmValue(exint idx, T &value) const
    {
        switch (idx)
        {
            case 0:
                coerceValue(value, myUvAttr);
                break;
            case 1:
                coerceValue(value, myGroup);
                break;
            case 2:
                coerceValue(value, myPackBetween);
                break;
            case 3:
                coerceValue(value, myAdditionalSeams);
                break;
            case 4:
                coerceValue(value, myPacking);
                break;
            case 5:
                coerceValue(value, myScale);
                break;
            case 6:
                coerceValue(value, myPadding);
                break;
            case 7:
                coerceValue(value, myPaddingBoundary);
                break;
            case 8:
                coerceValue(value, myPackInCavities);
                break;
            case 9:
                coerceValue(value, myBboxCenter);
                break;
            case 10:
                coerceValue(value, myBboxSize);
                break;
            case 11:
                coerceValue(value, myCorrectAreas);
                break;
            case 12:
                coerceValue(value, myAxisAlignIslands);
                break;
            case 13:
                coerceValue(value, myRotations);
                break;
            case 14:
                coerceValue(value, myIterations);
                break;
            case 15:
                coerceValue(value, myRandSeed);
                break;
            case 16:
                coerceValue(value, myResolution);
                break;
            case 17:
                coerceValue(value, myUvTolerance);
                break;
            case 18:
                coerceValue(value, myScaleTolerance);
                break;

        }
    }

    void        getParmValue(exint idx, exint &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, fpreal &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Vector2D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Vector3D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Vector4D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Matrix2D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Matrix3D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Matrix4D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_StringHolder &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_SharedPtr<UT_Ramp> &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, PRM_DataItemHandle &value) const
    { doGetParmValue(idx, value); }

    template <typename T>
    void
    doSetParmValue(exint idx, const T &value) 
    {
        switch (idx)
        {
            case 0:
                coerceValue(myUvAttr, value);
                break;
            case 1:
                coerceValue(myGroup, value);
                break;
            case 2:
                coerceValue(myPackBetween, value);
                break;
            case 3:
                coerceValue(myAdditionalSeams, value);
                break;
            case 4:
                coerceValue(myPacking, value);
                break;
            case 5:
                coerceValue(myScale, value);
                break;
            case 6:
                coerceValue(myPadding, value);
                break;
            case 7:
                coerceValue(myPaddingBoundary, value);
                break;
            case 8:
                coerceValue(myPackInCavities, value);
                break;
            case 9:
                coerceValue(myBboxCenter, value);
                break;
            case 10:
                coerceValue(myBboxSize, value);
                break;
            case 11:
                coerceValue(myCorrectAreas, value);
                break;
            case 12:
                coerceValue(myAxisAlignIslands, value);
                break;
            case 13:
                coerceValue(myRotations, value);
                break;
            case 14:
                coerceValue(myIterations, value);
                break;
            case 15:
                coerceValue(myRandSeed, value);
                break;
            case 16:
                coerceValue(myResolution, value);
                break;
            case 17:
                coerceValue(myUvTolerance, value);
                break;
            case 18:
                coerceValue(myScaleTolerance, value);
                break;

        }
    }

    void        setParmValue(exint idx, const exint &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const fpreal &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Vector2D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Vector3D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Vector4D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Matrix2D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Matrix3D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Matrix4D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_StringHolder &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_SharedPtr<UT_Ramp> &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const PRM_DataItemHandle &value) 
    { doSetParmValue(idx, value); }

    virtual exint    getNumParms() const
    {
        return 19;
    }

    virtual const char *getParmName(exint fieldnum) const
    {
        switch (fieldnum)
        {
            case 0:
                return "uvattr";
            case 1:
                return "group";
            case 2:
                return "packbetween";
            case 3:
                return "additionalseams";
            case 4:
                return "packing";
            case 5:
                return "scale";
            case 6:
                return "padding";
            case 7:
                return "paddingboundary";
            case 8:
                return "packincavities";
            case 9:
                return "bboxcenter";
            case 10:
                return "bboxsize";
            case 11:
                return "correctareas";
            case 12:
                return "axisalignislands";
            case 13:
                return "rotations";
            case 14:
                return "iterations";
            case 15:
                return "randseed";
            case 16:
                return "resolution";
            case 17:
                return "uvtolerance";
            case 18:
                return "scaletolerance";

        }
        return 0;
    }

    virtual ParmType getParmType(exint fieldnum) const
    {
        switch (fieldnum)
        {
                case 0:
                    return PARM_STRING;
                case 1:
                    return PARM_STRING;
                case 2:
                    return PARM_INTEGER;
                case 3:
                    return PARM_STRING;
                case 4:
                    return PARM_INTEGER;
                case 5:
                    return PARM_FLOAT;
                case 6:
                    return PARM_INTEGER;
                case 7:
                    return PARM_INTEGER;
                case 8:
                    return PARM_INTEGER;
                case 9:
                    return PARM_VECTOR2;
                case 10:
                    return PARM_VECTOR2;
                case 11:
                    return PARM_INTEGER;
                case 12:
                    return PARM_INTEGER;
                case 13:
                    return PARM_INTEGER;
                case 14:
                    return PARM_INTEGER;
                case 15:
                    return PARM_INTEGER;
                case 16:
                    return PARM_INTEGER;
                case 17:
                    return PARM_FLOAT;
                case 18:
                    return PARM_FLOAT;

        }
        return PARM_UNSUPPORTED;
    }

    // Boiler plate to load individual types.
    static void  loadData(UT_IStream &is, int64 &v)
    { is.bread(&v, 1); }
    static void  loadData(UT_IStream &is, bool &v)
    { int64     iv; is.bread(&iv, 1); v = iv; }
    static void  loadData(UT_IStream &is, fpreal64 &v)
    { is.bread<fpreal64>(&v, 1); }
    static void  loadData(UT_IStream &is, UT_Vector2D &v)
    { is.bread<fpreal64>(&v.x(), 1); is.bread<fpreal64>(&v.y(), 1); }
    static void  loadData(UT_IStream &is, UT_Vector3D &v)
    { is.bread<fpreal64>(&v.x(), 1); is.bread<fpreal64>(&v.y(), 1);
      is.bread<fpreal64>(&v.z(), 1); }
    static void  loadData(UT_IStream &is, UT_Vector4D &v)
    { is.bread<fpreal64>(&v.x(), 1); is.bread<fpreal64>(&v.y(), 1);
      is.bread<fpreal64>(&v.z(), 1); is.bread<fpreal64>(&v.w(), 1); }
    static void  loadData(UT_IStream &is, UT_Matrix2D &v)
    { for (int r = 0; r < 2; r++) for (int c = 0; c < 2; c++) is.bread<fpreal64>(&v(r, c), 1); }
    static void  loadData(UT_IStream &is, UT_Matrix3D &v)
    { for (int r = 0; r < 3; r++) for (int c = 0; c < 3; c++) is.bread<fpreal64>(&v(r, c), 1); }
    static void  loadData(UT_IStream &is, UT_Matrix4D &v)
    { for (int r = 0; r < 4; r++) for (int c = 0; c < 4; c++) is.bread<fpreal64>(&v(r, c), 1); }
    static void  loadData(UT_IStream &is, UT_Vector2I &v)
    { is.bread<int64>(&v.x(), 1); is.bread<int64>(&v.y(), 1); }
    static void  loadData(UT_IStream &is, UT_Vector3I &v)
    { is.bread<int64>(&v.x(), 1); is.bread<int64>(&v.y(), 1);
      is.bread<int64>(&v.z(), 1); }
    static void  loadData(UT_IStream &is, UT_Vector4I &v)
    { is.bread<int64>(&v.x(), 1); is.bread<int64>(&v.y(), 1);
      is.bread<int64>(&v.z(), 1); is.bread<int64>(&v.w(), 1); }
    static void  loadData(UT_IStream &is, UT_StringHolder &v)
    { is.bread(v); }
    static void  loadData(UT_IStream &is, UT_SharedPtr<UT_Ramp> &v)
    {   UT_StringHolder   rampdata;
        loadData(is, rampdata);
        if (rampdata.isstring())
        {
            v.reset(new UT_Ramp());
            UT_IStream  istr((const char *) rampdata, rampdata.length(), UT_ISTREAM_ASCII);
            v->load(istr);
        }
        else v.reset();
    }
    static void  loadData(UT_IStream &is, PRM_DataItemHandle &v)
    {   UT_StringHolder   data;
        loadData(is, data);
        if (data.isstring())
        {
            // Find the data type.
            char *colon = UT_StringWrap(data).findChar(':');
            if (colon)
            {
                int             typelen = colon - data.buffer();
                UT_WorkBuffer   type;
                type.strncpy(data.buffer(), typelen);
                UT_IStream  istr(((const char *) data) + typelen + 1, data.length() - (typelen + 1), UT_ISTREAM_BINARY);
                
                v = PRM_DataFactory::parseBinary(type.buffer(), istr);
            }
        }
        else v.reset();
    }

    static void  saveData(std::ostream &os, int64 v)
    { UTwrite(os, &v); }
    static void  saveData(std::ostream &os, bool v)
    { int64 iv = v; UTwrite(os, &iv); }
    static void  saveData(std::ostream &os, fpreal64 v)
    { UTwrite<fpreal64>(os, &v); }
    static void  saveData(std::ostream &os, UT_Vector2D v)
    { UTwrite<fpreal64>(os, &v.x()); UTwrite<fpreal64>(os, &v.y()); }
    static void  saveData(std::ostream &os, UT_Vector3D v)
    { UTwrite<fpreal64>(os, &v.x()); UTwrite<fpreal64>(os, &v.y());
      UTwrite<fpreal64>(os, &v.z()); }
    static void  saveData(std::ostream &os, UT_Vector4D v)
    { UTwrite<fpreal64>(os, &v.x()); UTwrite<fpreal64>(os, &v.y());
      UTwrite<fpreal64>(os, &v.z()); UTwrite<fpreal64>(os, &v.w()); }
    static void  saveData(std::ostream &os, UT_Matrix2D v)
    { for (int r = 0; r < 2; r++) for (int c = 0; c < 2; c++) UTwrite<fpreal64>(os, &v(r, c)); }
    static void  saveData(std::ostream &os, UT_Matrix3D v)
    { for (int r = 0; r < 3; r++) for (int c = 0; c < 3; c++) UTwrite<fpreal64>(os, &v(r, c)); }
    static void  saveData(std::ostream &os, UT_Matrix4D v)
    { for (int r = 0; r < 4; r++) for (int c = 0; c < 4; c++) UTwrite<fpreal64>(os, &v(r, c)); }
    static void  saveData(std::ostream &os, UT_StringHolder s)
    { UT_StringWrap(s).saveBinary(os); }
    static void  saveData(std::ostream &os, UT_SharedPtr<UT_Ramp> s)
    {   UT_StringHolder         result;
        UT_OStringStream        ostr;
        if (s) s->save(ostr);
        result = ostr.str();
        saveData(os, result);
    }
    static void  saveData(std::ostream &os, PRM_DataItemHandle s)
    {   UT_StringHolder         result;
        UT_OStringStream        ostr;
        if (s) 
        {
            ostr << s->getDataTypeToken();
            ostr << ":";
            s->saveBinary(ostr);
        }
        result = ostr.str();
        saveData(os, result);
    }


    void         save(std::ostream &os) const
    {
        int32           v = version();
        UTwrite(os, &v);
        saveData(os, myUvAttr);
        saveData(os, myGroup);
        saveData(os, myPackBetween);
        saveData(os, myAdditionalSeams);
        saveData(os, myPacking);
        saveData(os, myScale);
        saveData(os, myPadding);
        saveData(os, myPaddingBoundary);
        saveData(os, myPackInCavities);
        saveData(os, myBboxCenter);
        saveData(os, myBboxSize);
        saveData(os, myCorrectAreas);
        saveData(os, myAxisAlignIslands);
        saveData(os, myRotations);
        saveData(os, myIterations);
        saveData(os, myRandSeed);
        saveData(os, myResolution);
        saveData(os, myUvTolerance);
        saveData(os, myScaleTolerance);

    }

    bool         load(UT_IStream &is)
    {
        int32           v;
        is.bread(&v, 1);
        if (version() != v)
        {
            // Fail incompatible versions
            return false;
        }
        loadData(is, myUvAttr);
        loadData(is, myGroup);
        loadData(is, myPackBetween);
        loadData(is, myAdditionalSeams);
        loadData(is, myPacking);
        loadData(is, myScale);
        loadData(is, myPadding);
        loadData(is, myPaddingBoundary);
        loadData(is, myPackInCavities);
        loadData(is, myBboxCenter);
        loadData(is, myBboxSize);
        loadData(is, myCorrectAreas);
        loadData(is, myAxisAlignIslands);
        loadData(is, myRotations);
        loadData(is, myIterations);
        loadData(is, myRandSeed);
        loadData(is, myResolution);
        loadData(is, myUvTolerance);
        loadData(is, myScaleTolerance);

        return true;
    }

    const UT_StringHolder & getUvAttr() const { return myUvAttr; }
    void setUvAttr(const UT_StringHolder & val) { myUvAttr = val; }
    UT_StringHolder opUvAttr(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getUvAttr();
        UT_StringHolder result;
        OP_Utils::evalOpParm(result, thissop, "uvattr", cookparms.getCookTime(), 0);
        return result;
    }
    const UT_StringHolder & getGroup() const { return myGroup; }
    void setGroup(const UT_StringHolder & val) { myGroup = val; }
    UT_StringHolder opGroup(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getGroup();
        UT_StringHolder result;
        OP_Utils::evalOpParm(result, thissop, "group", cookparms.getCookTime(), 0);
        return result;
    }
    bool getPackBetween() const { return myPackBetween; }
    void setPackBetween(bool val) { myPackBetween = val; }
    bool opPackBetween(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getPackBetween();
        bool result;
        OP_Utils::evalOpParm(result, thissop, "packbetween", cookparms.getCookTime(), 0);
        return result;
    }
    const UT_StringHolder & getAdditionalSeams() const { return myAdditionalSeams; }
    void setAdditionalSeams(const UT_StringHolder & val) { myAdditionalSeams = val; }
    UT_StringHolder opAdditionalSeams(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getAdditionalSeams();
        UT_StringHolder result;
        OP_Utils::evalOpParm(result, thissop, "additionalseams", cookparms.getCookTime(), 0);
        return result;
    }
    Packing getPacking() const { return Packing(myPacking); }
    void setPacking(Packing val) { myPacking = int64(val); }
    Packing opPacking(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getPacking();
        int64 result;
        OP_Utils::evalOpParm(result, thissop, "packing", cookparms.getCookTime(), 0);
        return Packing(result);
    }
    fpreal64 getScale() const { return myScale; }
    void setScale(fpreal64 val) { myScale = val; }
    fpreal64 opScale(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getScale();
        fpreal64 result;
        OP_Utils::evalOpParm(result, thissop, "scale", cookparms.getCookTime(), 0);
        return result;
    }
    int64 getPadding() const { return myPadding; }
    void setPadding(int64 val) { myPadding = val; }
    int64 opPadding(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getPadding();
        int64 result;
        OP_Utils::evalOpParm(result, thissop, "padding", cookparms.getCookTime(), 0);
        return result;
    }
    bool getPaddingBoundary() const { return myPaddingBoundary; }
    void setPaddingBoundary(bool val) { myPaddingBoundary = val; }
    bool opPaddingBoundary(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getPaddingBoundary();
        bool result;
        OP_Utils::evalOpParm(result, thissop, "paddingboundary", cookparms.getCookTime(), 0);
        return result;
    }
    bool getPackInCavities() const { return myPackInCavities; }
    void setPackInCavities(bool val) { myPackInCavities = val; }
    bool opPackInCavities(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getPackInCavities();
        bool result;
        OP_Utils::evalOpParm(result, thissop, "packincavities", cookparms.getCookTime(), 0);
        return result;
    }
    UT_Vector2D getBboxCenter() const { return myBboxCenter; }
    void setBboxCenter(UT_Vector2D val) { myBboxCenter = val; }
    UT_Vector2D opBboxCenter(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getBboxCenter();
        UT_Vector2D result;
        OP_Utils::evalOpParm(result, thissop, "bboxcenter", cookparms.getCookTime(), 0);
        return result;
    }
    UT_Vector2D getBboxSize() const { return myBboxSize; }
    void setBboxSize(UT_Vector2D val) { myBboxSize = val; }
    UT_Vector2D opBboxSize(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getBboxSize();
        UT_Vector2D result;
        OP_Utils::evalOpParm(result, thissop, "bboxsize", cookparms.getCookTime(), 0);
        return result;
    }
    bool getCorrectAreas() const { return myCorrectAreas; }
    void setCorrectAreas(bool val) { myCorrectAreas = val; }
    bool opCorrectAreas(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getCorrectAreas();
        bool result;
        OP_Utils::evalOpParm(result, thissop, "correctareas", cookparms.getCookTime(), 0);
        return result;
    }
    bool getAxisAlignIslands() const { return myAxisAlignIslands; }
    void setAxisAlignIslands(bool val) { myAxisAlignIslands = val; }
    bool opAxisAlignIslands(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getAxisAlignIslands();
        bool result;
        OP_Utils::evalOpParm(result, thissop, "axisalignislands", cookparms.getCookTime(), 0);
        return result;
    }
    int64 getRotations() const { return myRotations; }
    void setRotations(int64 val) { myRotations = val; }
    int64 opRotations(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getRotations();
        int64 result;
        OP_Utils::evalOpParm(result, thissop, "rotations", cookparms.getCookTime(), 0);
        return result;
    }
    int64 getIterations() const { return myIterations; }
    void setIterations(int64 val) { myIterations = val; }
    int64 opIterations(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getIterations();
        int64 result;
        OP_Utils::evalOpParm(result, thissop, "iterations", cookparms.getCookTime(), 0);
        return result;
    }
    int64 getRandSeed() const { return myRandSeed; }
    void setRandSeed(int64 val) { myRandSeed = val; }
    int64 opRandSeed(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getRandSeed();
        int64 result;
        OP_Utils::evalOpParm(result, thissop, "randseed", cookparms.getCookTime(), 0);
        return result;
    }
    Resolution getResolution() const { return Resolution(myResolution); }
    void setResolution(Resolution val) { myResolution = int64(val); }
    Resolution opResolution(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getResolution();
        int64 result;
        OP_Utils::evalOpParm(result, thissop, "resolution", cookparms.getCookTime(), 0);
        return Resolution(result);
    }
    fpreal64 getUvTolerance() const { return myUvTolerance; }
    void setUvTolerance(fpreal64 val) { myUvTolerance = val; }
    fpreal64 opUvTolerance(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getUvTolerance();
        fpreal64 result;
        OP_Utils::evalOpParm(result, thissop, "uvtolerance", cookparms.getCookTime(), 0);
        return result;
    }
    fpreal64 getScaleTolerance() const { return myScaleTolerance; }
    void setScaleTolerance(fpreal64 val) { myScaleTolerance = val; }
    fpreal64 opScaleTolerance(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getScaleTolerance();
        fpreal64 result;
        OP_Utils::evalOpParm(result, thissop, "scaletolerance", cookparms.getCookTime(), 0);
        return result;
    }

private:
    UT_StringHolder myUvAttr;
    UT_StringHolder myGroup;
    bool myPackBetween;
    UT_StringHolder myAdditionalSeams;
    int64 myPacking;
    fpreal64 myScale;
    int64 myPadding;
    bool myPaddingBoundary;
    bool myPackInCavities;
    UT_Vector2D myBboxCenter;
    UT_Vector2D myBboxSize;
    bool myCorrectAreas;
    bool myAxisAlignIslands;
    int64 myRotations;
    int64 myIterations;
    int64 myRandSeed;
    int64 myResolution;
    fpreal64 myUvTolerance;
    fpreal64 myScaleTolerance;

};
