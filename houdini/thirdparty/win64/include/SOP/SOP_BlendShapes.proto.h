/* Automagically Generated by generate_proto.py
 * Do not Edit
 */
#pragma once

#include <SOP/SOP_NodeVerb.h>
#include <OP/OP_Utils.h>
#include <PRM/PRM_Parm.h>
#include <UT/UT_IStream.h>
#include <UT/UT_NTStreamUtil.h>
#include <UT/UT_Ramp.h>
#include <UT/UT_SharedPtr.h>
#include <UT/UT_StringHolder.h>
#include <UT/UT_StringStream.h>
#include <UT/UT_VectorTypes.h>
#include <SYS/SYS_Types.h>

using namespace UT::Literal;

class DEP_MicroNode;

class SOP_API SOP_BlendShapesParms  : public SOP_NodeParms
{
public:
    static int version() { return 1; }
    struct Nblends
    {
        fpreal64 blend;


        Nblends()
        {
            blend = 0;

        }

        bool operator==(const Nblends &src) const
        {
            if (blend != src.blend) return false;

            return true;
        }
        bool operator!=(const Nblends &src) const
        {
            return !operator==(src);
        }

    };

    UT_StringHolder createString(const UT_Array<Nblends> &list) const
    {
        UT_WorkBuffer   buf;

        buf.strcat("[ ");
        for (int i = 0; i < list.entries(); i++)
        {
            if (i)
                buf.strcat(", ");
            buf.strcat("( ");
            buf.append("");
            buf.appendSprintf("%f", (list(i).blend));

            buf.strcat(" )");
        }
        buf.strcat(" ]");

        UT_StringHolder result = buf;
        return result;
    }

    SOP_BlendShapesParms()
    {
        myGroup = ""_sh;
        mySelectionIdx = 0;
        myDiff = false;
        myDoPos = false;
        myDoClr = false;
        myDoNml = false;
        myDoUVW = false;
        myDoVoxel = false;
        myDoSlerp = false;
        myPtIDAttr = ""_sh;
        myPrimIDAttr = ""_sh;
        myMorph = false;

    }

    explicit SOP_BlendShapesParms(const SOP_BlendShapesParms &) = default;

    virtual ~SOP_BlendShapesParms() {}

    bool operator==(const SOP_BlendShapesParms &src) const
    {
        if (myGroup != src.myGroup) return false;
        if (mySelectionIdx != src.mySelectionIdx) return false;
        if (myDiff != src.myDiff) return false;
        if (myDoPos != src.myDoPos) return false;
        if (myDoClr != src.myDoClr) return false;
        if (myDoNml != src.myDoNml) return false;
        if (myDoUVW != src.myDoUVW) return false;
        if (myDoVoxel != src.myDoVoxel) return false;
        if (myDoSlerp != src.myDoSlerp) return false;
        if (myPtIDAttr != src.myPtIDAttr) return false;
        if (myPrimIDAttr != src.myPrimIDAttr) return false;
        if (myMorph != src.myMorph) return false;
        if (myNblends != src.myNblends) return false;

        return true;
    }
    bool operator!=(const SOP_BlendShapesParms &src) const
    {
        return !operator==(src);
    }



    void        buildFromOp(const OP_Node *node, fpreal time, DEP_MicroNode *depnode)
    {
        if (true)
            OP_Utils::evalOpParm(myGroup, node, "group", time, 0);
        else myGroup = ""_sh;
        if (true)
            OP_Utils::evalOpParm(mySelectionIdx, node, "selectionidx", time, 0);
        else mySelectionIdx = 0;
        if (true)
            OP_Utils::evalOpParm(myDiff, node, "diff", time, 0);
        else myDiff = false;
        if (true)
            OP_Utils::evalOpParm(myDoPos, node, "dopos", time, 0);
        else myDoPos = false;
        if (true)
            OP_Utils::evalOpParm(myDoClr, node, "doclr", time, 0);
        else myDoClr = false;
        if (true)
            OP_Utils::evalOpParm(myDoNml, node, "donml", time, 0);
        else myDoNml = false;
        if (true)
            OP_Utils::evalOpParm(myDoUVW, node, "douvw", time, 0);
        else myDoUVW = false;
        if (true)
            OP_Utils::evalOpParm(myDoVoxel, node, "dovoxel", time, 0);
        else myDoVoxel = false;
        if (true)
            OP_Utils::evalOpParm(myDoSlerp, node, "doslerp", time, 0);
        else myDoSlerp = false;
        if (true)
            OP_Utils::evalOpParm(myPtIDAttr, node, "ptidattr", time, 0);
        else myPtIDAttr = ""_sh;
        if (true)
            OP_Utils::evalOpParm(myPrimIDAttr, node, "primidattr", time, 0);
        else myPrimIDAttr = ""_sh;
        if (true)
            OP_Utils::evalOpParm(myMorph, node, "morph", time, 0);
        else myMorph = false;
            if (true)
            {
                int64   length;
                OP_Utils::evalOpParm(length, node, "nblends", time, 0);
                myNblends.entries(length);
                for (exint i = 0; i < length; i++)
                {
                    int     parmidx = i+0;
                    auto && _curentry = myNblends(i);
                    (void) _curentry;
                    if (true)
                        OP_Utils::evalOpParmInst(myNblends(i).blend, node, "blend#", &parmidx, time, 0);
                    else myNblends(i).blend = 0;

                }
            }
            else
                myNblends.clear();

    }


    virtual void loadFromOpSubclass(const LoadParms &loadparms)
    {
        buildFromOp(loadparms.node(), loadparms.context().getTime(), loadparms.depnode());
    }


    virtual void copyFrom(const SOP_NodeParms *src)
    {
        *this = *((const SOP_BlendShapesParms *)src);
    }

    template <typename T>
    void
    doGetParmValue(exint idx, T &value) const
    {
        switch (idx)
        {
            case 0:
                coerceValue(value, myGroup);
                break;
            case 1:
                coerceValue(value, mySelectionIdx);
                break;
            case 2:
                coerceValue(value, myDiff);
                break;
            case 3:
                coerceValue(value, myDoPos);
                break;
            case 4:
                coerceValue(value, myDoClr);
                break;
            case 5:
                coerceValue(value, myDoNml);
                break;
            case 6:
                coerceValue(value, myDoUVW);
                break;
            case 7:
                coerceValue(value, myDoVoxel);
                break;
            case 8:
                coerceValue(value, myDoSlerp);
                break;
            case 9:
                coerceValue(value, myPtIDAttr);
                break;
            case 10:
                coerceValue(value, myPrimIDAttr);
                break;
            case 11:
                coerceValue(value, myMorph);
                break;

        }
    }

    void        getParmValue(exint idx, exint &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, fpreal &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Vector2D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Vector3D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Vector4D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Matrix2D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Matrix3D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Matrix4D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_StringHolder &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_SharedPtr<UT_Ramp> &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, PRM_DataItemHandle &value) const
    { doGetParmValue(idx, value); }

    template <typename T>
    void
    doSetParmValue(exint idx, const T &value) 
    {
        switch (idx)
        {
            case 0:
                coerceValue(myGroup, value);
                break;
            case 1:
                coerceValue(mySelectionIdx, value);
                break;
            case 2:
                coerceValue(myDiff, value);
                break;
            case 3:
                coerceValue(myDoPos, value);
                break;
            case 4:
                coerceValue(myDoClr, value);
                break;
            case 5:
                coerceValue(myDoNml, value);
                break;
            case 6:
                coerceValue(myDoUVW, value);
                break;
            case 7:
                coerceValue(myDoVoxel, value);
                break;
            case 8:
                coerceValue(myDoSlerp, value);
                break;
            case 9:
                coerceValue(myPtIDAttr, value);
                break;
            case 10:
                coerceValue(myPrimIDAttr, value);
                break;
            case 11:
                coerceValue(myMorph, value);
                break;

        }
    }

    void        setParmValue(exint idx, const exint &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const fpreal &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Vector2D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Vector3D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Vector4D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Matrix2D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Matrix3D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Matrix4D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_StringHolder &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_SharedPtr<UT_Ramp> &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const PRM_DataItemHandle &value) 
    { doSetParmValue(idx, value); }

    virtual exint    getNumParms() const
    {
        return 13;
    }

    virtual const char *getParmName(exint fieldnum) const
    {
        switch (fieldnum)
        {
            case 0:
                return "group";
            case 1:
                return "selectionidx";
            case 2:
                return "diff";
            case 3:
                return "dopos";
            case 4:
                return "doclr";
            case 5:
                return "donml";
            case 6:
                return "douvw";
            case 7:
                return "dovoxel";
            case 8:
                return "doslerp";
            case 9:
                return "ptidattr";
            case 10:
                return "primidattr";
            case 11:
                return "morph";
                case 12:
                    return "nblends";

        }
        return 0;
    }

    virtual ParmType getParmType(exint fieldnum) const
    {
        switch (fieldnum)
        {
                case 0:
                    return PARM_STRING;
                case 1:
                    return PARM_INTEGER;
                case 2:
                    return PARM_INTEGER;
                case 3:
                    return PARM_INTEGER;
                case 4:
                    return PARM_INTEGER;
                case 5:
                    return PARM_INTEGER;
                case 6:
                    return PARM_INTEGER;
                case 7:
                    return PARM_INTEGER;
                case 8:
                    return PARM_INTEGER;
                case 9:
                    return PARM_STRING;
                case 10:
                    return PARM_STRING;
                case 11:
                    return PARM_INTEGER;

        }
        return PARM_UNSUPPORTED;
    }

    // Boiler plate to load individual types.
    static void  loadData(UT_IStream &is, int64 &v)
    { is.bread(&v, 1); }
    static void  loadData(UT_IStream &is, bool &v)
    { int64     iv; is.bread(&iv, 1); v = iv; }
    static void  loadData(UT_IStream &is, fpreal64 &v)
    { is.bread<fpreal64>(&v, 1); }
    static void  loadData(UT_IStream &is, UT_Vector2D &v)
    { is.bread<fpreal64>(&v.x(), 1); is.bread<fpreal64>(&v.y(), 1); }
    static void  loadData(UT_IStream &is, UT_Vector3D &v)
    { is.bread<fpreal64>(&v.x(), 1); is.bread<fpreal64>(&v.y(), 1);
      is.bread<fpreal64>(&v.z(), 1); }
    static void  loadData(UT_IStream &is, UT_Vector4D &v)
    { is.bread<fpreal64>(&v.x(), 1); is.bread<fpreal64>(&v.y(), 1);
      is.bread<fpreal64>(&v.z(), 1); is.bread<fpreal64>(&v.w(), 1); }
    static void  loadData(UT_IStream &is, UT_Matrix2D &v)
    { for (int r = 0; r < 2; r++) for (int c = 0; c < 2; c++) is.bread<fpreal64>(&v(r, c), 1); }
    static void  loadData(UT_IStream &is, UT_Matrix3D &v)
    { for (int r = 0; r < 3; r++) for (int c = 0; c < 3; c++) is.bread<fpreal64>(&v(r, c), 1); }
    static void  loadData(UT_IStream &is, UT_Matrix4D &v)
    { for (int r = 0; r < 4; r++) for (int c = 0; c < 4; c++) is.bread<fpreal64>(&v(r, c), 1); }
    static void  loadData(UT_IStream &is, UT_Vector2I &v)
    { is.bread<int64>(&v.x(), 1); is.bread<int64>(&v.y(), 1); }
    static void  loadData(UT_IStream &is, UT_Vector3I &v)
    { is.bread<int64>(&v.x(), 1); is.bread<int64>(&v.y(), 1);
      is.bread<int64>(&v.z(), 1); }
    static void  loadData(UT_IStream &is, UT_Vector4I &v)
    { is.bread<int64>(&v.x(), 1); is.bread<int64>(&v.y(), 1);
      is.bread<int64>(&v.z(), 1); is.bread<int64>(&v.w(), 1); }
    static void  loadData(UT_IStream &is, UT_StringHolder &v)
    { is.bread(v); }
    static void  loadData(UT_IStream &is, UT_SharedPtr<UT_Ramp> &v)
    {   UT_StringHolder   rampdata;
        loadData(is, rampdata);
        if (rampdata.isstring())
        {
            v.reset(new UT_Ramp());
            UT_IStream  istr((const char *) rampdata, rampdata.length(), UT_ISTREAM_ASCII);
            v->load(istr);
        }
        else v.reset();
    }
    static void  loadData(UT_IStream &is, PRM_DataItemHandle &v)
    {   UT_StringHolder   data;
        loadData(is, data);
        if (data.isstring())
        {
            // Find the data type.
            char *colon = UT_StringWrap(data).findChar(':');
            if (colon)
            {
                int             typelen = colon - data.buffer();
                UT_WorkBuffer   type;
                type.strncpy(data.buffer(), typelen);
                UT_IStream  istr(((const char *) data) + typelen + 1, data.length() - (typelen + 1), UT_ISTREAM_BINARY);
                
                v = PRM_DataFactory::parseBinary(type.buffer(), istr);
            }
        }
        else v.reset();
    }

    static void  saveData(std::ostream &os, int64 v)
    { UTwrite(os, &v); }
    static void  saveData(std::ostream &os, bool v)
    { int64 iv = v; UTwrite(os, &iv); }
    static void  saveData(std::ostream &os, fpreal64 v)
    { UTwrite<fpreal64>(os, &v); }
    static void  saveData(std::ostream &os, UT_Vector2D v)
    { UTwrite<fpreal64>(os, &v.x()); UTwrite<fpreal64>(os, &v.y()); }
    static void  saveData(std::ostream &os, UT_Vector3D v)
    { UTwrite<fpreal64>(os, &v.x()); UTwrite<fpreal64>(os, &v.y());
      UTwrite<fpreal64>(os, &v.z()); }
    static void  saveData(std::ostream &os, UT_Vector4D v)
    { UTwrite<fpreal64>(os, &v.x()); UTwrite<fpreal64>(os, &v.y());
      UTwrite<fpreal64>(os, &v.z()); UTwrite<fpreal64>(os, &v.w()); }
    static void  saveData(std::ostream &os, UT_Matrix2D v)
    { for (int r = 0; r < 2; r++) for (int c = 0; c < 2; c++) UTwrite<fpreal64>(os, &v(r, c)); }
    static void  saveData(std::ostream &os, UT_Matrix3D v)
    { for (int r = 0; r < 3; r++) for (int c = 0; c < 3; c++) UTwrite<fpreal64>(os, &v(r, c)); }
    static void  saveData(std::ostream &os, UT_Matrix4D v)
    { for (int r = 0; r < 4; r++) for (int c = 0; c < 4; c++) UTwrite<fpreal64>(os, &v(r, c)); }
    static void  saveData(std::ostream &os, UT_StringHolder s)
    { UT_StringWrap(s).saveBinary(os); }
    static void  saveData(std::ostream &os, UT_SharedPtr<UT_Ramp> s)
    {   UT_StringHolder         result;
        UT_OStringStream        ostr;
        if (s) s->save(ostr);
        result = ostr.str();
        saveData(os, result);
    }
    static void  saveData(std::ostream &os, PRM_DataItemHandle s)
    {   UT_StringHolder         result;
        UT_OStringStream        ostr;
        if (s) 
        {
            ostr << s->getDataTypeToken();
            ostr << ":";
            s->saveBinary(ostr);
        }
        result = ostr.str();
        saveData(os, result);
    }


    void         save(std::ostream &os) const
    {
        int32           v = version();
        UTwrite(os, &v);
        saveData(os, myGroup);
        saveData(os, mySelectionIdx);
        saveData(os, myDiff);
        saveData(os, myDoPos);
        saveData(os, myDoClr);
        saveData(os, myDoNml);
        saveData(os, myDoUVW);
        saveData(os, myDoVoxel);
        saveData(os, myDoSlerp);
        saveData(os, myPtIDAttr);
        saveData(os, myPrimIDAttr);
        saveData(os, myMorph);
        {
            int64   length = myNblends.entries();
            UTwrite(os, &length);
            for (exint i = 0; i < length; i++)
            {
                saveData(os, myNblends(i).blend);

            }
        }

    }

    bool         load(UT_IStream &is)
    {
        int32           v;
        is.bread(&v, 1);
        if (version() != v)
        {
            // Fail incompatible versions
            return false;
        }
        loadData(is, myGroup);
        loadData(is, mySelectionIdx);
        loadData(is, myDiff);
        loadData(is, myDoPos);
        loadData(is, myDoClr);
        loadData(is, myDoNml);
        loadData(is, myDoUVW);
        loadData(is, myDoVoxel);
        loadData(is, myDoSlerp);
        loadData(is, myPtIDAttr);
        loadData(is, myPrimIDAttr);
        loadData(is, myMorph);
        {
            int64   length;
            is.read(&length, 1);
            myNblends.entries(length);
            for (exint i = 0; i < length; i++)
            {
                loadData(is, myNblends(i).blend);

            }
        }

        return true;
    }

    const UT_StringHolder & getGroup() const { return myGroup; }
    void setGroup(const UT_StringHolder & val) { myGroup = val; }
    UT_StringHolder opGroup(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getGroup();
        UT_StringHolder result;
        OP_Utils::evalOpParm(result, thissop, "group", cookparms.getCookTime(), 0);
        return result;
    }
    int64 getSelectionIdx() const { return mySelectionIdx; }
    void setSelectionIdx(int64 val) { mySelectionIdx = val; }
    int64 opSelectionIdx(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getSelectionIdx();
        int64 result;
        OP_Utils::evalOpParm(result, thissop, "selectionidx", cookparms.getCookTime(), 0);
        return result;
    }
    bool getDiff() const { return myDiff; }
    void setDiff(bool val) { myDiff = val; }
    bool opDiff(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getDiff();
        bool result;
        OP_Utils::evalOpParm(result, thissop, "diff", cookparms.getCookTime(), 0);
        return result;
    }
    bool getDoPos() const { return myDoPos; }
    void setDoPos(bool val) { myDoPos = val; }
    bool opDoPos(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getDoPos();
        bool result;
        OP_Utils::evalOpParm(result, thissop, "dopos", cookparms.getCookTime(), 0);
        return result;
    }
    bool getDoClr() const { return myDoClr; }
    void setDoClr(bool val) { myDoClr = val; }
    bool opDoClr(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getDoClr();
        bool result;
        OP_Utils::evalOpParm(result, thissop, "doclr", cookparms.getCookTime(), 0);
        return result;
    }
    bool getDoNml() const { return myDoNml; }
    void setDoNml(bool val) { myDoNml = val; }
    bool opDoNml(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getDoNml();
        bool result;
        OP_Utils::evalOpParm(result, thissop, "donml", cookparms.getCookTime(), 0);
        return result;
    }
    bool getDoUVW() const { return myDoUVW; }
    void setDoUVW(bool val) { myDoUVW = val; }
    bool opDoUVW(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getDoUVW();
        bool result;
        OP_Utils::evalOpParm(result, thissop, "douvw", cookparms.getCookTime(), 0);
        return result;
    }
    bool getDoVoxel() const { return myDoVoxel; }
    void setDoVoxel(bool val) { myDoVoxel = val; }
    bool opDoVoxel(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getDoVoxel();
        bool result;
        OP_Utils::evalOpParm(result, thissop, "dovoxel", cookparms.getCookTime(), 0);
        return result;
    }
    bool getDoSlerp() const { return myDoSlerp; }
    void setDoSlerp(bool val) { myDoSlerp = val; }
    bool opDoSlerp(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getDoSlerp();
        bool result;
        OP_Utils::evalOpParm(result, thissop, "doslerp", cookparms.getCookTime(), 0);
        return result;
    }
    const UT_StringHolder & getPtIDAttr() const { return myPtIDAttr; }
    void setPtIDAttr(const UT_StringHolder & val) { myPtIDAttr = val; }
    UT_StringHolder opPtIDAttr(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getPtIDAttr();
        UT_StringHolder result;
        OP_Utils::evalOpParm(result, thissop, "ptidattr", cookparms.getCookTime(), 0);
        return result;
    }
    const UT_StringHolder & getPrimIDAttr() const { return myPrimIDAttr; }
    void setPrimIDAttr(const UT_StringHolder & val) { myPrimIDAttr = val; }
    UT_StringHolder opPrimIDAttr(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getPrimIDAttr();
        UT_StringHolder result;
        OP_Utils::evalOpParm(result, thissop, "primidattr", cookparms.getCookTime(), 0);
        return result;
    }
    bool getMorph() const { return myMorph; }
    void setMorph(bool val) { myMorph = val; }
    bool opMorph(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getMorph();
        bool result;
        OP_Utils::evalOpParm(result, thissop, "morph", cookparms.getCookTime(), 0);
        return result;
    }
    const UT_Array<Nblends> &getNblends() const { return myNblends; }
    void setNblends(const UT_Array<Nblends> &val) { myNblends = val; }
    exint opNblends(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getNblends().entries();
        exint result;
        OP_Utils::evalOpParm(result, thissop, "nblends", cookparms.getCookTime(), 0);
        return result;
    }
            fpreal64 opNblends_blend(const SOP_NodeVerb::CookParms &cookparms, exint _idx) const
        {
            SOP_Node *thissop = cookparms.getNode();
            if (!thissop) return (myNblends(_idx).blend);
            int _parmidx = _idx + 0;
            fpreal64 result;
            OP_Utils::evalOpParmInst(result, thissop, "blend#", &_parmidx, cookparms.getCookTime(), 0);
            return (result);
        }


private:
    UT_StringHolder myGroup;
    int64 mySelectionIdx;
    bool myDiff;
    bool myDoPos;
    bool myDoClr;
    bool myDoNml;
    bool myDoUVW;
    bool myDoVoxel;
    bool myDoSlerp;
    UT_StringHolder myPtIDAttr;
    UT_StringHolder myPrimIDAttr;
    bool myMorph;
    UT_Array<Nblends> myNblends;

};
