/* Automagically Generated by generate_proto.py
 * Do not Edit
 */
#pragma once

#include <SOP/SOP_NodeVerb.h>
#include <OP/OP_Utils.h>
#include <PRM/PRM_Parm.h>
#include <UT/UT_IStream.h>
#include <UT/UT_NTStreamUtil.h>
#include <UT/UT_Ramp.h>
#include <UT/UT_SharedPtr.h>
#include <UT/UT_StringHolder.h>
#include <UT/UT_StringStream.h>
#include <UT/UT_VectorTypes.h>
#include <SYS/SYS_Types.h>

using namespace UT::Literal;

class DEP_MicroNode;
namespace SOP_FuseEnums
{
    enum class Grouppropagation
    {
        LEASTPOINTNUMBER = 0,
        UNION,
        INTERSECT
    };
    enum class Snaptype
    {
        AVERAGE = 0,
        LOWEST,
        HIGHEST
    };
    enum class Gridtype
    {
        SPACING = 0,
        LINES,
        POW2
    };
    enum class Gridround
    {
        NEAREST = 0,
        DOWN,
        UP
    };
}


class SOP_API SOP_FuseParms  : public SOP_NodeParms
{
public:
    static int version() { return 1; }

    SOP_FuseParms()
    {
        myGroup = ""_sh;
        myUsedist = false;
        myDist = 0.001;
        myDeldegen = false;
        myKeepunusedpoints = false;
        myKeepconsolidatedpoints = false;
        myGrouppropagation = 0;
        mySwitcher = 0;
        mySnaptype = 0;
        myTol3d = 0.001;
        mySnappointpos = false;
        mySnappointattribs = false;
        myPointattribnames = ""_sh;
        mySnapswitcher = 0;
        myGridtype = 0;
        myGridspacing = UT_Vector3D(0.1,0.1,0.1);
        myGridlines = UT_Vector3D(10,10,10);
        myGridpow2 = UT_Vector3I(3,3,3);
        myGridoffset = UT_Vector3D(0,0,0);
        myGridround = 0;
        myGridtol = 10;
        myUpdatenml = false;
        myAccurate = false;

    }

    explicit SOP_FuseParms(const SOP_FuseParms &) = default;

    virtual ~SOP_FuseParms() {}

    bool operator==(const SOP_FuseParms &src) const
    {
        if (myGroup != src.myGroup) return false;
        if (myUsedist != src.myUsedist) return false;
        if (myDist != src.myDist) return false;
        if (myDeldegen != src.myDeldegen) return false;
        if (myKeepunusedpoints != src.myKeepunusedpoints) return false;
        if (myKeepconsolidatedpoints != src.myKeepconsolidatedpoints) return false;
        if (myGrouppropagation != src.myGrouppropagation) return false;
        if (mySwitcher != src.mySwitcher) return false;
        if (mySnaptype != src.mySnaptype) return false;
        if (myTol3d != src.myTol3d) return false;
        if (mySnappointpos != src.mySnappointpos) return false;
        if (mySnappointattribs != src.mySnappointattribs) return false;
        if (myPointattribnames != src.myPointattribnames) return false;
        if (mySnapswitcher != src.mySnapswitcher) return false;
        if (myGridtype != src.myGridtype) return false;
        if (myGridspacing != src.myGridspacing) return false;
        if (myGridlines != src.myGridlines) return false;
        if (myGridpow2 != src.myGridpow2) return false;
        if (myGridoffset != src.myGridoffset) return false;
        if (myGridround != src.myGridround) return false;
        if (myGridtol != src.myGridtol) return false;
        if (myUpdatenml != src.myUpdatenml) return false;
        if (myAccurate != src.myAccurate) return false;

        return true;
    }
    bool operator!=(const SOP_FuseParms &src) const
    {
        return !operator==(src);
    }
    using Grouppropagation = SOP_FuseEnums::Grouppropagation;
    using Snaptype = SOP_FuseEnums::Snaptype;
    using Gridtype = SOP_FuseEnums::Gridtype;
    using Gridround = SOP_FuseEnums::Gridround;



    void        buildFromOp(const OP_Node *node, fpreal time, DEP_MicroNode *depnode)
    {
        if (true)
            OP_Utils::evalOpParm(myGroup, node, "group", time, 0);
        else myGroup = ""_sh;
        if (true)
            OP_Utils::evalOpParm(myUsedist, node, "usedist", time, 0);
        else myUsedist = false;
        if (true && ( (!(((getUsedist()==0)))) ) )
            OP_Utils::evalOpParm(myDist, node, "dist", time, 0);
        else myDist = 0.001;
        if (true)
            OP_Utils::evalOpParm(myDeldegen, node, "deldegen", time, 0);
        else myDeldegen = false;
        if (true)
            OP_Utils::evalOpParm(myKeepunusedpoints, node, "keepunusedpoints", time, 0);
        else myKeepunusedpoints = false;
        if (true)
            OP_Utils::evalOpParm(myKeepconsolidatedpoints, node, "keepconsolidatedpoints", time, 0);
        else myKeepconsolidatedpoints = false;
        if (true)
            OP_Utils::evalOpParm(myGrouppropagation, node, "grouppropagation", time, 0);
        else myGrouppropagation = 0;
        if (true)
            OP_Utils::evalOpParm(mySwitcher, node, "switcher", time, 0);
        else mySwitcher = 0;
        if (true)
            OP_Utils::evalOpParm(mySnaptype, node, "snaptype", time, 0);
        else mySnaptype = 0;
        if (true)
            OP_Utils::evalOpParm(myTol3d, node, "tol3d", time, 0);
        else myTol3d = 0.001;
        if (true)
            OP_Utils::evalOpParm(mySnappointpos, node, "snappointpos", time, 0);
        else mySnappointpos = false;
        if (true)
            OP_Utils::evalOpParm(mySnappointattribs, node, "snappointattribs", time, 0);
        else mySnappointattribs = false;
        if (true && ( (!(((getSnappointattribs()==0)))) ) )
            OP_Utils::evalOpParm(myPointattribnames, node, "pointattribnames", time, 0);
        else myPointattribnames = ""_sh;
        if (true)
            OP_Utils::evalOpParm(mySnapswitcher, node, "snapswitcher", time, 0);
        else mySnapswitcher = 0;
        if (true)
            OP_Utils::evalOpParm(myGridtype, node, "gridtype", time, 0);
        else myGridtype = 0;
        if (true && ( (!(((int64(getGridtype())!=0)))) ) )
            OP_Utils::evalOpParm(myGridspacing, node, "gridspacing", time, 0);
        else myGridspacing = UT_Vector3D(0.1,0.1,0.1);
        if (true && ( (!(((int64(getGridtype())!=1)))) ) )
            OP_Utils::evalOpParm(myGridlines, node, "gridlines", time, 0);
        else myGridlines = UT_Vector3D(10,10,10);
        if (true && ( (!(((int64(getGridtype())!=2)))) ) )
            OP_Utils::evalOpParm(myGridpow2, node, "gridpow2", time, 0);
        else myGridpow2 = UT_Vector3I(3,3,3);
        if (true)
            OP_Utils::evalOpParm(myGridoffset, node, "gridoffset", time, 0);
        else myGridoffset = UT_Vector3D(0,0,0);
        if (true)
            OP_Utils::evalOpParm(myGridround, node, "gridround", time, 0);
        else myGridround = 0;
        if (true)
            OP_Utils::evalOpParm(myGridtol, node, "gridtol", time, 0);
        else myGridtol = 10;
        if (true)
            OP_Utils::evalOpParm(myUpdatenml, node, "updatenml", time, 0);
        else myUpdatenml = false;
        if (true && ( (!(((int64(getSwitcher())==1))||((int64(getSwitcher())==2)&&(int64(getSnapswitcher())!=0)))) ) )
            OP_Utils::evalOpParm(myAccurate, node, "accurate", time, 0);
        else myAccurate = false;

    }


    virtual void loadFromOpSubclass(const LoadParms &loadparms)
    {
        buildFromOp(loadparms.node(), loadparms.context().getTime(), loadparms.depnode());
    }


    virtual void copyFrom(const SOP_NodeParms *src)
    {
        *this = *((const SOP_FuseParms *)src);
    }

    template <typename T>
    void
    doGetParmValue(exint idx, T &value) const
    {
        switch (idx)
        {
            case 0:
                coerceValue(value, myGroup);
                break;
            case 1:
                coerceValue(value, myUsedist);
                break;
            case 2:
                coerceValue(value, myDist);
                break;
            case 3:
                coerceValue(value, myDeldegen);
                break;
            case 4:
                coerceValue(value, myKeepunusedpoints);
                break;
            case 5:
                coerceValue(value, myKeepconsolidatedpoints);
                break;
            case 6:
                coerceValue(value, myGrouppropagation);
                break;
            case 7:
                coerceValue(value, mySwitcher);
                break;
            case 8:
                coerceValue(value, mySnaptype);
                break;
            case 9:
                coerceValue(value, myTol3d);
                break;
            case 10:
                coerceValue(value, mySnappointpos);
                break;
            case 11:
                coerceValue(value, mySnappointattribs);
                break;
            case 12:
                coerceValue(value, myPointattribnames);
                break;
            case 13:
                coerceValue(value, mySnapswitcher);
                break;
            case 14:
                coerceValue(value, myGridtype);
                break;
            case 15:
                coerceValue(value, myGridspacing);
                break;
            case 16:
                coerceValue(value, myGridlines);
                break;
            case 17:
                coerceValue(value, myGridpow2);
                break;
            case 18:
                coerceValue(value, myGridoffset);
                break;
            case 19:
                coerceValue(value, myGridround);
                break;
            case 20:
                coerceValue(value, myGridtol);
                break;
            case 21:
                coerceValue(value, myUpdatenml);
                break;
            case 22:
                coerceValue(value, myAccurate);
                break;

        }
    }

    void        getParmValue(exint idx, exint &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, fpreal &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Vector2D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Vector3D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Vector4D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Matrix2D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Matrix3D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Matrix4D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_StringHolder &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_SharedPtr<UT_Ramp> &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, PRM_DataItemHandle &value) const
    { doGetParmValue(idx, value); }

    template <typename T>
    void
    doSetParmValue(exint idx, const T &value) 
    {
        switch (idx)
        {
            case 0:
                coerceValue(myGroup, value);
                break;
            case 1:
                coerceValue(myUsedist, value);
                break;
            case 2:
                coerceValue(myDist, value);
                break;
            case 3:
                coerceValue(myDeldegen, value);
                break;
            case 4:
                coerceValue(myKeepunusedpoints, value);
                break;
            case 5:
                coerceValue(myKeepconsolidatedpoints, value);
                break;
            case 6:
                coerceValue(myGrouppropagation, value);
                break;
            case 7:
                coerceValue(mySwitcher, value);
                break;
            case 8:
                coerceValue(mySnaptype, value);
                break;
            case 9:
                coerceValue(myTol3d, value);
                break;
            case 10:
                coerceValue(mySnappointpos, value);
                break;
            case 11:
                coerceValue(mySnappointattribs, value);
                break;
            case 12:
                coerceValue(myPointattribnames, value);
                break;
            case 13:
                coerceValue(mySnapswitcher, value);
                break;
            case 14:
                coerceValue(myGridtype, value);
                break;
            case 15:
                coerceValue(myGridspacing, value);
                break;
            case 16:
                coerceValue(myGridlines, value);
                break;
            case 17:
                coerceValue(myGridpow2, value);
                break;
            case 18:
                coerceValue(myGridoffset, value);
                break;
            case 19:
                coerceValue(myGridround, value);
                break;
            case 20:
                coerceValue(myGridtol, value);
                break;
            case 21:
                coerceValue(myUpdatenml, value);
                break;
            case 22:
                coerceValue(myAccurate, value);
                break;

        }
    }

    void        setParmValue(exint idx, const exint &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const fpreal &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Vector2D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Vector3D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Vector4D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Matrix2D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Matrix3D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Matrix4D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_StringHolder &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_SharedPtr<UT_Ramp> &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const PRM_DataItemHandle &value) 
    { doSetParmValue(idx, value); }

    virtual exint    getNumParms() const
    {
        return 23;
    }

    virtual const char *getParmName(exint fieldnum) const
    {
        switch (fieldnum)
        {
            case 0:
                return "group";
            case 1:
                return "usedist";
            case 2:
                return "dist";
            case 3:
                return "deldegen";
            case 4:
                return "keepunusedpoints";
            case 5:
                return "keepconsolidatedpoints";
            case 6:
                return "grouppropagation";
            case 7:
                return "switcher";
            case 8:
                return "snaptype";
            case 9:
                return "tol3d";
            case 10:
                return "snappointpos";
            case 11:
                return "snappointattribs";
            case 12:
                return "pointattribnames";
            case 13:
                return "snapswitcher";
            case 14:
                return "gridtype";
            case 15:
                return "gridspacing";
            case 16:
                return "gridlines";
            case 17:
                return "gridpow2";
            case 18:
                return "gridoffset";
            case 19:
                return "gridround";
            case 20:
                return "gridtol";
            case 21:
                return "updatenml";
            case 22:
                return "accurate";

        }
        return 0;
    }

    virtual ParmType getParmType(exint fieldnum) const
    {
        switch (fieldnum)
        {
                case 0:
                    return PARM_STRING;
                case 1:
                    return PARM_INTEGER;
                case 2:
                    return PARM_FLOAT;
                case 3:
                    return PARM_INTEGER;
                case 4:
                    return PARM_INTEGER;
                case 5:
                    return PARM_INTEGER;
                case 6:
                    return PARM_INTEGER;
                case 7:
                    return PARM_INTEGER;
                case 8:
                    return PARM_INTEGER;
                case 9:
                    return PARM_FLOAT;
                case 10:
                    return PARM_INTEGER;
                case 11:
                    return PARM_INTEGER;
                case 12:
                    return PARM_STRING;
                case 13:
                    return PARM_INTEGER;
                case 14:
                    return PARM_INTEGER;
                case 15:
                    return PARM_VECTOR3;
                case 16:
                    return PARM_VECTOR3;
                case 17:
                    return PARM_VECTOR3;
                case 18:
                    return PARM_VECTOR3;
                case 19:
                    return PARM_INTEGER;
                case 20:
                    return PARM_FLOAT;
                case 21:
                    return PARM_INTEGER;
                case 22:
                    return PARM_INTEGER;

        }
        return PARM_UNSUPPORTED;
    }

    // Boiler plate to load individual types.
    static void  loadData(UT_IStream &is, int64 &v)
    { is.bread(&v, 1); }
    static void  loadData(UT_IStream &is, bool &v)
    { int64     iv; is.bread(&iv, 1); v = iv; }
    static void  loadData(UT_IStream &is, fpreal64 &v)
    { is.bread<fpreal64>(&v, 1); }
    static void  loadData(UT_IStream &is, UT_Vector2D &v)
    { is.bread<fpreal64>(&v.x(), 1); is.bread<fpreal64>(&v.y(), 1); }
    static void  loadData(UT_IStream &is, UT_Vector3D &v)
    { is.bread<fpreal64>(&v.x(), 1); is.bread<fpreal64>(&v.y(), 1);
      is.bread<fpreal64>(&v.z(), 1); }
    static void  loadData(UT_IStream &is, UT_Vector4D &v)
    { is.bread<fpreal64>(&v.x(), 1); is.bread<fpreal64>(&v.y(), 1);
      is.bread<fpreal64>(&v.z(), 1); is.bread<fpreal64>(&v.w(), 1); }
    static void  loadData(UT_IStream &is, UT_Matrix2D &v)
    { for (int r = 0; r < 2; r++) for (int c = 0; c < 2; c++) is.bread<fpreal64>(&v(r, c), 1); }
    static void  loadData(UT_IStream &is, UT_Matrix3D &v)
    { for (int r = 0; r < 3; r++) for (int c = 0; c < 3; c++) is.bread<fpreal64>(&v(r, c), 1); }
    static void  loadData(UT_IStream &is, UT_Matrix4D &v)
    { for (int r = 0; r < 4; r++) for (int c = 0; c < 4; c++) is.bread<fpreal64>(&v(r, c), 1); }
    static void  loadData(UT_IStream &is, UT_Vector2I &v)
    { is.bread<int64>(&v.x(), 1); is.bread<int64>(&v.y(), 1); }
    static void  loadData(UT_IStream &is, UT_Vector3I &v)
    { is.bread<int64>(&v.x(), 1); is.bread<int64>(&v.y(), 1);
      is.bread<int64>(&v.z(), 1); }
    static void  loadData(UT_IStream &is, UT_Vector4I &v)
    { is.bread<int64>(&v.x(), 1); is.bread<int64>(&v.y(), 1);
      is.bread<int64>(&v.z(), 1); is.bread<int64>(&v.w(), 1); }
    static void  loadData(UT_IStream &is, UT_StringHolder &v)
    { is.bread(v); }
    static void  loadData(UT_IStream &is, UT_SharedPtr<UT_Ramp> &v)
    {   UT_StringHolder   rampdata;
        loadData(is, rampdata);
        if (rampdata.isstring())
        {
            v.reset(new UT_Ramp());
            UT_IStream  istr((const char *) rampdata, rampdata.length(), UT_ISTREAM_ASCII);
            v->load(istr);
        }
        else v.reset();
    }
    static void  loadData(UT_IStream &is, PRM_DataItemHandle &v)
    {   UT_StringHolder   data;
        loadData(is, data);
        if (data.isstring())
        {
            // Find the data type.
            char *colon = UT_StringWrap(data).findChar(':');
            if (colon)
            {
                int             typelen = colon - data.buffer();
                UT_WorkBuffer   type;
                type.strncpy(data.buffer(), typelen);
                UT_IStream  istr(((const char *) data) + typelen + 1, data.length() - (typelen + 1), UT_ISTREAM_BINARY);
                
                v = PRM_DataFactory::parseBinary(type.buffer(), istr);
            }
        }
        else v.reset();
    }

    static void  saveData(std::ostream &os, int64 v)
    { UTwrite(os, &v); }
    static void  saveData(std::ostream &os, bool v)
    { int64 iv = v; UTwrite(os, &iv); }
    static void  saveData(std::ostream &os, fpreal64 v)
    { UTwrite<fpreal64>(os, &v); }
    static void  saveData(std::ostream &os, UT_Vector2D v)
    { UTwrite<fpreal64>(os, &v.x()); UTwrite<fpreal64>(os, &v.y()); }
    static void  saveData(std::ostream &os, UT_Vector3D v)
    { UTwrite<fpreal64>(os, &v.x()); UTwrite<fpreal64>(os, &v.y());
      UTwrite<fpreal64>(os, &v.z()); }
    static void  saveData(std::ostream &os, UT_Vector4D v)
    { UTwrite<fpreal64>(os, &v.x()); UTwrite<fpreal64>(os, &v.y());
      UTwrite<fpreal64>(os, &v.z()); UTwrite<fpreal64>(os, &v.w()); }
    static void  saveData(std::ostream &os, UT_Matrix2D v)
    { for (int r = 0; r < 2; r++) for (int c = 0; c < 2; c++) UTwrite<fpreal64>(os, &v(r, c)); }
    static void  saveData(std::ostream &os, UT_Matrix3D v)
    { for (int r = 0; r < 3; r++) for (int c = 0; c < 3; c++) UTwrite<fpreal64>(os, &v(r, c)); }
    static void  saveData(std::ostream &os, UT_Matrix4D v)
    { for (int r = 0; r < 4; r++) for (int c = 0; c < 4; c++) UTwrite<fpreal64>(os, &v(r, c)); }
    static void  saveData(std::ostream &os, UT_StringHolder s)
    { UT_StringWrap(s).saveBinary(os); }
    static void  saveData(std::ostream &os, UT_SharedPtr<UT_Ramp> s)
    {   UT_StringHolder         result;
        UT_OStringStream        ostr;
        if (s) s->save(ostr);
        result = ostr.str();
        saveData(os, result);
    }
    static void  saveData(std::ostream &os, PRM_DataItemHandle s)
    {   UT_StringHolder         result;
        UT_OStringStream        ostr;
        if (s) 
        {
            ostr << s->getDataTypeToken();
            ostr << ":";
            s->saveBinary(ostr);
        }
        result = ostr.str();
        saveData(os, result);
    }


    void         save(std::ostream &os) const
    {
        int32           v = version();
        UTwrite(os, &v);
        saveData(os, myGroup);
        saveData(os, myUsedist);
        saveData(os, myDist);
        saveData(os, myDeldegen);
        saveData(os, myKeepunusedpoints);
        saveData(os, myKeepconsolidatedpoints);
        saveData(os, myGrouppropagation);
        saveData(os, mySwitcher);
        saveData(os, mySnaptype);
        saveData(os, myTol3d);
        saveData(os, mySnappointpos);
        saveData(os, mySnappointattribs);
        saveData(os, myPointattribnames);
        saveData(os, mySnapswitcher);
        saveData(os, myGridtype);
        saveData(os, myGridspacing);
        saveData(os, myGridlines);
        saveData(os, myGridpow2);
        saveData(os, myGridoffset);
        saveData(os, myGridround);
        saveData(os, myGridtol);
        saveData(os, myUpdatenml);
        saveData(os, myAccurate);

    }

    bool         load(UT_IStream &is)
    {
        int32           v;
        is.bread(&v, 1);
        if (version() != v)
        {
            // Fail incompatible versions
            return false;
        }
        loadData(is, myGroup);
        loadData(is, myUsedist);
        loadData(is, myDist);
        loadData(is, myDeldegen);
        loadData(is, myKeepunusedpoints);
        loadData(is, myKeepconsolidatedpoints);
        loadData(is, myGrouppropagation);
        loadData(is, mySwitcher);
        loadData(is, mySnaptype);
        loadData(is, myTol3d);
        loadData(is, mySnappointpos);
        loadData(is, mySnappointattribs);
        loadData(is, myPointattribnames);
        loadData(is, mySnapswitcher);
        loadData(is, myGridtype);
        loadData(is, myGridspacing);
        loadData(is, myGridlines);
        loadData(is, myGridpow2);
        loadData(is, myGridoffset);
        loadData(is, myGridround);
        loadData(is, myGridtol);
        loadData(is, myUpdatenml);
        loadData(is, myAccurate);

        return true;
    }

    const UT_StringHolder & getGroup() const { return myGroup; }
    void setGroup(const UT_StringHolder & val) { myGroup = val; }
    UT_StringHolder opGroup(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getGroup();
        UT_StringHolder result;
        OP_Utils::evalOpParm(result, thissop, "group", cookparms.getCookTime(), 0);
        return result;
    }
    bool getUsedist() const { return myUsedist; }
    void setUsedist(bool val) { myUsedist = val; }
    bool opUsedist(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getUsedist();
        bool result;
        OP_Utils::evalOpParm(result, thissop, "usedist", cookparms.getCookTime(), 0);
        return result;
    }
    fpreal64 getDist() const { return myDist; }
    void setDist(fpreal64 val) { myDist = val; }
    fpreal64 opDist(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getDist();
        fpreal64 result;
        OP_Utils::evalOpParm(result, thissop, "dist", cookparms.getCookTime(), 0);
        return result;
    }
    bool getDeldegen() const { return myDeldegen; }
    void setDeldegen(bool val) { myDeldegen = val; }
    bool opDeldegen(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getDeldegen();
        bool result;
        OP_Utils::evalOpParm(result, thissop, "deldegen", cookparms.getCookTime(), 0);
        return result;
    }
    bool getKeepunusedpoints() const { return myKeepunusedpoints; }
    void setKeepunusedpoints(bool val) { myKeepunusedpoints = val; }
    bool opKeepunusedpoints(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getKeepunusedpoints();
        bool result;
        OP_Utils::evalOpParm(result, thissop, "keepunusedpoints", cookparms.getCookTime(), 0);
        return result;
    }
    bool getKeepconsolidatedpoints() const { return myKeepconsolidatedpoints; }
    void setKeepconsolidatedpoints(bool val) { myKeepconsolidatedpoints = val; }
    bool opKeepconsolidatedpoints(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getKeepconsolidatedpoints();
        bool result;
        OP_Utils::evalOpParm(result, thissop, "keepconsolidatedpoints", cookparms.getCookTime(), 0);
        return result;
    }
    Grouppropagation getGrouppropagation() const { return Grouppropagation(myGrouppropagation); }
    void setGrouppropagation(Grouppropagation val) { myGrouppropagation = int64(val); }
    Grouppropagation opGrouppropagation(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getGrouppropagation();
        int64 result;
        OP_Utils::evalOpParm(result, thissop, "grouppropagation", cookparms.getCookTime(), 0);
        return Grouppropagation(result);
    }
    int64 getSwitcher() const { return mySwitcher; }
    void setSwitcher(int64 val) { mySwitcher = val; }
    int64 opSwitcher(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getSwitcher();
        int64 result;
        OP_Utils::evalOpParm(result, thissop, "switcher", cookparms.getCookTime(), 0);
        return result;
    }
    Snaptype getSnaptype() const { return Snaptype(mySnaptype); }
    void setSnaptype(Snaptype val) { mySnaptype = int64(val); }
    Snaptype opSnaptype(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getSnaptype();
        int64 result;
        OP_Utils::evalOpParm(result, thissop, "snaptype", cookparms.getCookTime(), 0);
        return Snaptype(result);
    }
    fpreal64 getTol3d() const { return myTol3d; }
    void setTol3d(fpreal64 val) { myTol3d = val; }
    fpreal64 opTol3d(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getTol3d();
        fpreal64 result;
        OP_Utils::evalOpParm(result, thissop, "tol3d", cookparms.getCookTime(), 0);
        return result;
    }
    bool getSnappointpos() const { return mySnappointpos; }
    void setSnappointpos(bool val) { mySnappointpos = val; }
    bool opSnappointpos(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getSnappointpos();
        bool result;
        OP_Utils::evalOpParm(result, thissop, "snappointpos", cookparms.getCookTime(), 0);
        return result;
    }
    bool getSnappointattribs() const { return mySnappointattribs; }
    void setSnappointattribs(bool val) { mySnappointattribs = val; }
    bool opSnappointattribs(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getSnappointattribs();
        bool result;
        OP_Utils::evalOpParm(result, thissop, "snappointattribs", cookparms.getCookTime(), 0);
        return result;
    }
    const UT_StringHolder & getPointattribnames() const { return myPointattribnames; }
    void setPointattribnames(const UT_StringHolder & val) { myPointattribnames = val; }
    UT_StringHolder opPointattribnames(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getPointattribnames();
        UT_StringHolder result;
        OP_Utils::evalOpParm(result, thissop, "pointattribnames", cookparms.getCookTime(), 0);
        return result;
    }
    int64 getSnapswitcher() const { return mySnapswitcher; }
    void setSnapswitcher(int64 val) { mySnapswitcher = val; }
    int64 opSnapswitcher(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getSnapswitcher();
        int64 result;
        OP_Utils::evalOpParm(result, thissop, "snapswitcher", cookparms.getCookTime(), 0);
        return result;
    }
    Gridtype getGridtype() const { return Gridtype(myGridtype); }
    void setGridtype(Gridtype val) { myGridtype = int64(val); }
    Gridtype opGridtype(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getGridtype();
        int64 result;
        OP_Utils::evalOpParm(result, thissop, "gridtype", cookparms.getCookTime(), 0);
        return Gridtype(result);
    }
    UT_Vector3D getGridspacing() const { return myGridspacing; }
    void setGridspacing(UT_Vector3D val) { myGridspacing = val; }
    UT_Vector3D opGridspacing(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getGridspacing();
        UT_Vector3D result;
        OP_Utils::evalOpParm(result, thissop, "gridspacing", cookparms.getCookTime(), 0);
        return result;
    }
    UT_Vector3D getGridlines() const { return myGridlines; }
    void setGridlines(UT_Vector3D val) { myGridlines = val; }
    UT_Vector3D opGridlines(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getGridlines();
        UT_Vector3D result;
        OP_Utils::evalOpParm(result, thissop, "gridlines", cookparms.getCookTime(), 0);
        return result;
    }
    UT_Vector3I getGridpow2() const { return myGridpow2; }
    void setGridpow2(UT_Vector3I val) { myGridpow2 = val; }
    UT_Vector3I opGridpow2(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getGridpow2();
        UT_Vector3I result;
        OP_Utils::evalOpParm(result, thissop, "gridpow2", cookparms.getCookTime(), 0);
        return result;
    }
    UT_Vector3D getGridoffset() const { return myGridoffset; }
    void setGridoffset(UT_Vector3D val) { myGridoffset = val; }
    UT_Vector3D opGridoffset(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getGridoffset();
        UT_Vector3D result;
        OP_Utils::evalOpParm(result, thissop, "gridoffset", cookparms.getCookTime(), 0);
        return result;
    }
    Gridround getGridround() const { return Gridround(myGridround); }
    void setGridround(Gridround val) { myGridround = int64(val); }
    Gridround opGridround(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getGridround();
        int64 result;
        OP_Utils::evalOpParm(result, thissop, "gridround", cookparms.getCookTime(), 0);
        return Gridround(result);
    }
    fpreal64 getGridtol() const { return myGridtol; }
    void setGridtol(fpreal64 val) { myGridtol = val; }
    fpreal64 opGridtol(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getGridtol();
        fpreal64 result;
        OP_Utils::evalOpParm(result, thissop, "gridtol", cookparms.getCookTime(), 0);
        return result;
    }
    bool getUpdatenml() const { return myUpdatenml; }
    void setUpdatenml(bool val) { myUpdatenml = val; }
    bool opUpdatenml(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getUpdatenml();
        bool result;
        OP_Utils::evalOpParm(result, thissop, "updatenml", cookparms.getCookTime(), 0);
        return result;
    }
    bool getAccurate() const { return myAccurate; }
    void setAccurate(bool val) { myAccurate = val; }
    bool opAccurate(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getAccurate();
        bool result;
        OP_Utils::evalOpParm(result, thissop, "accurate", cookparms.getCookTime(), 0);
        return result;
    }

private:
    UT_StringHolder myGroup;
    bool myUsedist;
    fpreal64 myDist;
    bool myDeldegen;
    bool myKeepunusedpoints;
    bool myKeepconsolidatedpoints;
    int64 myGrouppropagation;
    int64 mySwitcher;
    int64 mySnaptype;
    fpreal64 myTol3d;
    bool mySnappointpos;
    bool mySnappointattribs;
    UT_StringHolder myPointattribnames;
    int64 mySnapswitcher;
    int64 myGridtype;
    UT_Vector3D myGridspacing;
    UT_Vector3D myGridlines;
    UT_Vector3I myGridpow2;
    UT_Vector3D myGridoffset;
    int64 myGridround;
    fpreal64 myGridtol;
    bool myUpdatenml;
    bool myAccurate;

};
