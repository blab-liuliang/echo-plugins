/* Automagically Generated by generate_proto.py
 * Do not Edit
 */
#pragma once

#include <SOP/SOP_NodeVerb.h>
#include <OP/OP_Utils.h>
#include <PRM/PRM_Parm.h>
#include <UT/UT_IStream.h>
#include <UT/UT_NTStreamUtil.h>
#include <UT/UT_Ramp.h>
#include <UT/UT_SharedPtr.h>
#include <UT/UT_StringHolder.h>
#include <UT/UT_StringStream.h>
#include <UT/UT_VectorTypes.h>
#include <SYS/SYS_Types.h>

using namespace UT::Literal;

class DEP_MicroNode;

class SOP_API SOP_SubdivideParms  : public SOP_NodeParms
{
public:
    static int version() { return 1; }

    SOP_SubdivideParms()
    {
        myGroup = ""_sh;
        myCreaseGroup = ""_sh;
        myDepth = 1;
        myOverrideCreaseWeight = false;
        myCreaseWeight = 0;
        myOutputCreases = 0;
        myOutputCreaseGroup = "creases"_sh;
        myCloseCracks = 1;
        myDivideChoice = 1;
        myBias = 1;
        mySmoothVertex = true;
        myEnforceConsistentTopology = false;
        myLinearCreases = false;
        myAlgorithm = 0;
        myBuildPolygonSoup = false;
        myTreatCurvesIndependent = false;
        myUpdateNormals = true;
        myRemoveHoles = true;
        myVtxBoundaryInterp = "corner"_sh;
        myFVarLinearInterp = "corner1"_sh;
        myCreasingMethod = "uniform"_sh;
        myTriangleSubd = "catclark"_sh;

    }

    explicit SOP_SubdivideParms(const SOP_SubdivideParms &) = default;

    virtual ~SOP_SubdivideParms() {}

    bool operator==(const SOP_SubdivideParms &src) const
    {
        if (myGroup != src.myGroup) return false;
        if (myCreaseGroup != src.myCreaseGroup) return false;
        if (myDepth != src.myDepth) return false;
        if (myOverrideCreaseWeight != src.myOverrideCreaseWeight) return false;
        if (myCreaseWeight != src.myCreaseWeight) return false;
        if (myOutputCreases != src.myOutputCreases) return false;
        if (myOutputCreaseGroup != src.myOutputCreaseGroup) return false;
        if (myCloseCracks != src.myCloseCracks) return false;
        if (myDivideChoice != src.myDivideChoice) return false;
        if (myBias != src.myBias) return false;
        if (mySmoothVertex != src.mySmoothVertex) return false;
        if (myEnforceConsistentTopology != src.myEnforceConsistentTopology) return false;
        if (myLinearCreases != src.myLinearCreases) return false;
        if (myAlgorithm != src.myAlgorithm) return false;
        if (myBuildPolygonSoup != src.myBuildPolygonSoup) return false;
        if (myTreatCurvesIndependent != src.myTreatCurvesIndependent) return false;
        if (myUpdateNormals != src.myUpdateNormals) return false;
        if (myRemoveHoles != src.myRemoveHoles) return false;
        if (myVtxBoundaryInterp != src.myVtxBoundaryInterp) return false;
        if (myFVarLinearInterp != src.myFVarLinearInterp) return false;
        if (myCreasingMethod != src.myCreasingMethod) return false;
        if (myTriangleSubd != src.myTriangleSubd) return false;

        return true;
    }
    bool operator!=(const SOP_SubdivideParms &src) const
    {
        return !operator==(src);
    }



    void        buildFromOp(const OP_Node *node, fpreal time, DEP_MicroNode *depnode)
    {
        if (true)
            OP_Utils::evalOpParm(myGroup, node, "subdivide", time, 0);
        else myGroup = ""_sh;
        if (true)
            OP_Utils::evalOpParm(myCreaseGroup, node, "creases", time, 0);
        else myCreaseGroup = ""_sh;
        if (true)
            OP_Utils::evalOpParm(myDepth, node, "iterations", time, 0);
        else myDepth = 1;
        if (true)
            OP_Utils::evalOpParm(myOverrideCreaseWeight, node, "overridecrease", time, 0);
        else myOverrideCreaseWeight = false;
        if (true)
            OP_Utils::evalOpParm(myCreaseWeight, node, "creaseweight", time, 0);
        else myCreaseWeight = 0;
        if (true)
            OP_Utils::evalOpParm(myOutputCreases, node, "outputcrease", time, 0);
        else myOutputCreases = 0;
        if (true)
            OP_Utils::evalOpParm(myOutputCreaseGroup, node, "outcreasegroup", time, 0);
        else myOutputCreaseGroup = "creases"_sh;
        if (true)
            OP_Utils::evalOpParm(myCloseCracks, node, "closeholes", time, 0);
        else myCloseCracks = 1;
        if (true)
            OP_Utils::evalOpParm(myDivideChoice, node, "surroundpoly", time, 0);
        else myDivideChoice = 1;
        if (true)
            OP_Utils::evalOpParm(myBias, node, "bias", time, 0);
        else myBias = 1;
        if (true)
            OP_Utils::evalOpParm(mySmoothVertex, node, "smoothvertex", time, 0);
        else mySmoothVertex = true;
        if (true)
            OP_Utils::evalOpParm(myEnforceConsistentTopology, node, "consisttopology", time, 0);
        else myEnforceConsistentTopology = false;
        if (true)
            OP_Utils::evalOpParm(myLinearCreases, node, "linearcreases", time, 0);
        else myLinearCreases = false;
        if (true)
            OP_Utils::evalOpParm(myAlgorithm, node, "algorithm", time, 0);
        else myAlgorithm = 0;
        if (true)
            OP_Utils::evalOpParm(myBuildPolygonSoup, node, "buildpolysoups", time, 0);
        else myBuildPolygonSoup = false;
        if (true)
            OP_Utils::evalOpParm(myTreatCurvesIndependent, node, "indepcurves", time, 0);
        else myTreatCurvesIndependent = false;
        if (true)
            OP_Utils::evalOpParm(myUpdateNormals, node, "updatenmls", time, 0);
        else myUpdateNormals = true;
        if (true)
            OP_Utils::evalOpParm(myRemoveHoles, node, "removeholes", time, 0);
        else myRemoveHoles = true;
        if (true)
            OP_Utils::evalOpParm(myVtxBoundaryInterp, node, "vtxboundary", time, 0);
        else myVtxBoundaryInterp = "corner"_sh;
        if (true)
            OP_Utils::evalOpParm(myFVarLinearInterp, node, "fvarlinear", time, 0);
        else myFVarLinearInterp = "corner1"_sh;
        if (true)
            OP_Utils::evalOpParm(myCreasingMethod, node, "creasemethod", time, 0);
        else myCreasingMethod = "uniform"_sh;
        if (true)
            OP_Utils::evalOpParm(myTriangleSubd, node, "trianglesubd", time, 0);
        else myTriangleSubd = "catclark"_sh;

    }


    virtual void loadFromOpSubclass(const LoadParms &loadparms)
    {
        buildFromOp(loadparms.node(), loadparms.context().getTime(), loadparms.depnode());
    }


    virtual void copyFrom(const SOP_NodeParms *src)
    {
        *this = *((const SOP_SubdivideParms *)src);
    }

    template <typename T>
    void
    doGetParmValue(exint idx, T &value) const
    {
        switch (idx)
        {
            case 0:
                coerceValue(value, myGroup);
                break;
            case 1:
                coerceValue(value, myCreaseGroup);
                break;
            case 2:
                coerceValue(value, myDepth);
                break;
            case 3:
                coerceValue(value, myOverrideCreaseWeight);
                break;
            case 4:
                coerceValue(value, myCreaseWeight);
                break;
            case 5:
                coerceValue(value, myOutputCreases);
                break;
            case 6:
                coerceValue(value, myOutputCreaseGroup);
                break;
            case 7:
                coerceValue(value, myCloseCracks);
                break;
            case 8:
                coerceValue(value, myDivideChoice);
                break;
            case 9:
                coerceValue(value, myBias);
                break;
            case 10:
                coerceValue(value, mySmoothVertex);
                break;
            case 11:
                coerceValue(value, myEnforceConsistentTopology);
                break;
            case 12:
                coerceValue(value, myLinearCreases);
                break;
            case 13:
                coerceValue(value, myAlgorithm);
                break;
            case 14:
                coerceValue(value, myBuildPolygonSoup);
                break;
            case 15:
                coerceValue(value, myTreatCurvesIndependent);
                break;
            case 16:
                coerceValue(value, myUpdateNormals);
                break;
            case 17:
                coerceValue(value, myRemoveHoles);
                break;
            case 18:
                coerceValue(value, myVtxBoundaryInterp);
                break;
            case 19:
                coerceValue(value, myFVarLinearInterp);
                break;
            case 20:
                coerceValue(value, myCreasingMethod);
                break;
            case 21:
                coerceValue(value, myTriangleSubd);
                break;

        }
    }

    void        getParmValue(exint idx, exint &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, fpreal &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Vector2D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Vector3D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Vector4D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Matrix2D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Matrix3D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Matrix4D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_StringHolder &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_SharedPtr<UT_Ramp> &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, PRM_DataItemHandle &value) const
    { doGetParmValue(idx, value); }

    template <typename T>
    void
    doSetParmValue(exint idx, const T &value) 
    {
        switch (idx)
        {
            case 0:
                coerceValue(myGroup, value);
                break;
            case 1:
                coerceValue(myCreaseGroup, value);
                break;
            case 2:
                coerceValue(myDepth, value);
                break;
            case 3:
                coerceValue(myOverrideCreaseWeight, value);
                break;
            case 4:
                coerceValue(myCreaseWeight, value);
                break;
            case 5:
                coerceValue(myOutputCreases, value);
                break;
            case 6:
                coerceValue(myOutputCreaseGroup, value);
                break;
            case 7:
                coerceValue(myCloseCracks, value);
                break;
            case 8:
                coerceValue(myDivideChoice, value);
                break;
            case 9:
                coerceValue(myBias, value);
                break;
            case 10:
                coerceValue(mySmoothVertex, value);
                break;
            case 11:
                coerceValue(myEnforceConsistentTopology, value);
                break;
            case 12:
                coerceValue(myLinearCreases, value);
                break;
            case 13:
                coerceValue(myAlgorithm, value);
                break;
            case 14:
                coerceValue(myBuildPolygonSoup, value);
                break;
            case 15:
                coerceValue(myTreatCurvesIndependent, value);
                break;
            case 16:
                coerceValue(myUpdateNormals, value);
                break;
            case 17:
                coerceValue(myRemoveHoles, value);
                break;
            case 18:
                coerceValue(myVtxBoundaryInterp, value);
                break;
            case 19:
                coerceValue(myFVarLinearInterp, value);
                break;
            case 20:
                coerceValue(myCreasingMethod, value);
                break;
            case 21:
                coerceValue(myTriangleSubd, value);
                break;

        }
    }

    void        setParmValue(exint idx, const exint &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const fpreal &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Vector2D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Vector3D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Vector4D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Matrix2D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Matrix3D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Matrix4D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_StringHolder &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_SharedPtr<UT_Ramp> &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const PRM_DataItemHandle &value) 
    { doSetParmValue(idx, value); }

    virtual exint    getNumParms() const
    {
        return 22;
    }

    virtual const char *getParmName(exint fieldnum) const
    {
        switch (fieldnum)
        {
            case 0:
                return "subdivide";
            case 1:
                return "creases";
            case 2:
                return "iterations";
            case 3:
                return "overridecrease";
            case 4:
                return "creaseweight";
            case 5:
                return "outputcrease";
            case 6:
                return "outcreasegroup";
            case 7:
                return "closeholes";
            case 8:
                return "surroundpoly";
            case 9:
                return "bias";
            case 10:
                return "smoothvertex";
            case 11:
                return "consisttopology";
            case 12:
                return "linearcreases";
            case 13:
                return "algorithm";
            case 14:
                return "buildpolysoups";
            case 15:
                return "indepcurves";
            case 16:
                return "updatenmls";
            case 17:
                return "removeholes";
            case 18:
                return "vtxboundary";
            case 19:
                return "fvarlinear";
            case 20:
                return "creasemethod";
            case 21:
                return "trianglesubd";

        }
        return 0;
    }

    virtual ParmType getParmType(exint fieldnum) const
    {
        switch (fieldnum)
        {
                case 0:
                    return PARM_STRING;
                case 1:
                    return PARM_STRING;
                case 2:
                    return PARM_INTEGER;
                case 3:
                    return PARM_INTEGER;
                case 4:
                    return PARM_FLOAT;
                case 5:
                    return PARM_INTEGER;
                case 6:
                    return PARM_STRING;
                case 7:
                    return PARM_INTEGER;
                case 8:
                    return PARM_INTEGER;
                case 9:
                    return PARM_FLOAT;
                case 10:
                    return PARM_INTEGER;
                case 11:
                    return PARM_INTEGER;
                case 12:
                    return PARM_INTEGER;
                case 13:
                    return PARM_INTEGER;
                case 14:
                    return PARM_INTEGER;
                case 15:
                    return PARM_INTEGER;
                case 16:
                    return PARM_INTEGER;
                case 17:
                    return PARM_INTEGER;
                case 18:
                    return PARM_STRING;
                case 19:
                    return PARM_STRING;
                case 20:
                    return PARM_STRING;
                case 21:
                    return PARM_STRING;

        }
        return PARM_UNSUPPORTED;
    }

    // Boiler plate to load individual types.
    static void  loadData(UT_IStream &is, int64 &v)
    { is.bread(&v, 1); }
    static void  loadData(UT_IStream &is, bool &v)
    { int64     iv; is.bread(&iv, 1); v = iv; }
    static void  loadData(UT_IStream &is, fpreal64 &v)
    { is.bread<fpreal64>(&v, 1); }
    static void  loadData(UT_IStream &is, UT_Vector2D &v)
    { is.bread<fpreal64>(&v.x(), 1); is.bread<fpreal64>(&v.y(), 1); }
    static void  loadData(UT_IStream &is, UT_Vector3D &v)
    { is.bread<fpreal64>(&v.x(), 1); is.bread<fpreal64>(&v.y(), 1);
      is.bread<fpreal64>(&v.z(), 1); }
    static void  loadData(UT_IStream &is, UT_Vector4D &v)
    { is.bread<fpreal64>(&v.x(), 1); is.bread<fpreal64>(&v.y(), 1);
      is.bread<fpreal64>(&v.z(), 1); is.bread<fpreal64>(&v.w(), 1); }
    static void  loadData(UT_IStream &is, UT_Matrix2D &v)
    { for (int r = 0; r < 2; r++) for (int c = 0; c < 2; c++) is.bread<fpreal64>(&v(r, c), 1); }
    static void  loadData(UT_IStream &is, UT_Matrix3D &v)
    { for (int r = 0; r < 3; r++) for (int c = 0; c < 3; c++) is.bread<fpreal64>(&v(r, c), 1); }
    static void  loadData(UT_IStream &is, UT_Matrix4D &v)
    { for (int r = 0; r < 4; r++) for (int c = 0; c < 4; c++) is.bread<fpreal64>(&v(r, c), 1); }
    static void  loadData(UT_IStream &is, UT_Vector2I &v)
    { is.bread<int64>(&v.x(), 1); is.bread<int64>(&v.y(), 1); }
    static void  loadData(UT_IStream &is, UT_Vector3I &v)
    { is.bread<int64>(&v.x(), 1); is.bread<int64>(&v.y(), 1);
      is.bread<int64>(&v.z(), 1); }
    static void  loadData(UT_IStream &is, UT_Vector4I &v)
    { is.bread<int64>(&v.x(), 1); is.bread<int64>(&v.y(), 1);
      is.bread<int64>(&v.z(), 1); is.bread<int64>(&v.w(), 1); }
    static void  loadData(UT_IStream &is, UT_StringHolder &v)
    { is.bread(v); }
    static void  loadData(UT_IStream &is, UT_SharedPtr<UT_Ramp> &v)
    {   UT_StringHolder   rampdata;
        loadData(is, rampdata);
        if (rampdata.isstring())
        {
            v.reset(new UT_Ramp());
            UT_IStream  istr((const char *) rampdata, rampdata.length(), UT_ISTREAM_ASCII);
            v->load(istr);
        }
        else v.reset();
    }
    static void  loadData(UT_IStream &is, PRM_DataItemHandle &v)
    {   UT_StringHolder   data;
        loadData(is, data);
        if (data.isstring())
        {
            // Find the data type.
            char *colon = UT_StringWrap(data).findChar(':');
            if (colon)
            {
                int             typelen = colon - data.buffer();
                UT_WorkBuffer   type;
                type.strncpy(data.buffer(), typelen);
                UT_IStream  istr(((const char *) data) + typelen + 1, data.length() - (typelen + 1), UT_ISTREAM_BINARY);
                
                v = PRM_DataFactory::parseBinary(type.buffer(), istr);
            }
        }
        else v.reset();
    }

    static void  saveData(std::ostream &os, int64 v)
    { UTwrite(os, &v); }
    static void  saveData(std::ostream &os, bool v)
    { int64 iv = v; UTwrite(os, &iv); }
    static void  saveData(std::ostream &os, fpreal64 v)
    { UTwrite<fpreal64>(os, &v); }
    static void  saveData(std::ostream &os, UT_Vector2D v)
    { UTwrite<fpreal64>(os, &v.x()); UTwrite<fpreal64>(os, &v.y()); }
    static void  saveData(std::ostream &os, UT_Vector3D v)
    { UTwrite<fpreal64>(os, &v.x()); UTwrite<fpreal64>(os, &v.y());
      UTwrite<fpreal64>(os, &v.z()); }
    static void  saveData(std::ostream &os, UT_Vector4D v)
    { UTwrite<fpreal64>(os, &v.x()); UTwrite<fpreal64>(os, &v.y());
      UTwrite<fpreal64>(os, &v.z()); UTwrite<fpreal64>(os, &v.w()); }
    static void  saveData(std::ostream &os, UT_Matrix2D v)
    { for (int r = 0; r < 2; r++) for (int c = 0; c < 2; c++) UTwrite<fpreal64>(os, &v(r, c)); }
    static void  saveData(std::ostream &os, UT_Matrix3D v)
    { for (int r = 0; r < 3; r++) for (int c = 0; c < 3; c++) UTwrite<fpreal64>(os, &v(r, c)); }
    static void  saveData(std::ostream &os, UT_Matrix4D v)
    { for (int r = 0; r < 4; r++) for (int c = 0; c < 4; c++) UTwrite<fpreal64>(os, &v(r, c)); }
    static void  saveData(std::ostream &os, UT_StringHolder s)
    { UT_StringWrap(s).saveBinary(os); }
    static void  saveData(std::ostream &os, UT_SharedPtr<UT_Ramp> s)
    {   UT_StringHolder         result;
        UT_OStringStream        ostr;
        if (s) s->save(ostr);
        result = ostr.str();
        saveData(os, result);
    }
    static void  saveData(std::ostream &os, PRM_DataItemHandle s)
    {   UT_StringHolder         result;
        UT_OStringStream        ostr;
        if (s) 
        {
            ostr << s->getDataTypeToken();
            ostr << ":";
            s->saveBinary(ostr);
        }
        result = ostr.str();
        saveData(os, result);
    }


    void         save(std::ostream &os) const
    {
        int32           v = version();
        UTwrite(os, &v);
        saveData(os, myGroup);
        saveData(os, myCreaseGroup);
        saveData(os, myDepth);
        saveData(os, myOverrideCreaseWeight);
        saveData(os, myCreaseWeight);
        saveData(os, myOutputCreases);
        saveData(os, myOutputCreaseGroup);
        saveData(os, myCloseCracks);
        saveData(os, myDivideChoice);
        saveData(os, myBias);
        saveData(os, mySmoothVertex);
        saveData(os, myEnforceConsistentTopology);
        saveData(os, myLinearCreases);
        saveData(os, myAlgorithm);
        saveData(os, myBuildPolygonSoup);
        saveData(os, myTreatCurvesIndependent);
        saveData(os, myUpdateNormals);
        saveData(os, myRemoveHoles);
        saveData(os, myVtxBoundaryInterp);
        saveData(os, myFVarLinearInterp);
        saveData(os, myCreasingMethod);
        saveData(os, myTriangleSubd);

    }

    bool         load(UT_IStream &is)
    {
        int32           v;
        is.bread(&v, 1);
        if (version() != v)
        {
            // Fail incompatible versions
            return false;
        }
        loadData(is, myGroup);
        loadData(is, myCreaseGroup);
        loadData(is, myDepth);
        loadData(is, myOverrideCreaseWeight);
        loadData(is, myCreaseWeight);
        loadData(is, myOutputCreases);
        loadData(is, myOutputCreaseGroup);
        loadData(is, myCloseCracks);
        loadData(is, myDivideChoice);
        loadData(is, myBias);
        loadData(is, mySmoothVertex);
        loadData(is, myEnforceConsistentTopology);
        loadData(is, myLinearCreases);
        loadData(is, myAlgorithm);
        loadData(is, myBuildPolygonSoup);
        loadData(is, myTreatCurvesIndependent);
        loadData(is, myUpdateNormals);
        loadData(is, myRemoveHoles);
        loadData(is, myVtxBoundaryInterp);
        loadData(is, myFVarLinearInterp);
        loadData(is, myCreasingMethod);
        loadData(is, myTriangleSubd);

        return true;
    }

    const UT_StringHolder & getGroup() const { return myGroup; }
    void setGroup(const UT_StringHolder & val) { myGroup = val; }
    UT_StringHolder opGroup(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getGroup();
        UT_StringHolder result;
        OP_Utils::evalOpParm(result, thissop, "subdivide", cookparms.getCookTime(), 0);
        return result;
    }
    const UT_StringHolder & getCreaseGroup() const { return myCreaseGroup; }
    void setCreaseGroup(const UT_StringHolder & val) { myCreaseGroup = val; }
    UT_StringHolder opCreaseGroup(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getCreaseGroup();
        UT_StringHolder result;
        OP_Utils::evalOpParm(result, thissop, "creases", cookparms.getCookTime(), 0);
        return result;
    }
    int64 getDepth() const { return myDepth; }
    void setDepth(int64 val) { myDepth = val; }
    int64 opDepth(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getDepth();
        int64 result;
        OP_Utils::evalOpParm(result, thissop, "iterations", cookparms.getCookTime(), 0);
        return result;
    }
    bool getOverrideCreaseWeight() const { return myOverrideCreaseWeight; }
    void setOverrideCreaseWeight(bool val) { myOverrideCreaseWeight = val; }
    bool opOverrideCreaseWeight(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getOverrideCreaseWeight();
        bool result;
        OP_Utils::evalOpParm(result, thissop, "overridecrease", cookparms.getCookTime(), 0);
        return result;
    }
    fpreal64 getCreaseWeight() const { return myCreaseWeight; }
    void setCreaseWeight(fpreal64 val) { myCreaseWeight = val; }
    fpreal64 opCreaseWeight(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getCreaseWeight();
        fpreal64 result;
        OP_Utils::evalOpParm(result, thissop, "creaseweight", cookparms.getCookTime(), 0);
        return result;
    }
    bool getOutputCreases() const { return myOutputCreases; }
    void setOutputCreases(bool val) { myOutputCreases = val; }
    bool opOutputCreases(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getOutputCreases();
        bool result;
        OP_Utils::evalOpParm(result, thissop, "outputcrease", cookparms.getCookTime(), 0);
        return result;
    }
    const UT_StringHolder & getOutputCreaseGroup() const { return myOutputCreaseGroup; }
    void setOutputCreaseGroup(const UT_StringHolder & val) { myOutputCreaseGroup = val; }
    UT_StringHolder opOutputCreaseGroup(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getOutputCreaseGroup();
        UT_StringHolder result;
        OP_Utils::evalOpParm(result, thissop, "outcreasegroup", cookparms.getCookTime(), 0);
        return result;
    }
    int64 getCloseCracks() const { return myCloseCracks; }
    void setCloseCracks(int64 val) { myCloseCracks = val; }
    int64 opCloseCracks(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getCloseCracks();
        int64 result;
        OP_Utils::evalOpParm(result, thissop, "closeholes", cookparms.getCookTime(), 0);
        return result;
    }
    int64 getDivideChoice() const { return myDivideChoice; }
    void setDivideChoice(int64 val) { myDivideChoice = val; }
    int64 opDivideChoice(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getDivideChoice();
        int64 result;
        OP_Utils::evalOpParm(result, thissop, "surroundpoly", cookparms.getCookTime(), 0);
        return result;
    }
    fpreal64 getBias() const { return myBias; }
    void setBias(fpreal64 val) { myBias = val; }
    fpreal64 opBias(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getBias();
        fpreal64 result;
        OP_Utils::evalOpParm(result, thissop, "bias", cookparms.getCookTime(), 0);
        return result;
    }
    bool getSmoothVertex() const { return mySmoothVertex; }
    void setSmoothVertex(bool val) { mySmoothVertex = val; }
    bool opSmoothVertex(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getSmoothVertex();
        bool result;
        OP_Utils::evalOpParm(result, thissop, "smoothvertex", cookparms.getCookTime(), 0);
        return result;
    }
    bool getEnforceConsistentTopology() const { return myEnforceConsistentTopology; }
    void setEnforceConsistentTopology(bool val) { myEnforceConsistentTopology = val; }
    bool opEnforceConsistentTopology(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getEnforceConsistentTopology();
        bool result;
        OP_Utils::evalOpParm(result, thissop, "consisttopology", cookparms.getCookTime(), 0);
        return result;
    }
    bool getLinearCreases() const { return myLinearCreases; }
    void setLinearCreases(bool val) { myLinearCreases = val; }
    bool opLinearCreases(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getLinearCreases();
        bool result;
        OP_Utils::evalOpParm(result, thissop, "linearcreases", cookparms.getCookTime(), 0);
        return result;
    }
    int64 getAlgorithm() const { return myAlgorithm; }
    void setAlgorithm(int64 val) { myAlgorithm = val; }
    int64 opAlgorithm(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getAlgorithm();
        int64 result;
        OP_Utils::evalOpParm(result, thissop, "algorithm", cookparms.getCookTime(), 0);
        return result;
    }
    bool getBuildPolygonSoup() const { return myBuildPolygonSoup; }
    void setBuildPolygonSoup(bool val) { myBuildPolygonSoup = val; }
    bool opBuildPolygonSoup(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getBuildPolygonSoup();
        bool result;
        OP_Utils::evalOpParm(result, thissop, "buildpolysoups", cookparms.getCookTime(), 0);
        return result;
    }
    bool getTreatCurvesIndependent() const { return myTreatCurvesIndependent; }
    void setTreatCurvesIndependent(bool val) { myTreatCurvesIndependent = val; }
    bool opTreatCurvesIndependent(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getTreatCurvesIndependent();
        bool result;
        OP_Utils::evalOpParm(result, thissop, "indepcurves", cookparms.getCookTime(), 0);
        return result;
    }
    bool getUpdateNormals() const { return myUpdateNormals; }
    void setUpdateNormals(bool val) { myUpdateNormals = val; }
    bool opUpdateNormals(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getUpdateNormals();
        bool result;
        OP_Utils::evalOpParm(result, thissop, "updatenmls", cookparms.getCookTime(), 0);
        return result;
    }
    bool getRemoveHoles() const { return myRemoveHoles; }
    void setRemoveHoles(bool val) { myRemoveHoles = val; }
    bool opRemoveHoles(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getRemoveHoles();
        bool result;
        OP_Utils::evalOpParm(result, thissop, "removeholes", cookparms.getCookTime(), 0);
        return result;
    }
    const UT_StringHolder & getVtxBoundaryInterp() const { return myVtxBoundaryInterp; }
    void setVtxBoundaryInterp(const UT_StringHolder & val) { myVtxBoundaryInterp = val; }
    UT_StringHolder opVtxBoundaryInterp(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getVtxBoundaryInterp();
        UT_StringHolder result;
        OP_Utils::evalOpParm(result, thissop, "vtxboundary", cookparms.getCookTime(), 0);
        return result;
    }
    const UT_StringHolder & getFVarLinearInterp() const { return myFVarLinearInterp; }
    void setFVarLinearInterp(const UT_StringHolder & val) { myFVarLinearInterp = val; }
    UT_StringHolder opFVarLinearInterp(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getFVarLinearInterp();
        UT_StringHolder result;
        OP_Utils::evalOpParm(result, thissop, "fvarlinear", cookparms.getCookTime(), 0);
        return result;
    }
    const UT_StringHolder & getCreasingMethod() const { return myCreasingMethod; }
    void setCreasingMethod(const UT_StringHolder & val) { myCreasingMethod = val; }
    UT_StringHolder opCreasingMethod(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getCreasingMethod();
        UT_StringHolder result;
        OP_Utils::evalOpParm(result, thissop, "creasemethod", cookparms.getCookTime(), 0);
        return result;
    }
    const UT_StringHolder & getTriangleSubd() const { return myTriangleSubd; }
    void setTriangleSubd(const UT_StringHolder & val) { myTriangleSubd = val; }
    UT_StringHolder opTriangleSubd(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getTriangleSubd();
        UT_StringHolder result;
        OP_Utils::evalOpParm(result, thissop, "trianglesubd", cookparms.getCookTime(), 0);
        return result;
    }

private:
    UT_StringHolder myGroup;
    UT_StringHolder myCreaseGroup;
    int64 myDepth;
    bool myOverrideCreaseWeight;
    fpreal64 myCreaseWeight;
    bool myOutputCreases;
    UT_StringHolder myOutputCreaseGroup;
    int64 myCloseCracks;
    int64 myDivideChoice;
    fpreal64 myBias;
    bool mySmoothVertex;
    bool myEnforceConsistentTopology;
    bool myLinearCreases;
    int64 myAlgorithm;
    bool myBuildPolygonSoup;
    bool myTreatCurvesIndependent;
    bool myUpdateNormals;
    bool myRemoveHoles;
    UT_StringHolder myVtxBoundaryInterp;
    UT_StringHolder myFVarLinearInterp;
    UT_StringHolder myCreasingMethod;
    UT_StringHolder myTriangleSubd;

};
