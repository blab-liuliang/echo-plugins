/* Automagically Generated by generate_proto.py
 * Do not Edit
 */
#pragma once

#include <SOP/SOP_NodeVerb.h>
#include <OP/OP_Utils.h>
#include <PRM/PRM_Parm.h>
#include <UT/UT_IStream.h>
#include <UT/UT_NTStreamUtil.h>
#include <UT/UT_Ramp.h>
#include <UT/UT_SharedPtr.h>
#include <UT/UT_StringHolder.h>
#include <UT/UT_StringStream.h>
#include <UT/UT_VectorTypes.h>
#include <SYS/SYS_Types.h>

using namespace UT::Literal;

class DEP_MicroNode;
namespace SOP_VolumeBlurEnums
{
    enum class Reduction
    {
        MAX = 0,
        MIN,
        MAXABS,
        MINABS,
        AVERAGE,
        MEDIAN,
        SUM,
        SUMABS,
        SUMSQUARE,
        RMS
    };
    enum class Bordertype
    {
        NONE = 0,
        CONSTANT,
        REPEAT,
        STREAK
    };
}


class SOP_API SOP_VolumeBlurParms  : public SOP_NodeParms
{
public:
    static int version() { return 1; }

    SOP_VolumeBlurParms()
    {
        myGroup = ""_sh;
        myUsevoxelradius = false;
        myRadius = 1;
        myVoxelradius = UT_Vector3D(1,1,1);
        myReduction = 4;
        myPasses = 1;
        myBordertype = 0;
        myBorderval = 0;

    }

    explicit SOP_VolumeBlurParms(const SOP_VolumeBlurParms &) = default;

    virtual ~SOP_VolumeBlurParms() {}

    bool operator==(const SOP_VolumeBlurParms &src) const
    {
        if (myGroup != src.myGroup) return false;
        if (myUsevoxelradius != src.myUsevoxelradius) return false;
        if (myRadius != src.myRadius) return false;
        if (myVoxelradius != src.myVoxelradius) return false;
        if (myReduction != src.myReduction) return false;
        if (myPasses != src.myPasses) return false;
        if (myBordertype != src.myBordertype) return false;
        if (myBorderval != src.myBorderval) return false;

        return true;
    }
    bool operator!=(const SOP_VolumeBlurParms &src) const
    {
        return !operator==(src);
    }
    using Reduction = SOP_VolumeBlurEnums::Reduction;
    using Bordertype = SOP_VolumeBlurEnums::Bordertype;



    void        buildFromOp(const OP_Node *node, fpreal time, DEP_MicroNode *depnode)
    {
        if (true)
            OP_Utils::evalOpParm(myGroup, node, "group", time, 0);
        else myGroup = ""_sh;
        if (true)
            OP_Utils::evalOpParm(myUsevoxelradius, node, "usevoxelradius", time, 0);
        else myUsevoxelradius = false;
        if (true && ( (!(((getUsevoxelradius()==1)))) ) )
            OP_Utils::evalOpParm(myRadius, node, "radius", time, 0);
        else myRadius = 1;
        if (true && ( (!(((getUsevoxelradius()==0)))) ) )
            OP_Utils::evalOpParm(myVoxelradius, node, "voxelradius", time, 0);
        else myVoxelradius = UT_Vector3D(1,1,1);
        if (true)
            OP_Utils::evalOpParm(myReduction, node, "reduction", time, 0);
        else myReduction = 4;
        if (true)
            OP_Utils::evalOpParm(myPasses, node, "passes", time, 0);
        else myPasses = 1;
        if (true)
            OP_Utils::evalOpParm(myBordertype, node, "bordertype", time, 0);
        else myBordertype = 0;
        if (true && ( (!(((int64(getBordertype())==0)))) ) )
            OP_Utils::evalOpParm(myBorderval, node, "borderval", time, 0);
        else myBorderval = 0;

    }


    virtual void loadFromOpSubclass(const LoadParms &loadparms)
    {
        buildFromOp(loadparms.node(), loadparms.context().getTime(), loadparms.depnode());
    }


    virtual void copyFrom(const SOP_NodeParms *src)
    {
        *this = *((const SOP_VolumeBlurParms *)src);
    }

    template <typename T>
    void
    doGetParmValue(exint idx, T &value) const
    {
        switch (idx)
        {
            case 0:
                coerceValue(value, myGroup);
                break;
            case 1:
                coerceValue(value, myUsevoxelradius);
                break;
            case 2:
                coerceValue(value, myRadius);
                break;
            case 3:
                coerceValue(value, myVoxelradius);
                break;
            case 4:
                coerceValue(value, myReduction);
                break;
            case 5:
                coerceValue(value, myPasses);
                break;
            case 6:
                coerceValue(value, myBordertype);
                break;
            case 7:
                coerceValue(value, myBorderval);
                break;

        }
    }

    void        getParmValue(exint idx, exint &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, fpreal &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Vector2D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Vector3D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Vector4D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Matrix2D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Matrix3D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Matrix4D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_StringHolder &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_SharedPtr<UT_Ramp> &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, PRM_DataItemHandle &value) const
    { doGetParmValue(idx, value); }

    template <typename T>
    void
    doSetParmValue(exint idx, const T &value) 
    {
        switch (idx)
        {
            case 0:
                coerceValue(myGroup, value);
                break;
            case 1:
                coerceValue(myUsevoxelradius, value);
                break;
            case 2:
                coerceValue(myRadius, value);
                break;
            case 3:
                coerceValue(myVoxelradius, value);
                break;
            case 4:
                coerceValue(myReduction, value);
                break;
            case 5:
                coerceValue(myPasses, value);
                break;
            case 6:
                coerceValue(myBordertype, value);
                break;
            case 7:
                coerceValue(myBorderval, value);
                break;

        }
    }

    void        setParmValue(exint idx, const exint &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const fpreal &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Vector2D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Vector3D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Vector4D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Matrix2D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Matrix3D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Matrix4D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_StringHolder &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_SharedPtr<UT_Ramp> &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const PRM_DataItemHandle &value) 
    { doSetParmValue(idx, value); }

    virtual exint    getNumParms() const
    {
        return 8;
    }

    virtual const char *getParmName(exint fieldnum) const
    {
        switch (fieldnum)
        {
            case 0:
                return "group";
            case 1:
                return "usevoxelradius";
            case 2:
                return "radius";
            case 3:
                return "voxelradius";
            case 4:
                return "reduction";
            case 5:
                return "passes";
            case 6:
                return "bordertype";
            case 7:
                return "borderval";

        }
        return 0;
    }

    virtual ParmType getParmType(exint fieldnum) const
    {
        switch (fieldnum)
        {
                case 0:
                    return PARM_STRING;
                case 1:
                    return PARM_INTEGER;
                case 2:
                    return PARM_FLOAT;
                case 3:
                    return PARM_VECTOR3;
                case 4:
                    return PARM_INTEGER;
                case 5:
                    return PARM_INTEGER;
                case 6:
                    return PARM_INTEGER;
                case 7:
                    return PARM_FLOAT;

        }
        return PARM_UNSUPPORTED;
    }

    // Boiler plate to load individual types.
    static void  loadData(UT_IStream &is, int64 &v)
    { is.bread(&v, 1); }
    static void  loadData(UT_IStream &is, bool &v)
    { int64     iv; is.bread(&iv, 1); v = iv; }
    static void  loadData(UT_IStream &is, fpreal64 &v)
    { is.bread<fpreal64>(&v, 1); }
    static void  loadData(UT_IStream &is, UT_Vector2D &v)
    { is.bread<fpreal64>(&v.x(), 1); is.bread<fpreal64>(&v.y(), 1); }
    static void  loadData(UT_IStream &is, UT_Vector3D &v)
    { is.bread<fpreal64>(&v.x(), 1); is.bread<fpreal64>(&v.y(), 1);
      is.bread<fpreal64>(&v.z(), 1); }
    static void  loadData(UT_IStream &is, UT_Vector4D &v)
    { is.bread<fpreal64>(&v.x(), 1); is.bread<fpreal64>(&v.y(), 1);
      is.bread<fpreal64>(&v.z(), 1); is.bread<fpreal64>(&v.w(), 1); }
    static void  loadData(UT_IStream &is, UT_Matrix2D &v)
    { for (int r = 0; r < 2; r++) for (int c = 0; c < 2; c++) is.bread<fpreal64>(&v(r, c), 1); }
    static void  loadData(UT_IStream &is, UT_Matrix3D &v)
    { for (int r = 0; r < 3; r++) for (int c = 0; c < 3; c++) is.bread<fpreal64>(&v(r, c), 1); }
    static void  loadData(UT_IStream &is, UT_Matrix4D &v)
    { for (int r = 0; r < 4; r++) for (int c = 0; c < 4; c++) is.bread<fpreal64>(&v(r, c), 1); }
    static void  loadData(UT_IStream &is, UT_Vector2I &v)
    { is.bread<int64>(&v.x(), 1); is.bread<int64>(&v.y(), 1); }
    static void  loadData(UT_IStream &is, UT_Vector3I &v)
    { is.bread<int64>(&v.x(), 1); is.bread<int64>(&v.y(), 1);
      is.bread<int64>(&v.z(), 1); }
    static void  loadData(UT_IStream &is, UT_Vector4I &v)
    { is.bread<int64>(&v.x(), 1); is.bread<int64>(&v.y(), 1);
      is.bread<int64>(&v.z(), 1); is.bread<int64>(&v.w(), 1); }
    static void  loadData(UT_IStream &is, UT_StringHolder &v)
    { is.bread(v); }
    static void  loadData(UT_IStream &is, UT_SharedPtr<UT_Ramp> &v)
    {   UT_StringHolder   rampdata;
        loadData(is, rampdata);
        if (rampdata.isstring())
        {
            v.reset(new UT_Ramp());
            UT_IStream  istr((const char *) rampdata, rampdata.length(), UT_ISTREAM_ASCII);
            v->load(istr);
        }
        else v.reset();
    }
    static void  loadData(UT_IStream &is, PRM_DataItemHandle &v)
    {   UT_StringHolder   data;
        loadData(is, data);
        if (data.isstring())
        {
            // Find the data type.
            char *colon = UT_StringWrap(data).findChar(':');
            if (colon)
            {
                int             typelen = colon - data.buffer();
                UT_WorkBuffer   type;
                type.strncpy(data.buffer(), typelen);
                UT_IStream  istr(((const char *) data) + typelen + 1, data.length() - (typelen + 1), UT_ISTREAM_BINARY);
                
                v = PRM_DataFactory::parseBinary(type.buffer(), istr);
            }
        }
        else v.reset();
    }

    static void  saveData(std::ostream &os, int64 v)
    { UTwrite(os, &v); }
    static void  saveData(std::ostream &os, bool v)
    { int64 iv = v; UTwrite(os, &iv); }
    static void  saveData(std::ostream &os, fpreal64 v)
    { UTwrite<fpreal64>(os, &v); }
    static void  saveData(std::ostream &os, UT_Vector2D v)
    { UTwrite<fpreal64>(os, &v.x()); UTwrite<fpreal64>(os, &v.y()); }
    static void  saveData(std::ostream &os, UT_Vector3D v)
    { UTwrite<fpreal64>(os, &v.x()); UTwrite<fpreal64>(os, &v.y());
      UTwrite<fpreal64>(os, &v.z()); }
    static void  saveData(std::ostream &os, UT_Vector4D v)
    { UTwrite<fpreal64>(os, &v.x()); UTwrite<fpreal64>(os, &v.y());
      UTwrite<fpreal64>(os, &v.z()); UTwrite<fpreal64>(os, &v.w()); }
    static void  saveData(std::ostream &os, UT_Matrix2D v)
    { for (int r = 0; r < 2; r++) for (int c = 0; c < 2; c++) UTwrite<fpreal64>(os, &v(r, c)); }
    static void  saveData(std::ostream &os, UT_Matrix3D v)
    { for (int r = 0; r < 3; r++) for (int c = 0; c < 3; c++) UTwrite<fpreal64>(os, &v(r, c)); }
    static void  saveData(std::ostream &os, UT_Matrix4D v)
    { for (int r = 0; r < 4; r++) for (int c = 0; c < 4; c++) UTwrite<fpreal64>(os, &v(r, c)); }
    static void  saveData(std::ostream &os, UT_StringHolder s)
    { UT_StringWrap(s).saveBinary(os); }
    static void  saveData(std::ostream &os, UT_SharedPtr<UT_Ramp> s)
    {   UT_StringHolder         result;
        UT_OStringStream        ostr;
        if (s) s->save(ostr);
        result = ostr.str();
        saveData(os, result);
    }
    static void  saveData(std::ostream &os, PRM_DataItemHandle s)
    {   UT_StringHolder         result;
        UT_OStringStream        ostr;
        if (s) 
        {
            ostr << s->getDataTypeToken();
            ostr << ":";
            s->saveBinary(ostr);
        }
        result = ostr.str();
        saveData(os, result);
    }


    void         save(std::ostream &os) const
    {
        int32           v = version();
        UTwrite(os, &v);
        saveData(os, myGroup);
        saveData(os, myUsevoxelradius);
        saveData(os, myRadius);
        saveData(os, myVoxelradius);
        saveData(os, myReduction);
        saveData(os, myPasses);
        saveData(os, myBordertype);
        saveData(os, myBorderval);

    }

    bool         load(UT_IStream &is)
    {
        int32           v;
        is.bread(&v, 1);
        if (version() != v)
        {
            // Fail incompatible versions
            return false;
        }
        loadData(is, myGroup);
        loadData(is, myUsevoxelradius);
        loadData(is, myRadius);
        loadData(is, myVoxelradius);
        loadData(is, myReduction);
        loadData(is, myPasses);
        loadData(is, myBordertype);
        loadData(is, myBorderval);

        return true;
    }

    const UT_StringHolder & getGroup() const { return myGroup; }
    void setGroup(const UT_StringHolder & val) { myGroup = val; }
    UT_StringHolder opGroup(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getGroup();
        UT_StringHolder result;
        OP_Utils::evalOpParm(result, thissop, "group", cookparms.getCookTime(), 0);
        return result;
    }
    bool getUsevoxelradius() const { return myUsevoxelradius; }
    void setUsevoxelradius(bool val) { myUsevoxelradius = val; }
    bool opUsevoxelradius(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getUsevoxelradius();
        bool result;
        OP_Utils::evalOpParm(result, thissop, "usevoxelradius", cookparms.getCookTime(), 0);
        return result;
    }
    fpreal64 getRadius() const { return myRadius; }
    void setRadius(fpreal64 val) { myRadius = val; }
    fpreal64 opRadius(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getRadius();
        fpreal64 result;
        OP_Utils::evalOpParm(result, thissop, "radius", cookparms.getCookTime(), 0);
        return result;
    }
    UT_Vector3D getVoxelradius() const { return myVoxelradius; }
    void setVoxelradius(UT_Vector3D val) { myVoxelradius = val; }
    UT_Vector3D opVoxelradius(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getVoxelradius();
        UT_Vector3D result;
        OP_Utils::evalOpParm(result, thissop, "voxelradius", cookparms.getCookTime(), 0);
        return result;
    }
    Reduction getReduction() const { return Reduction(myReduction); }
    void setReduction(Reduction val) { myReduction = int64(val); }
    Reduction opReduction(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getReduction();
        int64 result;
        OP_Utils::evalOpParm(result, thissop, "reduction", cookparms.getCookTime(), 0);
        return Reduction(result);
    }
    int64 getPasses() const { return myPasses; }
    void setPasses(int64 val) { myPasses = val; }
    int64 opPasses(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getPasses();
        int64 result;
        OP_Utils::evalOpParm(result, thissop, "passes", cookparms.getCookTime(), 0);
        return result;
    }
    Bordertype getBordertype() const { return Bordertype(myBordertype); }
    void setBordertype(Bordertype val) { myBordertype = int64(val); }
    Bordertype opBordertype(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getBordertype();
        int64 result;
        OP_Utils::evalOpParm(result, thissop, "bordertype", cookparms.getCookTime(), 0);
        return Bordertype(result);
    }
    fpreal64 getBorderval() const { return myBorderval; }
    void setBorderval(fpreal64 val) { myBorderval = val; }
    fpreal64 opBorderval(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getBorderval();
        fpreal64 result;
        OP_Utils::evalOpParm(result, thissop, "borderval", cookparms.getCookTime(), 0);
        return result;
    }

private:
    UT_StringHolder myGroup;
    bool myUsevoxelradius;
    fpreal64 myRadius;
    UT_Vector3D myVoxelradius;
    int64 myReduction;
    int64 myPasses;
    int64 myBordertype;
    fpreal64 myBorderval;

};
