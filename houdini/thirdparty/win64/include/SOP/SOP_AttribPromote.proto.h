/* Automagically Generated by generate_proto.py
 * Do not Edit
 */
#pragma once

#include <SOP/SOP_NodeVerb.h>
#include <OP/OP_Utils.h>
#include <PRM/PRM_Parm.h>
#include <UT/UT_IStream.h>
#include <UT/UT_NTStreamUtil.h>
#include <UT/UT_Ramp.h>
#include <UT/UT_SharedPtr.h>
#include <UT/UT_StringHolder.h>
#include <UT/UT_StringStream.h>
#include <UT/UT_VectorTypes.h>
#include <SYS/SYS_Types.h>

using namespace UT::Literal;

class DEP_MicroNode;
namespace SOP_AttribPromoteEnums
{
    enum class Inclass
    {
        DETAIL = 0,
        PRIMITIVE,
        POINT,
        VERTEX
    };
    enum class Outclass
    {
        DETAIL = 0,
        PRIMITIVE,
        POINT,
        VERTEX
    };
    enum class Method
    {
        MAX = 0,
        MIN,
        MEAN,
        MODE,
        MEDIAN,
        SUM,
        SUMSQUARE,
        RMS,
        FIRST,
        LAST
    };
}


class SOP_API SOP_AttribPromoteParms  : public SOP_NodeParms
{
public:
    static int version() { return 1; }

    SOP_AttribPromoteParms()
    {
        myInname = ""_sh;
        myInclass = 2;
        myOutclass = 2;
        myUsePieceAttrib = false;
        myPieceAttrib = "name"_sh;
        myMethod = 2;
        myUseoutname = false;
        myOutname = ""_sh;
        myDeletein = true;

    }

    explicit SOP_AttribPromoteParms(const SOP_AttribPromoteParms &) = default;

    virtual ~SOP_AttribPromoteParms() {}

    bool operator==(const SOP_AttribPromoteParms &src) const
    {
        if (myInname != src.myInname) return false;
        if (myInclass != src.myInclass) return false;
        if (myOutclass != src.myOutclass) return false;
        if (myUsePieceAttrib != src.myUsePieceAttrib) return false;
        if (myPieceAttrib != src.myPieceAttrib) return false;
        if (myMethod != src.myMethod) return false;
        if (myUseoutname != src.myUseoutname) return false;
        if (myOutname != src.myOutname) return false;
        if (myDeletein != src.myDeletein) return false;

        return true;
    }
    bool operator!=(const SOP_AttribPromoteParms &src) const
    {
        return !operator==(src);
    }
    using Inclass = SOP_AttribPromoteEnums::Inclass;
    using Outclass = SOP_AttribPromoteEnums::Outclass;
    using Method = SOP_AttribPromoteEnums::Method;



    void        buildFromOp(const OP_Node *node, fpreal time, DEP_MicroNode *depnode)
    {
        if (true)
            OP_Utils::evalOpParm(myInname, node, "inname", time, 0);
        else myInname = ""_sh;
        if (true)
            OP_Utils::evalOpParm(myInclass, node, "inclass", time, 0);
        else myInclass = 2;
        if (true)
            OP_Utils::evalOpParm(myOutclass, node, "outclass", time, 0);
        else myOutclass = 2;
        if (true && ( (!(((int64(getOutclass())==0))||((int64(getInclass())==0)))) ) )
            OP_Utils::evalOpParm(myUsePieceAttrib, node, "usepieceattrib", time, 0);
        else myUsePieceAttrib = false;
        if (true && ( (!(((getUsePieceAttrib()==0))||((int64(getOutclass())==0))||((int64(getInclass())==0)))) ) )
            OP_Utils::evalOpParm(myPieceAttrib, node, "pieceattrib", time, 0);
        else myPieceAttrib = "name"_sh;
        if (true)
            OP_Utils::evalOpParm(myMethod, node, "method", time, 0);
        else myMethod = 2;
        if (true)
            OP_Utils::evalOpParm(myUseoutname, node, "useoutname", time, 0);
        else myUseoutname = false;
        if (true && ( (!(((getUseoutname()==0)))) ) )
            OP_Utils::evalOpParm(myOutname, node, "outname", time, 0);
        else myOutname = ""_sh;
        if (true && ( (!(((getUseoutname()==0)&&(int64(getInclass())==2)&&(int64(getOutclass())==3))||((getUseoutname()==0)&&(int64(getInclass())==3)&&(int64(getOutclass())==2)))) ) )
            OP_Utils::evalOpParm(myDeletein, node, "deletein", time, 0);
        else myDeletein = true;

    }


    virtual void loadFromOpSubclass(const LoadParms &loadparms)
    {
        buildFromOp(loadparms.node(), loadparms.context().getTime(), loadparms.depnode());
    }


    virtual void copyFrom(const SOP_NodeParms *src)
    {
        *this = *((const SOP_AttribPromoteParms *)src);
    }

    template <typename T>
    void
    doGetParmValue(exint idx, T &value) const
    {
        switch (idx)
        {
            case 0:
                coerceValue(value, myInname);
                break;
            case 1:
                coerceValue(value, myInclass);
                break;
            case 2:
                coerceValue(value, myOutclass);
                break;
            case 3:
                coerceValue(value, myUsePieceAttrib);
                break;
            case 4:
                coerceValue(value, myPieceAttrib);
                break;
            case 5:
                coerceValue(value, myMethod);
                break;
            case 6:
                coerceValue(value, myUseoutname);
                break;
            case 7:
                coerceValue(value, myOutname);
                break;
            case 8:
                coerceValue(value, myDeletein);
                break;

        }
    }

    void        getParmValue(exint idx, exint &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, fpreal &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Vector2D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Vector3D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Vector4D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Matrix2D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Matrix3D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Matrix4D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_StringHolder &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_SharedPtr<UT_Ramp> &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, PRM_DataItemHandle &value) const
    { doGetParmValue(idx, value); }

    template <typename T>
    void
    doSetParmValue(exint idx, const T &value) 
    {
        switch (idx)
        {
            case 0:
                coerceValue(myInname, value);
                break;
            case 1:
                coerceValue(myInclass, value);
                break;
            case 2:
                coerceValue(myOutclass, value);
                break;
            case 3:
                coerceValue(myUsePieceAttrib, value);
                break;
            case 4:
                coerceValue(myPieceAttrib, value);
                break;
            case 5:
                coerceValue(myMethod, value);
                break;
            case 6:
                coerceValue(myUseoutname, value);
                break;
            case 7:
                coerceValue(myOutname, value);
                break;
            case 8:
                coerceValue(myDeletein, value);
                break;

        }
    }

    void        setParmValue(exint idx, const exint &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const fpreal &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Vector2D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Vector3D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Vector4D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Matrix2D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Matrix3D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Matrix4D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_StringHolder &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_SharedPtr<UT_Ramp> &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const PRM_DataItemHandle &value) 
    { doSetParmValue(idx, value); }

    virtual exint    getNumParms() const
    {
        return 9;
    }

    virtual const char *getParmName(exint fieldnum) const
    {
        switch (fieldnum)
        {
            case 0:
                return "inname";
            case 1:
                return "inclass";
            case 2:
                return "outclass";
            case 3:
                return "usepieceattrib";
            case 4:
                return "pieceattrib";
            case 5:
                return "method";
            case 6:
                return "useoutname";
            case 7:
                return "outname";
            case 8:
                return "deletein";

        }
        return 0;
    }

    virtual ParmType getParmType(exint fieldnum) const
    {
        switch (fieldnum)
        {
                case 0:
                    return PARM_STRING;
                case 1:
                    return PARM_INTEGER;
                case 2:
                    return PARM_INTEGER;
                case 3:
                    return PARM_INTEGER;
                case 4:
                    return PARM_STRING;
                case 5:
                    return PARM_INTEGER;
                case 6:
                    return PARM_INTEGER;
                case 7:
                    return PARM_STRING;
                case 8:
                    return PARM_INTEGER;

        }
        return PARM_UNSUPPORTED;
    }

    // Boiler plate to load individual types.
    static void  loadData(UT_IStream &is, int64 &v)
    { is.bread(&v, 1); }
    static void  loadData(UT_IStream &is, bool &v)
    { int64     iv; is.bread(&iv, 1); v = iv; }
    static void  loadData(UT_IStream &is, fpreal64 &v)
    { is.bread<fpreal64>(&v, 1); }
    static void  loadData(UT_IStream &is, UT_Vector2D &v)
    { is.bread<fpreal64>(&v.x(), 1); is.bread<fpreal64>(&v.y(), 1); }
    static void  loadData(UT_IStream &is, UT_Vector3D &v)
    { is.bread<fpreal64>(&v.x(), 1); is.bread<fpreal64>(&v.y(), 1);
      is.bread<fpreal64>(&v.z(), 1); }
    static void  loadData(UT_IStream &is, UT_Vector4D &v)
    { is.bread<fpreal64>(&v.x(), 1); is.bread<fpreal64>(&v.y(), 1);
      is.bread<fpreal64>(&v.z(), 1); is.bread<fpreal64>(&v.w(), 1); }
    static void  loadData(UT_IStream &is, UT_Matrix2D &v)
    { for (int r = 0; r < 2; r++) for (int c = 0; c < 2; c++) is.bread<fpreal64>(&v(r, c), 1); }
    static void  loadData(UT_IStream &is, UT_Matrix3D &v)
    { for (int r = 0; r < 3; r++) for (int c = 0; c < 3; c++) is.bread<fpreal64>(&v(r, c), 1); }
    static void  loadData(UT_IStream &is, UT_Matrix4D &v)
    { for (int r = 0; r < 4; r++) for (int c = 0; c < 4; c++) is.bread<fpreal64>(&v(r, c), 1); }
    static void  loadData(UT_IStream &is, UT_Vector2I &v)
    { is.bread<int64>(&v.x(), 1); is.bread<int64>(&v.y(), 1); }
    static void  loadData(UT_IStream &is, UT_Vector3I &v)
    { is.bread<int64>(&v.x(), 1); is.bread<int64>(&v.y(), 1);
      is.bread<int64>(&v.z(), 1); }
    static void  loadData(UT_IStream &is, UT_Vector4I &v)
    { is.bread<int64>(&v.x(), 1); is.bread<int64>(&v.y(), 1);
      is.bread<int64>(&v.z(), 1); is.bread<int64>(&v.w(), 1); }
    static void  loadData(UT_IStream &is, UT_StringHolder &v)
    { is.bread(v); }
    static void  loadData(UT_IStream &is, UT_SharedPtr<UT_Ramp> &v)
    {   UT_StringHolder   rampdata;
        loadData(is, rampdata);
        if (rampdata.isstring())
        {
            v.reset(new UT_Ramp());
            UT_IStream  istr((const char *) rampdata, rampdata.length(), UT_ISTREAM_ASCII);
            v->load(istr);
        }
        else v.reset();
    }
    static void  loadData(UT_IStream &is, PRM_DataItemHandle &v)
    {   UT_StringHolder   data;
        loadData(is, data);
        if (data.isstring())
        {
            // Find the data type.
            char *colon = UT_StringWrap(data).findChar(':');
            if (colon)
            {
                int             typelen = colon - data.buffer();
                UT_WorkBuffer   type;
                type.strncpy(data.buffer(), typelen);
                UT_IStream  istr(((const char *) data) + typelen + 1, data.length() - (typelen + 1), UT_ISTREAM_BINARY);
                
                v = PRM_DataFactory::parseBinary(type.buffer(), istr);
            }
        }
        else v.reset();
    }

    static void  saveData(std::ostream &os, int64 v)
    { UTwrite(os, &v); }
    static void  saveData(std::ostream &os, bool v)
    { int64 iv = v; UTwrite(os, &iv); }
    static void  saveData(std::ostream &os, fpreal64 v)
    { UTwrite<fpreal64>(os, &v); }
    static void  saveData(std::ostream &os, UT_Vector2D v)
    { UTwrite<fpreal64>(os, &v.x()); UTwrite<fpreal64>(os, &v.y()); }
    static void  saveData(std::ostream &os, UT_Vector3D v)
    { UTwrite<fpreal64>(os, &v.x()); UTwrite<fpreal64>(os, &v.y());
      UTwrite<fpreal64>(os, &v.z()); }
    static void  saveData(std::ostream &os, UT_Vector4D v)
    { UTwrite<fpreal64>(os, &v.x()); UTwrite<fpreal64>(os, &v.y());
      UTwrite<fpreal64>(os, &v.z()); UTwrite<fpreal64>(os, &v.w()); }
    static void  saveData(std::ostream &os, UT_Matrix2D v)
    { for (int r = 0; r < 2; r++) for (int c = 0; c < 2; c++) UTwrite<fpreal64>(os, &v(r, c)); }
    static void  saveData(std::ostream &os, UT_Matrix3D v)
    { for (int r = 0; r < 3; r++) for (int c = 0; c < 3; c++) UTwrite<fpreal64>(os, &v(r, c)); }
    static void  saveData(std::ostream &os, UT_Matrix4D v)
    { for (int r = 0; r < 4; r++) for (int c = 0; c < 4; c++) UTwrite<fpreal64>(os, &v(r, c)); }
    static void  saveData(std::ostream &os, UT_StringHolder s)
    { UT_StringWrap(s).saveBinary(os); }
    static void  saveData(std::ostream &os, UT_SharedPtr<UT_Ramp> s)
    {   UT_StringHolder         result;
        UT_OStringStream        ostr;
        if (s) s->save(ostr);
        result = ostr.str();
        saveData(os, result);
    }
    static void  saveData(std::ostream &os, PRM_DataItemHandle s)
    {   UT_StringHolder         result;
        UT_OStringStream        ostr;
        if (s) 
        {
            ostr << s->getDataTypeToken();
            ostr << ":";
            s->saveBinary(ostr);
        }
        result = ostr.str();
        saveData(os, result);
    }


    void         save(std::ostream &os) const
    {
        int32           v = version();
        UTwrite(os, &v);
        saveData(os, myInname);
        saveData(os, myInclass);
        saveData(os, myOutclass);
        saveData(os, myUsePieceAttrib);
        saveData(os, myPieceAttrib);
        saveData(os, myMethod);
        saveData(os, myUseoutname);
        saveData(os, myOutname);
        saveData(os, myDeletein);

    }

    bool         load(UT_IStream &is)
    {
        int32           v;
        is.bread(&v, 1);
        if (version() != v)
        {
            // Fail incompatible versions
            return false;
        }
        loadData(is, myInname);
        loadData(is, myInclass);
        loadData(is, myOutclass);
        loadData(is, myUsePieceAttrib);
        loadData(is, myPieceAttrib);
        loadData(is, myMethod);
        loadData(is, myUseoutname);
        loadData(is, myOutname);
        loadData(is, myDeletein);

        return true;
    }

    const UT_StringHolder & getInname() const { return myInname; }
    void setInname(const UT_StringHolder & val) { myInname = val; }
    UT_StringHolder opInname(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getInname();
        UT_StringHolder result;
        OP_Utils::evalOpParm(result, thissop, "inname", cookparms.getCookTime(), 0);
        return result;
    }
    Inclass getInclass() const { return Inclass(myInclass); }
    void setInclass(Inclass val) { myInclass = int64(val); }
    Inclass opInclass(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getInclass();
        int64 result;
        OP_Utils::evalOpParm(result, thissop, "inclass", cookparms.getCookTime(), 0);
        return Inclass(result);
    }
    Outclass getOutclass() const { return Outclass(myOutclass); }
    void setOutclass(Outclass val) { myOutclass = int64(val); }
    Outclass opOutclass(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getOutclass();
        int64 result;
        OP_Utils::evalOpParm(result, thissop, "outclass", cookparms.getCookTime(), 0);
        return Outclass(result);
    }
    bool getUsePieceAttrib() const { return myUsePieceAttrib; }
    void setUsePieceAttrib(bool val) { myUsePieceAttrib = val; }
    bool opUsePieceAttrib(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getUsePieceAttrib();
        bool result;
        OP_Utils::evalOpParm(result, thissop, "usepieceattrib", cookparms.getCookTime(), 0);
        return result;
    }
    const UT_StringHolder & getPieceAttrib() const { return myPieceAttrib; }
    void setPieceAttrib(const UT_StringHolder & val) { myPieceAttrib = val; }
    UT_StringHolder opPieceAttrib(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getPieceAttrib();
        UT_StringHolder result;
        OP_Utils::evalOpParm(result, thissop, "pieceattrib", cookparms.getCookTime(), 0);
        return result;
    }
    Method getMethod() const { return Method(myMethod); }
    void setMethod(Method val) { myMethod = int64(val); }
    Method opMethod(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getMethod();
        int64 result;
        OP_Utils::evalOpParm(result, thissop, "method", cookparms.getCookTime(), 0);
        return Method(result);
    }
    bool getUseoutname() const { return myUseoutname; }
    void setUseoutname(bool val) { myUseoutname = val; }
    bool opUseoutname(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getUseoutname();
        bool result;
        OP_Utils::evalOpParm(result, thissop, "useoutname", cookparms.getCookTime(), 0);
        return result;
    }
    const UT_StringHolder & getOutname() const { return myOutname; }
    void setOutname(const UT_StringHolder & val) { myOutname = val; }
    UT_StringHolder opOutname(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getOutname();
        UT_StringHolder result;
        OP_Utils::evalOpParm(result, thissop, "outname", cookparms.getCookTime(), 0);
        return result;
    }
    bool getDeletein() const { return myDeletein; }
    void setDeletein(bool val) { myDeletein = val; }
    bool opDeletein(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getDeletein();
        bool result;
        OP_Utils::evalOpParm(result, thissop, "deletein", cookparms.getCookTime(), 0);
        return result;
    }

private:
    UT_StringHolder myInname;
    int64 myInclass;
    int64 myOutclass;
    bool myUsePieceAttrib;
    UT_StringHolder myPieceAttrib;
    int64 myMethod;
    bool myUseoutname;
    UT_StringHolder myOutname;
    bool myDeletein;

};
