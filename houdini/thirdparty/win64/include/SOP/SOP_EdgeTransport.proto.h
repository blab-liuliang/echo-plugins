/* Automagically Generated by generate_proto.py
 * Do not Edit
 */
#pragma once

#include <SOP/SOP_NodeVerb.h>
#include <OP/OP_Utils.h>
#include <PRM/PRM_Parm.h>
#include <UT/UT_IStream.h>
#include <UT/UT_NTStreamUtil.h>
#include <UT/UT_Ramp.h>
#include <UT/UT_SharedPtr.h>
#include <UT/UT_StringHolder.h>
#include <UT/UT_StringStream.h>
#include <UT/UT_VectorTypes.h>
#include <SYS/SYS_Types.h>

using namespace UT::Literal;

class DEP_MicroNode;
namespace SOP_EdgeTransportEnums
{
    enum class Method
    {
        CURVE = 0,
        NET,
        PARENT
    };
    enum class CurveDir
    {
        FORWARD = 0,
        BACKWARD
    };
    enum class RootType
    {
        FIRST = 0,
        LAST,
        GROUP
    };
    enum class Operation
    {
        COPY = 0,
        COPYROOT,
        SUM,
        MAX,
        MIN
    };
    enum class RootValue
    {
        ZERO = 0,
        HOLD
    };
    enum class SplitMethod
    {
        COPY = 0,
        SPLIT
    };
    enum class MergeMethod
    {
        SUM = 0,
        MAX,
        MIN
    };
}


class SOP_API SOP_EdgeTransportParms  : public SOP_NodeParms
{
public:
    static int version() { return 1; }

    SOP_EdgeTransportParms()
    {
        myMethod = 0;
        myPointGroup = ""_sh;
        myPrimitiveGroup = ""_sh;
        myAttribute = "distance"_sh;
        myCurveDir = 0;
        myParentAttribute = "parent"_sh;
        myRootType = 0;
        myRootGroup = "0"_sh;
        myOperation = 2;
        myRootValue = 0;
        myIgnoreAttribute = false;
        myScaleByEdge = false;
        mySplitMethod = 0;
        myMergeMethod = 0;

    }

    explicit SOP_EdgeTransportParms(const SOP_EdgeTransportParms &) = default;

    virtual ~SOP_EdgeTransportParms() {}

    bool operator==(const SOP_EdgeTransportParms &src) const
    {
        if (myMethod != src.myMethod) return false;
        if (myPointGroup != src.myPointGroup) return false;
        if (myPrimitiveGroup != src.myPrimitiveGroup) return false;
        if (myAttribute != src.myAttribute) return false;
        if (myCurveDir != src.myCurveDir) return false;
        if (myParentAttribute != src.myParentAttribute) return false;
        if (myRootType != src.myRootType) return false;
        if (myRootGroup != src.myRootGroup) return false;
        if (myOperation != src.myOperation) return false;
        if (myRootValue != src.myRootValue) return false;
        if (myIgnoreAttribute != src.myIgnoreAttribute) return false;
        if (myScaleByEdge != src.myScaleByEdge) return false;
        if (mySplitMethod != src.mySplitMethod) return false;
        if (myMergeMethod != src.myMergeMethod) return false;

        return true;
    }
    bool operator!=(const SOP_EdgeTransportParms &src) const
    {
        return !operator==(src);
    }
    using Method = SOP_EdgeTransportEnums::Method;
    using CurveDir = SOP_EdgeTransportEnums::CurveDir;
    using RootType = SOP_EdgeTransportEnums::RootType;
    using Operation = SOP_EdgeTransportEnums::Operation;
    using RootValue = SOP_EdgeTransportEnums::RootValue;
    using SplitMethod = SOP_EdgeTransportEnums::SplitMethod;
    using MergeMethod = SOP_EdgeTransportEnums::MergeMethod;



    void        buildFromOp(const OP_Node *node, fpreal time, DEP_MicroNode *depnode)
    {
        if (true)
            OP_Utils::evalOpParm(myMethod, node, "method", time, 0);
        else myMethod = 0;
        if (true && ( (!(((int64(getMethod())==0)))) ) )
            OP_Utils::evalOpParm(myPointGroup, node, "ptgroup", time, 0);
        else myPointGroup = ""_sh;
        if (true && ( (!(((int64(getMethod())!=0)))) ) )
            OP_Utils::evalOpParm(myPrimitiveGroup, node, "primgroup", time, 0);
        else myPrimitiveGroup = ""_sh;
        if (true)
            OP_Utils::evalOpParm(myAttribute, node, "attribute", time, 0);
        else myAttribute = "distance"_sh;
        if (true)
            OP_Utils::evalOpParm(myCurveDir, node, "curvedir", time, 0);
        else myCurveDir = 0;
        if (true && ( (!(((int64(getMethod())!=2)))) ) )
            OP_Utils::evalOpParm(myParentAttribute, node, "parentattribute", time, 0);
        else myParentAttribute = "parent"_sh;
        if (true && ( (!(((int64(getMethod())!=1)))) ) )
            OP_Utils::evalOpParm(myRootType, node, "roottype", time, 0);
        else myRootType = 0;
        if (true && ( (!(((int64(getRootType())!=2))||((int64(getMethod())!=1)))) ) )
            OP_Utils::evalOpParm(myRootGroup, node, "rootgroup", time, 0);
        else myRootGroup = "0"_sh;
        if (true)
            OP_Utils::evalOpParm(myOperation, node, "operation", time, 0);
        else myOperation = 2;
        if (true && ( (!(((int64(getOperation())!=0)))) ) )
            OP_Utils::evalOpParm(myRootValue, node, "rootvalue", time, 0);
        else myRootValue = 0;
        if (true && ( (!(((int64(getOperation())!=2)))) ) )
            OP_Utils::evalOpParm(myIgnoreAttribute, node, "ignoreattribute", time, 0);
        else myIgnoreAttribute = false;
        if (true && ( (!(((int64(getOperation())!=2)))) ) )
            OP_Utils::evalOpParm(myScaleByEdge, node, "scalebyedge", time, 0);
        else myScaleByEdge = false;
        if (true && ( (!(((int64(getMethod())==0))||((int64(getCurveDir())!=0)))) ) )
            OP_Utils::evalOpParm(mySplitMethod, node, "splitmethod", time, 0);
        else mySplitMethod = 0;
        if (true && ( (!(((int64(getMethod())==0))||((int64(getCurveDir())!=1)))) ) )
            OP_Utils::evalOpParm(myMergeMethod, node, "mergemethod", time, 0);
        else myMergeMethod = 0;

    }


    virtual void loadFromOpSubclass(const LoadParms &loadparms)
    {
        buildFromOp(loadparms.node(), loadparms.context().getTime(), loadparms.depnode());
    }


    virtual void copyFrom(const SOP_NodeParms *src)
    {
        *this = *((const SOP_EdgeTransportParms *)src);
    }

    template <typename T>
    void
    doGetParmValue(exint idx, T &value) const
    {
        switch (idx)
        {
            case 0:
                coerceValue(value, myMethod);
                break;
            case 1:
                coerceValue(value, myPointGroup);
                break;
            case 2:
                coerceValue(value, myPrimitiveGroup);
                break;
            case 3:
                coerceValue(value, myAttribute);
                break;
            case 4:
                coerceValue(value, myCurveDir);
                break;
            case 5:
                coerceValue(value, myParentAttribute);
                break;
            case 6:
                coerceValue(value, myRootType);
                break;
            case 7:
                coerceValue(value, myRootGroup);
                break;
            case 8:
                coerceValue(value, myOperation);
                break;
            case 9:
                coerceValue(value, myRootValue);
                break;
            case 10:
                coerceValue(value, myIgnoreAttribute);
                break;
            case 11:
                coerceValue(value, myScaleByEdge);
                break;
            case 12:
                coerceValue(value, mySplitMethod);
                break;
            case 13:
                coerceValue(value, myMergeMethod);
                break;

        }
    }

    void        getParmValue(exint idx, exint &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, fpreal &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Vector2D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Vector3D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Vector4D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Matrix2D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Matrix3D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Matrix4D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_StringHolder &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_SharedPtr<UT_Ramp> &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, PRM_DataItemHandle &value) const
    { doGetParmValue(idx, value); }

    template <typename T>
    void
    doSetParmValue(exint idx, const T &value) 
    {
        switch (idx)
        {
            case 0:
                coerceValue(myMethod, value);
                break;
            case 1:
                coerceValue(myPointGroup, value);
                break;
            case 2:
                coerceValue(myPrimitiveGroup, value);
                break;
            case 3:
                coerceValue(myAttribute, value);
                break;
            case 4:
                coerceValue(myCurveDir, value);
                break;
            case 5:
                coerceValue(myParentAttribute, value);
                break;
            case 6:
                coerceValue(myRootType, value);
                break;
            case 7:
                coerceValue(myRootGroup, value);
                break;
            case 8:
                coerceValue(myOperation, value);
                break;
            case 9:
                coerceValue(myRootValue, value);
                break;
            case 10:
                coerceValue(myIgnoreAttribute, value);
                break;
            case 11:
                coerceValue(myScaleByEdge, value);
                break;
            case 12:
                coerceValue(mySplitMethod, value);
                break;
            case 13:
                coerceValue(myMergeMethod, value);
                break;

        }
    }

    void        setParmValue(exint idx, const exint &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const fpreal &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Vector2D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Vector3D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Vector4D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Matrix2D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Matrix3D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Matrix4D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_StringHolder &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_SharedPtr<UT_Ramp> &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const PRM_DataItemHandle &value) 
    { doSetParmValue(idx, value); }

    virtual exint    getNumParms() const
    {
        return 14;
    }

    virtual const char *getParmName(exint fieldnum) const
    {
        switch (fieldnum)
        {
            case 0:
                return "method";
            case 1:
                return "ptgroup";
            case 2:
                return "primgroup";
            case 3:
                return "attribute";
            case 4:
                return "curvedir";
            case 5:
                return "parentattribute";
            case 6:
                return "roottype";
            case 7:
                return "rootgroup";
            case 8:
                return "operation";
            case 9:
                return "rootvalue";
            case 10:
                return "ignoreattribute";
            case 11:
                return "scalebyedge";
            case 12:
                return "splitmethod";
            case 13:
                return "mergemethod";

        }
        return 0;
    }

    virtual ParmType getParmType(exint fieldnum) const
    {
        switch (fieldnum)
        {
                case 0:
                    return PARM_INTEGER;
                case 1:
                    return PARM_STRING;
                case 2:
                    return PARM_STRING;
                case 3:
                    return PARM_STRING;
                case 4:
                    return PARM_INTEGER;
                case 5:
                    return PARM_STRING;
                case 6:
                    return PARM_INTEGER;
                case 7:
                    return PARM_STRING;
                case 8:
                    return PARM_INTEGER;
                case 9:
                    return PARM_INTEGER;
                case 10:
                    return PARM_INTEGER;
                case 11:
                    return PARM_INTEGER;
                case 12:
                    return PARM_INTEGER;
                case 13:
                    return PARM_INTEGER;

        }
        return PARM_UNSUPPORTED;
    }

    // Boiler plate to load individual types.
    static void  loadData(UT_IStream &is, int64 &v)
    { is.bread(&v, 1); }
    static void  loadData(UT_IStream &is, bool &v)
    { int64     iv; is.bread(&iv, 1); v = iv; }
    static void  loadData(UT_IStream &is, fpreal64 &v)
    { is.bread<fpreal64>(&v, 1); }
    static void  loadData(UT_IStream &is, UT_Vector2D &v)
    { is.bread<fpreal64>(&v.x(), 1); is.bread<fpreal64>(&v.y(), 1); }
    static void  loadData(UT_IStream &is, UT_Vector3D &v)
    { is.bread<fpreal64>(&v.x(), 1); is.bread<fpreal64>(&v.y(), 1);
      is.bread<fpreal64>(&v.z(), 1); }
    static void  loadData(UT_IStream &is, UT_Vector4D &v)
    { is.bread<fpreal64>(&v.x(), 1); is.bread<fpreal64>(&v.y(), 1);
      is.bread<fpreal64>(&v.z(), 1); is.bread<fpreal64>(&v.w(), 1); }
    static void  loadData(UT_IStream &is, UT_Matrix2D &v)
    { for (int r = 0; r < 2; r++) for (int c = 0; c < 2; c++) is.bread<fpreal64>(&v(r, c), 1); }
    static void  loadData(UT_IStream &is, UT_Matrix3D &v)
    { for (int r = 0; r < 3; r++) for (int c = 0; c < 3; c++) is.bread<fpreal64>(&v(r, c), 1); }
    static void  loadData(UT_IStream &is, UT_Matrix4D &v)
    { for (int r = 0; r < 4; r++) for (int c = 0; c < 4; c++) is.bread<fpreal64>(&v(r, c), 1); }
    static void  loadData(UT_IStream &is, UT_Vector2I &v)
    { is.bread<int64>(&v.x(), 1); is.bread<int64>(&v.y(), 1); }
    static void  loadData(UT_IStream &is, UT_Vector3I &v)
    { is.bread<int64>(&v.x(), 1); is.bread<int64>(&v.y(), 1);
      is.bread<int64>(&v.z(), 1); }
    static void  loadData(UT_IStream &is, UT_Vector4I &v)
    { is.bread<int64>(&v.x(), 1); is.bread<int64>(&v.y(), 1);
      is.bread<int64>(&v.z(), 1); is.bread<int64>(&v.w(), 1); }
    static void  loadData(UT_IStream &is, UT_StringHolder &v)
    { is.bread(v); }
    static void  loadData(UT_IStream &is, UT_SharedPtr<UT_Ramp> &v)
    {   UT_StringHolder   rampdata;
        loadData(is, rampdata);
        if (rampdata.isstring())
        {
            v.reset(new UT_Ramp());
            UT_IStream  istr((const char *) rampdata, rampdata.length(), UT_ISTREAM_ASCII);
            v->load(istr);
        }
        else v.reset();
    }
    static void  loadData(UT_IStream &is, PRM_DataItemHandle &v)
    {   UT_StringHolder   data;
        loadData(is, data);
        if (data.isstring())
        {
            // Find the data type.
            char *colon = UT_StringWrap(data).findChar(':');
            if (colon)
            {
                int             typelen = colon - data.buffer();
                UT_WorkBuffer   type;
                type.strncpy(data.buffer(), typelen);
                UT_IStream  istr(((const char *) data) + typelen + 1, data.length() - (typelen + 1), UT_ISTREAM_BINARY);
                
                v = PRM_DataFactory::parseBinary(type.buffer(), istr);
            }
        }
        else v.reset();
    }

    static void  saveData(std::ostream &os, int64 v)
    { UTwrite(os, &v); }
    static void  saveData(std::ostream &os, bool v)
    { int64 iv = v; UTwrite(os, &iv); }
    static void  saveData(std::ostream &os, fpreal64 v)
    { UTwrite<fpreal64>(os, &v); }
    static void  saveData(std::ostream &os, UT_Vector2D v)
    { UTwrite<fpreal64>(os, &v.x()); UTwrite<fpreal64>(os, &v.y()); }
    static void  saveData(std::ostream &os, UT_Vector3D v)
    { UTwrite<fpreal64>(os, &v.x()); UTwrite<fpreal64>(os, &v.y());
      UTwrite<fpreal64>(os, &v.z()); }
    static void  saveData(std::ostream &os, UT_Vector4D v)
    { UTwrite<fpreal64>(os, &v.x()); UTwrite<fpreal64>(os, &v.y());
      UTwrite<fpreal64>(os, &v.z()); UTwrite<fpreal64>(os, &v.w()); }
    static void  saveData(std::ostream &os, UT_Matrix2D v)
    { for (int r = 0; r < 2; r++) for (int c = 0; c < 2; c++) UTwrite<fpreal64>(os, &v(r, c)); }
    static void  saveData(std::ostream &os, UT_Matrix3D v)
    { for (int r = 0; r < 3; r++) for (int c = 0; c < 3; c++) UTwrite<fpreal64>(os, &v(r, c)); }
    static void  saveData(std::ostream &os, UT_Matrix4D v)
    { for (int r = 0; r < 4; r++) for (int c = 0; c < 4; c++) UTwrite<fpreal64>(os, &v(r, c)); }
    static void  saveData(std::ostream &os, UT_StringHolder s)
    { UT_StringWrap(s).saveBinary(os); }
    static void  saveData(std::ostream &os, UT_SharedPtr<UT_Ramp> s)
    {   UT_StringHolder         result;
        UT_OStringStream        ostr;
        if (s) s->save(ostr);
        result = ostr.str();
        saveData(os, result);
    }
    static void  saveData(std::ostream &os, PRM_DataItemHandle s)
    {   UT_StringHolder         result;
        UT_OStringStream        ostr;
        if (s) 
        {
            ostr << s->getDataTypeToken();
            ostr << ":";
            s->saveBinary(ostr);
        }
        result = ostr.str();
        saveData(os, result);
    }


    void         save(std::ostream &os) const
    {
        int32           v = version();
        UTwrite(os, &v);
        saveData(os, myMethod);
        saveData(os, myPointGroup);
        saveData(os, myPrimitiveGroup);
        saveData(os, myAttribute);
        saveData(os, myCurveDir);
        saveData(os, myParentAttribute);
        saveData(os, myRootType);
        saveData(os, myRootGroup);
        saveData(os, myOperation);
        saveData(os, myRootValue);
        saveData(os, myIgnoreAttribute);
        saveData(os, myScaleByEdge);
        saveData(os, mySplitMethod);
        saveData(os, myMergeMethod);

    }

    bool         load(UT_IStream &is)
    {
        int32           v;
        is.bread(&v, 1);
        if (version() != v)
        {
            // Fail incompatible versions
            return false;
        }
        loadData(is, myMethod);
        loadData(is, myPointGroup);
        loadData(is, myPrimitiveGroup);
        loadData(is, myAttribute);
        loadData(is, myCurveDir);
        loadData(is, myParentAttribute);
        loadData(is, myRootType);
        loadData(is, myRootGroup);
        loadData(is, myOperation);
        loadData(is, myRootValue);
        loadData(is, myIgnoreAttribute);
        loadData(is, myScaleByEdge);
        loadData(is, mySplitMethod);
        loadData(is, myMergeMethod);

        return true;
    }

    Method getMethod() const { return Method(myMethod); }
    void setMethod(Method val) { myMethod = int64(val); }
    Method opMethod(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getMethod();
        int64 result;
        OP_Utils::evalOpParm(result, thissop, "method", cookparms.getCookTime(), 0);
        return Method(result);
    }
    const UT_StringHolder & getPointGroup() const { return myPointGroup; }
    void setPointGroup(const UT_StringHolder & val) { myPointGroup = val; }
    UT_StringHolder opPointGroup(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getPointGroup();
        UT_StringHolder result;
        OP_Utils::evalOpParm(result, thissop, "ptgroup", cookparms.getCookTime(), 0);
        return result;
    }
    const UT_StringHolder & getPrimitiveGroup() const { return myPrimitiveGroup; }
    void setPrimitiveGroup(const UT_StringHolder & val) { myPrimitiveGroup = val; }
    UT_StringHolder opPrimitiveGroup(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getPrimitiveGroup();
        UT_StringHolder result;
        OP_Utils::evalOpParm(result, thissop, "primgroup", cookparms.getCookTime(), 0);
        return result;
    }
    const UT_StringHolder & getAttribute() const { return myAttribute; }
    void setAttribute(const UT_StringHolder & val) { myAttribute = val; }
    UT_StringHolder opAttribute(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getAttribute();
        UT_StringHolder result;
        OP_Utils::evalOpParm(result, thissop, "attribute", cookparms.getCookTime(), 0);
        return result;
    }
    CurveDir getCurveDir() const { return CurveDir(myCurveDir); }
    void setCurveDir(CurveDir val) { myCurveDir = int64(val); }
    CurveDir opCurveDir(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getCurveDir();
        int64 result;
        OP_Utils::evalOpParm(result, thissop, "curvedir", cookparms.getCookTime(), 0);
        return CurveDir(result);
    }
    const UT_StringHolder & getParentAttribute() const { return myParentAttribute; }
    void setParentAttribute(const UT_StringHolder & val) { myParentAttribute = val; }
    UT_StringHolder opParentAttribute(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getParentAttribute();
        UT_StringHolder result;
        OP_Utils::evalOpParm(result, thissop, "parentattribute", cookparms.getCookTime(), 0);
        return result;
    }
    RootType getRootType() const { return RootType(myRootType); }
    void setRootType(RootType val) { myRootType = int64(val); }
    RootType opRootType(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getRootType();
        int64 result;
        OP_Utils::evalOpParm(result, thissop, "roottype", cookparms.getCookTime(), 0);
        return RootType(result);
    }
    const UT_StringHolder & getRootGroup() const { return myRootGroup; }
    void setRootGroup(const UT_StringHolder & val) { myRootGroup = val; }
    UT_StringHolder opRootGroup(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getRootGroup();
        UT_StringHolder result;
        OP_Utils::evalOpParm(result, thissop, "rootgroup", cookparms.getCookTime(), 0);
        return result;
    }
    Operation getOperation() const { return Operation(myOperation); }
    void setOperation(Operation val) { myOperation = int64(val); }
    Operation opOperation(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getOperation();
        int64 result;
        OP_Utils::evalOpParm(result, thissop, "operation", cookparms.getCookTime(), 0);
        return Operation(result);
    }
    RootValue getRootValue() const { return RootValue(myRootValue); }
    void setRootValue(RootValue val) { myRootValue = int64(val); }
    RootValue opRootValue(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getRootValue();
        int64 result;
        OP_Utils::evalOpParm(result, thissop, "rootvalue", cookparms.getCookTime(), 0);
        return RootValue(result);
    }
    bool getIgnoreAttribute() const { return myIgnoreAttribute; }
    void setIgnoreAttribute(bool val) { myIgnoreAttribute = val; }
    bool opIgnoreAttribute(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getIgnoreAttribute();
        bool result;
        OP_Utils::evalOpParm(result, thissop, "ignoreattribute", cookparms.getCookTime(), 0);
        return result;
    }
    bool getScaleByEdge() const { return myScaleByEdge; }
    void setScaleByEdge(bool val) { myScaleByEdge = val; }
    bool opScaleByEdge(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getScaleByEdge();
        bool result;
        OP_Utils::evalOpParm(result, thissop, "scalebyedge", cookparms.getCookTime(), 0);
        return result;
    }
    SplitMethod getSplitMethod() const { return SplitMethod(mySplitMethod); }
    void setSplitMethod(SplitMethod val) { mySplitMethod = int64(val); }
    SplitMethod opSplitMethod(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getSplitMethod();
        int64 result;
        OP_Utils::evalOpParm(result, thissop, "splitmethod", cookparms.getCookTime(), 0);
        return SplitMethod(result);
    }
    MergeMethod getMergeMethod() const { return MergeMethod(myMergeMethod); }
    void setMergeMethod(MergeMethod val) { myMergeMethod = int64(val); }
    MergeMethod opMergeMethod(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getMergeMethod();
        int64 result;
        OP_Utils::evalOpParm(result, thissop, "mergemethod", cookparms.getCookTime(), 0);
        return MergeMethod(result);
    }

private:
    int64 myMethod;
    UT_StringHolder myPointGroup;
    UT_StringHolder myPrimitiveGroup;
    UT_StringHolder myAttribute;
    int64 myCurveDir;
    UT_StringHolder myParentAttribute;
    int64 myRootType;
    UT_StringHolder myRootGroup;
    int64 myOperation;
    int64 myRootValue;
    bool myIgnoreAttribute;
    bool myScaleByEdge;
    int64 mySplitMethod;
    int64 myMergeMethod;

};
