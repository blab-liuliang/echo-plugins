/* Automagically Generated by generate_proto.py
 * Do not Edit
 */
#pragma once

#include <SOP/SOP_NodeVerb.h>
#include <OP/OP_Utils.h>
#include <PRM/PRM_Parm.h>
#include <UT/UT_IStream.h>
#include <UT/UT_NTStreamUtil.h>
#include <UT/UT_Ramp.h>
#include <UT/UT_SharedPtr.h>
#include <UT/UT_StringHolder.h>
#include <UT/UT_StringStream.h>
#include <UT/UT_VectorTypes.h>
#include <SYS/SYS_Types.h>

using namespace UT::Literal;

class DEP_MicroNode;

class SOP_API SOP_BoxParms  : public SOP_NodeParms
{
public:
    static int version() { return 1; }

    SOP_BoxParms()
    {
        myType = 0;
        mySurfType = 4;
        mySize = 1;
        myScale = 1;
        myCenter = 0;
        myRotate = 0;
        myDivRate = 4;
        myOrder = 4;
        myDoDivs = false;
        myDivs = 3;
        myRebar = false;
        myConsolidatePoints = true;
        myOrientedBoundingBox = false;
        myVertexNormals = false;

    }

    explicit SOP_BoxParms(const SOP_BoxParms &) = default;

    virtual ~SOP_BoxParms() {}

    bool operator==(const SOP_BoxParms &src) const
    {
        if (myType != src.myType) return false;
        if (mySurfType != src.mySurfType) return false;
        if (mySize != src.mySize) return false;
        if (myScale != src.myScale) return false;
        if (myCenter != src.myCenter) return false;
        if (myRotate != src.myRotate) return false;
        if (myDivRate != src.myDivRate) return false;
        if (myOrder != src.myOrder) return false;
        if (myDoDivs != src.myDoDivs) return false;
        if (myDivs != src.myDivs) return false;
        if (myRebar != src.myRebar) return false;
        if (myConsolidatePoints != src.myConsolidatePoints) return false;
        if (myOrientedBoundingBox != src.myOrientedBoundingBox) return false;
        if (myVertexNormals != src.myVertexNormals) return false;

        return true;
    }
    bool operator!=(const SOP_BoxParms &src) const
    {
        return !operator==(src);
    }



    void        buildFromOp(const OP_Node *node, fpreal time, DEP_MicroNode *depnode)
    {
        if (true)
            OP_Utils::evalOpParm(myType, node, "type", time, 0);
        else myType = 0;
        if (true)
            OP_Utils::evalOpParm(mySurfType, node, "surftype", time, 0);
        else mySurfType = 4;
        if (true)
            OP_Utils::evalOpParm(mySize, node, "size", time, 0);
        else mySize = 1;
        if (true)
            OP_Utils::evalOpParm(myScale, node, "scale", time, 0);
        else myScale = 1;
        if (true)
            OP_Utils::evalOpParm(myCenter, node, "t", time, 0);
        else myCenter = 0;
        if (true)
            OP_Utils::evalOpParm(myRotate, node, "r", time, 0);
        else myRotate = 0;
        if (true)
            OP_Utils::evalOpParm(myDivRate, node, "divrate", time, 0);
        else myDivRate = 4;
        if (true)
            OP_Utils::evalOpParm(myOrder, node, "orderrate", time, 0);
        else myOrder = 4;
        if (true)
            OP_Utils::evalOpParm(myDoDivs, node, "dodivs", time, 0);
        else myDoDivs = false;
        if (true)
            OP_Utils::evalOpParm(myDivs, node, "divs", time, 0);
        else myDivs = 3;
        if (true)
            OP_Utils::evalOpParm(myRebar, node, "rebar", time, 0);
        else myRebar = false;
        if (true)
            OP_Utils::evalOpParm(myConsolidatePoints, node, "consolidatepts", time, 0);
        else myConsolidatePoints = true;
        if (true)
            OP_Utils::evalOpParm(myOrientedBoundingBox, node, "orientedbbox", time, 0);
        else myOrientedBoundingBox = false;
        if (true)
            OP_Utils::evalOpParm(myVertexNormals, node, "vertexnormals", time, 0);
        else myVertexNormals = false;

    }


    virtual void loadFromOpSubclass(const LoadParms &loadparms)
    {
        buildFromOp(loadparms.node(), loadparms.context().getTime(), loadparms.depnode());
    }


    virtual void copyFrom(const SOP_NodeParms *src)
    {
        *this = *((const SOP_BoxParms *)src);
    }

    template <typename T>
    void
    doGetParmValue(exint idx, T &value) const
    {
        switch (idx)
        {
            case 0:
                coerceValue(value, myType);
                break;
            case 1:
                coerceValue(value, mySurfType);
                break;
            case 2:
                coerceValue(value, mySize);
                break;
            case 3:
                coerceValue(value, myScale);
                break;
            case 4:
                coerceValue(value, myCenter);
                break;
            case 5:
                coerceValue(value, myRotate);
                break;
            case 6:
                coerceValue(value, myDivRate);
                break;
            case 7:
                coerceValue(value, myOrder);
                break;
            case 8:
                coerceValue(value, myDoDivs);
                break;
            case 9:
                coerceValue(value, myDivs);
                break;
            case 10:
                coerceValue(value, myRebar);
                break;
            case 11:
                coerceValue(value, myConsolidatePoints);
                break;
            case 12:
                coerceValue(value, myOrientedBoundingBox);
                break;
            case 13:
                coerceValue(value, myVertexNormals);
                break;

        }
    }

    void        getParmValue(exint idx, exint &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, fpreal &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Vector2D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Vector3D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Vector4D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Matrix2D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Matrix3D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Matrix4D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_StringHolder &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_SharedPtr<UT_Ramp> &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, PRM_DataItemHandle &value) const
    { doGetParmValue(idx, value); }

    template <typename T>
    void
    doSetParmValue(exint idx, const T &value) 
    {
        switch (idx)
        {
            case 0:
                coerceValue(myType, value);
                break;
            case 1:
                coerceValue(mySurfType, value);
                break;
            case 2:
                coerceValue(mySize, value);
                break;
            case 3:
                coerceValue(myScale, value);
                break;
            case 4:
                coerceValue(myCenter, value);
                break;
            case 5:
                coerceValue(myRotate, value);
                break;
            case 6:
                coerceValue(myDivRate, value);
                break;
            case 7:
                coerceValue(myOrder, value);
                break;
            case 8:
                coerceValue(myDoDivs, value);
                break;
            case 9:
                coerceValue(myDivs, value);
                break;
            case 10:
                coerceValue(myRebar, value);
                break;
            case 11:
                coerceValue(myConsolidatePoints, value);
                break;
            case 12:
                coerceValue(myOrientedBoundingBox, value);
                break;
            case 13:
                coerceValue(myVertexNormals, value);
                break;

        }
    }

    void        setParmValue(exint idx, const exint &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const fpreal &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Vector2D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Vector3D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Vector4D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Matrix2D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Matrix3D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Matrix4D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_StringHolder &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_SharedPtr<UT_Ramp> &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const PRM_DataItemHandle &value) 
    { doSetParmValue(idx, value); }

    virtual exint    getNumParms() const
    {
        return 14;
    }

    virtual const char *getParmName(exint fieldnum) const
    {
        switch (fieldnum)
        {
            case 0:
                return "type";
            case 1:
                return "surftype";
            case 2:
                return "size";
            case 3:
                return "scale";
            case 4:
                return "t";
            case 5:
                return "r";
            case 6:
                return "divrate";
            case 7:
                return "orderrate";
            case 8:
                return "dodivs";
            case 9:
                return "divs";
            case 10:
                return "rebar";
            case 11:
                return "consolidatepts";
            case 12:
                return "orientedbbox";
            case 13:
                return "vertexnormals";

        }
        return 0;
    }

    virtual ParmType getParmType(exint fieldnum) const
    {
        switch (fieldnum)
        {
                case 0:
                    return PARM_INTEGER;
                case 1:
                    return PARM_INTEGER;
                case 2:
                    return PARM_VECTOR3;
                case 3:
                    return PARM_FLOAT;
                case 4:
                    return PARM_VECTOR3;
                case 5:
                    return PARM_VECTOR3;
                case 6:
                    return PARM_VECTOR3;
                case 7:
                    return PARM_VECTOR3;
                case 8:
                    return PARM_INTEGER;
                case 9:
                    return PARM_VECTOR3;
                case 10:
                    return PARM_INTEGER;
                case 11:
                    return PARM_INTEGER;
                case 12:
                    return PARM_INTEGER;
                case 13:
                    return PARM_INTEGER;

        }
        return PARM_UNSUPPORTED;
    }

    // Boiler plate to load individual types.
    static void  loadData(UT_IStream &is, int64 &v)
    { is.bread(&v, 1); }
    static void  loadData(UT_IStream &is, bool &v)
    { int64     iv; is.bread(&iv, 1); v = iv; }
    static void  loadData(UT_IStream &is, fpreal64 &v)
    { is.bread<fpreal64>(&v, 1); }
    static void  loadData(UT_IStream &is, UT_Vector2D &v)
    { is.bread<fpreal64>(&v.x(), 1); is.bread<fpreal64>(&v.y(), 1); }
    static void  loadData(UT_IStream &is, UT_Vector3D &v)
    { is.bread<fpreal64>(&v.x(), 1); is.bread<fpreal64>(&v.y(), 1);
      is.bread<fpreal64>(&v.z(), 1); }
    static void  loadData(UT_IStream &is, UT_Vector4D &v)
    { is.bread<fpreal64>(&v.x(), 1); is.bread<fpreal64>(&v.y(), 1);
      is.bread<fpreal64>(&v.z(), 1); is.bread<fpreal64>(&v.w(), 1); }
    static void  loadData(UT_IStream &is, UT_Matrix2D &v)
    { for (int r = 0; r < 2; r++) for (int c = 0; c < 2; c++) is.bread<fpreal64>(&v(r, c), 1); }
    static void  loadData(UT_IStream &is, UT_Matrix3D &v)
    { for (int r = 0; r < 3; r++) for (int c = 0; c < 3; c++) is.bread<fpreal64>(&v(r, c), 1); }
    static void  loadData(UT_IStream &is, UT_Matrix4D &v)
    { for (int r = 0; r < 4; r++) for (int c = 0; c < 4; c++) is.bread<fpreal64>(&v(r, c), 1); }
    static void  loadData(UT_IStream &is, UT_Vector2I &v)
    { is.bread<int64>(&v.x(), 1); is.bread<int64>(&v.y(), 1); }
    static void  loadData(UT_IStream &is, UT_Vector3I &v)
    { is.bread<int64>(&v.x(), 1); is.bread<int64>(&v.y(), 1);
      is.bread<int64>(&v.z(), 1); }
    static void  loadData(UT_IStream &is, UT_Vector4I &v)
    { is.bread<int64>(&v.x(), 1); is.bread<int64>(&v.y(), 1);
      is.bread<int64>(&v.z(), 1); is.bread<int64>(&v.w(), 1); }
    static void  loadData(UT_IStream &is, UT_StringHolder &v)
    { is.bread(v); }
    static void  loadData(UT_IStream &is, UT_SharedPtr<UT_Ramp> &v)
    {   UT_StringHolder   rampdata;
        loadData(is, rampdata);
        if (rampdata.isstring())
        {
            v.reset(new UT_Ramp());
            UT_IStream  istr((const char *) rampdata, rampdata.length(), UT_ISTREAM_ASCII);
            v->load(istr);
        }
        else v.reset();
    }
    static void  loadData(UT_IStream &is, PRM_DataItemHandle &v)
    {   UT_StringHolder   data;
        loadData(is, data);
        if (data.isstring())
        {
            // Find the data type.
            char *colon = UT_StringWrap(data).findChar(':');
            if (colon)
            {
                int             typelen = colon - data.buffer();
                UT_WorkBuffer   type;
                type.strncpy(data.buffer(), typelen);
                UT_IStream  istr(((const char *) data) + typelen + 1, data.length() - (typelen + 1), UT_ISTREAM_BINARY);
                
                v = PRM_DataFactory::parseBinary(type.buffer(), istr);
            }
        }
        else v.reset();
    }

    static void  saveData(std::ostream &os, int64 v)
    { UTwrite(os, &v); }
    static void  saveData(std::ostream &os, bool v)
    { int64 iv = v; UTwrite(os, &iv); }
    static void  saveData(std::ostream &os, fpreal64 v)
    { UTwrite<fpreal64>(os, &v); }
    static void  saveData(std::ostream &os, UT_Vector2D v)
    { UTwrite<fpreal64>(os, &v.x()); UTwrite<fpreal64>(os, &v.y()); }
    static void  saveData(std::ostream &os, UT_Vector3D v)
    { UTwrite<fpreal64>(os, &v.x()); UTwrite<fpreal64>(os, &v.y());
      UTwrite<fpreal64>(os, &v.z()); }
    static void  saveData(std::ostream &os, UT_Vector4D v)
    { UTwrite<fpreal64>(os, &v.x()); UTwrite<fpreal64>(os, &v.y());
      UTwrite<fpreal64>(os, &v.z()); UTwrite<fpreal64>(os, &v.w()); }
    static void  saveData(std::ostream &os, UT_Matrix2D v)
    { for (int r = 0; r < 2; r++) for (int c = 0; c < 2; c++) UTwrite<fpreal64>(os, &v(r, c)); }
    static void  saveData(std::ostream &os, UT_Matrix3D v)
    { for (int r = 0; r < 3; r++) for (int c = 0; c < 3; c++) UTwrite<fpreal64>(os, &v(r, c)); }
    static void  saveData(std::ostream &os, UT_Matrix4D v)
    { for (int r = 0; r < 4; r++) for (int c = 0; c < 4; c++) UTwrite<fpreal64>(os, &v(r, c)); }
    static void  saveData(std::ostream &os, UT_StringHolder s)
    { UT_StringWrap(s).saveBinary(os); }
    static void  saveData(std::ostream &os, UT_SharedPtr<UT_Ramp> s)
    {   UT_StringHolder         result;
        UT_OStringStream        ostr;
        if (s) s->save(ostr);
        result = ostr.str();
        saveData(os, result);
    }
    static void  saveData(std::ostream &os, PRM_DataItemHandle s)
    {   UT_StringHolder         result;
        UT_OStringStream        ostr;
        if (s) 
        {
            ostr << s->getDataTypeToken();
            ostr << ":";
            s->saveBinary(ostr);
        }
        result = ostr.str();
        saveData(os, result);
    }


    void         save(std::ostream &os) const
    {
        int32           v = version();
        UTwrite(os, &v);
        saveData(os, myType);
        saveData(os, mySurfType);
        saveData(os, mySize);
        saveData(os, myScale);
        saveData(os, myCenter);
        saveData(os, myRotate);
        saveData(os, myDivRate);
        saveData(os, myOrder);
        saveData(os, myDoDivs);
        saveData(os, myDivs);
        saveData(os, myRebar);
        saveData(os, myConsolidatePoints);
        saveData(os, myOrientedBoundingBox);
        saveData(os, myVertexNormals);

    }

    bool         load(UT_IStream &is)
    {
        int32           v;
        is.bread(&v, 1);
        if (version() != v)
        {
            // Fail incompatible versions
            return false;
        }
        loadData(is, myType);
        loadData(is, mySurfType);
        loadData(is, mySize);
        loadData(is, myScale);
        loadData(is, myCenter);
        loadData(is, myRotate);
        loadData(is, myDivRate);
        loadData(is, myOrder);
        loadData(is, myDoDivs);
        loadData(is, myDivs);
        loadData(is, myRebar);
        loadData(is, myConsolidatePoints);
        loadData(is, myOrientedBoundingBox);
        loadData(is, myVertexNormals);

        return true;
    }

    int64 getType() const { return myType; }
    void setType(int64 val) { myType = val; }
    int64 opType(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getType();
        int64 result;
        OP_Utils::evalOpParm(result, thissop, "type", cookparms.getCookTime(), 0);
        return result;
    }
    int64 getSurfType() const { return mySurfType; }
    void setSurfType(int64 val) { mySurfType = val; }
    int64 opSurfType(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getSurfType();
        int64 result;
        OP_Utils::evalOpParm(result, thissop, "surftype", cookparms.getCookTime(), 0);
        return result;
    }
    UT_Vector3D getSize() const { return mySize; }
    void setSize(UT_Vector3D val) { mySize = val; }
    UT_Vector3D opSize(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getSize();
        UT_Vector3D result;
        OP_Utils::evalOpParm(result, thissop, "size", cookparms.getCookTime(), 0);
        return result;
    }
    fpreal64 getScale() const { return myScale; }
    void setScale(fpreal64 val) { myScale = val; }
    fpreal64 opScale(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getScale();
        fpreal64 result;
        OP_Utils::evalOpParm(result, thissop, "scale", cookparms.getCookTime(), 0);
        return result;
    }
    UT_Vector3D getCenter() const { return myCenter; }
    void setCenter(UT_Vector3D val) { myCenter = val; }
    UT_Vector3D opCenter(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getCenter();
        UT_Vector3D result;
        OP_Utils::evalOpParm(result, thissop, "t", cookparms.getCookTime(), 0);
        return result;
    }
    UT_Vector3D getRotate() const { return myRotate; }
    void setRotate(UT_Vector3D val) { myRotate = val; }
    UT_Vector3D opRotate(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getRotate();
        UT_Vector3D result;
        OP_Utils::evalOpParm(result, thissop, "r", cookparms.getCookTime(), 0);
        return result;
    }
    UT_Vector3I getDivRate() const { return myDivRate; }
    void setDivRate(UT_Vector3I val) { myDivRate = val; }
    UT_Vector3I opDivRate(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getDivRate();
        UT_Vector3I result;
        OP_Utils::evalOpParm(result, thissop, "divrate", cookparms.getCookTime(), 0);
        return result;
    }
    UT_Vector3I getOrder() const { return myOrder; }
    void setOrder(UT_Vector3I val) { myOrder = val; }
    UT_Vector3I opOrder(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getOrder();
        UT_Vector3I result;
        OP_Utils::evalOpParm(result, thissop, "orderrate", cookparms.getCookTime(), 0);
        return result;
    }
    bool getDoDivs() const { return myDoDivs; }
    void setDoDivs(bool val) { myDoDivs = val; }
    bool opDoDivs(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getDoDivs();
        bool result;
        OP_Utils::evalOpParm(result, thissop, "dodivs", cookparms.getCookTime(), 0);
        return result;
    }
    UT_Vector3I getDivs() const { return myDivs; }
    void setDivs(UT_Vector3I val) { myDivs = val; }
    UT_Vector3I opDivs(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getDivs();
        UT_Vector3I result;
        OP_Utils::evalOpParm(result, thissop, "divs", cookparms.getCookTime(), 0);
        return result;
    }
    bool getRebar() const { return myRebar; }
    void setRebar(bool val) { myRebar = val; }
    bool opRebar(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getRebar();
        bool result;
        OP_Utils::evalOpParm(result, thissop, "rebar", cookparms.getCookTime(), 0);
        return result;
    }
    bool getConsolidatePoints() const { return myConsolidatePoints; }
    void setConsolidatePoints(bool val) { myConsolidatePoints = val; }
    bool opConsolidatePoints(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getConsolidatePoints();
        bool result;
        OP_Utils::evalOpParm(result, thissop, "consolidatepts", cookparms.getCookTime(), 0);
        return result;
    }
    bool getOrientedBoundingBox() const { return myOrientedBoundingBox; }
    void setOrientedBoundingBox(bool val) { myOrientedBoundingBox = val; }
    bool opOrientedBoundingBox(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getOrientedBoundingBox();
        bool result;
        OP_Utils::evalOpParm(result, thissop, "orientedbbox", cookparms.getCookTime(), 0);
        return result;
    }
    bool getVertexNormals() const { return myVertexNormals; }
    void setVertexNormals(bool val) { myVertexNormals = val; }
    bool opVertexNormals(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getVertexNormals();
        bool result;
        OP_Utils::evalOpParm(result, thissop, "vertexnormals", cookparms.getCookTime(), 0);
        return result;
    }

private:
    int64 myType;
    int64 mySurfType;
    UT_Vector3D mySize;
    fpreal64 myScale;
    UT_Vector3D myCenter;
    UT_Vector3D myRotate;
    UT_Vector3I myDivRate;
    UT_Vector3I myOrder;
    bool myDoDivs;
    UT_Vector3I myDivs;
    bool myRebar;
    bool myConsolidatePoints;
    bool myOrientedBoundingBox;
    bool myVertexNormals;

};
