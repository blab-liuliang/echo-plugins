/* Automagically Generated by generate_proto.py
 * Do not Edit
 */
#pragma once

#include <SOP/SOP_NodeVerb.h>
#include <OP/OP_Utils.h>
#include <PRM/PRM_Parm.h>
#include <UT/UT_IStream.h>
#include <UT/UT_NTStreamUtil.h>
#include <UT/UT_Ramp.h>
#include <UT/UT_SharedPtr.h>
#include <UT/UT_StringHolder.h>
#include <UT/UT_StringStream.h>
#include <UT/UT_VectorTypes.h>
#include <SYS/SYS_Types.h>

using namespace UT::Literal;

class DEP_MicroNode;
namespace SOP_ControlEnums
{
    enum class DisplayIcon
    {
        ICON = 0,
        AXIS,
        ICONANDAXIS
    };
    enum class ControlType
    {
        _NULL = 0,
        CIRCLES,
        BOX,
        PLANES,
        NULLANDCIRCLES,
        NULLANDBOX,
        NULLANDPLANES,
        CUSTOM
    };
    enum class Orientation
    {
        XYZ = 0,
        X,
        Y,
        Z,
        XY,
        XZ,
        YZ
    };
}


class SOP_API SOP_ControlParms  : public SOP_NodeParms
{
public:
    static int version() { return 1; }
    struct SnapPoints
    {
        UT_Vector3D snappos;


        SnapPoints()
        {
            snappos = UT_Vector3D(0,0,0);

        }

        bool operator==(const SnapPoints &src) const
        {
            if (snappos != src.snappos) return false;

            return true;
        }
        bool operator!=(const SnapPoints &src) const
        {
            return !operator==(src);
        }

    };

    UT_StringHolder createString(const UT_Array<SnapPoints> &list) const
    {
        UT_WorkBuffer   buf;

        buf.strcat("[ ");
        for (int i = 0; i < list.entries(); i++)
        {
            if (i)
                buf.strcat(", ");
            buf.strcat("( ");
            buf.append("");
            buf.appendSprintf("(%f, %f, %f)", list(i).snappos.x(), list(i).snappos.y(), list(i).snappos.z());

            buf.strcat(" )");
        }
        buf.strcat(" ]");

        UT_StringHolder result = buf;
        return result;
    }

    SOP_ControlParms()
    {
        myColor = UT_Vector3D(1,1,1);
        mySize = UT_Vector3D(1,1,1);
        myCenter = UT_Vector3D(0,0,0);
        myRotate = UT_Vector3D(0,0,0);
        myUniformScale = 1;
        myDisplayIcon = 0;
        myControlType = 0;
        myOrientation = 0;
        myShadedMode = false;
        myPacked = false;

    }

    explicit SOP_ControlParms(const SOP_ControlParms &) = default;

    virtual ~SOP_ControlParms() {}

    bool operator==(const SOP_ControlParms &src) const
    {
        if (myColor != src.myColor) return false;
        if (mySize != src.mySize) return false;
        if (myCenter != src.myCenter) return false;
        if (myRotate != src.myRotate) return false;
        if (myUniformScale != src.myUniformScale) return false;
        if (myDisplayIcon != src.myDisplayIcon) return false;
        if (myControlType != src.myControlType) return false;
        if (myOrientation != src.myOrientation) return false;
        if (myShadedMode != src.myShadedMode) return false;
        if (myPacked != src.myPacked) return false;
        if (mySnapPoints != src.mySnapPoints) return false;

        return true;
    }
    bool operator!=(const SOP_ControlParms &src) const
    {
        return !operator==(src);
    }
    using DisplayIcon = SOP_ControlEnums::DisplayIcon;
    using ControlType = SOP_ControlEnums::ControlType;
    using Orientation = SOP_ControlEnums::Orientation;



    void        buildFromOp(const OP_Node *node, fpreal time, DEP_MicroNode *depnode)
    {
        if (true)
            OP_Utils::evalOpParm(myColor, node, "color", time, 0);
        else myColor = UT_Vector3D(1,1,1);
        if (true)
            OP_Utils::evalOpParm(mySize, node, "size", time, 0);
        else mySize = UT_Vector3D(1,1,1);
        if (true)
            OP_Utils::evalOpParm(myCenter, node, "t", time, 0);
        else myCenter = UT_Vector3D(0,0,0);
        if (true)
            OP_Utils::evalOpParm(myRotate, node, "r", time, 0);
        else myRotate = UT_Vector3D(0,0,0);
        if (true)
            OP_Utils::evalOpParm(myUniformScale, node, "scale", time, 0);
        else myUniformScale = 1;
        if (true)
            OP_Utils::evalOpParm(myDisplayIcon, node, "displayicon", time, 0);
        else myDisplayIcon = 0;
        if (true && ( (!(((int64(getDisplayIcon())==1)))) ) )
            OP_Utils::evalOpParm(myControlType, node, "controltype", time, 0);
        else myControlType = 0;
        if (true && ( (!(((int64(getDisplayIcon())==1))||((int64(getDisplayIcon())!=1)&&(int64(getControlType())!=1)&&(int64(getControlType())!=3)&&(int64(getControlType())!=4)&&(int64(getControlType())!=6)))) ) )
            OP_Utils::evalOpParm(myOrientation, node, "orientation", time, 0);
        else myOrientation = 0;
        if (true)
            OP_Utils::evalOpParm(myShadedMode, node, "shadedmode", time, 0);
        else myShadedMode = false;
        if (true)
            OP_Utils::evalOpParm(myPacked, node, "packed", time, 0);
        else myPacked = false;
            if (true)
            {
                int64   length;
                OP_Utils::evalOpParm(length, node, "numsnappoints", time, 0);
                mySnapPoints.entries(length);
                for (exint i = 0; i < length; i++)
                {
                    int     parmidx = i+1;
                    auto && _curentry = mySnapPoints(i);
                    (void) _curentry;
                    if (true)
                        OP_Utils::evalOpParmInst(mySnapPoints(i).snappos, node, "snappos#", &parmidx, time, 0);
                    else mySnapPoints(i).snappos = UT_Vector3D(0,0,0);

                }
            }
            else
                mySnapPoints.clear();

    }


    virtual void loadFromOpSubclass(const LoadParms &loadparms)
    {
        buildFromOp(loadparms.node(), loadparms.context().getTime(), loadparms.depnode());
    }


    virtual void copyFrom(const SOP_NodeParms *src)
    {
        *this = *((const SOP_ControlParms *)src);
    }

    template <typename T>
    void
    doGetParmValue(exint idx, T &value) const
    {
        switch (idx)
        {
            case 0:
                coerceValue(value, myColor);
                break;
            case 1:
                coerceValue(value, mySize);
                break;
            case 2:
                coerceValue(value, myCenter);
                break;
            case 3:
                coerceValue(value, myRotate);
                break;
            case 4:
                coerceValue(value, myUniformScale);
                break;
            case 5:
                coerceValue(value, myDisplayIcon);
                break;
            case 6:
                coerceValue(value, myControlType);
                break;
            case 7:
                coerceValue(value, myOrientation);
                break;
            case 8:
                coerceValue(value, myShadedMode);
                break;
            case 9:
                coerceValue(value, myPacked);
                break;

        }
    }

    void        getParmValue(exint idx, exint &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, fpreal &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Vector2D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Vector3D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Vector4D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Matrix2D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Matrix3D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Matrix4D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_StringHolder &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_SharedPtr<UT_Ramp> &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, PRM_DataItemHandle &value) const
    { doGetParmValue(idx, value); }

    template <typename T>
    void
    doSetParmValue(exint idx, const T &value) 
    {
        switch (idx)
        {
            case 0:
                coerceValue(myColor, value);
                break;
            case 1:
                coerceValue(mySize, value);
                break;
            case 2:
                coerceValue(myCenter, value);
                break;
            case 3:
                coerceValue(myRotate, value);
                break;
            case 4:
                coerceValue(myUniformScale, value);
                break;
            case 5:
                coerceValue(myDisplayIcon, value);
                break;
            case 6:
                coerceValue(myControlType, value);
                break;
            case 7:
                coerceValue(myOrientation, value);
                break;
            case 8:
                coerceValue(myShadedMode, value);
                break;
            case 9:
                coerceValue(myPacked, value);
                break;

        }
    }

    void        setParmValue(exint idx, const exint &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const fpreal &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Vector2D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Vector3D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Vector4D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Matrix2D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Matrix3D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Matrix4D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_StringHolder &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_SharedPtr<UT_Ramp> &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const PRM_DataItemHandle &value) 
    { doSetParmValue(idx, value); }

    virtual exint    getNumParms() const
    {
        return 11;
    }

    virtual const char *getParmName(exint fieldnum) const
    {
        switch (fieldnum)
        {
            case 0:
                return "color";
            case 1:
                return "size";
            case 2:
                return "t";
            case 3:
                return "r";
            case 4:
                return "scale";
            case 5:
                return "displayicon";
            case 6:
                return "controltype";
            case 7:
                return "orientation";
            case 8:
                return "shadedmode";
            case 9:
                return "packed";
                case 10:
                    return "numsnappoints";

        }
        return 0;
    }

    virtual ParmType getParmType(exint fieldnum) const
    {
        switch (fieldnum)
        {
                case 0:
                    return PARM_VECTOR3;
                case 1:
                    return PARM_VECTOR3;
                case 2:
                    return PARM_VECTOR3;
                case 3:
                    return PARM_VECTOR3;
                case 4:
                    return PARM_FLOAT;
                case 5:
                    return PARM_INTEGER;
                case 6:
                    return PARM_INTEGER;
                case 7:
                    return PARM_INTEGER;
                case 8:
                    return PARM_INTEGER;
                case 9:
                    return PARM_INTEGER;

        }
        return PARM_UNSUPPORTED;
    }

    // Boiler plate to load individual types.
    static void  loadData(UT_IStream &is, int64 &v)
    { is.bread(&v, 1); }
    static void  loadData(UT_IStream &is, bool &v)
    { int64     iv; is.bread(&iv, 1); v = iv; }
    static void  loadData(UT_IStream &is, fpreal64 &v)
    { is.bread<fpreal64>(&v, 1); }
    static void  loadData(UT_IStream &is, UT_Vector2D &v)
    { is.bread<fpreal64>(&v.x(), 1); is.bread<fpreal64>(&v.y(), 1); }
    static void  loadData(UT_IStream &is, UT_Vector3D &v)
    { is.bread<fpreal64>(&v.x(), 1); is.bread<fpreal64>(&v.y(), 1);
      is.bread<fpreal64>(&v.z(), 1); }
    static void  loadData(UT_IStream &is, UT_Vector4D &v)
    { is.bread<fpreal64>(&v.x(), 1); is.bread<fpreal64>(&v.y(), 1);
      is.bread<fpreal64>(&v.z(), 1); is.bread<fpreal64>(&v.w(), 1); }
    static void  loadData(UT_IStream &is, UT_Matrix2D &v)
    { for (int r = 0; r < 2; r++) for (int c = 0; c < 2; c++) is.bread<fpreal64>(&v(r, c), 1); }
    static void  loadData(UT_IStream &is, UT_Matrix3D &v)
    { for (int r = 0; r < 3; r++) for (int c = 0; c < 3; c++) is.bread<fpreal64>(&v(r, c), 1); }
    static void  loadData(UT_IStream &is, UT_Matrix4D &v)
    { for (int r = 0; r < 4; r++) for (int c = 0; c < 4; c++) is.bread<fpreal64>(&v(r, c), 1); }
    static void  loadData(UT_IStream &is, UT_Vector2I &v)
    { is.bread<int64>(&v.x(), 1); is.bread<int64>(&v.y(), 1); }
    static void  loadData(UT_IStream &is, UT_Vector3I &v)
    { is.bread<int64>(&v.x(), 1); is.bread<int64>(&v.y(), 1);
      is.bread<int64>(&v.z(), 1); }
    static void  loadData(UT_IStream &is, UT_Vector4I &v)
    { is.bread<int64>(&v.x(), 1); is.bread<int64>(&v.y(), 1);
      is.bread<int64>(&v.z(), 1); is.bread<int64>(&v.w(), 1); }
    static void  loadData(UT_IStream &is, UT_StringHolder &v)
    { is.bread(v); }
    static void  loadData(UT_IStream &is, UT_SharedPtr<UT_Ramp> &v)
    {   UT_StringHolder   rampdata;
        loadData(is, rampdata);
        if (rampdata.isstring())
        {
            v.reset(new UT_Ramp());
            UT_IStream  istr((const char *) rampdata, rampdata.length(), UT_ISTREAM_ASCII);
            v->load(istr);
        }
        else v.reset();
    }
    static void  loadData(UT_IStream &is, PRM_DataItemHandle &v)
    {   UT_StringHolder   data;
        loadData(is, data);
        if (data.isstring())
        {
            // Find the data type.
            char *colon = UT_StringWrap(data).findChar(':');
            if (colon)
            {
                int             typelen = colon - data.buffer();
                UT_WorkBuffer   type;
                type.strncpy(data.buffer(), typelen);
                UT_IStream  istr(((const char *) data) + typelen + 1, data.length() - (typelen + 1), UT_ISTREAM_BINARY);
                
                v = PRM_DataFactory::parseBinary(type.buffer(), istr);
            }
        }
        else v.reset();
    }

    static void  saveData(std::ostream &os, int64 v)
    { UTwrite(os, &v); }
    static void  saveData(std::ostream &os, bool v)
    { int64 iv = v; UTwrite(os, &iv); }
    static void  saveData(std::ostream &os, fpreal64 v)
    { UTwrite<fpreal64>(os, &v); }
    static void  saveData(std::ostream &os, UT_Vector2D v)
    { UTwrite<fpreal64>(os, &v.x()); UTwrite<fpreal64>(os, &v.y()); }
    static void  saveData(std::ostream &os, UT_Vector3D v)
    { UTwrite<fpreal64>(os, &v.x()); UTwrite<fpreal64>(os, &v.y());
      UTwrite<fpreal64>(os, &v.z()); }
    static void  saveData(std::ostream &os, UT_Vector4D v)
    { UTwrite<fpreal64>(os, &v.x()); UTwrite<fpreal64>(os, &v.y());
      UTwrite<fpreal64>(os, &v.z()); UTwrite<fpreal64>(os, &v.w()); }
    static void  saveData(std::ostream &os, UT_Matrix2D v)
    { for (int r = 0; r < 2; r++) for (int c = 0; c < 2; c++) UTwrite<fpreal64>(os, &v(r, c)); }
    static void  saveData(std::ostream &os, UT_Matrix3D v)
    { for (int r = 0; r < 3; r++) for (int c = 0; c < 3; c++) UTwrite<fpreal64>(os, &v(r, c)); }
    static void  saveData(std::ostream &os, UT_Matrix4D v)
    { for (int r = 0; r < 4; r++) for (int c = 0; c < 4; c++) UTwrite<fpreal64>(os, &v(r, c)); }
    static void  saveData(std::ostream &os, UT_StringHolder s)
    { UT_StringWrap(s).saveBinary(os); }
    static void  saveData(std::ostream &os, UT_SharedPtr<UT_Ramp> s)
    {   UT_StringHolder         result;
        UT_OStringStream        ostr;
        if (s) s->save(ostr);
        result = ostr.str();
        saveData(os, result);
    }
    static void  saveData(std::ostream &os, PRM_DataItemHandle s)
    {   UT_StringHolder         result;
        UT_OStringStream        ostr;
        if (s) 
        {
            ostr << s->getDataTypeToken();
            ostr << ":";
            s->saveBinary(ostr);
        }
        result = ostr.str();
        saveData(os, result);
    }


    void         save(std::ostream &os) const
    {
        int32           v = version();
        UTwrite(os, &v);
        saveData(os, myColor);
        saveData(os, mySize);
        saveData(os, myCenter);
        saveData(os, myRotate);
        saveData(os, myUniformScale);
        saveData(os, myDisplayIcon);
        saveData(os, myControlType);
        saveData(os, myOrientation);
        saveData(os, myShadedMode);
        saveData(os, myPacked);
        {
            int64   length = mySnapPoints.entries();
            UTwrite(os, &length);
            for (exint i = 0; i < length; i++)
            {
                saveData(os, mySnapPoints(i).snappos);

            }
        }

    }

    bool         load(UT_IStream &is)
    {
        int32           v;
        is.bread(&v, 1);
        if (version() != v)
        {
            // Fail incompatible versions
            return false;
        }
        loadData(is, myColor);
        loadData(is, mySize);
        loadData(is, myCenter);
        loadData(is, myRotate);
        loadData(is, myUniformScale);
        loadData(is, myDisplayIcon);
        loadData(is, myControlType);
        loadData(is, myOrientation);
        loadData(is, myShadedMode);
        loadData(is, myPacked);
        {
            int64   length;
            is.read(&length, 1);
            mySnapPoints.entries(length);
            for (exint i = 0; i < length; i++)
            {
                loadData(is, mySnapPoints(i).snappos);

            }
        }

        return true;
    }

    UT_Vector3D getColor() const { return myColor; }
    void setColor(UT_Vector3D val) { myColor = val; }
    UT_Vector3D opColor(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getColor();
        UT_Vector3D result;
        OP_Utils::evalOpParm(result, thissop, "color", cookparms.getCookTime(), 0);
        return result;
    }
    UT_Vector3D getSize() const { return mySize; }
    void setSize(UT_Vector3D val) { mySize = val; }
    UT_Vector3D opSize(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getSize();
        UT_Vector3D result;
        OP_Utils::evalOpParm(result, thissop, "size", cookparms.getCookTime(), 0);
        return result;
    }
    UT_Vector3D getCenter() const { return myCenter; }
    void setCenter(UT_Vector3D val) { myCenter = val; }
    UT_Vector3D opCenter(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getCenter();
        UT_Vector3D result;
        OP_Utils::evalOpParm(result, thissop, "t", cookparms.getCookTime(), 0);
        return result;
    }
    UT_Vector3D getRotate() const { return myRotate; }
    void setRotate(UT_Vector3D val) { myRotate = val; }
    UT_Vector3D opRotate(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getRotate();
        UT_Vector3D result;
        OP_Utils::evalOpParm(result, thissop, "r", cookparms.getCookTime(), 0);
        return result;
    }
    fpreal64 getUniformScale() const { return myUniformScale; }
    void setUniformScale(fpreal64 val) { myUniformScale = val; }
    fpreal64 opUniformScale(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getUniformScale();
        fpreal64 result;
        OP_Utils::evalOpParm(result, thissop, "scale", cookparms.getCookTime(), 0);
        return result;
    }
    DisplayIcon getDisplayIcon() const { return DisplayIcon(myDisplayIcon); }
    void setDisplayIcon(DisplayIcon val) { myDisplayIcon = int64(val); }
    DisplayIcon opDisplayIcon(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getDisplayIcon();
        int64 result;
        OP_Utils::evalOpParm(result, thissop, "displayicon", cookparms.getCookTime(), 0);
        return DisplayIcon(result);
    }
    ControlType getControlType() const { return ControlType(myControlType); }
    void setControlType(ControlType val) { myControlType = int64(val); }
    ControlType opControlType(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getControlType();
        int64 result;
        OP_Utils::evalOpParm(result, thissop, "controltype", cookparms.getCookTime(), 0);
        return ControlType(result);
    }
    Orientation getOrientation() const { return Orientation(myOrientation); }
    void setOrientation(Orientation val) { myOrientation = int64(val); }
    Orientation opOrientation(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getOrientation();
        int64 result;
        OP_Utils::evalOpParm(result, thissop, "orientation", cookparms.getCookTime(), 0);
        return Orientation(result);
    }
    bool getShadedMode() const { return myShadedMode; }
    void setShadedMode(bool val) { myShadedMode = val; }
    bool opShadedMode(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getShadedMode();
        bool result;
        OP_Utils::evalOpParm(result, thissop, "shadedmode", cookparms.getCookTime(), 0);
        return result;
    }
    bool getPacked() const { return myPacked; }
    void setPacked(bool val) { myPacked = val; }
    bool opPacked(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getPacked();
        bool result;
        OP_Utils::evalOpParm(result, thissop, "packed", cookparms.getCookTime(), 0);
        return result;
    }
    const UT_Array<SnapPoints> &getSnapPoints() const { return mySnapPoints; }
    void setSnapPoints(const UT_Array<SnapPoints> &val) { mySnapPoints = val; }
    exint opSnapPoints(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getSnapPoints().entries();
        exint result;
        OP_Utils::evalOpParm(result, thissop, "numsnappoints", cookparms.getCookTime(), 0);
        return result;
    }
            UT_Vector3D opSnapPoints_snappos(const SOP_NodeVerb::CookParms &cookparms, exint _idx) const
        {
            SOP_Node *thissop = cookparms.getNode();
            if (!thissop) return (mySnapPoints(_idx).snappos);
            int _parmidx = _idx + 1;
            UT_Vector3D result;
            OP_Utils::evalOpParmInst(result, thissop, "snappos#", &_parmidx, cookparms.getCookTime(), 0);
            return (result);
        }


private:
    UT_Vector3D myColor;
    UT_Vector3D mySize;
    UT_Vector3D myCenter;
    UT_Vector3D myRotate;
    fpreal64 myUniformScale;
    int64 myDisplayIcon;
    int64 myControlType;
    int64 myOrientation;
    bool myShadedMode;
    bool myPacked;
    UT_Array<SnapPoints> mySnapPoints;

};
