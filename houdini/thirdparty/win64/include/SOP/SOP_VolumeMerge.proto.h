/* Automagically Generated by generate_proto.py
 * Do not Edit
 */
#pragma once

#include <SOP/SOP_NodeVerb.h>
#include <OP/OP_Utils.h>
#include <PRM/PRM_Parm.h>
#include <UT/UT_IStream.h>
#include <UT/UT_NTStreamUtil.h>
#include <UT/UT_Ramp.h>
#include <UT/UT_SharedPtr.h>
#include <UT/UT_StringHolder.h>
#include <UT/UT_StringStream.h>
#include <UT/UT_VectorTypes.h>
#include <SYS/SYS_Types.h>

using namespace UT::Literal;

class DEP_MicroNode;
namespace SOP_VolumeMergeEnums
{
    enum class Mergemethod
    {
        COPY = 0,
        ADD,
        MUL,
        MAX,
        MIN,
        AVERAGE
    };
}


class SOP_API SOP_VolumeMergeParms  : public SOP_NodeParms
{
public:
    static int version() { return 1; }

    SOP_VolumeMergeParms()
    {
        myGroup = ""_sh;
        myMergegrp = ""_sh;
        myMergemethod = 1;
        myClampvolume = false;
        myDstpreadd = 0;
        myDstpremul = 1;
        mySrcpreadd = 0;
        mySrcpremul = 1;
        myPostadd = 0;
        myPostmul = 1;
        myDoclampmin = false;
        myClampmin = 0;
        myDoclampmax = false;
        myClampmax = 1;

    }

    explicit SOP_VolumeMergeParms(const SOP_VolumeMergeParms &) = default;

    virtual ~SOP_VolumeMergeParms() {}

    bool operator==(const SOP_VolumeMergeParms &src) const
    {
        if (myGroup != src.myGroup) return false;
        if (myMergegrp != src.myMergegrp) return false;
        if (myMergemethod != src.myMergemethod) return false;
        if (myClampvolume != src.myClampvolume) return false;
        if (myDstpreadd != src.myDstpreadd) return false;
        if (myDstpremul != src.myDstpremul) return false;
        if (mySrcpreadd != src.mySrcpreadd) return false;
        if (mySrcpremul != src.mySrcpremul) return false;
        if (myPostadd != src.myPostadd) return false;
        if (myPostmul != src.myPostmul) return false;
        if (myDoclampmin != src.myDoclampmin) return false;
        if (myClampmin != src.myClampmin) return false;
        if (myDoclampmax != src.myDoclampmax) return false;
        if (myClampmax != src.myClampmax) return false;

        return true;
    }
    bool operator!=(const SOP_VolumeMergeParms &src) const
    {
        return !operator==(src);
    }
    using Mergemethod = SOP_VolumeMergeEnums::Mergemethod;



    void        buildFromOp(const OP_Node *node, fpreal time, DEP_MicroNode *depnode)
    {
        if (true)
            OP_Utils::evalOpParm(myGroup, node, "group", time, 0);
        else myGroup = ""_sh;
        if (true)
            OP_Utils::evalOpParm(myMergegrp, node, "mergegrp", time, 0);
        else myMergegrp = ""_sh;
        if (true)
            OP_Utils::evalOpParm(myMergemethod, node, "mergemethod", time, 0);
        else myMergemethod = 1;
        if (true)
            OP_Utils::evalOpParm(myClampvolume, node, "clampvolume", time, 0);
        else myClampvolume = false;
        if (true)
            OP_Utils::evalOpParm(myDstpreadd, node, "dstpreadd", time, 0);
        else myDstpreadd = 0;
        if (true)
            OP_Utils::evalOpParm(myDstpremul, node, "dstpremul", time, 0);
        else myDstpremul = 1;
        if (true)
            OP_Utils::evalOpParm(mySrcpreadd, node, "srcpreadd", time, 0);
        else mySrcpreadd = 0;
        if (true)
            OP_Utils::evalOpParm(mySrcpremul, node, "srcpremul", time, 0);
        else mySrcpremul = 1;
        if (true)
            OP_Utils::evalOpParm(myPostadd, node, "postadd", time, 0);
        else myPostadd = 0;
        if (true)
            OP_Utils::evalOpParm(myPostmul, node, "postmul", time, 0);
        else myPostmul = 1;
        if (true)
            OP_Utils::evalOpParm(myDoclampmin, node, "doclampmin", time, 0);
        else myDoclampmin = false;
        if (true && ( (!(((getDoclampmin()==0)))) ) )
            OP_Utils::evalOpParm(myClampmin, node, "clampmin", time, 0);
        else myClampmin = 0;
        if (true)
            OP_Utils::evalOpParm(myDoclampmax, node, "doclampmax", time, 0);
        else myDoclampmax = false;
        if (true && ( (!(((getDoclampmax()==0)))) ) )
            OP_Utils::evalOpParm(myClampmax, node, "clampmax", time, 0);
        else myClampmax = 1;

    }


    virtual void loadFromOpSubclass(const LoadParms &loadparms)
    {
        buildFromOp(loadparms.node(), loadparms.context().getTime(), loadparms.depnode());
    }


    virtual void copyFrom(const SOP_NodeParms *src)
    {
        *this = *((const SOP_VolumeMergeParms *)src);
    }

    template <typename T>
    void
    doGetParmValue(exint idx, T &value) const
    {
        switch (idx)
        {
            case 0:
                coerceValue(value, myGroup);
                break;
            case 1:
                coerceValue(value, myMergegrp);
                break;
            case 2:
                coerceValue(value, myMergemethod);
                break;
            case 3:
                coerceValue(value, myClampvolume);
                break;
            case 4:
                coerceValue(value, myDstpreadd);
                break;
            case 5:
                coerceValue(value, myDstpremul);
                break;
            case 6:
                coerceValue(value, mySrcpreadd);
                break;
            case 7:
                coerceValue(value, mySrcpremul);
                break;
            case 8:
                coerceValue(value, myPostadd);
                break;
            case 9:
                coerceValue(value, myPostmul);
                break;
            case 10:
                coerceValue(value, myDoclampmin);
                break;
            case 11:
                coerceValue(value, myClampmin);
                break;
            case 12:
                coerceValue(value, myDoclampmax);
                break;
            case 13:
                coerceValue(value, myClampmax);
                break;

        }
    }

    void        getParmValue(exint idx, exint &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, fpreal &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Vector2D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Vector3D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Vector4D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Matrix2D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Matrix3D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Matrix4D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_StringHolder &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_SharedPtr<UT_Ramp> &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, PRM_DataItemHandle &value) const
    { doGetParmValue(idx, value); }

    template <typename T>
    void
    doSetParmValue(exint idx, const T &value) 
    {
        switch (idx)
        {
            case 0:
                coerceValue(myGroup, value);
                break;
            case 1:
                coerceValue(myMergegrp, value);
                break;
            case 2:
                coerceValue(myMergemethod, value);
                break;
            case 3:
                coerceValue(myClampvolume, value);
                break;
            case 4:
                coerceValue(myDstpreadd, value);
                break;
            case 5:
                coerceValue(myDstpremul, value);
                break;
            case 6:
                coerceValue(mySrcpreadd, value);
                break;
            case 7:
                coerceValue(mySrcpremul, value);
                break;
            case 8:
                coerceValue(myPostadd, value);
                break;
            case 9:
                coerceValue(myPostmul, value);
                break;
            case 10:
                coerceValue(myDoclampmin, value);
                break;
            case 11:
                coerceValue(myClampmin, value);
                break;
            case 12:
                coerceValue(myDoclampmax, value);
                break;
            case 13:
                coerceValue(myClampmax, value);
                break;

        }
    }

    void        setParmValue(exint idx, const exint &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const fpreal &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Vector2D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Vector3D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Vector4D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Matrix2D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Matrix3D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Matrix4D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_StringHolder &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_SharedPtr<UT_Ramp> &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const PRM_DataItemHandle &value) 
    { doSetParmValue(idx, value); }

    virtual exint    getNumParms() const
    {
        return 14;
    }

    virtual const char *getParmName(exint fieldnum) const
    {
        switch (fieldnum)
        {
            case 0:
                return "group";
            case 1:
                return "mergegrp";
            case 2:
                return "mergemethod";
            case 3:
                return "clampvolume";
            case 4:
                return "dstpreadd";
            case 5:
                return "dstpremul";
            case 6:
                return "srcpreadd";
            case 7:
                return "srcpremul";
            case 8:
                return "postadd";
            case 9:
                return "postmul";
            case 10:
                return "doclampmin";
            case 11:
                return "clampmin";
            case 12:
                return "doclampmax";
            case 13:
                return "clampmax";

        }
        return 0;
    }

    virtual ParmType getParmType(exint fieldnum) const
    {
        switch (fieldnum)
        {
                case 0:
                    return PARM_STRING;
                case 1:
                    return PARM_STRING;
                case 2:
                    return PARM_INTEGER;
                case 3:
                    return PARM_INTEGER;
                case 4:
                    return PARM_FLOAT;
                case 5:
                    return PARM_FLOAT;
                case 6:
                    return PARM_FLOAT;
                case 7:
                    return PARM_FLOAT;
                case 8:
                    return PARM_FLOAT;
                case 9:
                    return PARM_FLOAT;
                case 10:
                    return PARM_INTEGER;
                case 11:
                    return PARM_FLOAT;
                case 12:
                    return PARM_INTEGER;
                case 13:
                    return PARM_FLOAT;

        }
        return PARM_UNSUPPORTED;
    }

    // Boiler plate to load individual types.
    static void  loadData(UT_IStream &is, int64 &v)
    { is.bread(&v, 1); }
    static void  loadData(UT_IStream &is, bool &v)
    { int64     iv; is.bread(&iv, 1); v = iv; }
    static void  loadData(UT_IStream &is, fpreal64 &v)
    { is.bread<fpreal64>(&v, 1); }
    static void  loadData(UT_IStream &is, UT_Vector2D &v)
    { is.bread<fpreal64>(&v.x(), 1); is.bread<fpreal64>(&v.y(), 1); }
    static void  loadData(UT_IStream &is, UT_Vector3D &v)
    { is.bread<fpreal64>(&v.x(), 1); is.bread<fpreal64>(&v.y(), 1);
      is.bread<fpreal64>(&v.z(), 1); }
    static void  loadData(UT_IStream &is, UT_Vector4D &v)
    { is.bread<fpreal64>(&v.x(), 1); is.bread<fpreal64>(&v.y(), 1);
      is.bread<fpreal64>(&v.z(), 1); is.bread<fpreal64>(&v.w(), 1); }
    static void  loadData(UT_IStream &is, UT_Matrix2D &v)
    { for (int r = 0; r < 2; r++) for (int c = 0; c < 2; c++) is.bread<fpreal64>(&v(r, c), 1); }
    static void  loadData(UT_IStream &is, UT_Matrix3D &v)
    { for (int r = 0; r < 3; r++) for (int c = 0; c < 3; c++) is.bread<fpreal64>(&v(r, c), 1); }
    static void  loadData(UT_IStream &is, UT_Matrix4D &v)
    { for (int r = 0; r < 4; r++) for (int c = 0; c < 4; c++) is.bread<fpreal64>(&v(r, c), 1); }
    static void  loadData(UT_IStream &is, UT_Vector2I &v)
    { is.bread<int64>(&v.x(), 1); is.bread<int64>(&v.y(), 1); }
    static void  loadData(UT_IStream &is, UT_Vector3I &v)
    { is.bread<int64>(&v.x(), 1); is.bread<int64>(&v.y(), 1);
      is.bread<int64>(&v.z(), 1); }
    static void  loadData(UT_IStream &is, UT_Vector4I &v)
    { is.bread<int64>(&v.x(), 1); is.bread<int64>(&v.y(), 1);
      is.bread<int64>(&v.z(), 1); is.bread<int64>(&v.w(), 1); }
    static void  loadData(UT_IStream &is, UT_StringHolder &v)
    { is.bread(v); }
    static void  loadData(UT_IStream &is, UT_SharedPtr<UT_Ramp> &v)
    {   UT_StringHolder   rampdata;
        loadData(is, rampdata);
        if (rampdata.isstring())
        {
            v.reset(new UT_Ramp());
            UT_IStream  istr((const char *) rampdata, rampdata.length(), UT_ISTREAM_ASCII);
            v->load(istr);
        }
        else v.reset();
    }
    static void  loadData(UT_IStream &is, PRM_DataItemHandle &v)
    {   UT_StringHolder   data;
        loadData(is, data);
        if (data.isstring())
        {
            // Find the data type.
            char *colon = UT_StringWrap(data).findChar(':');
            if (colon)
            {
                int             typelen = colon - data.buffer();
                UT_WorkBuffer   type;
                type.strncpy(data.buffer(), typelen);
                UT_IStream  istr(((const char *) data) + typelen + 1, data.length() - (typelen + 1), UT_ISTREAM_BINARY);
                
                v = PRM_DataFactory::parseBinary(type.buffer(), istr);
            }
        }
        else v.reset();
    }

    static void  saveData(std::ostream &os, int64 v)
    { UTwrite(os, &v); }
    static void  saveData(std::ostream &os, bool v)
    { int64 iv = v; UTwrite(os, &iv); }
    static void  saveData(std::ostream &os, fpreal64 v)
    { UTwrite<fpreal64>(os, &v); }
    static void  saveData(std::ostream &os, UT_Vector2D v)
    { UTwrite<fpreal64>(os, &v.x()); UTwrite<fpreal64>(os, &v.y()); }
    static void  saveData(std::ostream &os, UT_Vector3D v)
    { UTwrite<fpreal64>(os, &v.x()); UTwrite<fpreal64>(os, &v.y());
      UTwrite<fpreal64>(os, &v.z()); }
    static void  saveData(std::ostream &os, UT_Vector4D v)
    { UTwrite<fpreal64>(os, &v.x()); UTwrite<fpreal64>(os, &v.y());
      UTwrite<fpreal64>(os, &v.z()); UTwrite<fpreal64>(os, &v.w()); }
    static void  saveData(std::ostream &os, UT_Matrix2D v)
    { for (int r = 0; r < 2; r++) for (int c = 0; c < 2; c++) UTwrite<fpreal64>(os, &v(r, c)); }
    static void  saveData(std::ostream &os, UT_Matrix3D v)
    { for (int r = 0; r < 3; r++) for (int c = 0; c < 3; c++) UTwrite<fpreal64>(os, &v(r, c)); }
    static void  saveData(std::ostream &os, UT_Matrix4D v)
    { for (int r = 0; r < 4; r++) for (int c = 0; c < 4; c++) UTwrite<fpreal64>(os, &v(r, c)); }
    static void  saveData(std::ostream &os, UT_StringHolder s)
    { UT_StringWrap(s).saveBinary(os); }
    static void  saveData(std::ostream &os, UT_SharedPtr<UT_Ramp> s)
    {   UT_StringHolder         result;
        UT_OStringStream        ostr;
        if (s) s->save(ostr);
        result = ostr.str();
        saveData(os, result);
    }
    static void  saveData(std::ostream &os, PRM_DataItemHandle s)
    {   UT_StringHolder         result;
        UT_OStringStream        ostr;
        if (s) 
        {
            ostr << s->getDataTypeToken();
            ostr << ":";
            s->saveBinary(ostr);
        }
        result = ostr.str();
        saveData(os, result);
    }


    void         save(std::ostream &os) const
    {
        int32           v = version();
        UTwrite(os, &v);
        saveData(os, myGroup);
        saveData(os, myMergegrp);
        saveData(os, myMergemethod);
        saveData(os, myClampvolume);
        saveData(os, myDstpreadd);
        saveData(os, myDstpremul);
        saveData(os, mySrcpreadd);
        saveData(os, mySrcpremul);
        saveData(os, myPostadd);
        saveData(os, myPostmul);
        saveData(os, myDoclampmin);
        saveData(os, myClampmin);
        saveData(os, myDoclampmax);
        saveData(os, myClampmax);

    }

    bool         load(UT_IStream &is)
    {
        int32           v;
        is.bread(&v, 1);
        if (version() != v)
        {
            // Fail incompatible versions
            return false;
        }
        loadData(is, myGroup);
        loadData(is, myMergegrp);
        loadData(is, myMergemethod);
        loadData(is, myClampvolume);
        loadData(is, myDstpreadd);
        loadData(is, myDstpremul);
        loadData(is, mySrcpreadd);
        loadData(is, mySrcpremul);
        loadData(is, myPostadd);
        loadData(is, myPostmul);
        loadData(is, myDoclampmin);
        loadData(is, myClampmin);
        loadData(is, myDoclampmax);
        loadData(is, myClampmax);

        return true;
    }

    const UT_StringHolder & getGroup() const { return myGroup; }
    void setGroup(const UT_StringHolder & val) { myGroup = val; }
    UT_StringHolder opGroup(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getGroup();
        UT_StringHolder result;
        OP_Utils::evalOpParm(result, thissop, "group", cookparms.getCookTime(), 0);
        return result;
    }
    const UT_StringHolder & getMergegrp() const { return myMergegrp; }
    void setMergegrp(const UT_StringHolder & val) { myMergegrp = val; }
    UT_StringHolder opMergegrp(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getMergegrp();
        UT_StringHolder result;
        OP_Utils::evalOpParm(result, thissop, "mergegrp", cookparms.getCookTime(), 0);
        return result;
    }
    Mergemethod getMergemethod() const { return Mergemethod(myMergemethod); }
    void setMergemethod(Mergemethod val) { myMergemethod = int64(val); }
    Mergemethod opMergemethod(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getMergemethod();
        int64 result;
        OP_Utils::evalOpParm(result, thissop, "mergemethod", cookparms.getCookTime(), 0);
        return Mergemethod(result);
    }
    bool getClampvolume() const { return myClampvolume; }
    void setClampvolume(bool val) { myClampvolume = val; }
    bool opClampvolume(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getClampvolume();
        bool result;
        OP_Utils::evalOpParm(result, thissop, "clampvolume", cookparms.getCookTime(), 0);
        return result;
    }
    fpreal64 getDstpreadd() const { return myDstpreadd; }
    void setDstpreadd(fpreal64 val) { myDstpreadd = val; }
    fpreal64 opDstpreadd(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getDstpreadd();
        fpreal64 result;
        OP_Utils::evalOpParm(result, thissop, "dstpreadd", cookparms.getCookTime(), 0);
        return result;
    }
    fpreal64 getDstpremul() const { return myDstpremul; }
    void setDstpremul(fpreal64 val) { myDstpremul = val; }
    fpreal64 opDstpremul(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getDstpremul();
        fpreal64 result;
        OP_Utils::evalOpParm(result, thissop, "dstpremul", cookparms.getCookTime(), 0);
        return result;
    }
    fpreal64 getSrcpreadd() const { return mySrcpreadd; }
    void setSrcpreadd(fpreal64 val) { mySrcpreadd = val; }
    fpreal64 opSrcpreadd(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getSrcpreadd();
        fpreal64 result;
        OP_Utils::evalOpParm(result, thissop, "srcpreadd", cookparms.getCookTime(), 0);
        return result;
    }
    fpreal64 getSrcpremul() const { return mySrcpremul; }
    void setSrcpremul(fpreal64 val) { mySrcpremul = val; }
    fpreal64 opSrcpremul(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getSrcpremul();
        fpreal64 result;
        OP_Utils::evalOpParm(result, thissop, "srcpremul", cookparms.getCookTime(), 0);
        return result;
    }
    fpreal64 getPostadd() const { return myPostadd; }
    void setPostadd(fpreal64 val) { myPostadd = val; }
    fpreal64 opPostadd(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getPostadd();
        fpreal64 result;
        OP_Utils::evalOpParm(result, thissop, "postadd", cookparms.getCookTime(), 0);
        return result;
    }
    fpreal64 getPostmul() const { return myPostmul; }
    void setPostmul(fpreal64 val) { myPostmul = val; }
    fpreal64 opPostmul(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getPostmul();
        fpreal64 result;
        OP_Utils::evalOpParm(result, thissop, "postmul", cookparms.getCookTime(), 0);
        return result;
    }
    bool getDoclampmin() const { return myDoclampmin; }
    void setDoclampmin(bool val) { myDoclampmin = val; }
    bool opDoclampmin(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getDoclampmin();
        bool result;
        OP_Utils::evalOpParm(result, thissop, "doclampmin", cookparms.getCookTime(), 0);
        return result;
    }
    fpreal64 getClampmin() const { return myClampmin; }
    void setClampmin(fpreal64 val) { myClampmin = val; }
    fpreal64 opClampmin(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getClampmin();
        fpreal64 result;
        OP_Utils::evalOpParm(result, thissop, "clampmin", cookparms.getCookTime(), 0);
        return result;
    }
    bool getDoclampmax() const { return myDoclampmax; }
    void setDoclampmax(bool val) { myDoclampmax = val; }
    bool opDoclampmax(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getDoclampmax();
        bool result;
        OP_Utils::evalOpParm(result, thissop, "doclampmax", cookparms.getCookTime(), 0);
        return result;
    }
    fpreal64 getClampmax() const { return myClampmax; }
    void setClampmax(fpreal64 val) { myClampmax = val; }
    fpreal64 opClampmax(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getClampmax();
        fpreal64 result;
        OP_Utils::evalOpParm(result, thissop, "clampmax", cookparms.getCookTime(), 0);
        return result;
    }

private:
    UT_StringHolder myGroup;
    UT_StringHolder myMergegrp;
    int64 myMergemethod;
    bool myClampvolume;
    fpreal64 myDstpreadd;
    fpreal64 myDstpremul;
    fpreal64 mySrcpreadd;
    fpreal64 mySrcpremul;
    fpreal64 myPostadd;
    fpreal64 myPostmul;
    bool myDoclampmin;
    fpreal64 myClampmin;
    bool myDoclampmax;
    fpreal64 myClampmax;

};
