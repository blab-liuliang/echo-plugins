/* Automagically Generated by generate_proto.py
 * Do not Edit
 */
#pragma once

#include <SOP/SOP_NodeVerb.h>
#include <OP/OP_Utils.h>
#include <PRM/PRM_Parm.h>
#include <UT/UT_IStream.h>
#include <UT/UT_NTStreamUtil.h>
#include <UT/UT_Ramp.h>
#include <UT/UT_SharedPtr.h>
#include <UT/UT_StringHolder.h>
#include <UT/UT_StringStream.h>
#include <UT/UT_VectorTypes.h>
#include <SYS/SYS_Types.h>

using namespace UT::Literal;

class DEP_MicroNode;
namespace SOP_AttribMirrorEnums
{
    enum class GroupType
    {
        VERTICES = 0,
        POINTS,
        PRIMS
    };
    enum class MirrorOp
    {
        SOURCE = 0,
        DESTINATION
    };
    enum class Attrib
    {
        COLORATTRIB = 0,
        UVATTRIB,
        OTHERATTRIB
    };
    enum class AttribMirrorOp
    {
        NOMIRROR = 0,
        UVMIRROR,
        VECTORMIRROR,
        POINTMIRROR
    };
}


class SOP_API SOP_AttribMirrorParms  : public SOP_NodeParms
{
public:
    static int version() { return 1; }

    SOP_AttribMirrorParms()
    {
        myGroup = ""_sh;
        myGroupType = 0;
        myMirrorOp = 1;
        myAttrib = 0;
        myAttribName = ""_sh;
        myUseTolerance = false;
        myTolerance = 0.1;
        myOrigin = UT_Vector3D(0,0,0);
        myDist = 0;
        myDir = UT_Vector3D(1,0,0);
        myAttribMirrorOp = 0;
        myUVOrigin = UT_Vector2D(0.5,0.5);
        myUVAngle = 90;
        myStringReplace = false;
        mySearch = "L_*"_sh;
        myReplace = "R_*"_sh;

    }

    explicit SOP_AttribMirrorParms(const SOP_AttribMirrorParms &) = default;

    virtual ~SOP_AttribMirrorParms() {}

    bool operator==(const SOP_AttribMirrorParms &src) const
    {
        if (myGroup != src.myGroup) return false;
        if (myGroupType != src.myGroupType) return false;
        if (myMirrorOp != src.myMirrorOp) return false;
        if (myAttrib != src.myAttrib) return false;
        if (myAttribName != src.myAttribName) return false;
        if (myUseTolerance != src.myUseTolerance) return false;
        if (myTolerance != src.myTolerance) return false;
        if (myOrigin != src.myOrigin) return false;
        if (myDist != src.myDist) return false;
        if (myDir != src.myDir) return false;
        if (myAttribMirrorOp != src.myAttribMirrorOp) return false;
        if (myUVOrigin != src.myUVOrigin) return false;
        if (myUVAngle != src.myUVAngle) return false;
        if (myStringReplace != src.myStringReplace) return false;
        if (mySearch != src.mySearch) return false;
        if (myReplace != src.myReplace) return false;

        return true;
    }
    bool operator!=(const SOP_AttribMirrorParms &src) const
    {
        return !operator==(src);
    }
    using GroupType = SOP_AttribMirrorEnums::GroupType;
    using MirrorOp = SOP_AttribMirrorEnums::MirrorOp;
    using Attrib = SOP_AttribMirrorEnums::Attrib;
    using AttribMirrorOp = SOP_AttribMirrorEnums::AttribMirrorOp;



    void        buildFromOp(const OP_Node *node, fpreal time, DEP_MicroNode *depnode)
    {
        if (true)
            OP_Utils::evalOpParm(myGroup, node, "group", time, 0);
        else myGroup = ""_sh;
        if (true)
            OP_Utils::evalOpParm(myGroupType, node, "grouptype", time, 0);
        else myGroupType = 0;
        if (true)
            OP_Utils::evalOpParm(myMirrorOp, node, "usegroupas", time, 0);
        else myMirrorOp = 1;
        if (true)
            OP_Utils::evalOpParm(myAttrib, node, "attrib", time, 0);
        else myAttrib = 0;
        if (true && ( (!(((int64(getAttrib())!=2)))) ) )
            OP_Utils::evalOpParm(myAttribName, node, "attribname", time, 0);
        else myAttribName = ""_sh;
        if (true)
            OP_Utils::evalOpParm(myUseTolerance, node, "usetolerance", time, 0);
        else myUseTolerance = false;
        if (true && ( (!(((getUseTolerance()==0)))) ) )
            OP_Utils::evalOpParm(myTolerance, node, "tolerance", time, 0);
        else myTolerance = 0.1;
        if (true)
            OP_Utils::evalOpParm(myOrigin, node, "origin", time, 0);
        else myOrigin = UT_Vector3D(0,0,0);
        if (true)
            OP_Utils::evalOpParm(myDist, node, "dist", time, 0);
        else myDist = 0;
        if (true)
            OP_Utils::evalOpParm(myDir, node, "dir", time, 0);
        else myDir = UT_Vector3D(1,0,0);
        if (true)
            OP_Utils::evalOpParm(myAttribMirrorOp, node, "attribmirror", time, 0);
        else myAttribMirrorOp = 0;
        if (true && ( (!(((int64(getAttribMirrorOp())!=1)))) ) )
            OP_Utils::evalOpParm(myUVOrigin, node, "uvorig", time, 0);
        else myUVOrigin = UT_Vector2D(0.5,0.5);
        if (true && ( (!(((int64(getAttribMirrorOp())!=1)))) ) )
            OP_Utils::evalOpParm(myUVAngle, node, "uvangle", time, 0);
        else myUVAngle = 90;
        if (true)
            OP_Utils::evalOpParm(myStringReplace, node, "stringreplace", time, 0);
        else myStringReplace = false;
        if (true && ( (!(((getStringReplace()==0)))) ) )
            OP_Utils::evalOpParm(mySearch, node, "search", time, 0);
        else mySearch = "L_*"_sh;
        if (true && ( (!(((getStringReplace()==0)))) ) )
            OP_Utils::evalOpParm(myReplace, node, "replace", time, 0);
        else myReplace = "R_*"_sh;

    }


    virtual void loadFromOpSubclass(const LoadParms &loadparms)
    {
        buildFromOp(loadparms.node(), loadparms.context().getTime(), loadparms.depnode());
    }


    virtual void copyFrom(const SOP_NodeParms *src)
    {
        *this = *((const SOP_AttribMirrorParms *)src);
    }

    template <typename T>
    void
    doGetParmValue(exint idx, T &value) const
    {
        switch (idx)
        {
            case 0:
                coerceValue(value, myGroup);
                break;
            case 1:
                coerceValue(value, myGroupType);
                break;
            case 2:
                coerceValue(value, myMirrorOp);
                break;
            case 3:
                coerceValue(value, myAttrib);
                break;
            case 4:
                coerceValue(value, myAttribName);
                break;
            case 5:
                coerceValue(value, myUseTolerance);
                break;
            case 6:
                coerceValue(value, myTolerance);
                break;
            case 7:
                coerceValue(value, myOrigin);
                break;
            case 8:
                coerceValue(value, myDist);
                break;
            case 9:
                coerceValue(value, myDir);
                break;
            case 10:
                coerceValue(value, myAttribMirrorOp);
                break;
            case 11:
                coerceValue(value, myUVOrigin);
                break;
            case 12:
                coerceValue(value, myUVAngle);
                break;
            case 13:
                coerceValue(value, myStringReplace);
                break;
            case 14:
                coerceValue(value, mySearch);
                break;
            case 15:
                coerceValue(value, myReplace);
                break;

        }
    }

    void        getParmValue(exint idx, exint &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, fpreal &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Vector2D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Vector3D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Vector4D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Matrix2D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Matrix3D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Matrix4D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_StringHolder &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_SharedPtr<UT_Ramp> &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, PRM_DataItemHandle &value) const
    { doGetParmValue(idx, value); }

    template <typename T>
    void
    doSetParmValue(exint idx, const T &value) 
    {
        switch (idx)
        {
            case 0:
                coerceValue(myGroup, value);
                break;
            case 1:
                coerceValue(myGroupType, value);
                break;
            case 2:
                coerceValue(myMirrorOp, value);
                break;
            case 3:
                coerceValue(myAttrib, value);
                break;
            case 4:
                coerceValue(myAttribName, value);
                break;
            case 5:
                coerceValue(myUseTolerance, value);
                break;
            case 6:
                coerceValue(myTolerance, value);
                break;
            case 7:
                coerceValue(myOrigin, value);
                break;
            case 8:
                coerceValue(myDist, value);
                break;
            case 9:
                coerceValue(myDir, value);
                break;
            case 10:
                coerceValue(myAttribMirrorOp, value);
                break;
            case 11:
                coerceValue(myUVOrigin, value);
                break;
            case 12:
                coerceValue(myUVAngle, value);
                break;
            case 13:
                coerceValue(myStringReplace, value);
                break;
            case 14:
                coerceValue(mySearch, value);
                break;
            case 15:
                coerceValue(myReplace, value);
                break;

        }
    }

    void        setParmValue(exint idx, const exint &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const fpreal &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Vector2D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Vector3D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Vector4D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Matrix2D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Matrix3D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Matrix4D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_StringHolder &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_SharedPtr<UT_Ramp> &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const PRM_DataItemHandle &value) 
    { doSetParmValue(idx, value); }

    virtual exint    getNumParms() const
    {
        return 16;
    }

    virtual const char *getParmName(exint fieldnum) const
    {
        switch (fieldnum)
        {
            case 0:
                return "group";
            case 1:
                return "grouptype";
            case 2:
                return "usegroupas";
            case 3:
                return "attrib";
            case 4:
                return "attribname";
            case 5:
                return "usetolerance";
            case 6:
                return "tolerance";
            case 7:
                return "origin";
            case 8:
                return "dist";
            case 9:
                return "dir";
            case 10:
                return "attribmirror";
            case 11:
                return "uvorig";
            case 12:
                return "uvangle";
            case 13:
                return "stringreplace";
            case 14:
                return "search";
            case 15:
                return "replace";

        }
        return 0;
    }

    virtual ParmType getParmType(exint fieldnum) const
    {
        switch (fieldnum)
        {
                case 0:
                    return PARM_STRING;
                case 1:
                    return PARM_INTEGER;
                case 2:
                    return PARM_INTEGER;
                case 3:
                    return PARM_INTEGER;
                case 4:
                    return PARM_STRING;
                case 5:
                    return PARM_INTEGER;
                case 6:
                    return PARM_FLOAT;
                case 7:
                    return PARM_VECTOR3;
                case 8:
                    return PARM_FLOAT;
                case 9:
                    return PARM_VECTOR3;
                case 10:
                    return PARM_INTEGER;
                case 11:
                    return PARM_VECTOR2;
                case 12:
                    return PARM_FLOAT;
                case 13:
                    return PARM_INTEGER;
                case 14:
                    return PARM_STRING;
                case 15:
                    return PARM_STRING;

        }
        return PARM_UNSUPPORTED;
    }

    // Boiler plate to load individual types.
    static void  loadData(UT_IStream &is, int64 &v)
    { is.bread(&v, 1); }
    static void  loadData(UT_IStream &is, bool &v)
    { int64     iv; is.bread(&iv, 1); v = iv; }
    static void  loadData(UT_IStream &is, fpreal64 &v)
    { is.bread<fpreal64>(&v, 1); }
    static void  loadData(UT_IStream &is, UT_Vector2D &v)
    { is.bread<fpreal64>(&v.x(), 1); is.bread<fpreal64>(&v.y(), 1); }
    static void  loadData(UT_IStream &is, UT_Vector3D &v)
    { is.bread<fpreal64>(&v.x(), 1); is.bread<fpreal64>(&v.y(), 1);
      is.bread<fpreal64>(&v.z(), 1); }
    static void  loadData(UT_IStream &is, UT_Vector4D &v)
    { is.bread<fpreal64>(&v.x(), 1); is.bread<fpreal64>(&v.y(), 1);
      is.bread<fpreal64>(&v.z(), 1); is.bread<fpreal64>(&v.w(), 1); }
    static void  loadData(UT_IStream &is, UT_Matrix2D &v)
    { for (int r = 0; r < 2; r++) for (int c = 0; c < 2; c++) is.bread<fpreal64>(&v(r, c), 1); }
    static void  loadData(UT_IStream &is, UT_Matrix3D &v)
    { for (int r = 0; r < 3; r++) for (int c = 0; c < 3; c++) is.bread<fpreal64>(&v(r, c), 1); }
    static void  loadData(UT_IStream &is, UT_Matrix4D &v)
    { for (int r = 0; r < 4; r++) for (int c = 0; c < 4; c++) is.bread<fpreal64>(&v(r, c), 1); }
    static void  loadData(UT_IStream &is, UT_Vector2I &v)
    { is.bread<int64>(&v.x(), 1); is.bread<int64>(&v.y(), 1); }
    static void  loadData(UT_IStream &is, UT_Vector3I &v)
    { is.bread<int64>(&v.x(), 1); is.bread<int64>(&v.y(), 1);
      is.bread<int64>(&v.z(), 1); }
    static void  loadData(UT_IStream &is, UT_Vector4I &v)
    { is.bread<int64>(&v.x(), 1); is.bread<int64>(&v.y(), 1);
      is.bread<int64>(&v.z(), 1); is.bread<int64>(&v.w(), 1); }
    static void  loadData(UT_IStream &is, UT_StringHolder &v)
    { is.bread(v); }
    static void  loadData(UT_IStream &is, UT_SharedPtr<UT_Ramp> &v)
    {   UT_StringHolder   rampdata;
        loadData(is, rampdata);
        if (rampdata.isstring())
        {
            v.reset(new UT_Ramp());
            UT_IStream  istr((const char *) rampdata, rampdata.length(), UT_ISTREAM_ASCII);
            v->load(istr);
        }
        else v.reset();
    }
    static void  loadData(UT_IStream &is, PRM_DataItemHandle &v)
    {   UT_StringHolder   data;
        loadData(is, data);
        if (data.isstring())
        {
            // Find the data type.
            char *colon = UT_StringWrap(data).findChar(':');
            if (colon)
            {
                int             typelen = colon - data.buffer();
                UT_WorkBuffer   type;
                type.strncpy(data.buffer(), typelen);
                UT_IStream  istr(((const char *) data) + typelen + 1, data.length() - (typelen + 1), UT_ISTREAM_BINARY);
                
                v = PRM_DataFactory::parseBinary(type.buffer(), istr);
            }
        }
        else v.reset();
    }

    static void  saveData(std::ostream &os, int64 v)
    { UTwrite(os, &v); }
    static void  saveData(std::ostream &os, bool v)
    { int64 iv = v; UTwrite(os, &iv); }
    static void  saveData(std::ostream &os, fpreal64 v)
    { UTwrite<fpreal64>(os, &v); }
    static void  saveData(std::ostream &os, UT_Vector2D v)
    { UTwrite<fpreal64>(os, &v.x()); UTwrite<fpreal64>(os, &v.y()); }
    static void  saveData(std::ostream &os, UT_Vector3D v)
    { UTwrite<fpreal64>(os, &v.x()); UTwrite<fpreal64>(os, &v.y());
      UTwrite<fpreal64>(os, &v.z()); }
    static void  saveData(std::ostream &os, UT_Vector4D v)
    { UTwrite<fpreal64>(os, &v.x()); UTwrite<fpreal64>(os, &v.y());
      UTwrite<fpreal64>(os, &v.z()); UTwrite<fpreal64>(os, &v.w()); }
    static void  saveData(std::ostream &os, UT_Matrix2D v)
    { for (int r = 0; r < 2; r++) for (int c = 0; c < 2; c++) UTwrite<fpreal64>(os, &v(r, c)); }
    static void  saveData(std::ostream &os, UT_Matrix3D v)
    { for (int r = 0; r < 3; r++) for (int c = 0; c < 3; c++) UTwrite<fpreal64>(os, &v(r, c)); }
    static void  saveData(std::ostream &os, UT_Matrix4D v)
    { for (int r = 0; r < 4; r++) for (int c = 0; c < 4; c++) UTwrite<fpreal64>(os, &v(r, c)); }
    static void  saveData(std::ostream &os, UT_StringHolder s)
    { UT_StringWrap(s).saveBinary(os); }
    static void  saveData(std::ostream &os, UT_SharedPtr<UT_Ramp> s)
    {   UT_StringHolder         result;
        UT_OStringStream        ostr;
        if (s) s->save(ostr);
        result = ostr.str();
        saveData(os, result);
    }
    static void  saveData(std::ostream &os, PRM_DataItemHandle s)
    {   UT_StringHolder         result;
        UT_OStringStream        ostr;
        if (s) 
        {
            ostr << s->getDataTypeToken();
            ostr << ":";
            s->saveBinary(ostr);
        }
        result = ostr.str();
        saveData(os, result);
    }


    void         save(std::ostream &os) const
    {
        int32           v = version();
        UTwrite(os, &v);
        saveData(os, myGroup);
        saveData(os, myGroupType);
        saveData(os, myMirrorOp);
        saveData(os, myAttrib);
        saveData(os, myAttribName);
        saveData(os, myUseTolerance);
        saveData(os, myTolerance);
        saveData(os, myOrigin);
        saveData(os, myDist);
        saveData(os, myDir);
        saveData(os, myAttribMirrorOp);
        saveData(os, myUVOrigin);
        saveData(os, myUVAngle);
        saveData(os, myStringReplace);
        saveData(os, mySearch);
        saveData(os, myReplace);

    }

    bool         load(UT_IStream &is)
    {
        int32           v;
        is.bread(&v, 1);
        if (version() != v)
        {
            // Fail incompatible versions
            return false;
        }
        loadData(is, myGroup);
        loadData(is, myGroupType);
        loadData(is, myMirrorOp);
        loadData(is, myAttrib);
        loadData(is, myAttribName);
        loadData(is, myUseTolerance);
        loadData(is, myTolerance);
        loadData(is, myOrigin);
        loadData(is, myDist);
        loadData(is, myDir);
        loadData(is, myAttribMirrorOp);
        loadData(is, myUVOrigin);
        loadData(is, myUVAngle);
        loadData(is, myStringReplace);
        loadData(is, mySearch);
        loadData(is, myReplace);

        return true;
    }

    const UT_StringHolder & getGroup() const { return myGroup; }
    void setGroup(const UT_StringHolder & val) { myGroup = val; }
    UT_StringHolder opGroup(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getGroup();
        UT_StringHolder result;
        OP_Utils::evalOpParm(result, thissop, "group", cookparms.getCookTime(), 0);
        return result;
    }
    GroupType getGroupType() const { return GroupType(myGroupType); }
    void setGroupType(GroupType val) { myGroupType = int64(val); }
    GroupType opGroupType(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getGroupType();
        int64 result;
        OP_Utils::evalOpParm(result, thissop, "grouptype", cookparms.getCookTime(), 0);
        return GroupType(result);
    }
    MirrorOp getMirrorOp() const { return MirrorOp(myMirrorOp); }
    void setMirrorOp(MirrorOp val) { myMirrorOp = int64(val); }
    MirrorOp opMirrorOp(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getMirrorOp();
        int64 result;
        OP_Utils::evalOpParm(result, thissop, "usegroupas", cookparms.getCookTime(), 0);
        return MirrorOp(result);
    }
    Attrib getAttrib() const { return Attrib(myAttrib); }
    void setAttrib(Attrib val) { myAttrib = int64(val); }
    Attrib opAttrib(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getAttrib();
        int64 result;
        OP_Utils::evalOpParm(result, thissop, "attrib", cookparms.getCookTime(), 0);
        return Attrib(result);
    }
    const UT_StringHolder & getAttribName() const { return myAttribName; }
    void setAttribName(const UT_StringHolder & val) { myAttribName = val; }
    UT_StringHolder opAttribName(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getAttribName();
        UT_StringHolder result;
        OP_Utils::evalOpParm(result, thissop, "attribname", cookparms.getCookTime(), 0);
        return result;
    }
    bool getUseTolerance() const { return myUseTolerance; }
    void setUseTolerance(bool val) { myUseTolerance = val; }
    bool opUseTolerance(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getUseTolerance();
        bool result;
        OP_Utils::evalOpParm(result, thissop, "usetolerance", cookparms.getCookTime(), 0);
        return result;
    }
    fpreal64 getTolerance() const { return myTolerance; }
    void setTolerance(fpreal64 val) { myTolerance = val; }
    fpreal64 opTolerance(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getTolerance();
        fpreal64 result;
        OP_Utils::evalOpParm(result, thissop, "tolerance", cookparms.getCookTime(), 0);
        return result;
    }
    UT_Vector3D getOrigin() const { return myOrigin; }
    void setOrigin(UT_Vector3D val) { myOrigin = val; }
    UT_Vector3D opOrigin(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getOrigin();
        UT_Vector3D result;
        OP_Utils::evalOpParm(result, thissop, "origin", cookparms.getCookTime(), 0);
        return result;
    }
    fpreal64 getDist() const { return myDist; }
    void setDist(fpreal64 val) { myDist = val; }
    fpreal64 opDist(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getDist();
        fpreal64 result;
        OP_Utils::evalOpParm(result, thissop, "dist", cookparms.getCookTime(), 0);
        return result;
    }
    UT_Vector3D getDir() const { return myDir; }
    void setDir(UT_Vector3D val) { myDir = val; }
    UT_Vector3D opDir(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getDir();
        UT_Vector3D result;
        OP_Utils::evalOpParm(result, thissop, "dir", cookparms.getCookTime(), 0);
        return result;
    }
    AttribMirrorOp getAttribMirrorOp() const { return AttribMirrorOp(myAttribMirrorOp); }
    void setAttribMirrorOp(AttribMirrorOp val) { myAttribMirrorOp = int64(val); }
    AttribMirrorOp opAttribMirrorOp(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getAttribMirrorOp();
        int64 result;
        OP_Utils::evalOpParm(result, thissop, "attribmirror", cookparms.getCookTime(), 0);
        return AttribMirrorOp(result);
    }
    UT_Vector2D getUVOrigin() const { return myUVOrigin; }
    void setUVOrigin(UT_Vector2D val) { myUVOrigin = val; }
    UT_Vector2D opUVOrigin(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getUVOrigin();
        UT_Vector2D result;
        OP_Utils::evalOpParm(result, thissop, "uvorig", cookparms.getCookTime(), 0);
        return result;
    }
    fpreal64 getUVAngle() const { return myUVAngle; }
    void setUVAngle(fpreal64 val) { myUVAngle = val; }
    fpreal64 opUVAngle(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getUVAngle();
        fpreal64 result;
        OP_Utils::evalOpParm(result, thissop, "uvangle", cookparms.getCookTime(), 0);
        return result;
    }
    bool getStringReplace() const { return myStringReplace; }
    void setStringReplace(bool val) { myStringReplace = val; }
    bool opStringReplace(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getStringReplace();
        bool result;
        OP_Utils::evalOpParm(result, thissop, "stringreplace", cookparms.getCookTime(), 0);
        return result;
    }
    const UT_StringHolder & getSearch() const { return mySearch; }
    void setSearch(const UT_StringHolder & val) { mySearch = val; }
    UT_StringHolder opSearch(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getSearch();
        UT_StringHolder result;
        OP_Utils::evalOpParm(result, thissop, "search", cookparms.getCookTime(), 0);
        return result;
    }
    const UT_StringHolder & getReplace() const { return myReplace; }
    void setReplace(const UT_StringHolder & val) { myReplace = val; }
    UT_StringHolder opReplace(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getReplace();
        UT_StringHolder result;
        OP_Utils::evalOpParm(result, thissop, "replace", cookparms.getCookTime(), 0);
        return result;
    }

private:
    UT_StringHolder myGroup;
    int64 myGroupType;
    int64 myMirrorOp;
    int64 myAttrib;
    UT_StringHolder myAttribName;
    bool myUseTolerance;
    fpreal64 myTolerance;
    UT_Vector3D myOrigin;
    fpreal64 myDist;
    UT_Vector3D myDir;
    int64 myAttribMirrorOp;
    UT_Vector2D myUVOrigin;
    fpreal64 myUVAngle;
    bool myStringReplace;
    UT_StringHolder mySearch;
    UT_StringHolder myReplace;

};
