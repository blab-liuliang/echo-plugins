/* Automagically Generated by generate_proto.py
 * Do not Edit
 */
#pragma once

#include <SOP/SOP_NodeVerb.h>
#include <OP/OP_Utils.h>
#include <PRM/PRM_Parm.h>
#include <UT/UT_IStream.h>
#include <UT/UT_NTStreamUtil.h>
#include <UT/UT_Ramp.h>
#include <UT/UT_SharedPtr.h>
#include <UT/UT_StringHolder.h>
#include <UT/UT_StringStream.h>
#include <UT/UT_VectorTypes.h>
#include <SYS/SYS_Types.h>

using namespace UT::Literal;

class DEP_MicroNode;

class SOP_API SOP_InflateParms  : public SOP_NodeParms
{
public:
    static int version() { return 1; }

    SOP_InflateParms()
    {
        myGroup = ""_sh;
        myToolgroup = ""_sh;
        myCentergroup = ""_sh;
        myCenterprimgroup = ""_sh;
        myToolidname = "toolid"_sh;
        myCenteroverlap = 0;
        myBlendexponent = 2;
        myClampsurfdist = true;
        myMinsurfdist = 0;
        myTightness = 3;
        myInflatetofarthest = false;
        myMaxinflateenable = false;
        myMaxinflate = 1;

    }

    explicit SOP_InflateParms(const SOP_InflateParms &) = default;

    virtual ~SOP_InflateParms() {}

    bool operator==(const SOP_InflateParms &src) const
    {
        if (myGroup != src.myGroup) return false;
        if (myToolgroup != src.myToolgroup) return false;
        if (myCentergroup != src.myCentergroup) return false;
        if (myCenterprimgroup != src.myCenterprimgroup) return false;
        if (myToolidname != src.myToolidname) return false;
        if (myCenteroverlap != src.myCenteroverlap) return false;
        if (myBlendexponent != src.myBlendexponent) return false;
        if (myClampsurfdist != src.myClampsurfdist) return false;
        if (myMinsurfdist != src.myMinsurfdist) return false;
        if (myTightness != src.myTightness) return false;
        if (myInflatetofarthest != src.myInflatetofarthest) return false;
        if (myMaxinflateenable != src.myMaxinflateenable) return false;
        if (myMaxinflate != src.myMaxinflate) return false;

        return true;
    }
    bool operator!=(const SOP_InflateParms &src) const
    {
        return !operator==(src);
    }



    void        buildFromOp(const OP_Node *node, fpreal time, DEP_MicroNode *depnode)
    {
        if (true)
            OP_Utils::evalOpParm(myGroup, node, "group", time, 0);
        else myGroup = ""_sh;
        if (true)
            OP_Utils::evalOpParm(myToolgroup, node, "toolgroup", time, 0);
        else myToolgroup = ""_sh;
        if (true)
            OP_Utils::evalOpParm(myCentergroup, node, "centergroup", time, 0);
        else myCentergroup = ""_sh;
        if (true)
            OP_Utils::evalOpParm(myCenterprimgroup, node, "centerprimgroup", time, 0);
        else myCenterprimgroup = ""_sh;
        if (true)
            OP_Utils::evalOpParm(myToolidname, node, "toolidname", time, 0);
        else myToolidname = "toolid"_sh;
        if (true)
            OP_Utils::evalOpParm(myCenteroverlap, node, "centeroverlap", time, 0);
        else myCenteroverlap = 0;
        if (true)
            OP_Utils::evalOpParm(myBlendexponent, node, "blendexponent", time, 0);
        else myBlendexponent = 2;
        if (true)
            OP_Utils::evalOpParm(myClampsurfdist, node, "clampsurfdist", time, 0);
        else myClampsurfdist = true;
        if (true && ( (!(((getClampsurfdist()==0)))) ) )
            OP_Utils::evalOpParm(myMinsurfdist, node, "minsurfdist", time, 0);
        else myMinsurfdist = 0;
        if (true)
            OP_Utils::evalOpParm(myTightness, node, "tightness", time, 0);
        else myTightness = 3;
        if (true)
            OP_Utils::evalOpParm(myInflatetofarthest, node, "inflatetofarthest", time, 0);
        else myInflatetofarthest = false;
        if (true)
            OP_Utils::evalOpParm(myMaxinflateenable, node, "maxinflateenable", time, 0);
        else myMaxinflateenable = false;
        if (true && ( (!(((getMaxinflateenable()==0)))) ) )
            OP_Utils::evalOpParm(myMaxinflate, node, "maxinflate", time, 0);
        else myMaxinflate = 1;

    }


    virtual void loadFromOpSubclass(const LoadParms &loadparms)
    {
        buildFromOp(loadparms.node(), loadparms.context().getTime(), loadparms.depnode());
    }


    virtual void copyFrom(const SOP_NodeParms *src)
    {
        *this = *((const SOP_InflateParms *)src);
    }

    template <typename T>
    void
    doGetParmValue(exint idx, T &value) const
    {
        switch (idx)
        {
            case 0:
                coerceValue(value, myGroup);
                break;
            case 1:
                coerceValue(value, myToolgroup);
                break;
            case 2:
                coerceValue(value, myCentergroup);
                break;
            case 3:
                coerceValue(value, myCenterprimgroup);
                break;
            case 4:
                coerceValue(value, myToolidname);
                break;
            case 5:
                coerceValue(value, myCenteroverlap);
                break;
            case 6:
                coerceValue(value, myBlendexponent);
                break;
            case 7:
                coerceValue(value, myClampsurfdist);
                break;
            case 8:
                coerceValue(value, myMinsurfdist);
                break;
            case 9:
                coerceValue(value, myTightness);
                break;
            case 10:
                coerceValue(value, myInflatetofarthest);
                break;
            case 11:
                coerceValue(value, myMaxinflateenable);
                break;
            case 12:
                coerceValue(value, myMaxinflate);
                break;

        }
    }

    void        getParmValue(exint idx, exint &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, fpreal &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Vector2D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Vector3D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Vector4D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Matrix2D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Matrix3D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Matrix4D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_StringHolder &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_SharedPtr<UT_Ramp> &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, PRM_DataItemHandle &value) const
    { doGetParmValue(idx, value); }

    template <typename T>
    void
    doSetParmValue(exint idx, const T &value) 
    {
        switch (idx)
        {
            case 0:
                coerceValue(myGroup, value);
                break;
            case 1:
                coerceValue(myToolgroup, value);
                break;
            case 2:
                coerceValue(myCentergroup, value);
                break;
            case 3:
                coerceValue(myCenterprimgroup, value);
                break;
            case 4:
                coerceValue(myToolidname, value);
                break;
            case 5:
                coerceValue(myCenteroverlap, value);
                break;
            case 6:
                coerceValue(myBlendexponent, value);
                break;
            case 7:
                coerceValue(myClampsurfdist, value);
                break;
            case 8:
                coerceValue(myMinsurfdist, value);
                break;
            case 9:
                coerceValue(myTightness, value);
                break;
            case 10:
                coerceValue(myInflatetofarthest, value);
                break;
            case 11:
                coerceValue(myMaxinflateenable, value);
                break;
            case 12:
                coerceValue(myMaxinflate, value);
                break;

        }
    }

    void        setParmValue(exint idx, const exint &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const fpreal &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Vector2D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Vector3D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Vector4D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Matrix2D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Matrix3D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Matrix4D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_StringHolder &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_SharedPtr<UT_Ramp> &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const PRM_DataItemHandle &value) 
    { doSetParmValue(idx, value); }

    virtual exint    getNumParms() const
    {
        return 13;
    }

    virtual const char *getParmName(exint fieldnum) const
    {
        switch (fieldnum)
        {
            case 0:
                return "group";
            case 1:
                return "toolgroup";
            case 2:
                return "centergroup";
            case 3:
                return "centerprimgroup";
            case 4:
                return "toolidname";
            case 5:
                return "centeroverlap";
            case 6:
                return "blendexponent";
            case 7:
                return "clampsurfdist";
            case 8:
                return "minsurfdist";
            case 9:
                return "tightness";
            case 10:
                return "inflatetofarthest";
            case 11:
                return "maxinflateenable";
            case 12:
                return "maxinflate";

        }
        return 0;
    }

    virtual ParmType getParmType(exint fieldnum) const
    {
        switch (fieldnum)
        {
                case 0:
                    return PARM_STRING;
                case 1:
                    return PARM_STRING;
                case 2:
                    return PARM_STRING;
                case 3:
                    return PARM_STRING;
                case 4:
                    return PARM_STRING;
                case 5:
                    return PARM_FLOAT;
                case 6:
                    return PARM_FLOAT;
                case 7:
                    return PARM_INTEGER;
                case 8:
                    return PARM_FLOAT;
                case 9:
                    return PARM_FLOAT;
                case 10:
                    return PARM_INTEGER;
                case 11:
                    return PARM_INTEGER;
                case 12:
                    return PARM_FLOAT;

        }
        return PARM_UNSUPPORTED;
    }

    // Boiler plate to load individual types.
    static void  loadData(UT_IStream &is, int64 &v)
    { is.bread(&v, 1); }
    static void  loadData(UT_IStream &is, bool &v)
    { int64     iv; is.bread(&iv, 1); v = iv; }
    static void  loadData(UT_IStream &is, fpreal64 &v)
    { is.bread<fpreal64>(&v, 1); }
    static void  loadData(UT_IStream &is, UT_Vector2D &v)
    { is.bread<fpreal64>(&v.x(), 1); is.bread<fpreal64>(&v.y(), 1); }
    static void  loadData(UT_IStream &is, UT_Vector3D &v)
    { is.bread<fpreal64>(&v.x(), 1); is.bread<fpreal64>(&v.y(), 1);
      is.bread<fpreal64>(&v.z(), 1); }
    static void  loadData(UT_IStream &is, UT_Vector4D &v)
    { is.bread<fpreal64>(&v.x(), 1); is.bread<fpreal64>(&v.y(), 1);
      is.bread<fpreal64>(&v.z(), 1); is.bread<fpreal64>(&v.w(), 1); }
    static void  loadData(UT_IStream &is, UT_Matrix2D &v)
    { for (int r = 0; r < 2; r++) for (int c = 0; c < 2; c++) is.bread<fpreal64>(&v(r, c), 1); }
    static void  loadData(UT_IStream &is, UT_Matrix3D &v)
    { for (int r = 0; r < 3; r++) for (int c = 0; c < 3; c++) is.bread<fpreal64>(&v(r, c), 1); }
    static void  loadData(UT_IStream &is, UT_Matrix4D &v)
    { for (int r = 0; r < 4; r++) for (int c = 0; c < 4; c++) is.bread<fpreal64>(&v(r, c), 1); }
    static void  loadData(UT_IStream &is, UT_Vector2I &v)
    { is.bread<int64>(&v.x(), 1); is.bread<int64>(&v.y(), 1); }
    static void  loadData(UT_IStream &is, UT_Vector3I &v)
    { is.bread<int64>(&v.x(), 1); is.bread<int64>(&v.y(), 1);
      is.bread<int64>(&v.z(), 1); }
    static void  loadData(UT_IStream &is, UT_Vector4I &v)
    { is.bread<int64>(&v.x(), 1); is.bread<int64>(&v.y(), 1);
      is.bread<int64>(&v.z(), 1); is.bread<int64>(&v.w(), 1); }
    static void  loadData(UT_IStream &is, UT_StringHolder &v)
    { is.bread(v); }
    static void  loadData(UT_IStream &is, UT_SharedPtr<UT_Ramp> &v)
    {   UT_StringHolder   rampdata;
        loadData(is, rampdata);
        if (rampdata.isstring())
        {
            v.reset(new UT_Ramp());
            UT_IStream  istr((const char *) rampdata, rampdata.length(), UT_ISTREAM_ASCII);
            v->load(istr);
        }
        else v.reset();
    }
    static void  loadData(UT_IStream &is, PRM_DataItemHandle &v)
    {   UT_StringHolder   data;
        loadData(is, data);
        if (data.isstring())
        {
            // Find the data type.
            char *colon = UT_StringWrap(data).findChar(':');
            if (colon)
            {
                int             typelen = colon - data.buffer();
                UT_WorkBuffer   type;
                type.strncpy(data.buffer(), typelen);
                UT_IStream  istr(((const char *) data) + typelen + 1, data.length() - (typelen + 1), UT_ISTREAM_BINARY);
                
                v = PRM_DataFactory::parseBinary(type.buffer(), istr);
            }
        }
        else v.reset();
    }

    static void  saveData(std::ostream &os, int64 v)
    { UTwrite(os, &v); }
    static void  saveData(std::ostream &os, bool v)
    { int64 iv = v; UTwrite(os, &iv); }
    static void  saveData(std::ostream &os, fpreal64 v)
    { UTwrite<fpreal64>(os, &v); }
    static void  saveData(std::ostream &os, UT_Vector2D v)
    { UTwrite<fpreal64>(os, &v.x()); UTwrite<fpreal64>(os, &v.y()); }
    static void  saveData(std::ostream &os, UT_Vector3D v)
    { UTwrite<fpreal64>(os, &v.x()); UTwrite<fpreal64>(os, &v.y());
      UTwrite<fpreal64>(os, &v.z()); }
    static void  saveData(std::ostream &os, UT_Vector4D v)
    { UTwrite<fpreal64>(os, &v.x()); UTwrite<fpreal64>(os, &v.y());
      UTwrite<fpreal64>(os, &v.z()); UTwrite<fpreal64>(os, &v.w()); }
    static void  saveData(std::ostream &os, UT_Matrix2D v)
    { for (int r = 0; r < 2; r++) for (int c = 0; c < 2; c++) UTwrite<fpreal64>(os, &v(r, c)); }
    static void  saveData(std::ostream &os, UT_Matrix3D v)
    { for (int r = 0; r < 3; r++) for (int c = 0; c < 3; c++) UTwrite<fpreal64>(os, &v(r, c)); }
    static void  saveData(std::ostream &os, UT_Matrix4D v)
    { for (int r = 0; r < 4; r++) for (int c = 0; c < 4; c++) UTwrite<fpreal64>(os, &v(r, c)); }
    static void  saveData(std::ostream &os, UT_StringHolder s)
    { UT_StringWrap(s).saveBinary(os); }
    static void  saveData(std::ostream &os, UT_SharedPtr<UT_Ramp> s)
    {   UT_StringHolder         result;
        UT_OStringStream        ostr;
        if (s) s->save(ostr);
        result = ostr.str();
        saveData(os, result);
    }
    static void  saveData(std::ostream &os, PRM_DataItemHandle s)
    {   UT_StringHolder         result;
        UT_OStringStream        ostr;
        if (s) 
        {
            ostr << s->getDataTypeToken();
            ostr << ":";
            s->saveBinary(ostr);
        }
        result = ostr.str();
        saveData(os, result);
    }


    void         save(std::ostream &os) const
    {
        int32           v = version();
        UTwrite(os, &v);
        saveData(os, myGroup);
        saveData(os, myToolgroup);
        saveData(os, myCentergroup);
        saveData(os, myCenterprimgroup);
        saveData(os, myToolidname);
        saveData(os, myCenteroverlap);
        saveData(os, myBlendexponent);
        saveData(os, myClampsurfdist);
        saveData(os, myMinsurfdist);
        saveData(os, myTightness);
        saveData(os, myInflatetofarthest);
        saveData(os, myMaxinflateenable);
        saveData(os, myMaxinflate);

    }

    bool         load(UT_IStream &is)
    {
        int32           v;
        is.bread(&v, 1);
        if (version() != v)
        {
            // Fail incompatible versions
            return false;
        }
        loadData(is, myGroup);
        loadData(is, myToolgroup);
        loadData(is, myCentergroup);
        loadData(is, myCenterprimgroup);
        loadData(is, myToolidname);
        loadData(is, myCenteroverlap);
        loadData(is, myBlendexponent);
        loadData(is, myClampsurfdist);
        loadData(is, myMinsurfdist);
        loadData(is, myTightness);
        loadData(is, myInflatetofarthest);
        loadData(is, myMaxinflateenable);
        loadData(is, myMaxinflate);

        return true;
    }

    const UT_StringHolder & getGroup() const { return myGroup; }
    void setGroup(const UT_StringHolder & val) { myGroup = val; }
    UT_StringHolder opGroup(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getGroup();
        UT_StringHolder result;
        OP_Utils::evalOpParm(result, thissop, "group", cookparms.getCookTime(), 0);
        return result;
    }
    const UT_StringHolder & getToolgroup() const { return myToolgroup; }
    void setToolgroup(const UT_StringHolder & val) { myToolgroup = val; }
    UT_StringHolder opToolgroup(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getToolgroup();
        UT_StringHolder result;
        OP_Utils::evalOpParm(result, thissop, "toolgroup", cookparms.getCookTime(), 0);
        return result;
    }
    const UT_StringHolder & getCentergroup() const { return myCentergroup; }
    void setCentergroup(const UT_StringHolder & val) { myCentergroup = val; }
    UT_StringHolder opCentergroup(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getCentergroup();
        UT_StringHolder result;
        OP_Utils::evalOpParm(result, thissop, "centergroup", cookparms.getCookTime(), 0);
        return result;
    }
    const UT_StringHolder & getCenterprimgroup() const { return myCenterprimgroup; }
    void setCenterprimgroup(const UT_StringHolder & val) { myCenterprimgroup = val; }
    UT_StringHolder opCenterprimgroup(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getCenterprimgroup();
        UT_StringHolder result;
        OP_Utils::evalOpParm(result, thissop, "centerprimgroup", cookparms.getCookTime(), 0);
        return result;
    }
    const UT_StringHolder & getToolidname() const { return myToolidname; }
    void setToolidname(const UT_StringHolder & val) { myToolidname = val; }
    UT_StringHolder opToolidname(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getToolidname();
        UT_StringHolder result;
        OP_Utils::evalOpParm(result, thissop, "toolidname", cookparms.getCookTime(), 0);
        return result;
    }
    fpreal64 getCenteroverlap() const { return myCenteroverlap; }
    void setCenteroverlap(fpreal64 val) { myCenteroverlap = val; }
    fpreal64 opCenteroverlap(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getCenteroverlap();
        fpreal64 result;
        OP_Utils::evalOpParm(result, thissop, "centeroverlap", cookparms.getCookTime(), 0);
        return result;
    }
    fpreal64 getBlendexponent() const { return myBlendexponent; }
    void setBlendexponent(fpreal64 val) { myBlendexponent = val; }
    fpreal64 opBlendexponent(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getBlendexponent();
        fpreal64 result;
        OP_Utils::evalOpParm(result, thissop, "blendexponent", cookparms.getCookTime(), 0);
        return result;
    }
    bool getClampsurfdist() const { return myClampsurfdist; }
    void setClampsurfdist(bool val) { myClampsurfdist = val; }
    bool opClampsurfdist(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getClampsurfdist();
        bool result;
        OP_Utils::evalOpParm(result, thissop, "clampsurfdist", cookparms.getCookTime(), 0);
        return result;
    }
    fpreal64 getMinsurfdist() const { return myMinsurfdist; }
    void setMinsurfdist(fpreal64 val) { myMinsurfdist = val; }
    fpreal64 opMinsurfdist(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getMinsurfdist();
        fpreal64 result;
        OP_Utils::evalOpParm(result, thissop, "minsurfdist", cookparms.getCookTime(), 0);
        return result;
    }
    fpreal64 getTightness() const { return myTightness; }
    void setTightness(fpreal64 val) { myTightness = val; }
    fpreal64 opTightness(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getTightness();
        fpreal64 result;
        OP_Utils::evalOpParm(result, thissop, "tightness", cookparms.getCookTime(), 0);
        return result;
    }
    bool getInflatetofarthest() const { return myInflatetofarthest; }
    void setInflatetofarthest(bool val) { myInflatetofarthest = val; }
    bool opInflatetofarthest(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getInflatetofarthest();
        bool result;
        OP_Utils::evalOpParm(result, thissop, "inflatetofarthest", cookparms.getCookTime(), 0);
        return result;
    }
    bool getMaxinflateenable() const { return myMaxinflateenable; }
    void setMaxinflateenable(bool val) { myMaxinflateenable = val; }
    bool opMaxinflateenable(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getMaxinflateenable();
        bool result;
        OP_Utils::evalOpParm(result, thissop, "maxinflateenable", cookparms.getCookTime(), 0);
        return result;
    }
    fpreal64 getMaxinflate() const { return myMaxinflate; }
    void setMaxinflate(fpreal64 val) { myMaxinflate = val; }
    fpreal64 opMaxinflate(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getMaxinflate();
        fpreal64 result;
        OP_Utils::evalOpParm(result, thissop, "maxinflate", cookparms.getCookTime(), 0);
        return result;
    }

private:
    UT_StringHolder myGroup;
    UT_StringHolder myToolgroup;
    UT_StringHolder myCentergroup;
    UT_StringHolder myCenterprimgroup;
    UT_StringHolder myToolidname;
    fpreal64 myCenteroverlap;
    fpreal64 myBlendexponent;
    bool myClampsurfdist;
    fpreal64 myMinsurfdist;
    fpreal64 myTightness;
    bool myInflatetofarthest;
    bool myMaxinflateenable;
    fpreal64 myMaxinflate;

};
