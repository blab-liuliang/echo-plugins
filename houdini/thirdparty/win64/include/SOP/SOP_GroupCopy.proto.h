/* Automagically Generated by generate_proto.py
 * Do not Edit
 */
#pragma once

#include <SOP/SOP_NodeVerb.h>
#include <OP/OP_Utils.h>
#include <PRM/PRM_Parm.h>
#include <UT/UT_IStream.h>
#include <UT/UT_NTStreamUtil.h>
#include <UT/UT_Ramp.h>
#include <UT/UT_SharedPtr.h>
#include <UT/UT_StringHolder.h>
#include <UT/UT_StringStream.h>
#include <UT/UT_VectorTypes.h>
#include <SYS/SYS_Types.h>

using namespace UT::Literal;

class DEP_MicroNode;

class SOP_API SOP_GroupCopyParms  : public SOP_NodeParms
{
public:
    static int version() { return 1; }

    SOP_GroupCopyParms()
    {
        myPrimitives = true;
        myPrimgroups = ""_sh;
        myPrimnameprefix = ""_sh;
        myPoints = true;
        myPointgroups = ""_sh;
        myPointnameprefix = ""_sh;
        myEdges = true;
        myEdgegroups = ""_sh;
        myEdgenameprefix = ""_sh;
        myGroupnameconflict = "skipgroup"_sh;
        myCopyemptygroups = true;

    }

    explicit SOP_GroupCopyParms(const SOP_GroupCopyParms &) = default;

    virtual ~SOP_GroupCopyParms() {}

    bool operator==(const SOP_GroupCopyParms &src) const
    {
        if (myPrimitives != src.myPrimitives) return false;
        if (myPrimgroups != src.myPrimgroups) return false;
        if (myPrimnameprefix != src.myPrimnameprefix) return false;
        if (myPoints != src.myPoints) return false;
        if (myPointgroups != src.myPointgroups) return false;
        if (myPointnameprefix != src.myPointnameprefix) return false;
        if (myEdges != src.myEdges) return false;
        if (myEdgegroups != src.myEdgegroups) return false;
        if (myEdgenameprefix != src.myEdgenameprefix) return false;
        if (myGroupnameconflict != src.myGroupnameconflict) return false;
        if (myCopyemptygroups != src.myCopyemptygroups) return false;

        return true;
    }
    bool operator!=(const SOP_GroupCopyParms &src) const
    {
        return !operator==(src);
    }



    void        buildFromOp(const OP_Node *node, fpreal time, DEP_MicroNode *depnode)
    {
        if (true)
            OP_Utils::evalOpParm(myPrimitives, node, "primitives", time, 0);
        else myPrimitives = true;
        if (true && ( (!(((getPrimitives()==0)))) ) )
            OP_Utils::evalOpParm(myPrimgroups, node, "primgroups", time, 0);
        else myPrimgroups = ""_sh;
        if (true && ( (!(((getPrimitives()==0)))) ) )
            OP_Utils::evalOpParm(myPrimnameprefix, node, "primnameprefix", time, 0);
        else myPrimnameprefix = ""_sh;
        if (true)
            OP_Utils::evalOpParm(myPoints, node, "points", time, 0);
        else myPoints = true;
        if (true && ( (!(((getPoints()==0)))) ) )
            OP_Utils::evalOpParm(myPointgroups, node, "pointgroups", time, 0);
        else myPointgroups = ""_sh;
        if (true && ( (!(((getPoints()==0)))) ) )
            OP_Utils::evalOpParm(myPointnameprefix, node, "pointnameprefix", time, 0);
        else myPointnameprefix = ""_sh;
        if (true)
            OP_Utils::evalOpParm(myEdges, node, "edges", time, 0);
        else myEdges = true;
        if (true && ( (!(((getEdges()==0)))) ) )
            OP_Utils::evalOpParm(myEdgegroups, node, "edgegroups", time, 0);
        else myEdgegroups = ""_sh;
        if (true && ( (!(((getEdges()==0)))) ) )
            OP_Utils::evalOpParm(myEdgenameprefix, node, "edgenameprefix", time, 0);
        else myEdgenameprefix = ""_sh;
        if (true)
            OP_Utils::evalOpParm(myGroupnameconflict, node, "groupnameconflict", time, 0);
        else myGroupnameconflict = "skipgroup"_sh;
        if (true)
            OP_Utils::evalOpParm(myCopyemptygroups, node, "copyemptygroups", time, 0);
        else myCopyemptygroups = true;

    }


    virtual void loadFromOpSubclass(const LoadParms &loadparms)
    {
        buildFromOp(loadparms.node(), loadparms.context().getTime(), loadparms.depnode());
    }


    virtual void copyFrom(const SOP_NodeParms *src)
    {
        *this = *((const SOP_GroupCopyParms *)src);
    }

    template <typename T>
    void
    doGetParmValue(exint idx, T &value) const
    {
        switch (idx)
        {
            case 0:
                coerceValue(value, myPrimitives);
                break;
            case 1:
                coerceValue(value, myPrimgroups);
                break;
            case 2:
                coerceValue(value, myPrimnameprefix);
                break;
            case 3:
                coerceValue(value, myPoints);
                break;
            case 4:
                coerceValue(value, myPointgroups);
                break;
            case 5:
                coerceValue(value, myPointnameprefix);
                break;
            case 6:
                coerceValue(value, myEdges);
                break;
            case 7:
                coerceValue(value, myEdgegroups);
                break;
            case 8:
                coerceValue(value, myEdgenameprefix);
                break;
            case 9:
                coerceValue(value, myGroupnameconflict);
                break;
            case 10:
                coerceValue(value, myCopyemptygroups);
                break;

        }
    }

    void        getParmValue(exint idx, exint &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, fpreal &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Vector2D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Vector3D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Vector4D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Matrix2D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Matrix3D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Matrix4D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_StringHolder &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_SharedPtr<UT_Ramp> &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, PRM_DataItemHandle &value) const
    { doGetParmValue(idx, value); }

    template <typename T>
    void
    doSetParmValue(exint idx, const T &value) 
    {
        switch (idx)
        {
            case 0:
                coerceValue(myPrimitives, value);
                break;
            case 1:
                coerceValue(myPrimgroups, value);
                break;
            case 2:
                coerceValue(myPrimnameprefix, value);
                break;
            case 3:
                coerceValue(myPoints, value);
                break;
            case 4:
                coerceValue(myPointgroups, value);
                break;
            case 5:
                coerceValue(myPointnameprefix, value);
                break;
            case 6:
                coerceValue(myEdges, value);
                break;
            case 7:
                coerceValue(myEdgegroups, value);
                break;
            case 8:
                coerceValue(myEdgenameprefix, value);
                break;
            case 9:
                coerceValue(myGroupnameconflict, value);
                break;
            case 10:
                coerceValue(myCopyemptygroups, value);
                break;

        }
    }

    void        setParmValue(exint idx, const exint &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const fpreal &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Vector2D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Vector3D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Vector4D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Matrix2D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Matrix3D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Matrix4D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_StringHolder &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_SharedPtr<UT_Ramp> &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const PRM_DataItemHandle &value) 
    { doSetParmValue(idx, value); }

    virtual exint    getNumParms() const
    {
        return 11;
    }

    virtual const char *getParmName(exint fieldnum) const
    {
        switch (fieldnum)
        {
            case 0:
                return "primitives";
            case 1:
                return "primgroups";
            case 2:
                return "primnameprefix";
            case 3:
                return "points";
            case 4:
                return "pointgroups";
            case 5:
                return "pointnameprefix";
            case 6:
                return "edges";
            case 7:
                return "edgegroups";
            case 8:
                return "edgenameprefix";
            case 9:
                return "groupnameconflict";
            case 10:
                return "copyemptygroups";

        }
        return 0;
    }

    virtual ParmType getParmType(exint fieldnum) const
    {
        switch (fieldnum)
        {
                case 0:
                    return PARM_INTEGER;
                case 1:
                    return PARM_STRING;
                case 2:
                    return PARM_STRING;
                case 3:
                    return PARM_INTEGER;
                case 4:
                    return PARM_STRING;
                case 5:
                    return PARM_STRING;
                case 6:
                    return PARM_INTEGER;
                case 7:
                    return PARM_STRING;
                case 8:
                    return PARM_STRING;
                case 9:
                    return PARM_STRING;
                case 10:
                    return PARM_INTEGER;

        }
        return PARM_UNSUPPORTED;
    }

    // Boiler plate to load individual types.
    static void  loadData(UT_IStream &is, int64 &v)
    { is.bread(&v, 1); }
    static void  loadData(UT_IStream &is, bool &v)
    { int64     iv; is.bread(&iv, 1); v = iv; }
    static void  loadData(UT_IStream &is, fpreal64 &v)
    { is.bread<fpreal64>(&v, 1); }
    static void  loadData(UT_IStream &is, UT_Vector2D &v)
    { is.bread<fpreal64>(&v.x(), 1); is.bread<fpreal64>(&v.y(), 1); }
    static void  loadData(UT_IStream &is, UT_Vector3D &v)
    { is.bread<fpreal64>(&v.x(), 1); is.bread<fpreal64>(&v.y(), 1);
      is.bread<fpreal64>(&v.z(), 1); }
    static void  loadData(UT_IStream &is, UT_Vector4D &v)
    { is.bread<fpreal64>(&v.x(), 1); is.bread<fpreal64>(&v.y(), 1);
      is.bread<fpreal64>(&v.z(), 1); is.bread<fpreal64>(&v.w(), 1); }
    static void  loadData(UT_IStream &is, UT_Matrix2D &v)
    { for (int r = 0; r < 2; r++) for (int c = 0; c < 2; c++) is.bread<fpreal64>(&v(r, c), 1); }
    static void  loadData(UT_IStream &is, UT_Matrix3D &v)
    { for (int r = 0; r < 3; r++) for (int c = 0; c < 3; c++) is.bread<fpreal64>(&v(r, c), 1); }
    static void  loadData(UT_IStream &is, UT_Matrix4D &v)
    { for (int r = 0; r < 4; r++) for (int c = 0; c < 4; c++) is.bread<fpreal64>(&v(r, c), 1); }
    static void  loadData(UT_IStream &is, UT_Vector2I &v)
    { is.bread<int64>(&v.x(), 1); is.bread<int64>(&v.y(), 1); }
    static void  loadData(UT_IStream &is, UT_Vector3I &v)
    { is.bread<int64>(&v.x(), 1); is.bread<int64>(&v.y(), 1);
      is.bread<int64>(&v.z(), 1); }
    static void  loadData(UT_IStream &is, UT_Vector4I &v)
    { is.bread<int64>(&v.x(), 1); is.bread<int64>(&v.y(), 1);
      is.bread<int64>(&v.z(), 1); is.bread<int64>(&v.w(), 1); }
    static void  loadData(UT_IStream &is, UT_StringHolder &v)
    { is.bread(v); }
    static void  loadData(UT_IStream &is, UT_SharedPtr<UT_Ramp> &v)
    {   UT_StringHolder   rampdata;
        loadData(is, rampdata);
        if (rampdata.isstring())
        {
            v.reset(new UT_Ramp());
            UT_IStream  istr((const char *) rampdata, rampdata.length(), UT_ISTREAM_ASCII);
            v->load(istr);
        }
        else v.reset();
    }
    static void  loadData(UT_IStream &is, PRM_DataItemHandle &v)
    {   UT_StringHolder   data;
        loadData(is, data);
        if (data.isstring())
        {
            // Find the data type.
            char *colon = UT_StringWrap(data).findChar(':');
            if (colon)
            {
                int             typelen = colon - data.buffer();
                UT_WorkBuffer   type;
                type.strncpy(data.buffer(), typelen);
                UT_IStream  istr(((const char *) data) + typelen + 1, data.length() - (typelen + 1), UT_ISTREAM_BINARY);
                
                v = PRM_DataFactory::parseBinary(type.buffer(), istr);
            }
        }
        else v.reset();
    }

    static void  saveData(std::ostream &os, int64 v)
    { UTwrite(os, &v); }
    static void  saveData(std::ostream &os, bool v)
    { int64 iv = v; UTwrite(os, &iv); }
    static void  saveData(std::ostream &os, fpreal64 v)
    { UTwrite<fpreal64>(os, &v); }
    static void  saveData(std::ostream &os, UT_Vector2D v)
    { UTwrite<fpreal64>(os, &v.x()); UTwrite<fpreal64>(os, &v.y()); }
    static void  saveData(std::ostream &os, UT_Vector3D v)
    { UTwrite<fpreal64>(os, &v.x()); UTwrite<fpreal64>(os, &v.y());
      UTwrite<fpreal64>(os, &v.z()); }
    static void  saveData(std::ostream &os, UT_Vector4D v)
    { UTwrite<fpreal64>(os, &v.x()); UTwrite<fpreal64>(os, &v.y());
      UTwrite<fpreal64>(os, &v.z()); UTwrite<fpreal64>(os, &v.w()); }
    static void  saveData(std::ostream &os, UT_Matrix2D v)
    { for (int r = 0; r < 2; r++) for (int c = 0; c < 2; c++) UTwrite<fpreal64>(os, &v(r, c)); }
    static void  saveData(std::ostream &os, UT_Matrix3D v)
    { for (int r = 0; r < 3; r++) for (int c = 0; c < 3; c++) UTwrite<fpreal64>(os, &v(r, c)); }
    static void  saveData(std::ostream &os, UT_Matrix4D v)
    { for (int r = 0; r < 4; r++) for (int c = 0; c < 4; c++) UTwrite<fpreal64>(os, &v(r, c)); }
    static void  saveData(std::ostream &os, UT_StringHolder s)
    { UT_StringWrap(s).saveBinary(os); }
    static void  saveData(std::ostream &os, UT_SharedPtr<UT_Ramp> s)
    {   UT_StringHolder         result;
        UT_OStringStream        ostr;
        if (s) s->save(ostr);
        result = ostr.str();
        saveData(os, result);
    }
    static void  saveData(std::ostream &os, PRM_DataItemHandle s)
    {   UT_StringHolder         result;
        UT_OStringStream        ostr;
        if (s) 
        {
            ostr << s->getDataTypeToken();
            ostr << ":";
            s->saveBinary(ostr);
        }
        result = ostr.str();
        saveData(os, result);
    }


    void         save(std::ostream &os) const
    {
        int32           v = version();
        UTwrite(os, &v);
        saveData(os, myPrimitives);
        saveData(os, myPrimgroups);
        saveData(os, myPrimnameprefix);
        saveData(os, myPoints);
        saveData(os, myPointgroups);
        saveData(os, myPointnameprefix);
        saveData(os, myEdges);
        saveData(os, myEdgegroups);
        saveData(os, myEdgenameprefix);
        saveData(os, myGroupnameconflict);
        saveData(os, myCopyemptygroups);

    }

    bool         load(UT_IStream &is)
    {
        int32           v;
        is.bread(&v, 1);
        if (version() != v)
        {
            // Fail incompatible versions
            return false;
        }
        loadData(is, myPrimitives);
        loadData(is, myPrimgroups);
        loadData(is, myPrimnameprefix);
        loadData(is, myPoints);
        loadData(is, myPointgroups);
        loadData(is, myPointnameprefix);
        loadData(is, myEdges);
        loadData(is, myEdgegroups);
        loadData(is, myEdgenameprefix);
        loadData(is, myGroupnameconflict);
        loadData(is, myCopyemptygroups);

        return true;
    }

    bool getPrimitives() const { return myPrimitives; }
    void setPrimitives(bool val) { myPrimitives = val; }
    bool opPrimitives(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getPrimitives();
        bool result;
        OP_Utils::evalOpParm(result, thissop, "primitives", cookparms.getCookTime(), 0);
        return result;
    }
    const UT_StringHolder & getPrimgroups() const { return myPrimgroups; }
    void setPrimgroups(const UT_StringHolder & val) { myPrimgroups = val; }
    UT_StringHolder opPrimgroups(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getPrimgroups();
        UT_StringHolder result;
        OP_Utils::evalOpParm(result, thissop, "primgroups", cookparms.getCookTime(), 0);
        return result;
    }
    const UT_StringHolder & getPrimnameprefix() const { return myPrimnameprefix; }
    void setPrimnameprefix(const UT_StringHolder & val) { myPrimnameprefix = val; }
    UT_StringHolder opPrimnameprefix(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getPrimnameprefix();
        UT_StringHolder result;
        OP_Utils::evalOpParm(result, thissop, "primnameprefix", cookparms.getCookTime(), 0);
        return result;
    }
    bool getPoints() const { return myPoints; }
    void setPoints(bool val) { myPoints = val; }
    bool opPoints(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getPoints();
        bool result;
        OP_Utils::evalOpParm(result, thissop, "points", cookparms.getCookTime(), 0);
        return result;
    }
    const UT_StringHolder & getPointgroups() const { return myPointgroups; }
    void setPointgroups(const UT_StringHolder & val) { myPointgroups = val; }
    UT_StringHolder opPointgroups(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getPointgroups();
        UT_StringHolder result;
        OP_Utils::evalOpParm(result, thissop, "pointgroups", cookparms.getCookTime(), 0);
        return result;
    }
    const UT_StringHolder & getPointnameprefix() const { return myPointnameprefix; }
    void setPointnameprefix(const UT_StringHolder & val) { myPointnameprefix = val; }
    UT_StringHolder opPointnameprefix(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getPointnameprefix();
        UT_StringHolder result;
        OP_Utils::evalOpParm(result, thissop, "pointnameprefix", cookparms.getCookTime(), 0);
        return result;
    }
    bool getEdges() const { return myEdges; }
    void setEdges(bool val) { myEdges = val; }
    bool opEdges(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getEdges();
        bool result;
        OP_Utils::evalOpParm(result, thissop, "edges", cookparms.getCookTime(), 0);
        return result;
    }
    const UT_StringHolder & getEdgegroups() const { return myEdgegroups; }
    void setEdgegroups(const UT_StringHolder & val) { myEdgegroups = val; }
    UT_StringHolder opEdgegroups(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getEdgegroups();
        UT_StringHolder result;
        OP_Utils::evalOpParm(result, thissop, "edgegroups", cookparms.getCookTime(), 0);
        return result;
    }
    const UT_StringHolder & getEdgenameprefix() const { return myEdgenameprefix; }
    void setEdgenameprefix(const UT_StringHolder & val) { myEdgenameprefix = val; }
    UT_StringHolder opEdgenameprefix(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getEdgenameprefix();
        UT_StringHolder result;
        OP_Utils::evalOpParm(result, thissop, "edgenameprefix", cookparms.getCookTime(), 0);
        return result;
    }
    const UT_StringHolder & getGroupnameconflict() const { return myGroupnameconflict; }
    void setGroupnameconflict(const UT_StringHolder & val) { myGroupnameconflict = val; }
    UT_StringHolder opGroupnameconflict(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getGroupnameconflict();
        UT_StringHolder result;
        OP_Utils::evalOpParm(result, thissop, "groupnameconflict", cookparms.getCookTime(), 0);
        return result;
    }
    bool getCopyemptygroups() const { return myCopyemptygroups; }
    void setCopyemptygroups(bool val) { myCopyemptygroups = val; }
    bool opCopyemptygroups(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getCopyemptygroups();
        bool result;
        OP_Utils::evalOpParm(result, thissop, "copyemptygroups", cookparms.getCookTime(), 0);
        return result;
    }

private:
    bool myPrimitives;
    UT_StringHolder myPrimgroups;
    UT_StringHolder myPrimnameprefix;
    bool myPoints;
    UT_StringHolder myPointgroups;
    UT_StringHolder myPointnameprefix;
    bool myEdges;
    UT_StringHolder myEdgegroups;
    UT_StringHolder myEdgenameprefix;
    UT_StringHolder myGroupnameconflict;
    bool myCopyemptygroups;

};
