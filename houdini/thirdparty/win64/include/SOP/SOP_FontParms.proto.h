/* Automagically Generated by generate_proto.py
 * Do not Edit
 */
#pragma once

#include <SOP/SOP_NodeVerb.h>
#include <OP/OP_Utils.h>
#include <PRM/PRM_Parm.h>
#include <UT/UT_IStream.h>
#include <UT/UT_NTStreamUtil.h>
#include <UT/UT_Ramp.h>
#include <UT/UT_SharedPtr.h>
#include <UT/UT_StringHolder.h>
#include <UT/UT_StringStream.h>
#include <UT/UT_VectorTypes.h>
#include <SYS/SYS_Types.h>

using namespace UT::Literal;

class DEP_MicroNode;

class SOP_API SOP_FontParms  : public SOP_NodeParms
{
public:
    static int version() { return 1; }

    SOP_FontParms()
    {
        myType = 2;
        myFontFile = "Helvetica Bold"_sh;
        myText = "Frame: $F"_sh;
        myHAlign = 1;
        myVAlign = 2;
        myUseDescender = false;
        myTranslate = 0;
        myRotate = 0;
        myScale = 1;
        myFontSize = 1;
        myTracking = 0;
        myAutoKern = true;
        myOblique = 0;
        myLOD = 1;
        myHole = true;
        myAddAttrib = false;

    }

    explicit SOP_FontParms(const SOP_FontParms &) = default;

    virtual ~SOP_FontParms() {}

    bool operator==(const SOP_FontParms &src) const
    {
        if (myType != src.myType) return false;
        if (myFontFile != src.myFontFile) return false;
        if (myText != src.myText) return false;
        if (myHAlign != src.myHAlign) return false;
        if (myVAlign != src.myVAlign) return false;
        if (myUseDescender != src.myUseDescender) return false;
        if (myTranslate != src.myTranslate) return false;
        if (myRotate != src.myRotate) return false;
        if (myScale != src.myScale) return false;
        if (myFontSize != src.myFontSize) return false;
        if (myTracking != src.myTracking) return false;
        if (myAutoKern != src.myAutoKern) return false;
        if (myOblique != src.myOblique) return false;
        if (myLOD != src.myLOD) return false;
        if (myHole != src.myHole) return false;
        if (myAddAttrib != src.myAddAttrib) return false;

        return true;
    }
    bool operator!=(const SOP_FontParms &src) const
    {
        return !operator==(src);
    }



    void        buildFromOp(const OP_Node *node, fpreal time, DEP_MicroNode *depnode)
    {
        if (true)
            OP_Utils::evalOpParm(myType, node, "type", time, 0);
        else myType = 2;
        if (true)
            OP_Utils::evalOpParm(myFontFile, node, "file", time, 0);
        else myFontFile = "Helvetica Bold"_sh;
        if (true)
            OP_Utils::evalOpParm(myText, node, "text", time, 0);
        else myText = "Frame: $F"_sh;
        if (true)
            OP_Utils::evalOpParm(myHAlign, node, "halign", time, 0);
        else myHAlign = 1;
        if (true)
            OP_Utils::evalOpParm(myVAlign, node, "valign", time, 0);
        else myVAlign = 2;
        if (true)
            OP_Utils::evalOpParm(myUseDescender, node, "use_descender", time, 0);
        else myUseDescender = false;
        if (true)
            OP_Utils::evalOpParm(myTranslate, node, "t", time, 0);
        else myTranslate = 0;
        if (true)
            OP_Utils::evalOpParm(myRotate, node, "r", time, 0);
        else myRotate = 0;
        if (true)
            OP_Utils::evalOpParm(myScale, node, "s", time, 0);
        else myScale = 1;
        if (true)
            OP_Utils::evalOpParm(myFontSize, node, "fontsize", time, 0);
        else myFontSize = 1;
        if (true)
            OP_Utils::evalOpParm(myTracking, node, "tracking", time, 0);
        else myTracking = 0;
        if (true)
            OP_Utils::evalOpParm(myAutoKern, node, "autokern", time, 0);
        else myAutoKern = true;
        if (true)
            OP_Utils::evalOpParm(myOblique, node, "oblique", time, 0);
        else myOblique = 0;
        if (true)
            OP_Utils::evalOpParm(myLOD, node, "lod", time, 0);
        else myLOD = 1;
        if (true)
            OP_Utils::evalOpParm(myHole, node, "hole", time, 0);
        else myHole = true;
        if (true)
            OP_Utils::evalOpParm(myAddAttrib, node, "addattrib", time, 0);
        else myAddAttrib = false;

    }


    virtual void loadFromOpSubclass(const LoadParms &loadparms)
    {
        buildFromOp(loadparms.node(), loadparms.context().getTime(), loadparms.depnode());
    }


    virtual void copyFrom(const SOP_NodeParms *src)
    {
        *this = *((const SOP_FontParms *)src);
    }

    template <typename T>
    void
    doGetParmValue(exint idx, T &value) const
    {
        switch (idx)
        {
            case 0:
                coerceValue(value, myType);
                break;
            case 1:
                coerceValue(value, myFontFile);
                break;
            case 2:
                coerceValue(value, myText);
                break;
            case 3:
                coerceValue(value, myHAlign);
                break;
            case 4:
                coerceValue(value, myVAlign);
                break;
            case 5:
                coerceValue(value, myUseDescender);
                break;
            case 6:
                coerceValue(value, myTranslate);
                break;
            case 7:
                coerceValue(value, myRotate);
                break;
            case 8:
                coerceValue(value, myScale);
                break;
            case 9:
                coerceValue(value, myFontSize);
                break;
            case 10:
                coerceValue(value, myTracking);
                break;
            case 11:
                coerceValue(value, myAutoKern);
                break;
            case 12:
                coerceValue(value, myOblique);
                break;
            case 13:
                coerceValue(value, myLOD);
                break;
            case 14:
                coerceValue(value, myHole);
                break;
            case 15:
                coerceValue(value, myAddAttrib);
                break;

        }
    }

    void        getParmValue(exint idx, exint &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, fpreal &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Vector2D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Vector3D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Vector4D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Matrix2D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Matrix3D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Matrix4D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_StringHolder &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_SharedPtr<UT_Ramp> &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, PRM_DataItemHandle &value) const
    { doGetParmValue(idx, value); }

    template <typename T>
    void
    doSetParmValue(exint idx, const T &value) 
    {
        switch (idx)
        {
            case 0:
                coerceValue(myType, value);
                break;
            case 1:
                coerceValue(myFontFile, value);
                break;
            case 2:
                coerceValue(myText, value);
                break;
            case 3:
                coerceValue(myHAlign, value);
                break;
            case 4:
                coerceValue(myVAlign, value);
                break;
            case 5:
                coerceValue(myUseDescender, value);
                break;
            case 6:
                coerceValue(myTranslate, value);
                break;
            case 7:
                coerceValue(myRotate, value);
                break;
            case 8:
                coerceValue(myScale, value);
                break;
            case 9:
                coerceValue(myFontSize, value);
                break;
            case 10:
                coerceValue(myTracking, value);
                break;
            case 11:
                coerceValue(myAutoKern, value);
                break;
            case 12:
                coerceValue(myOblique, value);
                break;
            case 13:
                coerceValue(myLOD, value);
                break;
            case 14:
                coerceValue(myHole, value);
                break;
            case 15:
                coerceValue(myAddAttrib, value);
                break;

        }
    }

    void        setParmValue(exint idx, const exint &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const fpreal &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Vector2D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Vector3D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Vector4D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Matrix2D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Matrix3D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Matrix4D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_StringHolder &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_SharedPtr<UT_Ramp> &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const PRM_DataItemHandle &value) 
    { doSetParmValue(idx, value); }

    virtual exint    getNumParms() const
    {
        return 16;
    }

    virtual const char *getParmName(exint fieldnum) const
    {
        switch (fieldnum)
        {
            case 0:
                return "type";
            case 1:
                return "file";
            case 2:
                return "text";
            case 3:
                return "halign";
            case 4:
                return "valign";
            case 5:
                return "use_descender";
            case 6:
                return "t";
            case 7:
                return "r";
            case 8:
                return "s";
            case 9:
                return "fontsize";
            case 10:
                return "tracking";
            case 11:
                return "autokern";
            case 12:
                return "oblique";
            case 13:
                return "lod";
            case 14:
                return "hole";
            case 15:
                return "addattrib";

        }
        return 0;
    }

    virtual ParmType getParmType(exint fieldnum) const
    {
        switch (fieldnum)
        {
                case 0:
                    return PARM_INTEGER;
                case 1:
                    return PARM_STRING;
                case 2:
                    return PARM_STRING;
                case 3:
                    return PARM_INTEGER;
                case 4:
                    return PARM_INTEGER;
                case 5:
                    return PARM_INTEGER;
                case 6:
                    return PARM_VECTOR3;
                case 7:
                    return PARM_VECTOR3;
                case 8:
                    return PARM_VECTOR2;
                case 9:
                    return PARM_FLOAT;
                case 10:
                    return PARM_VECTOR2;
                case 11:
                    return PARM_INTEGER;
                case 12:
                    return PARM_FLOAT;
                case 13:
                    return PARM_FLOAT;
                case 14:
                    return PARM_INTEGER;
                case 15:
                    return PARM_INTEGER;

        }
        return PARM_UNSUPPORTED;
    }

    // Boiler plate to load individual types.
    static void  loadData(UT_IStream &is, int64 &v)
    { is.bread(&v, 1); }
    static void  loadData(UT_IStream &is, bool &v)
    { int64     iv; is.bread(&iv, 1); v = iv; }
    static void  loadData(UT_IStream &is, fpreal64 &v)
    { is.bread<fpreal64>(&v, 1); }
    static void  loadData(UT_IStream &is, UT_Vector2D &v)
    { is.bread<fpreal64>(&v.x(), 1); is.bread<fpreal64>(&v.y(), 1); }
    static void  loadData(UT_IStream &is, UT_Vector3D &v)
    { is.bread<fpreal64>(&v.x(), 1); is.bread<fpreal64>(&v.y(), 1);
      is.bread<fpreal64>(&v.z(), 1); }
    static void  loadData(UT_IStream &is, UT_Vector4D &v)
    { is.bread<fpreal64>(&v.x(), 1); is.bread<fpreal64>(&v.y(), 1);
      is.bread<fpreal64>(&v.z(), 1); is.bread<fpreal64>(&v.w(), 1); }
    static void  loadData(UT_IStream &is, UT_Matrix2D &v)
    { for (int r = 0; r < 2; r++) for (int c = 0; c < 2; c++) is.bread<fpreal64>(&v(r, c), 1); }
    static void  loadData(UT_IStream &is, UT_Matrix3D &v)
    { for (int r = 0; r < 3; r++) for (int c = 0; c < 3; c++) is.bread<fpreal64>(&v(r, c), 1); }
    static void  loadData(UT_IStream &is, UT_Matrix4D &v)
    { for (int r = 0; r < 4; r++) for (int c = 0; c < 4; c++) is.bread<fpreal64>(&v(r, c), 1); }
    static void  loadData(UT_IStream &is, UT_Vector2I &v)
    { is.bread<int64>(&v.x(), 1); is.bread<int64>(&v.y(), 1); }
    static void  loadData(UT_IStream &is, UT_Vector3I &v)
    { is.bread<int64>(&v.x(), 1); is.bread<int64>(&v.y(), 1);
      is.bread<int64>(&v.z(), 1); }
    static void  loadData(UT_IStream &is, UT_Vector4I &v)
    { is.bread<int64>(&v.x(), 1); is.bread<int64>(&v.y(), 1);
      is.bread<int64>(&v.z(), 1); is.bread<int64>(&v.w(), 1); }
    static void  loadData(UT_IStream &is, UT_StringHolder &v)
    { is.bread(v); }
    static void  loadData(UT_IStream &is, UT_SharedPtr<UT_Ramp> &v)
    {   UT_StringHolder   rampdata;
        loadData(is, rampdata);
        if (rampdata.isstring())
        {
            v.reset(new UT_Ramp());
            UT_IStream  istr((const char *) rampdata, rampdata.length(), UT_ISTREAM_ASCII);
            v->load(istr);
        }
        else v.reset();
    }
    static void  loadData(UT_IStream &is, PRM_DataItemHandle &v)
    {   UT_StringHolder   data;
        loadData(is, data);
        if (data.isstring())
        {
            // Find the data type.
            char *colon = UT_StringWrap(data).findChar(':');
            if (colon)
            {
                int             typelen = colon - data.buffer();
                UT_WorkBuffer   type;
                type.strncpy(data.buffer(), typelen);
                UT_IStream  istr(((const char *) data) + typelen + 1, data.length() - (typelen + 1), UT_ISTREAM_BINARY);
                
                v = PRM_DataFactory::parseBinary(type.buffer(), istr);
            }
        }
        else v.reset();
    }

    static void  saveData(std::ostream &os, int64 v)
    { UTwrite(os, &v); }
    static void  saveData(std::ostream &os, bool v)
    { int64 iv = v; UTwrite(os, &iv); }
    static void  saveData(std::ostream &os, fpreal64 v)
    { UTwrite<fpreal64>(os, &v); }
    static void  saveData(std::ostream &os, UT_Vector2D v)
    { UTwrite<fpreal64>(os, &v.x()); UTwrite<fpreal64>(os, &v.y()); }
    static void  saveData(std::ostream &os, UT_Vector3D v)
    { UTwrite<fpreal64>(os, &v.x()); UTwrite<fpreal64>(os, &v.y());
      UTwrite<fpreal64>(os, &v.z()); }
    static void  saveData(std::ostream &os, UT_Vector4D v)
    { UTwrite<fpreal64>(os, &v.x()); UTwrite<fpreal64>(os, &v.y());
      UTwrite<fpreal64>(os, &v.z()); UTwrite<fpreal64>(os, &v.w()); }
    static void  saveData(std::ostream &os, UT_Matrix2D v)
    { for (int r = 0; r < 2; r++) for (int c = 0; c < 2; c++) UTwrite<fpreal64>(os, &v(r, c)); }
    static void  saveData(std::ostream &os, UT_Matrix3D v)
    { for (int r = 0; r < 3; r++) for (int c = 0; c < 3; c++) UTwrite<fpreal64>(os, &v(r, c)); }
    static void  saveData(std::ostream &os, UT_Matrix4D v)
    { for (int r = 0; r < 4; r++) for (int c = 0; c < 4; c++) UTwrite<fpreal64>(os, &v(r, c)); }
    static void  saveData(std::ostream &os, UT_StringHolder s)
    { UT_StringWrap(s).saveBinary(os); }
    static void  saveData(std::ostream &os, UT_SharedPtr<UT_Ramp> s)
    {   UT_StringHolder         result;
        UT_OStringStream        ostr;
        if (s) s->save(ostr);
        result = ostr.str();
        saveData(os, result);
    }
    static void  saveData(std::ostream &os, PRM_DataItemHandle s)
    {   UT_StringHolder         result;
        UT_OStringStream        ostr;
        if (s) 
        {
            ostr << s->getDataTypeToken();
            ostr << ":";
            s->saveBinary(ostr);
        }
        result = ostr.str();
        saveData(os, result);
    }


    void         save(std::ostream &os) const
    {
        int32           v = version();
        UTwrite(os, &v);
        saveData(os, myType);
        saveData(os, myFontFile);
        saveData(os, myText);
        saveData(os, myHAlign);
        saveData(os, myVAlign);
        saveData(os, myUseDescender);
        saveData(os, myTranslate);
        saveData(os, myRotate);
        saveData(os, myScale);
        saveData(os, myFontSize);
        saveData(os, myTracking);
        saveData(os, myAutoKern);
        saveData(os, myOblique);
        saveData(os, myLOD);
        saveData(os, myHole);
        saveData(os, myAddAttrib);

    }

    bool         load(UT_IStream &is)
    {
        int32           v;
        is.bread(&v, 1);
        if (version() != v)
        {
            // Fail incompatible versions
            return false;
        }
        loadData(is, myType);
        loadData(is, myFontFile);
        loadData(is, myText);
        loadData(is, myHAlign);
        loadData(is, myVAlign);
        loadData(is, myUseDescender);
        loadData(is, myTranslate);
        loadData(is, myRotate);
        loadData(is, myScale);
        loadData(is, myFontSize);
        loadData(is, myTracking);
        loadData(is, myAutoKern);
        loadData(is, myOblique);
        loadData(is, myLOD);
        loadData(is, myHole);
        loadData(is, myAddAttrib);

        return true;
    }

    int64 getType() const { return myType; }
    void setType(int64 val) { myType = val; }
    int64 opType(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getType();
        int64 result;
        OP_Utils::evalOpParm(result, thissop, "type", cookparms.getCookTime(), 0);
        return result;
    }
    const UT_StringHolder & getFontFile() const { return myFontFile; }
    void setFontFile(const UT_StringHolder & val) { myFontFile = val; }
    UT_StringHolder opFontFile(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getFontFile();
        UT_StringHolder result;
        OP_Utils::evalOpParm(result, thissop, "file", cookparms.getCookTime(), 0);
        return result;
    }
    const UT_StringHolder & getText() const { return myText; }
    void setText(const UT_StringHolder & val) { myText = val; }
    UT_StringHolder opText(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getText();
        UT_StringHolder result;
        OP_Utils::evalOpParm(result, thissop, "text", cookparms.getCookTime(), 0);
        return result;
    }
    int64 getHAlign() const { return myHAlign; }
    void setHAlign(int64 val) { myHAlign = val; }
    int64 opHAlign(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getHAlign();
        int64 result;
        OP_Utils::evalOpParm(result, thissop, "halign", cookparms.getCookTime(), 0);
        return result;
    }
    int64 getVAlign() const { return myVAlign; }
    void setVAlign(int64 val) { myVAlign = val; }
    int64 opVAlign(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getVAlign();
        int64 result;
        OP_Utils::evalOpParm(result, thissop, "valign", cookparms.getCookTime(), 0);
        return result;
    }
    bool getUseDescender() const { return myUseDescender; }
    void setUseDescender(bool val) { myUseDescender = val; }
    bool opUseDescender(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getUseDescender();
        bool result;
        OP_Utils::evalOpParm(result, thissop, "use_descender", cookparms.getCookTime(), 0);
        return result;
    }
    UT_Vector3D getTranslate() const { return myTranslate; }
    void setTranslate(UT_Vector3D val) { myTranslate = val; }
    UT_Vector3D opTranslate(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getTranslate();
        UT_Vector3D result;
        OP_Utils::evalOpParm(result, thissop, "t", cookparms.getCookTime(), 0);
        return result;
    }
    UT_Vector3D getRotate() const { return myRotate; }
    void setRotate(UT_Vector3D val) { myRotate = val; }
    UT_Vector3D opRotate(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getRotate();
        UT_Vector3D result;
        OP_Utils::evalOpParm(result, thissop, "r", cookparms.getCookTime(), 0);
        return result;
    }
    UT_Vector2D getScale() const { return myScale; }
    void setScale(UT_Vector2D val) { myScale = val; }
    UT_Vector2D opScale(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getScale();
        UT_Vector2D result;
        OP_Utils::evalOpParm(result, thissop, "s", cookparms.getCookTime(), 0);
        return result;
    }
    fpreal64 getFontSize() const { return myFontSize; }
    void setFontSize(fpreal64 val) { myFontSize = val; }
    fpreal64 opFontSize(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getFontSize();
        fpreal64 result;
        OP_Utils::evalOpParm(result, thissop, "fontsize", cookparms.getCookTime(), 0);
        return result;
    }
    UT_Vector2D getTracking() const { return myTracking; }
    void setTracking(UT_Vector2D val) { myTracking = val; }
    UT_Vector2D opTracking(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getTracking();
        UT_Vector2D result;
        OP_Utils::evalOpParm(result, thissop, "tracking", cookparms.getCookTime(), 0);
        return result;
    }
    bool getAutoKern() const { return myAutoKern; }
    void setAutoKern(bool val) { myAutoKern = val; }
    bool opAutoKern(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getAutoKern();
        bool result;
        OP_Utils::evalOpParm(result, thissop, "autokern", cookparms.getCookTime(), 0);
        return result;
    }
    fpreal64 getOblique() const { return myOblique; }
    void setOblique(fpreal64 val) { myOblique = val; }
    fpreal64 opOblique(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getOblique();
        fpreal64 result;
        OP_Utils::evalOpParm(result, thissop, "oblique", cookparms.getCookTime(), 0);
        return result;
    }
    fpreal64 getLOD() const { return myLOD; }
    void setLOD(fpreal64 val) { myLOD = val; }
    fpreal64 opLOD(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getLOD();
        fpreal64 result;
        OP_Utils::evalOpParm(result, thissop, "lod", cookparms.getCookTime(), 0);
        return result;
    }
    bool getHole() const { return myHole; }
    void setHole(bool val) { myHole = val; }
    bool opHole(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getHole();
        bool result;
        OP_Utils::evalOpParm(result, thissop, "hole", cookparms.getCookTime(), 0);
        return result;
    }
    bool getAddAttrib() const { return myAddAttrib; }
    void setAddAttrib(bool val) { myAddAttrib = val; }
    bool opAddAttrib(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getAddAttrib();
        bool result;
        OP_Utils::evalOpParm(result, thissop, "addattrib", cookparms.getCookTime(), 0);
        return result;
    }

private:
    int64 myType;
    UT_StringHolder myFontFile;
    UT_StringHolder myText;
    int64 myHAlign;
    int64 myVAlign;
    bool myUseDescender;
    UT_Vector3D myTranslate;
    UT_Vector3D myRotate;
    UT_Vector2D myScale;
    fpreal64 myFontSize;
    UT_Vector2D myTracking;
    bool myAutoKern;
    fpreal64 myOblique;
    fpreal64 myLOD;
    bool myHole;
    bool myAddAttrib;

};
