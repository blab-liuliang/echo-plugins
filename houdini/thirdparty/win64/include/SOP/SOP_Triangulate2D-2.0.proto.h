/* Automagically Generated by generate_proto.py
 * Do not Edit
 */
#pragma once

#include <SOP/SOP_NodeVerb.h>
#include <OP/OP_Utils.h>
#include <PRM/PRM_Parm.h>
#include <UT/UT_IStream.h>
#include <UT/UT_NTStreamUtil.h>
#include <UT/UT_Ramp.h>
#include <UT/UT_SharedPtr.h>
#include <UT/UT_StringHolder.h>
#include <UT/UT_StringStream.h>
#include <UT/UT_VectorTypes.h>
#include <SYS/SYS_Types.h>

using namespace UT::Literal;

class DEP_MicroNode;
namespace SOP_Triangulate2D_2_0Enums
{
    enum class Planepossrc
    {
        FITPLANE = 0,
        SETPROJPLANE,
        USEATTRIB
    };
}


class SOP_API SOP_Triangulate2D_2_0Parms  : public SOP_NodeParms
{
public:
    static int version() { return 1; }

    SOP_Triangulate2D_2_0Parms()
    {
        myPoints = ""_sh;
        myPlanepossrc = 0;
        myOrigin = UT_Vector3D(0,0,0);
        myDist = 0;
        myDir = UT_Vector3D(0,1,0);
        myPos2attrib = ""_sh;
        myRestorepos = false;
        myKeepprims = false;
        myUpdatenmls = false;
        myRemoveunusedpoints = false;
        myRemoveduplicatepoints = false;
        myRandseed = 5678;
        myConprims = ""_sh;
        myConedges = ""_sh;
        myRemoveconvhull = false;
        myRemoveoutcons = false;
        myDontremoveincons = false;
        myRefine = false;
        myMaxarea = 10000;
        myMinangle = 0;
        myMinedgelength = 0.001;
        myMaxnewpts = 5000;
        myNonewconpts = false;
        myMakenewconptgrp = false;
        myNewconptgrp = "newconpoints"_sh;
        myMakenewconedgegrp = false;
        myOutconedgegrp = "outconedges"_sh;

    }

    explicit SOP_Triangulate2D_2_0Parms(const SOP_Triangulate2D_2_0Parms &) = default;

    virtual ~SOP_Triangulate2D_2_0Parms() {}

    bool operator==(const SOP_Triangulate2D_2_0Parms &src) const
    {
        if (myPoints != src.myPoints) return false;
        if (myPlanepossrc != src.myPlanepossrc) return false;
        if (myOrigin != src.myOrigin) return false;
        if (myDist != src.myDist) return false;
        if (myDir != src.myDir) return false;
        if (myPos2attrib != src.myPos2attrib) return false;
        if (myRestorepos != src.myRestorepos) return false;
        if (myKeepprims != src.myKeepprims) return false;
        if (myUpdatenmls != src.myUpdatenmls) return false;
        if (myRemoveunusedpoints != src.myRemoveunusedpoints) return false;
        if (myRemoveduplicatepoints != src.myRemoveduplicatepoints) return false;
        if (myRandseed != src.myRandseed) return false;
        if (myConprims != src.myConprims) return false;
        if (myConedges != src.myConedges) return false;
        if (myRemoveconvhull != src.myRemoveconvhull) return false;
        if (myRemoveoutcons != src.myRemoveoutcons) return false;
        if (myDontremoveincons != src.myDontremoveincons) return false;
        if (myRefine != src.myRefine) return false;
        if (myMaxarea != src.myMaxarea) return false;
        if (myMinangle != src.myMinangle) return false;
        if (myMinedgelength != src.myMinedgelength) return false;
        if (myMaxnewpts != src.myMaxnewpts) return false;
        if (myNonewconpts != src.myNonewconpts) return false;
        if (myMakenewconptgrp != src.myMakenewconptgrp) return false;
        if (myNewconptgrp != src.myNewconptgrp) return false;
        if (myMakenewconedgegrp != src.myMakenewconedgegrp) return false;
        if (myOutconedgegrp != src.myOutconedgegrp) return false;

        return true;
    }
    bool operator!=(const SOP_Triangulate2D_2_0Parms &src) const
    {
        return !operator==(src);
    }
    using Planepossrc = SOP_Triangulate2D_2_0Enums::Planepossrc;



    void        buildFromOp(const OP_Node *node, fpreal time, DEP_MicroNode *depnode)
    {
        if (true)
            OP_Utils::evalOpParm(myPoints, node, "points", time, 0);
        else myPoints = ""_sh;
        if (true)
            OP_Utils::evalOpParm(myPlanepossrc, node, "planepossrc", time, 0);
        else myPlanepossrc = 0;
        if (true && ( (!(((int64(getPlanepossrc())!=1)))) ) )
            OP_Utils::evalOpParm(myOrigin, node, "origin", time, 0);
        else myOrigin = UT_Vector3D(0,0,0);
        if (true && ( (!(((int64(getPlanepossrc())!=1)))) ) )
            OP_Utils::evalOpParm(myDist, node, "dist", time, 0);
        else myDist = 0;
        if (true && ( (!(((int64(getPlanepossrc())!=1)))) ) )
            OP_Utils::evalOpParm(myDir, node, "dir", time, 0);
        else myDir = UT_Vector3D(0,1,0);
        if (true && ( (!(((int64(getPlanepossrc())!=2)))) ) )
            OP_Utils::evalOpParm(myPos2attrib, node, "pos2attrib", time, 0);
        else myPos2attrib = ""_sh;
        if (true)
            OP_Utils::evalOpParm(myRestorepos, node, "restorepos", time, 0);
        else myRestorepos = false;
        if (true)
            OP_Utils::evalOpParm(myKeepprims, node, "keepprims", time, 0);
        else myKeepprims = false;
        if (true)
            OP_Utils::evalOpParm(myUpdatenmls, node, "updatenmls", time, 0);
        else myUpdatenmls = false;
        if (true)
            OP_Utils::evalOpParm(myRemoveunusedpoints, node, "removeunusedpoints", time, 0);
        else myRemoveunusedpoints = false;
        if (true)
            OP_Utils::evalOpParm(myRemoveduplicatepoints, node, "removeduplicatepoints", time, 0);
        else myRemoveduplicatepoints = false;
        if (true)
            OP_Utils::evalOpParm(myRandseed, node, "randseed", time, 0);
        else myRandseed = 5678;
        if (true)
            OP_Utils::evalOpParm(myConprims, node, "conprims", time, 0);
        else myConprims = ""_sh;
        if (true)
            OP_Utils::evalOpParm(myConedges, node, "conedges", time, 0);
        else myConedges = ""_sh;
        if (true)
            OP_Utils::evalOpParm(myRemoveconvhull, node, "removeconvhull", time, 0);
        else myRemoveconvhull = false;
        if (true)
            OP_Utils::evalOpParm(myRemoveoutcons, node, "removeoutcons", time, 0);
        else myRemoveoutcons = false;
        if (true && ( (!(((getRemoveoutcons()==0)))) ) )
            OP_Utils::evalOpParm(myDontremoveincons, node, "dontremoveincons", time, 0);
        else myDontremoveincons = false;
        if (true)
            OP_Utils::evalOpParm(myRefine, node, "refine", time, 0);
        else myRefine = false;
        if (true && ( (!(((getRefine()==0)))) ) )
            OP_Utils::evalOpParm(myMaxarea, node, "maxarea", time, 0);
        else myMaxarea = 10000;
        if (true && ( (!(((getRefine()==0)))) ) )
            OP_Utils::evalOpParm(myMinangle, node, "minangle", time, 0);
        else myMinangle = 0;
        if (true)
            OP_Utils::evalOpParm(myMinedgelength, node, "minedgelength", time, 0);
        else myMinedgelength = 0.001;
        if (true)
            OP_Utils::evalOpParm(myMaxnewpts, node, "maxnewpts", time, 0);
        else myMaxnewpts = 5000;
        if (true && ( (!(((getRefine()==1)))) ) )
            OP_Utils::evalOpParm(myNonewconpts, node, "nonewconpts", time, 0);
        else myNonewconpts = false;
        if (true && ( (!(((getNonewconpts()==1)&&(getRefine()==0)))) ) )
            OP_Utils::evalOpParm(myMakenewconptgrp, node, "makenewconptgrp", time, 0);
        else myMakenewconptgrp = false;
        if (true && ( (!(((getNonewconpts()==1)&&(getRefine()==0))||((getMakenewconptgrp()==0)))) ) )
            OP_Utils::evalOpParm(myNewconptgrp, node, "newconptgrp", time, 0);
        else myNewconptgrp = "newconpoints"_sh;
        if (true && ( (!(((getNonewconpts()==1)&&(getRefine()==0)))) ) )
            OP_Utils::evalOpParm(myMakenewconedgegrp, node, "makenewconedgegrp", time, 0);
        else myMakenewconedgegrp = false;
        if (true && ( (!(((getNonewconpts()==1)&&(getRefine()==0))||((getMakenewconedgegrp()==0)))) ) )
            OP_Utils::evalOpParm(myOutconedgegrp, node, "outconedgegrp", time, 0);
        else myOutconedgegrp = "outconedges"_sh;

    }


    virtual void loadFromOpSubclass(const LoadParms &loadparms)
    {
        buildFromOp(loadparms.node(), loadparms.context().getTime(), loadparms.depnode());
    }


    virtual void copyFrom(const SOP_NodeParms *src)
    {
        *this = *((const SOP_Triangulate2D_2_0Parms *)src);
    }

    template <typename T>
    void
    doGetParmValue(exint idx, T &value) const
    {
        switch (idx)
        {
            case 0:
                coerceValue(value, myPoints);
                break;
            case 1:
                coerceValue(value, myPlanepossrc);
                break;
            case 2:
                coerceValue(value, myOrigin);
                break;
            case 3:
                coerceValue(value, myDist);
                break;
            case 4:
                coerceValue(value, myDir);
                break;
            case 5:
                coerceValue(value, myPos2attrib);
                break;
            case 6:
                coerceValue(value, myRestorepos);
                break;
            case 7:
                coerceValue(value, myKeepprims);
                break;
            case 8:
                coerceValue(value, myUpdatenmls);
                break;
            case 9:
                coerceValue(value, myRemoveunusedpoints);
                break;
            case 10:
                coerceValue(value, myRemoveduplicatepoints);
                break;
            case 11:
                coerceValue(value, myRandseed);
                break;
            case 12:
                coerceValue(value, myConprims);
                break;
            case 13:
                coerceValue(value, myConedges);
                break;
            case 14:
                coerceValue(value, myRemoveconvhull);
                break;
            case 15:
                coerceValue(value, myRemoveoutcons);
                break;
            case 16:
                coerceValue(value, myDontremoveincons);
                break;
            case 17:
                coerceValue(value, myRefine);
                break;
            case 18:
                coerceValue(value, myMaxarea);
                break;
            case 19:
                coerceValue(value, myMinangle);
                break;
            case 20:
                coerceValue(value, myMinedgelength);
                break;
            case 21:
                coerceValue(value, myMaxnewpts);
                break;
            case 22:
                coerceValue(value, myNonewconpts);
                break;
            case 23:
                coerceValue(value, myMakenewconptgrp);
                break;
            case 24:
                coerceValue(value, myNewconptgrp);
                break;
            case 25:
                coerceValue(value, myMakenewconedgegrp);
                break;
            case 26:
                coerceValue(value, myOutconedgegrp);
                break;

        }
    }

    void        getParmValue(exint idx, exint &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, fpreal &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Vector2D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Vector3D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Vector4D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Matrix2D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Matrix3D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Matrix4D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_StringHolder &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_SharedPtr<UT_Ramp> &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, PRM_DataItemHandle &value) const
    { doGetParmValue(idx, value); }

    template <typename T>
    void
    doSetParmValue(exint idx, const T &value) 
    {
        switch (idx)
        {
            case 0:
                coerceValue(myPoints, value);
                break;
            case 1:
                coerceValue(myPlanepossrc, value);
                break;
            case 2:
                coerceValue(myOrigin, value);
                break;
            case 3:
                coerceValue(myDist, value);
                break;
            case 4:
                coerceValue(myDir, value);
                break;
            case 5:
                coerceValue(myPos2attrib, value);
                break;
            case 6:
                coerceValue(myRestorepos, value);
                break;
            case 7:
                coerceValue(myKeepprims, value);
                break;
            case 8:
                coerceValue(myUpdatenmls, value);
                break;
            case 9:
                coerceValue(myRemoveunusedpoints, value);
                break;
            case 10:
                coerceValue(myRemoveduplicatepoints, value);
                break;
            case 11:
                coerceValue(myRandseed, value);
                break;
            case 12:
                coerceValue(myConprims, value);
                break;
            case 13:
                coerceValue(myConedges, value);
                break;
            case 14:
                coerceValue(myRemoveconvhull, value);
                break;
            case 15:
                coerceValue(myRemoveoutcons, value);
                break;
            case 16:
                coerceValue(myDontremoveincons, value);
                break;
            case 17:
                coerceValue(myRefine, value);
                break;
            case 18:
                coerceValue(myMaxarea, value);
                break;
            case 19:
                coerceValue(myMinangle, value);
                break;
            case 20:
                coerceValue(myMinedgelength, value);
                break;
            case 21:
                coerceValue(myMaxnewpts, value);
                break;
            case 22:
                coerceValue(myNonewconpts, value);
                break;
            case 23:
                coerceValue(myMakenewconptgrp, value);
                break;
            case 24:
                coerceValue(myNewconptgrp, value);
                break;
            case 25:
                coerceValue(myMakenewconedgegrp, value);
                break;
            case 26:
                coerceValue(myOutconedgegrp, value);
                break;

        }
    }

    void        setParmValue(exint idx, const exint &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const fpreal &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Vector2D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Vector3D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Vector4D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Matrix2D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Matrix3D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Matrix4D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_StringHolder &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_SharedPtr<UT_Ramp> &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const PRM_DataItemHandle &value) 
    { doSetParmValue(idx, value); }

    virtual exint    getNumParms() const
    {
        return 27;
    }

    virtual const char *getParmName(exint fieldnum) const
    {
        switch (fieldnum)
        {
            case 0:
                return "points";
            case 1:
                return "planepossrc";
            case 2:
                return "origin";
            case 3:
                return "dist";
            case 4:
                return "dir";
            case 5:
                return "pos2attrib";
            case 6:
                return "restorepos";
            case 7:
                return "keepprims";
            case 8:
                return "updatenmls";
            case 9:
                return "removeunusedpoints";
            case 10:
                return "removeduplicatepoints";
            case 11:
                return "randseed";
            case 12:
                return "conprims";
            case 13:
                return "conedges";
            case 14:
                return "removeconvhull";
            case 15:
                return "removeoutcons";
            case 16:
                return "dontremoveincons";
            case 17:
                return "refine";
            case 18:
                return "maxarea";
            case 19:
                return "minangle";
            case 20:
                return "minedgelength";
            case 21:
                return "maxnewpts";
            case 22:
                return "nonewconpts";
            case 23:
                return "makenewconptgrp";
            case 24:
                return "newconptgrp";
            case 25:
                return "makenewconedgegrp";
            case 26:
                return "outconedgegrp";

        }
        return 0;
    }

    virtual ParmType getParmType(exint fieldnum) const
    {
        switch (fieldnum)
        {
                case 0:
                    return PARM_STRING;
                case 1:
                    return PARM_INTEGER;
                case 2:
                    return PARM_VECTOR3;
                case 3:
                    return PARM_FLOAT;
                case 4:
                    return PARM_VECTOR3;
                case 5:
                    return PARM_STRING;
                case 6:
                    return PARM_INTEGER;
                case 7:
                    return PARM_INTEGER;
                case 8:
                    return PARM_INTEGER;
                case 9:
                    return PARM_INTEGER;
                case 10:
                    return PARM_INTEGER;
                case 11:
                    return PARM_INTEGER;
                case 12:
                    return PARM_STRING;
                case 13:
                    return PARM_STRING;
                case 14:
                    return PARM_INTEGER;
                case 15:
                    return PARM_INTEGER;
                case 16:
                    return PARM_INTEGER;
                case 17:
                    return PARM_INTEGER;
                case 18:
                    return PARM_FLOAT;
                case 19:
                    return PARM_FLOAT;
                case 20:
                    return PARM_FLOAT;
                case 21:
                    return PARM_INTEGER;
                case 22:
                    return PARM_INTEGER;
                case 23:
                    return PARM_INTEGER;
                case 24:
                    return PARM_STRING;
                case 25:
                    return PARM_INTEGER;
                case 26:
                    return PARM_STRING;

        }
        return PARM_UNSUPPORTED;
    }

    // Boiler plate to load individual types.
    static void  loadData(UT_IStream &is, int64 &v)
    { is.bread(&v, 1); }
    static void  loadData(UT_IStream &is, bool &v)
    { int64     iv; is.bread(&iv, 1); v = iv; }
    static void  loadData(UT_IStream &is, fpreal64 &v)
    { is.bread<fpreal64>(&v, 1); }
    static void  loadData(UT_IStream &is, UT_Vector2D &v)
    { is.bread<fpreal64>(&v.x(), 1); is.bread<fpreal64>(&v.y(), 1); }
    static void  loadData(UT_IStream &is, UT_Vector3D &v)
    { is.bread<fpreal64>(&v.x(), 1); is.bread<fpreal64>(&v.y(), 1);
      is.bread<fpreal64>(&v.z(), 1); }
    static void  loadData(UT_IStream &is, UT_Vector4D &v)
    { is.bread<fpreal64>(&v.x(), 1); is.bread<fpreal64>(&v.y(), 1);
      is.bread<fpreal64>(&v.z(), 1); is.bread<fpreal64>(&v.w(), 1); }
    static void  loadData(UT_IStream &is, UT_Matrix2D &v)
    { for (int r = 0; r < 2; r++) for (int c = 0; c < 2; c++) is.bread<fpreal64>(&v(r, c), 1); }
    static void  loadData(UT_IStream &is, UT_Matrix3D &v)
    { for (int r = 0; r < 3; r++) for (int c = 0; c < 3; c++) is.bread<fpreal64>(&v(r, c), 1); }
    static void  loadData(UT_IStream &is, UT_Matrix4D &v)
    { for (int r = 0; r < 4; r++) for (int c = 0; c < 4; c++) is.bread<fpreal64>(&v(r, c), 1); }
    static void  loadData(UT_IStream &is, UT_Vector2I &v)
    { is.bread<int64>(&v.x(), 1); is.bread<int64>(&v.y(), 1); }
    static void  loadData(UT_IStream &is, UT_Vector3I &v)
    { is.bread<int64>(&v.x(), 1); is.bread<int64>(&v.y(), 1);
      is.bread<int64>(&v.z(), 1); }
    static void  loadData(UT_IStream &is, UT_Vector4I &v)
    { is.bread<int64>(&v.x(), 1); is.bread<int64>(&v.y(), 1);
      is.bread<int64>(&v.z(), 1); is.bread<int64>(&v.w(), 1); }
    static void  loadData(UT_IStream &is, UT_StringHolder &v)
    { is.bread(v); }
    static void  loadData(UT_IStream &is, UT_SharedPtr<UT_Ramp> &v)
    {   UT_StringHolder   rampdata;
        loadData(is, rampdata);
        if (rampdata.isstring())
        {
            v.reset(new UT_Ramp());
            UT_IStream  istr((const char *) rampdata, rampdata.length(), UT_ISTREAM_ASCII);
            v->load(istr);
        }
        else v.reset();
    }
    static void  loadData(UT_IStream &is, PRM_DataItemHandle &v)
    {   UT_StringHolder   data;
        loadData(is, data);
        if (data.isstring())
        {
            // Find the data type.
            char *colon = UT_StringWrap(data).findChar(':');
            if (colon)
            {
                int             typelen = colon - data.buffer();
                UT_WorkBuffer   type;
                type.strncpy(data.buffer(), typelen);
                UT_IStream  istr(((const char *) data) + typelen + 1, data.length() - (typelen + 1), UT_ISTREAM_BINARY);
                
                v = PRM_DataFactory::parseBinary(type.buffer(), istr);
            }
        }
        else v.reset();
    }

    static void  saveData(std::ostream &os, int64 v)
    { UTwrite(os, &v); }
    static void  saveData(std::ostream &os, bool v)
    { int64 iv = v; UTwrite(os, &iv); }
    static void  saveData(std::ostream &os, fpreal64 v)
    { UTwrite<fpreal64>(os, &v); }
    static void  saveData(std::ostream &os, UT_Vector2D v)
    { UTwrite<fpreal64>(os, &v.x()); UTwrite<fpreal64>(os, &v.y()); }
    static void  saveData(std::ostream &os, UT_Vector3D v)
    { UTwrite<fpreal64>(os, &v.x()); UTwrite<fpreal64>(os, &v.y());
      UTwrite<fpreal64>(os, &v.z()); }
    static void  saveData(std::ostream &os, UT_Vector4D v)
    { UTwrite<fpreal64>(os, &v.x()); UTwrite<fpreal64>(os, &v.y());
      UTwrite<fpreal64>(os, &v.z()); UTwrite<fpreal64>(os, &v.w()); }
    static void  saveData(std::ostream &os, UT_Matrix2D v)
    { for (int r = 0; r < 2; r++) for (int c = 0; c < 2; c++) UTwrite<fpreal64>(os, &v(r, c)); }
    static void  saveData(std::ostream &os, UT_Matrix3D v)
    { for (int r = 0; r < 3; r++) for (int c = 0; c < 3; c++) UTwrite<fpreal64>(os, &v(r, c)); }
    static void  saveData(std::ostream &os, UT_Matrix4D v)
    { for (int r = 0; r < 4; r++) for (int c = 0; c < 4; c++) UTwrite<fpreal64>(os, &v(r, c)); }
    static void  saveData(std::ostream &os, UT_StringHolder s)
    { UT_StringWrap(s).saveBinary(os); }
    static void  saveData(std::ostream &os, UT_SharedPtr<UT_Ramp> s)
    {   UT_StringHolder         result;
        UT_OStringStream        ostr;
        if (s) s->save(ostr);
        result = ostr.str();
        saveData(os, result);
    }
    static void  saveData(std::ostream &os, PRM_DataItemHandle s)
    {   UT_StringHolder         result;
        UT_OStringStream        ostr;
        if (s) 
        {
            ostr << s->getDataTypeToken();
            ostr << ":";
            s->saveBinary(ostr);
        }
        result = ostr.str();
        saveData(os, result);
    }


    void         save(std::ostream &os) const
    {
        int32           v = version();
        UTwrite(os, &v);
        saveData(os, myPoints);
        saveData(os, myPlanepossrc);
        saveData(os, myOrigin);
        saveData(os, myDist);
        saveData(os, myDir);
        saveData(os, myPos2attrib);
        saveData(os, myRestorepos);
        saveData(os, myKeepprims);
        saveData(os, myUpdatenmls);
        saveData(os, myRemoveunusedpoints);
        saveData(os, myRemoveduplicatepoints);
        saveData(os, myRandseed);
        saveData(os, myConprims);
        saveData(os, myConedges);
        saveData(os, myRemoveconvhull);
        saveData(os, myRemoveoutcons);
        saveData(os, myDontremoveincons);
        saveData(os, myRefine);
        saveData(os, myMaxarea);
        saveData(os, myMinangle);
        saveData(os, myMinedgelength);
        saveData(os, myMaxnewpts);
        saveData(os, myNonewconpts);
        saveData(os, myMakenewconptgrp);
        saveData(os, myNewconptgrp);
        saveData(os, myMakenewconedgegrp);
        saveData(os, myOutconedgegrp);

    }

    bool         load(UT_IStream &is)
    {
        int32           v;
        is.bread(&v, 1);
        if (version() != v)
        {
            // Fail incompatible versions
            return false;
        }
        loadData(is, myPoints);
        loadData(is, myPlanepossrc);
        loadData(is, myOrigin);
        loadData(is, myDist);
        loadData(is, myDir);
        loadData(is, myPos2attrib);
        loadData(is, myRestorepos);
        loadData(is, myKeepprims);
        loadData(is, myUpdatenmls);
        loadData(is, myRemoveunusedpoints);
        loadData(is, myRemoveduplicatepoints);
        loadData(is, myRandseed);
        loadData(is, myConprims);
        loadData(is, myConedges);
        loadData(is, myRemoveconvhull);
        loadData(is, myRemoveoutcons);
        loadData(is, myDontremoveincons);
        loadData(is, myRefine);
        loadData(is, myMaxarea);
        loadData(is, myMinangle);
        loadData(is, myMinedgelength);
        loadData(is, myMaxnewpts);
        loadData(is, myNonewconpts);
        loadData(is, myMakenewconptgrp);
        loadData(is, myNewconptgrp);
        loadData(is, myMakenewconedgegrp);
        loadData(is, myOutconedgegrp);

        return true;
    }

    const UT_StringHolder & getPoints() const { return myPoints; }
    void setPoints(const UT_StringHolder & val) { myPoints = val; }
    UT_StringHolder opPoints(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getPoints();
        UT_StringHolder result;
        OP_Utils::evalOpParm(result, thissop, "points", cookparms.getCookTime(), 0);
        return result;
    }
    Planepossrc getPlanepossrc() const { return Planepossrc(myPlanepossrc); }
    void setPlanepossrc(Planepossrc val) { myPlanepossrc = int64(val); }
    Planepossrc opPlanepossrc(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getPlanepossrc();
        int64 result;
        OP_Utils::evalOpParm(result, thissop, "planepossrc", cookparms.getCookTime(), 0);
        return Planepossrc(result);
    }
    UT_Vector3D getOrigin() const { return myOrigin; }
    void setOrigin(UT_Vector3D val) { myOrigin = val; }
    UT_Vector3D opOrigin(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getOrigin();
        UT_Vector3D result;
        OP_Utils::evalOpParm(result, thissop, "origin", cookparms.getCookTime(), 0);
        return result;
    }
    fpreal64 getDist() const { return myDist; }
    void setDist(fpreal64 val) { myDist = val; }
    fpreal64 opDist(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getDist();
        fpreal64 result;
        OP_Utils::evalOpParm(result, thissop, "dist", cookparms.getCookTime(), 0);
        return result;
    }
    UT_Vector3D getDir() const { return myDir; }
    void setDir(UT_Vector3D val) { myDir = val; }
    UT_Vector3D opDir(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getDir();
        UT_Vector3D result;
        OP_Utils::evalOpParm(result, thissop, "dir", cookparms.getCookTime(), 0);
        return result;
    }
    const UT_StringHolder & getPos2attrib() const { return myPos2attrib; }
    void setPos2attrib(const UT_StringHolder & val) { myPos2attrib = val; }
    UT_StringHolder opPos2attrib(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getPos2attrib();
        UT_StringHolder result;
        OP_Utils::evalOpParm(result, thissop, "pos2attrib", cookparms.getCookTime(), 0);
        return result;
    }
    bool getRestorepos() const { return myRestorepos; }
    void setRestorepos(bool val) { myRestorepos = val; }
    bool opRestorepos(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getRestorepos();
        bool result;
        OP_Utils::evalOpParm(result, thissop, "restorepos", cookparms.getCookTime(), 0);
        return result;
    }
    bool getKeepprims() const { return myKeepprims; }
    void setKeepprims(bool val) { myKeepprims = val; }
    bool opKeepprims(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getKeepprims();
        bool result;
        OP_Utils::evalOpParm(result, thissop, "keepprims", cookparms.getCookTime(), 0);
        return result;
    }
    bool getUpdatenmls() const { return myUpdatenmls; }
    void setUpdatenmls(bool val) { myUpdatenmls = val; }
    bool opUpdatenmls(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getUpdatenmls();
        bool result;
        OP_Utils::evalOpParm(result, thissop, "updatenmls", cookparms.getCookTime(), 0);
        return result;
    }
    bool getRemoveunusedpoints() const { return myRemoveunusedpoints; }
    void setRemoveunusedpoints(bool val) { myRemoveunusedpoints = val; }
    bool opRemoveunusedpoints(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getRemoveunusedpoints();
        bool result;
        OP_Utils::evalOpParm(result, thissop, "removeunusedpoints", cookparms.getCookTime(), 0);
        return result;
    }
    bool getRemoveduplicatepoints() const { return myRemoveduplicatepoints; }
    void setRemoveduplicatepoints(bool val) { myRemoveduplicatepoints = val; }
    bool opRemoveduplicatepoints(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getRemoveduplicatepoints();
        bool result;
        OP_Utils::evalOpParm(result, thissop, "removeduplicatepoints", cookparms.getCookTime(), 0);
        return result;
    }
    int64 getRandseed() const { return myRandseed; }
    void setRandseed(int64 val) { myRandseed = val; }
    int64 opRandseed(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getRandseed();
        int64 result;
        OP_Utils::evalOpParm(result, thissop, "randseed", cookparms.getCookTime(), 0);
        return result;
    }
    const UT_StringHolder & getConprims() const { return myConprims; }
    void setConprims(const UT_StringHolder & val) { myConprims = val; }
    UT_StringHolder opConprims(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getConprims();
        UT_StringHolder result;
        OP_Utils::evalOpParm(result, thissop, "conprims", cookparms.getCookTime(), 0);
        return result;
    }
    const UT_StringHolder & getConedges() const { return myConedges; }
    void setConedges(const UT_StringHolder & val) { myConedges = val; }
    UT_StringHolder opConedges(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getConedges();
        UT_StringHolder result;
        OP_Utils::evalOpParm(result, thissop, "conedges", cookparms.getCookTime(), 0);
        return result;
    }
    bool getRemoveconvhull() const { return myRemoveconvhull; }
    void setRemoveconvhull(bool val) { myRemoveconvhull = val; }
    bool opRemoveconvhull(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getRemoveconvhull();
        bool result;
        OP_Utils::evalOpParm(result, thissop, "removeconvhull", cookparms.getCookTime(), 0);
        return result;
    }
    bool getRemoveoutcons() const { return myRemoveoutcons; }
    void setRemoveoutcons(bool val) { myRemoveoutcons = val; }
    bool opRemoveoutcons(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getRemoveoutcons();
        bool result;
        OP_Utils::evalOpParm(result, thissop, "removeoutcons", cookparms.getCookTime(), 0);
        return result;
    }
    bool getDontremoveincons() const { return myDontremoveincons; }
    void setDontremoveincons(bool val) { myDontremoveincons = val; }
    bool opDontremoveincons(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getDontremoveincons();
        bool result;
        OP_Utils::evalOpParm(result, thissop, "dontremoveincons", cookparms.getCookTime(), 0);
        return result;
    }
    bool getRefine() const { return myRefine; }
    void setRefine(bool val) { myRefine = val; }
    bool opRefine(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getRefine();
        bool result;
        OP_Utils::evalOpParm(result, thissop, "refine", cookparms.getCookTime(), 0);
        return result;
    }
    fpreal64 getMaxarea() const { return myMaxarea; }
    void setMaxarea(fpreal64 val) { myMaxarea = val; }
    fpreal64 opMaxarea(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getMaxarea();
        fpreal64 result;
        OP_Utils::evalOpParm(result, thissop, "maxarea", cookparms.getCookTime(), 0);
        return result;
    }
    fpreal64 getMinangle() const { return myMinangle; }
    void setMinangle(fpreal64 val) { myMinangle = val; }
    fpreal64 opMinangle(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getMinangle();
        fpreal64 result;
        OP_Utils::evalOpParm(result, thissop, "minangle", cookparms.getCookTime(), 0);
        return result;
    }
    fpreal64 getMinedgelength() const { return myMinedgelength; }
    void setMinedgelength(fpreal64 val) { myMinedgelength = val; }
    fpreal64 opMinedgelength(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getMinedgelength();
        fpreal64 result;
        OP_Utils::evalOpParm(result, thissop, "minedgelength", cookparms.getCookTime(), 0);
        return result;
    }
    int64 getMaxnewpts() const { return myMaxnewpts; }
    void setMaxnewpts(int64 val) { myMaxnewpts = val; }
    int64 opMaxnewpts(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getMaxnewpts();
        int64 result;
        OP_Utils::evalOpParm(result, thissop, "maxnewpts", cookparms.getCookTime(), 0);
        return result;
    }
    bool getNonewconpts() const { return myNonewconpts; }
    void setNonewconpts(bool val) { myNonewconpts = val; }
    bool opNonewconpts(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getNonewconpts();
        bool result;
        OP_Utils::evalOpParm(result, thissop, "nonewconpts", cookparms.getCookTime(), 0);
        return result;
    }
    bool getMakenewconptgrp() const { return myMakenewconptgrp; }
    void setMakenewconptgrp(bool val) { myMakenewconptgrp = val; }
    bool opMakenewconptgrp(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getMakenewconptgrp();
        bool result;
        OP_Utils::evalOpParm(result, thissop, "makenewconptgrp", cookparms.getCookTime(), 0);
        return result;
    }
    const UT_StringHolder & getNewconptgrp() const { return myNewconptgrp; }
    void setNewconptgrp(const UT_StringHolder & val) { myNewconptgrp = val; }
    UT_StringHolder opNewconptgrp(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getNewconptgrp();
        UT_StringHolder result;
        OP_Utils::evalOpParm(result, thissop, "newconptgrp", cookparms.getCookTime(), 0);
        return result;
    }
    bool getMakenewconedgegrp() const { return myMakenewconedgegrp; }
    void setMakenewconedgegrp(bool val) { myMakenewconedgegrp = val; }
    bool opMakenewconedgegrp(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getMakenewconedgegrp();
        bool result;
        OP_Utils::evalOpParm(result, thissop, "makenewconedgegrp", cookparms.getCookTime(), 0);
        return result;
    }
    const UT_StringHolder & getOutconedgegrp() const { return myOutconedgegrp; }
    void setOutconedgegrp(const UT_StringHolder & val) { myOutconedgegrp = val; }
    UT_StringHolder opOutconedgegrp(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getOutconedgegrp();
        UT_StringHolder result;
        OP_Utils::evalOpParm(result, thissop, "outconedgegrp", cookparms.getCookTime(), 0);
        return result;
    }

private:
    UT_StringHolder myPoints;
    int64 myPlanepossrc;
    UT_Vector3D myOrigin;
    fpreal64 myDist;
    UT_Vector3D myDir;
    UT_StringHolder myPos2attrib;
    bool myRestorepos;
    bool myKeepprims;
    bool myUpdatenmls;
    bool myRemoveunusedpoints;
    bool myRemoveduplicatepoints;
    int64 myRandseed;
    UT_StringHolder myConprims;
    UT_StringHolder myConedges;
    bool myRemoveconvhull;
    bool myRemoveoutcons;
    bool myDontremoveincons;
    bool myRefine;
    fpreal64 myMaxarea;
    fpreal64 myMinangle;
    fpreal64 myMinedgelength;
    int64 myMaxnewpts;
    bool myNonewconpts;
    bool myMakenewconptgrp;
    UT_StringHolder myNewconptgrp;
    bool myMakenewconedgegrp;
    UT_StringHolder myOutconedgegrp;

};
