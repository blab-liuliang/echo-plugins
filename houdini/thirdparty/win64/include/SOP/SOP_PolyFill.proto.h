/* Automagically Generated by generate_proto.py
 * Do not Edit
 */
#pragma once

#include <SOP/SOP_NodeVerb.h>
#include <OP/OP_Utils.h>
#include <PRM/PRM_Parm.h>
#include <UT/UT_IStream.h>
#include <UT/UT_NTStreamUtil.h>
#include <UT/UT_Ramp.h>
#include <UT/UT_SharedPtr.h>
#include <UT/UT_StringHolder.h>
#include <UT/UT_StringStream.h>
#include <UT/UT_VectorTypes.h>
#include <SYS/SYS_Types.h>

using namespace UT::Literal;

class DEP_MicroNode;
namespace SOP_PolyFillEnums
{
    enum class Fillmode
    {
        NONE = 0,
        TRIS,
        TRIFAN,
        QUADFAN,
        QUADS,
        GRIDQUADS
    };
}


class SOP_API SOP_PolyFillParms  : public SOP_NodeParms
{
public:
    static int version() { return 1; }

    SOP_PolyFillParms()
    {
        myGroup = ""_sh;
        myFillmode = 4;
        myCompleteloops = true;
        myReverse = false;
        myUniquepoints = false;
        myUpdatenorms = true;
        myLooptoggle = false;
        myLoopdistance = 0.25;
        mySmoothtoggle = true;
        mySmoothstrength = 50;
        myCorneroffset = 0;
        myCustomcornerstoggle = false;
        myCustomcorners = ""_sh;
        mySubdivtoggle = true;
        myTranslate = 0.25;
        myTangentstrength = 0.4;
        myPatchgrouptoggle = false;
        myPatchgroup = "patch"_sh;
        myLoopgrouptoggle = false;
        myLoopgroup = "loopgroup"_sh;
        myGroupappend = false;

    }

    explicit SOP_PolyFillParms(const SOP_PolyFillParms &) = default;

    virtual ~SOP_PolyFillParms() {}

    bool operator==(const SOP_PolyFillParms &src) const
    {
        if (myGroup != src.myGroup) return false;
        if (myFillmode != src.myFillmode) return false;
        if (myCompleteloops != src.myCompleteloops) return false;
        if (myReverse != src.myReverse) return false;
        if (myUniquepoints != src.myUniquepoints) return false;
        if (myUpdatenorms != src.myUpdatenorms) return false;
        if (myLooptoggle != src.myLooptoggle) return false;
        if (myLoopdistance != src.myLoopdistance) return false;
        if (mySmoothtoggle != src.mySmoothtoggle) return false;
        if (mySmoothstrength != src.mySmoothstrength) return false;
        if (myCorneroffset != src.myCorneroffset) return false;
        if (myCustomcornerstoggle != src.myCustomcornerstoggle) return false;
        if (myCustomcorners != src.myCustomcorners) return false;
        if (mySubdivtoggle != src.mySubdivtoggle) return false;
        if (myTranslate != src.myTranslate) return false;
        if (myTangentstrength != src.myTangentstrength) return false;
        if (myPatchgrouptoggle != src.myPatchgrouptoggle) return false;
        if (myPatchgroup != src.myPatchgroup) return false;
        if (myLoopgrouptoggle != src.myLoopgrouptoggle) return false;
        if (myLoopgroup != src.myLoopgroup) return false;
        if (myGroupappend != src.myGroupappend) return false;

        return true;
    }
    bool operator!=(const SOP_PolyFillParms &src) const
    {
        return !operator==(src);
    }
    using Fillmode = SOP_PolyFillEnums::Fillmode;



    void        buildFromOp(const OP_Node *node, fpreal time, DEP_MicroNode *depnode)
    {
        if (true)
            OP_Utils::evalOpParm(myGroup, node, "group", time, 0);
        else myGroup = ""_sh;
        if (true)
            OP_Utils::evalOpParm(myFillmode, node, "fillmode", time, 0);
        else myFillmode = 4;
        if (true)
            OP_Utils::evalOpParm(myCompleteloops, node, "completeloops", time, 0);
        else myCompleteloops = true;
        if (true)
            OP_Utils::evalOpParm(myReverse, node, "reverse", time, 0);
        else myReverse = false;
        if (true)
            OP_Utils::evalOpParm(myUniquepoints, node, "uniquepoints", time, 0);
        else myUniquepoints = false;
        if (true)
            OP_Utils::evalOpParm(myUpdatenorms, node, "updatenorms", time, 0);
        else myUpdatenorms = true;
        if (true && ( (!(((int64(getFillmode())==0))||((int64(getFillmode())==1)))) ) )
            OP_Utils::evalOpParm(myLooptoggle, node, "looptoggle", time, 0);
        else myLooptoggle = false;
        if (true && ( (!(((int64(getFillmode())==0))||((int64(getFillmode())==1))||((getLooptoggle()==0)))) ) )
            OP_Utils::evalOpParm(myLoopdistance, node, "loopdistance", time, 0);
        else myLoopdistance = 0.25;
        if (true && ( (!(((int64(getFillmode())==0))||((int64(getFillmode())==1))||((int64(getFillmode())==2))||((int64(getFillmode())==3)))) ) )
            OP_Utils::evalOpParm(mySmoothtoggle, node, "smoothtoggle", time, 0);
        else mySmoothtoggle = true;
        if (true && ( (!(((int64(getFillmode())==0))||((int64(getFillmode())==1))||((int64(getFillmode())==2))||((int64(getFillmode())==3))||((getSmoothtoggle()==0)))) ) )
            OP_Utils::evalOpParm(mySmoothstrength, node, "smoothstrength", time, 0);
        else mySmoothstrength = 50;
        if (true && ( (!(((int64(getFillmode())==0))||((int64(getFillmode())==1))||((int64(getFillmode())==4))||((int64(getFillmode())==2)))) ) )
            OP_Utils::evalOpParm(myCorneroffset, node, "corneroffset", time, 0);
        else myCorneroffset = 0;
        if (true && ( (!(((int64(getFillmode())==0))||((int64(getFillmode())==1))||((int64(getFillmode())==4))||((int64(getFillmode())==2)))) ) )
            OP_Utils::evalOpParm(myCustomcornerstoggle, node, "customcornerstoggle", time, 0);
        else myCustomcornerstoggle = false;
        if (true && ( (!(((int64(getFillmode())==0))||((int64(getFillmode())==1))||((int64(getFillmode())==4))||((int64(getFillmode())==2))||((getCustomcornerstoggle()==0)))) ) )
            OP_Utils::evalOpParm(myCustomcorners, node, "customcorners", time, 0);
        else myCustomcorners = ""_sh;
        if (true && ( (!(((int64(getFillmode())==0))||((int64(getFillmode())==1))||((int64(getFillmode())==4)))) ) )
            OP_Utils::evalOpParm(mySubdivtoggle, node, "subdivtoggle", time, 0);
        else mySubdivtoggle = true;
        if (true && ( (!(((int64(getFillmode())==0))||((int64(getFillmode())==1))||((int64(getFillmode())==4))||((getSubdivtoggle()==0)))) ) )
            OP_Utils::evalOpParm(myTranslate, node, "translate", time, 0);
        else myTranslate = 0.25;
        if (true && ( (!(((int64(getFillmode())==0))||((int64(getFillmode())==1))||((int64(getFillmode())==4))||((int64(getFillmode())==2))||((int64(getFillmode())==3))||((getSubdivtoggle()==0)))) ) )
            OP_Utils::evalOpParm(myTangentstrength, node, "tangentstrength", time, 0);
        else myTangentstrength = 0.4;
        if (true)
            OP_Utils::evalOpParm(myPatchgrouptoggle, node, "patchgrouptoggle", time, 0);
        else myPatchgrouptoggle = false;
        if (true && ( (!(((getPatchgrouptoggle()==0)))) ) )
            OP_Utils::evalOpParm(myPatchgroup, node, "patchgroup", time, 0);
        else myPatchgroup = "patch"_sh;
        if (true && ( (!(((int64(getFillmode())==0))||((int64(getFillmode())==1))||((getLooptoggle()==0)))) ) )
            OP_Utils::evalOpParm(myLoopgrouptoggle, node, "loopgrouptoggle", time, 0);
        else myLoopgrouptoggle = false;
        if (true && ( (!(((int64(getFillmode())==0))||((int64(getFillmode())==1))||((getLooptoggle()==0))||((getLoopgrouptoggle()==0)))) ) )
            OP_Utils::evalOpParm(myLoopgroup, node, "loopgroup", time, 0);
        else myLoopgroup = "loopgroup"_sh;
        if (true)
            OP_Utils::evalOpParm(myGroupappend, node, "groupappend", time, 0);
        else myGroupappend = false;

    }


    virtual void loadFromOpSubclass(const LoadParms &loadparms)
    {
        buildFromOp(loadparms.node(), loadparms.context().getTime(), loadparms.depnode());
    }


    virtual void copyFrom(const SOP_NodeParms *src)
    {
        *this = *((const SOP_PolyFillParms *)src);
    }

    template <typename T>
    void
    doGetParmValue(exint idx, T &value) const
    {
        switch (idx)
        {
            case 0:
                coerceValue(value, myGroup);
                break;
            case 1:
                coerceValue(value, myFillmode);
                break;
            case 2:
                coerceValue(value, myCompleteloops);
                break;
            case 3:
                coerceValue(value, myReverse);
                break;
            case 4:
                coerceValue(value, myUniquepoints);
                break;
            case 5:
                coerceValue(value, myUpdatenorms);
                break;
            case 6:
                coerceValue(value, myLooptoggle);
                break;
            case 7:
                coerceValue(value, myLoopdistance);
                break;
            case 8:
                coerceValue(value, mySmoothtoggle);
                break;
            case 9:
                coerceValue(value, mySmoothstrength);
                break;
            case 10:
                coerceValue(value, myCorneroffset);
                break;
            case 11:
                coerceValue(value, myCustomcornerstoggle);
                break;
            case 12:
                coerceValue(value, myCustomcorners);
                break;
            case 13:
                coerceValue(value, mySubdivtoggle);
                break;
            case 14:
                coerceValue(value, myTranslate);
                break;
            case 15:
                coerceValue(value, myTangentstrength);
                break;
            case 16:
                coerceValue(value, myPatchgrouptoggle);
                break;
            case 17:
                coerceValue(value, myPatchgroup);
                break;
            case 18:
                coerceValue(value, myLoopgrouptoggle);
                break;
            case 19:
                coerceValue(value, myLoopgroup);
                break;
            case 20:
                coerceValue(value, myGroupappend);
                break;

        }
    }

    void        getParmValue(exint idx, exint &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, fpreal &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Vector2D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Vector3D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Vector4D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Matrix2D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Matrix3D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Matrix4D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_StringHolder &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_SharedPtr<UT_Ramp> &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, PRM_DataItemHandle &value) const
    { doGetParmValue(idx, value); }

    template <typename T>
    void
    doSetParmValue(exint idx, const T &value) 
    {
        switch (idx)
        {
            case 0:
                coerceValue(myGroup, value);
                break;
            case 1:
                coerceValue(myFillmode, value);
                break;
            case 2:
                coerceValue(myCompleteloops, value);
                break;
            case 3:
                coerceValue(myReverse, value);
                break;
            case 4:
                coerceValue(myUniquepoints, value);
                break;
            case 5:
                coerceValue(myUpdatenorms, value);
                break;
            case 6:
                coerceValue(myLooptoggle, value);
                break;
            case 7:
                coerceValue(myLoopdistance, value);
                break;
            case 8:
                coerceValue(mySmoothtoggle, value);
                break;
            case 9:
                coerceValue(mySmoothstrength, value);
                break;
            case 10:
                coerceValue(myCorneroffset, value);
                break;
            case 11:
                coerceValue(myCustomcornerstoggle, value);
                break;
            case 12:
                coerceValue(myCustomcorners, value);
                break;
            case 13:
                coerceValue(mySubdivtoggle, value);
                break;
            case 14:
                coerceValue(myTranslate, value);
                break;
            case 15:
                coerceValue(myTangentstrength, value);
                break;
            case 16:
                coerceValue(myPatchgrouptoggle, value);
                break;
            case 17:
                coerceValue(myPatchgroup, value);
                break;
            case 18:
                coerceValue(myLoopgrouptoggle, value);
                break;
            case 19:
                coerceValue(myLoopgroup, value);
                break;
            case 20:
                coerceValue(myGroupappend, value);
                break;

        }
    }

    void        setParmValue(exint idx, const exint &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const fpreal &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Vector2D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Vector3D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Vector4D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Matrix2D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Matrix3D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Matrix4D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_StringHolder &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_SharedPtr<UT_Ramp> &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const PRM_DataItemHandle &value) 
    { doSetParmValue(idx, value); }

    virtual exint    getNumParms() const
    {
        return 21;
    }

    virtual const char *getParmName(exint fieldnum) const
    {
        switch (fieldnum)
        {
            case 0:
                return "group";
            case 1:
                return "fillmode";
            case 2:
                return "completeloops";
            case 3:
                return "reverse";
            case 4:
                return "uniquepoints";
            case 5:
                return "updatenorms";
            case 6:
                return "looptoggle";
            case 7:
                return "loopdistance";
            case 8:
                return "smoothtoggle";
            case 9:
                return "smoothstrength";
            case 10:
                return "corneroffset";
            case 11:
                return "customcornerstoggle";
            case 12:
                return "customcorners";
            case 13:
                return "subdivtoggle";
            case 14:
                return "translate";
            case 15:
                return "tangentstrength";
            case 16:
                return "patchgrouptoggle";
            case 17:
                return "patchgroup";
            case 18:
                return "loopgrouptoggle";
            case 19:
                return "loopgroup";
            case 20:
                return "groupappend";

        }
        return 0;
    }

    virtual ParmType getParmType(exint fieldnum) const
    {
        switch (fieldnum)
        {
                case 0:
                    return PARM_STRING;
                case 1:
                    return PARM_INTEGER;
                case 2:
                    return PARM_INTEGER;
                case 3:
                    return PARM_INTEGER;
                case 4:
                    return PARM_INTEGER;
                case 5:
                    return PARM_INTEGER;
                case 6:
                    return PARM_INTEGER;
                case 7:
                    return PARM_FLOAT;
                case 8:
                    return PARM_INTEGER;
                case 9:
                    return PARM_FLOAT;
                case 10:
                    return PARM_INTEGER;
                case 11:
                    return PARM_INTEGER;
                case 12:
                    return PARM_STRING;
                case 13:
                    return PARM_INTEGER;
                case 14:
                    return PARM_FLOAT;
                case 15:
                    return PARM_FLOAT;
                case 16:
                    return PARM_INTEGER;
                case 17:
                    return PARM_STRING;
                case 18:
                    return PARM_INTEGER;
                case 19:
                    return PARM_STRING;
                case 20:
                    return PARM_INTEGER;

        }
        return PARM_UNSUPPORTED;
    }

    // Boiler plate to load individual types.
    static void  loadData(UT_IStream &is, int64 &v)
    { is.bread(&v, 1); }
    static void  loadData(UT_IStream &is, bool &v)
    { int64     iv; is.bread(&iv, 1); v = iv; }
    static void  loadData(UT_IStream &is, fpreal64 &v)
    { is.bread<fpreal64>(&v, 1); }
    static void  loadData(UT_IStream &is, UT_Vector2D &v)
    { is.bread<fpreal64>(&v.x(), 1); is.bread<fpreal64>(&v.y(), 1); }
    static void  loadData(UT_IStream &is, UT_Vector3D &v)
    { is.bread<fpreal64>(&v.x(), 1); is.bread<fpreal64>(&v.y(), 1);
      is.bread<fpreal64>(&v.z(), 1); }
    static void  loadData(UT_IStream &is, UT_Vector4D &v)
    { is.bread<fpreal64>(&v.x(), 1); is.bread<fpreal64>(&v.y(), 1);
      is.bread<fpreal64>(&v.z(), 1); is.bread<fpreal64>(&v.w(), 1); }
    static void  loadData(UT_IStream &is, UT_Matrix2D &v)
    { for (int r = 0; r < 2; r++) for (int c = 0; c < 2; c++) is.bread<fpreal64>(&v(r, c), 1); }
    static void  loadData(UT_IStream &is, UT_Matrix3D &v)
    { for (int r = 0; r < 3; r++) for (int c = 0; c < 3; c++) is.bread<fpreal64>(&v(r, c), 1); }
    static void  loadData(UT_IStream &is, UT_Matrix4D &v)
    { for (int r = 0; r < 4; r++) for (int c = 0; c < 4; c++) is.bread<fpreal64>(&v(r, c), 1); }
    static void  loadData(UT_IStream &is, UT_Vector2I &v)
    { is.bread<int64>(&v.x(), 1); is.bread<int64>(&v.y(), 1); }
    static void  loadData(UT_IStream &is, UT_Vector3I &v)
    { is.bread<int64>(&v.x(), 1); is.bread<int64>(&v.y(), 1);
      is.bread<int64>(&v.z(), 1); }
    static void  loadData(UT_IStream &is, UT_Vector4I &v)
    { is.bread<int64>(&v.x(), 1); is.bread<int64>(&v.y(), 1);
      is.bread<int64>(&v.z(), 1); is.bread<int64>(&v.w(), 1); }
    static void  loadData(UT_IStream &is, UT_StringHolder &v)
    { is.bread(v); }
    static void  loadData(UT_IStream &is, UT_SharedPtr<UT_Ramp> &v)
    {   UT_StringHolder   rampdata;
        loadData(is, rampdata);
        if (rampdata.isstring())
        {
            v.reset(new UT_Ramp());
            UT_IStream  istr((const char *) rampdata, rampdata.length(), UT_ISTREAM_ASCII);
            v->load(istr);
        }
        else v.reset();
    }
    static void  loadData(UT_IStream &is, PRM_DataItemHandle &v)
    {   UT_StringHolder   data;
        loadData(is, data);
        if (data.isstring())
        {
            // Find the data type.
            char *colon = UT_StringWrap(data).findChar(':');
            if (colon)
            {
                int             typelen = colon - data.buffer();
                UT_WorkBuffer   type;
                type.strncpy(data.buffer(), typelen);
                UT_IStream  istr(((const char *) data) + typelen + 1, data.length() - (typelen + 1), UT_ISTREAM_BINARY);
                
                v = PRM_DataFactory::parseBinary(type.buffer(), istr);
            }
        }
        else v.reset();
    }

    static void  saveData(std::ostream &os, int64 v)
    { UTwrite(os, &v); }
    static void  saveData(std::ostream &os, bool v)
    { int64 iv = v; UTwrite(os, &iv); }
    static void  saveData(std::ostream &os, fpreal64 v)
    { UTwrite<fpreal64>(os, &v); }
    static void  saveData(std::ostream &os, UT_Vector2D v)
    { UTwrite<fpreal64>(os, &v.x()); UTwrite<fpreal64>(os, &v.y()); }
    static void  saveData(std::ostream &os, UT_Vector3D v)
    { UTwrite<fpreal64>(os, &v.x()); UTwrite<fpreal64>(os, &v.y());
      UTwrite<fpreal64>(os, &v.z()); }
    static void  saveData(std::ostream &os, UT_Vector4D v)
    { UTwrite<fpreal64>(os, &v.x()); UTwrite<fpreal64>(os, &v.y());
      UTwrite<fpreal64>(os, &v.z()); UTwrite<fpreal64>(os, &v.w()); }
    static void  saveData(std::ostream &os, UT_Matrix2D v)
    { for (int r = 0; r < 2; r++) for (int c = 0; c < 2; c++) UTwrite<fpreal64>(os, &v(r, c)); }
    static void  saveData(std::ostream &os, UT_Matrix3D v)
    { for (int r = 0; r < 3; r++) for (int c = 0; c < 3; c++) UTwrite<fpreal64>(os, &v(r, c)); }
    static void  saveData(std::ostream &os, UT_Matrix4D v)
    { for (int r = 0; r < 4; r++) for (int c = 0; c < 4; c++) UTwrite<fpreal64>(os, &v(r, c)); }
    static void  saveData(std::ostream &os, UT_StringHolder s)
    { UT_StringWrap(s).saveBinary(os); }
    static void  saveData(std::ostream &os, UT_SharedPtr<UT_Ramp> s)
    {   UT_StringHolder         result;
        UT_OStringStream        ostr;
        if (s) s->save(ostr);
        result = ostr.str();
        saveData(os, result);
    }
    static void  saveData(std::ostream &os, PRM_DataItemHandle s)
    {   UT_StringHolder         result;
        UT_OStringStream        ostr;
        if (s) 
        {
            ostr << s->getDataTypeToken();
            ostr << ":";
            s->saveBinary(ostr);
        }
        result = ostr.str();
        saveData(os, result);
    }


    void         save(std::ostream &os) const
    {
        int32           v = version();
        UTwrite(os, &v);
        saveData(os, myGroup);
        saveData(os, myFillmode);
        saveData(os, myCompleteloops);
        saveData(os, myReverse);
        saveData(os, myUniquepoints);
        saveData(os, myUpdatenorms);
        saveData(os, myLooptoggle);
        saveData(os, myLoopdistance);
        saveData(os, mySmoothtoggle);
        saveData(os, mySmoothstrength);
        saveData(os, myCorneroffset);
        saveData(os, myCustomcornerstoggle);
        saveData(os, myCustomcorners);
        saveData(os, mySubdivtoggle);
        saveData(os, myTranslate);
        saveData(os, myTangentstrength);
        saveData(os, myPatchgrouptoggle);
        saveData(os, myPatchgroup);
        saveData(os, myLoopgrouptoggle);
        saveData(os, myLoopgroup);
        saveData(os, myGroupappend);

    }

    bool         load(UT_IStream &is)
    {
        int32           v;
        is.bread(&v, 1);
        if (version() != v)
        {
            // Fail incompatible versions
            return false;
        }
        loadData(is, myGroup);
        loadData(is, myFillmode);
        loadData(is, myCompleteloops);
        loadData(is, myReverse);
        loadData(is, myUniquepoints);
        loadData(is, myUpdatenorms);
        loadData(is, myLooptoggle);
        loadData(is, myLoopdistance);
        loadData(is, mySmoothtoggle);
        loadData(is, mySmoothstrength);
        loadData(is, myCorneroffset);
        loadData(is, myCustomcornerstoggle);
        loadData(is, myCustomcorners);
        loadData(is, mySubdivtoggle);
        loadData(is, myTranslate);
        loadData(is, myTangentstrength);
        loadData(is, myPatchgrouptoggle);
        loadData(is, myPatchgroup);
        loadData(is, myLoopgrouptoggle);
        loadData(is, myLoopgroup);
        loadData(is, myGroupappend);

        return true;
    }

    const UT_StringHolder & getGroup() const { return myGroup; }
    void setGroup(const UT_StringHolder & val) { myGroup = val; }
    UT_StringHolder opGroup(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getGroup();
        UT_StringHolder result;
        OP_Utils::evalOpParm(result, thissop, "group", cookparms.getCookTime(), 0);
        return result;
    }
    Fillmode getFillmode() const { return Fillmode(myFillmode); }
    void setFillmode(Fillmode val) { myFillmode = int64(val); }
    Fillmode opFillmode(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getFillmode();
        int64 result;
        OP_Utils::evalOpParm(result, thissop, "fillmode", cookparms.getCookTime(), 0);
        return Fillmode(result);
    }
    bool getCompleteloops() const { return myCompleteloops; }
    void setCompleteloops(bool val) { myCompleteloops = val; }
    bool opCompleteloops(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getCompleteloops();
        bool result;
        OP_Utils::evalOpParm(result, thissop, "completeloops", cookparms.getCookTime(), 0);
        return result;
    }
    bool getReverse() const { return myReverse; }
    void setReverse(bool val) { myReverse = val; }
    bool opReverse(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getReverse();
        bool result;
        OP_Utils::evalOpParm(result, thissop, "reverse", cookparms.getCookTime(), 0);
        return result;
    }
    bool getUniquepoints() const { return myUniquepoints; }
    void setUniquepoints(bool val) { myUniquepoints = val; }
    bool opUniquepoints(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getUniquepoints();
        bool result;
        OP_Utils::evalOpParm(result, thissop, "uniquepoints", cookparms.getCookTime(), 0);
        return result;
    }
    bool getUpdatenorms() const { return myUpdatenorms; }
    void setUpdatenorms(bool val) { myUpdatenorms = val; }
    bool opUpdatenorms(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getUpdatenorms();
        bool result;
        OP_Utils::evalOpParm(result, thissop, "updatenorms", cookparms.getCookTime(), 0);
        return result;
    }
    bool getLooptoggle() const { return myLooptoggle; }
    void setLooptoggle(bool val) { myLooptoggle = val; }
    bool opLooptoggle(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getLooptoggle();
        bool result;
        OP_Utils::evalOpParm(result, thissop, "looptoggle", cookparms.getCookTime(), 0);
        return result;
    }
    fpreal64 getLoopdistance() const { return myLoopdistance; }
    void setLoopdistance(fpreal64 val) { myLoopdistance = val; }
    fpreal64 opLoopdistance(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getLoopdistance();
        fpreal64 result;
        OP_Utils::evalOpParm(result, thissop, "loopdistance", cookparms.getCookTime(), 0);
        return result;
    }
    bool getSmoothtoggle() const { return mySmoothtoggle; }
    void setSmoothtoggle(bool val) { mySmoothtoggle = val; }
    bool opSmoothtoggle(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getSmoothtoggle();
        bool result;
        OP_Utils::evalOpParm(result, thissop, "smoothtoggle", cookparms.getCookTime(), 0);
        return result;
    }
    fpreal64 getSmoothstrength() const { return mySmoothstrength; }
    void setSmoothstrength(fpreal64 val) { mySmoothstrength = val; }
    fpreal64 opSmoothstrength(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getSmoothstrength();
        fpreal64 result;
        OP_Utils::evalOpParm(result, thissop, "smoothstrength", cookparms.getCookTime(), 0);
        return result;
    }
    int64 getCorneroffset() const { return myCorneroffset; }
    void setCorneroffset(int64 val) { myCorneroffset = val; }
    int64 opCorneroffset(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getCorneroffset();
        int64 result;
        OP_Utils::evalOpParm(result, thissop, "corneroffset", cookparms.getCookTime(), 0);
        return result;
    }
    bool getCustomcornerstoggle() const { return myCustomcornerstoggle; }
    void setCustomcornerstoggle(bool val) { myCustomcornerstoggle = val; }
    bool opCustomcornerstoggle(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getCustomcornerstoggle();
        bool result;
        OP_Utils::evalOpParm(result, thissop, "customcornerstoggle", cookparms.getCookTime(), 0);
        return result;
    }
    const UT_StringHolder & getCustomcorners() const { return myCustomcorners; }
    void setCustomcorners(const UT_StringHolder & val) { myCustomcorners = val; }
    UT_StringHolder opCustomcorners(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getCustomcorners();
        UT_StringHolder result;
        OP_Utils::evalOpParm(result, thissop, "customcorners", cookparms.getCookTime(), 0);
        return result;
    }
    bool getSubdivtoggle() const { return mySubdivtoggle; }
    void setSubdivtoggle(bool val) { mySubdivtoggle = val; }
    bool opSubdivtoggle(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getSubdivtoggle();
        bool result;
        OP_Utils::evalOpParm(result, thissop, "subdivtoggle", cookparms.getCookTime(), 0);
        return result;
    }
    fpreal64 getTranslate() const { return myTranslate; }
    void setTranslate(fpreal64 val) { myTranslate = val; }
    fpreal64 opTranslate(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getTranslate();
        fpreal64 result;
        OP_Utils::evalOpParm(result, thissop, "translate", cookparms.getCookTime(), 0);
        return result;
    }
    fpreal64 getTangentstrength() const { return myTangentstrength; }
    void setTangentstrength(fpreal64 val) { myTangentstrength = val; }
    fpreal64 opTangentstrength(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getTangentstrength();
        fpreal64 result;
        OP_Utils::evalOpParm(result, thissop, "tangentstrength", cookparms.getCookTime(), 0);
        return result;
    }
    bool getPatchgrouptoggle() const { return myPatchgrouptoggle; }
    void setPatchgrouptoggle(bool val) { myPatchgrouptoggle = val; }
    bool opPatchgrouptoggle(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getPatchgrouptoggle();
        bool result;
        OP_Utils::evalOpParm(result, thissop, "patchgrouptoggle", cookparms.getCookTime(), 0);
        return result;
    }
    const UT_StringHolder & getPatchgroup() const { return myPatchgroup; }
    void setPatchgroup(const UT_StringHolder & val) { myPatchgroup = val; }
    UT_StringHolder opPatchgroup(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getPatchgroup();
        UT_StringHolder result;
        OP_Utils::evalOpParm(result, thissop, "patchgroup", cookparms.getCookTime(), 0);
        return result;
    }
    bool getLoopgrouptoggle() const { return myLoopgrouptoggle; }
    void setLoopgrouptoggle(bool val) { myLoopgrouptoggle = val; }
    bool opLoopgrouptoggle(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getLoopgrouptoggle();
        bool result;
        OP_Utils::evalOpParm(result, thissop, "loopgrouptoggle", cookparms.getCookTime(), 0);
        return result;
    }
    const UT_StringHolder & getLoopgroup() const { return myLoopgroup; }
    void setLoopgroup(const UT_StringHolder & val) { myLoopgroup = val; }
    UT_StringHolder opLoopgroup(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getLoopgroup();
        UT_StringHolder result;
        OP_Utils::evalOpParm(result, thissop, "loopgroup", cookparms.getCookTime(), 0);
        return result;
    }
    bool getGroupappend() const { return myGroupappend; }
    void setGroupappend(bool val) { myGroupappend = val; }
    bool opGroupappend(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getGroupappend();
        bool result;
        OP_Utils::evalOpParm(result, thissop, "groupappend", cookparms.getCookTime(), 0);
        return result;
    }

private:
    UT_StringHolder myGroup;
    int64 myFillmode;
    bool myCompleteloops;
    bool myReverse;
    bool myUniquepoints;
    bool myUpdatenorms;
    bool myLooptoggle;
    fpreal64 myLoopdistance;
    bool mySmoothtoggle;
    fpreal64 mySmoothstrength;
    int64 myCorneroffset;
    bool myCustomcornerstoggle;
    UT_StringHolder myCustomcorners;
    bool mySubdivtoggle;
    fpreal64 myTranslate;
    fpreal64 myTangentstrength;
    bool myPatchgrouptoggle;
    UT_StringHolder myPatchgroup;
    bool myLoopgrouptoggle;
    UT_StringHolder myLoopgroup;
    bool myGroupappend;

};
