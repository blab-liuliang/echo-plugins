/* Automagically Generated by generate_proto.py
 * Do not Edit
 */
#pragma once

#include <SOP/SOP_NodeVerb.h>
#include <OP/OP_Utils.h>
#include <PRM/PRM_Parm.h>
#include <UT/UT_IStream.h>
#include <UT/UT_NTStreamUtil.h>
#include <UT/UT_Ramp.h>
#include <UT/UT_SharedPtr.h>
#include <UT/UT_StringHolder.h>
#include <UT/UT_StringStream.h>
#include <UT/UT_VectorTypes.h>
#include <SYS/SYS_Types.h>

using namespace UT::Literal;

class DEP_MicroNode;

class SOP_API SOP_VolumeOpticalFlowParms  : public SOP_NodeParms
{
public:
    static int version() { return 1; }

    SOP_VolumeOpticalFlowParms()
    {
        myGroup = ""_sh;
        myGoalgroup = ""_sh;
        myTolerance = 1e-2;
        myWinradius = 7;
        myGaussian = false;
        myLevels = 3;
        myPyramidscale = 0.5;
        myIterations = 3;
        myApproxradius = 2;

    }

    explicit SOP_VolumeOpticalFlowParms(const SOP_VolumeOpticalFlowParms &) = default;

    virtual ~SOP_VolumeOpticalFlowParms() {}

    bool operator==(const SOP_VolumeOpticalFlowParms &src) const
    {
        if (myGroup != src.myGroup) return false;
        if (myGoalgroup != src.myGoalgroup) return false;
        if (myTolerance != src.myTolerance) return false;
        if (myWinradius != src.myWinradius) return false;
        if (myGaussian != src.myGaussian) return false;
        if (myLevels != src.myLevels) return false;
        if (myPyramidscale != src.myPyramidscale) return false;
        if (myIterations != src.myIterations) return false;
        if (myApproxradius != src.myApproxradius) return false;

        return true;
    }
    bool operator!=(const SOP_VolumeOpticalFlowParms &src) const
    {
        return !operator==(src);
    }



    void        buildFromOp(const OP_Node *node, fpreal time, DEP_MicroNode *depnode)
    {
        if (true)
            OP_Utils::evalOpParm(myGroup, node, "group", time, 0);
        else myGroup = ""_sh;
        if (true)
            OP_Utils::evalOpParm(myGoalgroup, node, "goalgroup", time, 0);
        else myGoalgroup = ""_sh;
        if (true)
            OP_Utils::evalOpParm(myTolerance, node, "tolerance", time, 0);
        else myTolerance = 1e-2;
        if (true)
            OP_Utils::evalOpParm(myWinradius, node, "winradius", time, 0);
        else myWinradius = 7;
        if (true)
            OP_Utils::evalOpParm(myGaussian, node, "gaussian", time, 0);
        else myGaussian = false;
        if (true)
            OP_Utils::evalOpParm(myLevels, node, "levels", time, 0);
        else myLevels = 3;
        if (true)
            OP_Utils::evalOpParm(myPyramidscale, node, "pyramidscale", time, 0);
        else myPyramidscale = 0.5;
        if (true)
            OP_Utils::evalOpParm(myIterations, node, "iterations", time, 0);
        else myIterations = 3;
        if (true)
            OP_Utils::evalOpParm(myApproxradius, node, "approxradius", time, 0);
        else myApproxradius = 2;

    }


    virtual void loadFromOpSubclass(const LoadParms &loadparms)
    {
        buildFromOp(loadparms.node(), loadparms.context().getTime(), loadparms.depnode());
    }


    virtual void copyFrom(const SOP_NodeParms *src)
    {
        *this = *((const SOP_VolumeOpticalFlowParms *)src);
    }

    template <typename T>
    void
    doGetParmValue(exint idx, T &value) const
    {
        switch (idx)
        {
            case 0:
                coerceValue(value, myGroup);
                break;
            case 1:
                coerceValue(value, myGoalgroup);
                break;
            case 2:
                coerceValue(value, myTolerance);
                break;
            case 3:
                coerceValue(value, myWinradius);
                break;
            case 4:
                coerceValue(value, myGaussian);
                break;
            case 5:
                coerceValue(value, myLevels);
                break;
            case 6:
                coerceValue(value, myPyramidscale);
                break;
            case 7:
                coerceValue(value, myIterations);
                break;
            case 8:
                coerceValue(value, myApproxradius);
                break;

        }
    }

    void        getParmValue(exint idx, exint &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, fpreal &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Vector2D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Vector3D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Vector4D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Matrix2D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Matrix3D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Matrix4D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_StringHolder &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_SharedPtr<UT_Ramp> &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, PRM_DataItemHandle &value) const
    { doGetParmValue(idx, value); }

    template <typename T>
    void
    doSetParmValue(exint idx, const T &value) 
    {
        switch (idx)
        {
            case 0:
                coerceValue(myGroup, value);
                break;
            case 1:
                coerceValue(myGoalgroup, value);
                break;
            case 2:
                coerceValue(myTolerance, value);
                break;
            case 3:
                coerceValue(myWinradius, value);
                break;
            case 4:
                coerceValue(myGaussian, value);
                break;
            case 5:
                coerceValue(myLevels, value);
                break;
            case 6:
                coerceValue(myPyramidscale, value);
                break;
            case 7:
                coerceValue(myIterations, value);
                break;
            case 8:
                coerceValue(myApproxradius, value);
                break;

        }
    }

    void        setParmValue(exint idx, const exint &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const fpreal &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Vector2D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Vector3D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Vector4D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Matrix2D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Matrix3D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Matrix4D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_StringHolder &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_SharedPtr<UT_Ramp> &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const PRM_DataItemHandle &value) 
    { doSetParmValue(idx, value); }

    virtual exint    getNumParms() const
    {
        return 9;
    }

    virtual const char *getParmName(exint fieldnum) const
    {
        switch (fieldnum)
        {
            case 0:
                return "group";
            case 1:
                return "goalgroup";
            case 2:
                return "tolerance";
            case 3:
                return "winradius";
            case 4:
                return "gaussian";
            case 5:
                return "levels";
            case 6:
                return "pyramidscale";
            case 7:
                return "iterations";
            case 8:
                return "approxradius";

        }
        return 0;
    }

    virtual ParmType getParmType(exint fieldnum) const
    {
        switch (fieldnum)
        {
                case 0:
                    return PARM_STRING;
                case 1:
                    return PARM_STRING;
                case 2:
                    return PARM_FLOAT;
                case 3:
                    return PARM_INTEGER;
                case 4:
                    return PARM_INTEGER;
                case 5:
                    return PARM_INTEGER;
                case 6:
                    return PARM_FLOAT;
                case 7:
                    return PARM_INTEGER;
                case 8:
                    return PARM_FLOAT;

        }
        return PARM_UNSUPPORTED;
    }

    // Boiler plate to load individual types.
    static void  loadData(UT_IStream &is, int64 &v)
    { is.bread(&v, 1); }
    static void  loadData(UT_IStream &is, bool &v)
    { int64     iv; is.bread(&iv, 1); v = iv; }
    static void  loadData(UT_IStream &is, fpreal64 &v)
    { is.bread<fpreal64>(&v, 1); }
    static void  loadData(UT_IStream &is, UT_Vector2D &v)
    { is.bread<fpreal64>(&v.x(), 1); is.bread<fpreal64>(&v.y(), 1); }
    static void  loadData(UT_IStream &is, UT_Vector3D &v)
    { is.bread<fpreal64>(&v.x(), 1); is.bread<fpreal64>(&v.y(), 1);
      is.bread<fpreal64>(&v.z(), 1); }
    static void  loadData(UT_IStream &is, UT_Vector4D &v)
    { is.bread<fpreal64>(&v.x(), 1); is.bread<fpreal64>(&v.y(), 1);
      is.bread<fpreal64>(&v.z(), 1); is.bread<fpreal64>(&v.w(), 1); }
    static void  loadData(UT_IStream &is, UT_Matrix2D &v)
    { for (int r = 0; r < 2; r++) for (int c = 0; c < 2; c++) is.bread<fpreal64>(&v(r, c), 1); }
    static void  loadData(UT_IStream &is, UT_Matrix3D &v)
    { for (int r = 0; r < 3; r++) for (int c = 0; c < 3; c++) is.bread<fpreal64>(&v(r, c), 1); }
    static void  loadData(UT_IStream &is, UT_Matrix4D &v)
    { for (int r = 0; r < 4; r++) for (int c = 0; c < 4; c++) is.bread<fpreal64>(&v(r, c), 1); }
    static void  loadData(UT_IStream &is, UT_Vector2I &v)
    { is.bread<int64>(&v.x(), 1); is.bread<int64>(&v.y(), 1); }
    static void  loadData(UT_IStream &is, UT_Vector3I &v)
    { is.bread<int64>(&v.x(), 1); is.bread<int64>(&v.y(), 1);
      is.bread<int64>(&v.z(), 1); }
    static void  loadData(UT_IStream &is, UT_Vector4I &v)
    { is.bread<int64>(&v.x(), 1); is.bread<int64>(&v.y(), 1);
      is.bread<int64>(&v.z(), 1); is.bread<int64>(&v.w(), 1); }
    static void  loadData(UT_IStream &is, UT_StringHolder &v)
    { is.bread(v); }
    static void  loadData(UT_IStream &is, UT_SharedPtr<UT_Ramp> &v)
    {   UT_StringHolder   rampdata;
        loadData(is, rampdata);
        if (rampdata.isstring())
        {
            v.reset(new UT_Ramp());
            UT_IStream  istr((const char *) rampdata, rampdata.length(), UT_ISTREAM_ASCII);
            v->load(istr);
        }
        else v.reset();
    }
    static void  loadData(UT_IStream &is, PRM_DataItemHandle &v)
    {   UT_StringHolder   data;
        loadData(is, data);
        if (data.isstring())
        {
            // Find the data type.
            char *colon = UT_StringWrap(data).findChar(':');
            if (colon)
            {
                int             typelen = colon - data.buffer();
                UT_WorkBuffer   type;
                type.strncpy(data.buffer(), typelen);
                UT_IStream  istr(((const char *) data) + typelen + 1, data.length() - (typelen + 1), UT_ISTREAM_BINARY);
                
                v = PRM_DataFactory::parseBinary(type.buffer(), istr);
            }
        }
        else v.reset();
    }

    static void  saveData(std::ostream &os, int64 v)
    { UTwrite(os, &v); }
    static void  saveData(std::ostream &os, bool v)
    { int64 iv = v; UTwrite(os, &iv); }
    static void  saveData(std::ostream &os, fpreal64 v)
    { UTwrite<fpreal64>(os, &v); }
    static void  saveData(std::ostream &os, UT_Vector2D v)
    { UTwrite<fpreal64>(os, &v.x()); UTwrite<fpreal64>(os, &v.y()); }
    static void  saveData(std::ostream &os, UT_Vector3D v)
    { UTwrite<fpreal64>(os, &v.x()); UTwrite<fpreal64>(os, &v.y());
      UTwrite<fpreal64>(os, &v.z()); }
    static void  saveData(std::ostream &os, UT_Vector4D v)
    { UTwrite<fpreal64>(os, &v.x()); UTwrite<fpreal64>(os, &v.y());
      UTwrite<fpreal64>(os, &v.z()); UTwrite<fpreal64>(os, &v.w()); }
    static void  saveData(std::ostream &os, UT_Matrix2D v)
    { for (int r = 0; r < 2; r++) for (int c = 0; c < 2; c++) UTwrite<fpreal64>(os, &v(r, c)); }
    static void  saveData(std::ostream &os, UT_Matrix3D v)
    { for (int r = 0; r < 3; r++) for (int c = 0; c < 3; c++) UTwrite<fpreal64>(os, &v(r, c)); }
    static void  saveData(std::ostream &os, UT_Matrix4D v)
    { for (int r = 0; r < 4; r++) for (int c = 0; c < 4; c++) UTwrite<fpreal64>(os, &v(r, c)); }
    static void  saveData(std::ostream &os, UT_StringHolder s)
    { UT_StringWrap(s).saveBinary(os); }
    static void  saveData(std::ostream &os, UT_SharedPtr<UT_Ramp> s)
    {   UT_StringHolder         result;
        UT_OStringStream        ostr;
        if (s) s->save(ostr);
        result = ostr.str();
        saveData(os, result);
    }
    static void  saveData(std::ostream &os, PRM_DataItemHandle s)
    {   UT_StringHolder         result;
        UT_OStringStream        ostr;
        if (s) 
        {
            ostr << s->getDataTypeToken();
            ostr << ":";
            s->saveBinary(ostr);
        }
        result = ostr.str();
        saveData(os, result);
    }


    void         save(std::ostream &os) const
    {
        int32           v = version();
        UTwrite(os, &v);
        saveData(os, myGroup);
        saveData(os, myGoalgroup);
        saveData(os, myTolerance);
        saveData(os, myWinradius);
        saveData(os, myGaussian);
        saveData(os, myLevels);
        saveData(os, myPyramidscale);
        saveData(os, myIterations);
        saveData(os, myApproxradius);

    }

    bool         load(UT_IStream &is)
    {
        int32           v;
        is.bread(&v, 1);
        if (version() != v)
        {
            // Fail incompatible versions
            return false;
        }
        loadData(is, myGroup);
        loadData(is, myGoalgroup);
        loadData(is, myTolerance);
        loadData(is, myWinradius);
        loadData(is, myGaussian);
        loadData(is, myLevels);
        loadData(is, myPyramidscale);
        loadData(is, myIterations);
        loadData(is, myApproxradius);

        return true;
    }

    const UT_StringHolder & getGroup() const { return myGroup; }
    void setGroup(const UT_StringHolder & val) { myGroup = val; }
    UT_StringHolder opGroup(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getGroup();
        UT_StringHolder result;
        OP_Utils::evalOpParm(result, thissop, "group", cookparms.getCookTime(), 0);
        return result;
    }
    const UT_StringHolder & getGoalgroup() const { return myGoalgroup; }
    void setGoalgroup(const UT_StringHolder & val) { myGoalgroup = val; }
    UT_StringHolder opGoalgroup(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getGoalgroup();
        UT_StringHolder result;
        OP_Utils::evalOpParm(result, thissop, "goalgroup", cookparms.getCookTime(), 0);
        return result;
    }
    fpreal64 getTolerance() const { return myTolerance; }
    void setTolerance(fpreal64 val) { myTolerance = val; }
    fpreal64 opTolerance(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getTolerance();
        fpreal64 result;
        OP_Utils::evalOpParm(result, thissop, "tolerance", cookparms.getCookTime(), 0);
        return result;
    }
    int64 getWinradius() const { return myWinradius; }
    void setWinradius(int64 val) { myWinradius = val; }
    int64 opWinradius(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getWinradius();
        int64 result;
        OP_Utils::evalOpParm(result, thissop, "winradius", cookparms.getCookTime(), 0);
        return result;
    }
    bool getGaussian() const { return myGaussian; }
    void setGaussian(bool val) { myGaussian = val; }
    bool opGaussian(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getGaussian();
        bool result;
        OP_Utils::evalOpParm(result, thissop, "gaussian", cookparms.getCookTime(), 0);
        return result;
    }
    int64 getLevels() const { return myLevels; }
    void setLevels(int64 val) { myLevels = val; }
    int64 opLevels(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getLevels();
        int64 result;
        OP_Utils::evalOpParm(result, thissop, "levels", cookparms.getCookTime(), 0);
        return result;
    }
    fpreal64 getPyramidscale() const { return myPyramidscale; }
    void setPyramidscale(fpreal64 val) { myPyramidscale = val; }
    fpreal64 opPyramidscale(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getPyramidscale();
        fpreal64 result;
        OP_Utils::evalOpParm(result, thissop, "pyramidscale", cookparms.getCookTime(), 0);
        return result;
    }
    int64 getIterations() const { return myIterations; }
    void setIterations(int64 val) { myIterations = val; }
    int64 opIterations(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getIterations();
        int64 result;
        OP_Utils::evalOpParm(result, thissop, "iterations", cookparms.getCookTime(), 0);
        return result;
    }
    fpreal64 getApproxradius() const { return myApproxradius; }
    void setApproxradius(fpreal64 val) { myApproxradius = val; }
    fpreal64 opApproxradius(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getApproxradius();
        fpreal64 result;
        OP_Utils::evalOpParm(result, thissop, "approxradius", cookparms.getCookTime(), 0);
        return result;
    }

private:
    UT_StringHolder myGroup;
    UT_StringHolder myGoalgroup;
    fpreal64 myTolerance;
    int64 myWinradius;
    bool myGaussian;
    int64 myLevels;
    fpreal64 myPyramidscale;
    int64 myIterations;
    fpreal64 myApproxradius;

};
