/* Automagically Generated by generate_proto.py
 * Do not Edit
 */
#pragma once

#include <SOP/SOP_NodeVerb.h>
#include <OP/OP_Utils.h>
#include <PRM/PRM_Parm.h>
#include <UT/UT_IStream.h>
#include <UT/UT_NTStreamUtil.h>
#include <UT/UT_Ramp.h>
#include <UT/UT_SharedPtr.h>
#include <UT/UT_StringHolder.h>
#include <UT/UT_StringStream.h>
#include <UT/UT_VectorTypes.h>
#include <SYS/SYS_Types.h>

using namespace UT::Literal;

class DEP_MicroNode;
namespace SOP_BoneDeformEnums
{
    enum class Method
    {
        LINEAR = 0,
        DUALQUAT,
        BLENDDUALQUAT,
        FROMINPUTGEO
    };
}


class SOP_API SOP_BoneDeformParms  : public SOP_NodeParms
{
public:
    static int version() { return 1; }

    SOP_BoneDeformParms()
    {
        myGroup = ""_sh;
        mySkeletonRootPath = ""_sh;
        myMethod = 0;
        myDualQuaternionBlendAttrib = ""_sh;
        myBoneTransformPath = ""_sh;
        myOtherAttribs = ""_sh;
        myDoNormals = false;
        myDeleteCaptureAttrib = false;
        myDeletePointColors = false;

    }

    explicit SOP_BoneDeformParms(const SOP_BoneDeformParms &) = default;

    virtual ~SOP_BoneDeformParms() {}

    bool operator==(const SOP_BoneDeformParms &src) const
    {
        if (myGroup != src.myGroup) return false;
        if (mySkeletonRootPath != src.mySkeletonRootPath) return false;
        if (myMethod != src.myMethod) return false;
        if (myDualQuaternionBlendAttrib != src.myDualQuaternionBlendAttrib) return false;
        if (myBoneTransformPath != src.myBoneTransformPath) return false;
        if (myOtherAttribs != src.myOtherAttribs) return false;
        if (myDoNormals != src.myDoNormals) return false;
        if (myDeleteCaptureAttrib != src.myDeleteCaptureAttrib) return false;
        if (myDeletePointColors != src.myDeletePointColors) return false;

        return true;
    }
    bool operator!=(const SOP_BoneDeformParms &src) const
    {
        return !operator==(src);
    }
    using Method = SOP_BoneDeformEnums::Method;



    void        buildFromOp(const OP_Node *node, fpreal time, DEP_MicroNode *depnode)
    {
        if (true)
            OP_Utils::evalOpParm(myGroup, node, "group", time, 0);
        else myGroup = ""_sh;
        if (true)
            OP_Utils::evalOpParm(mySkeletonRootPath, node, "skelrootpath", time, 0);
        else mySkeletonRootPath = ""_sh;
        if (true)
            OP_Utils::evalOpParm(myMethod, node, "method", time, 0);
        else myMethod = 0;
        if (true && ( (!(((int64(getMethod())!=2)))) ) )
            OP_Utils::evalOpParm(myDualQuaternionBlendAttrib, node, "dqblendattrib", time, 0);
        else myDualQuaternionBlendAttrib = ""_sh;
        if (true)
            OP_Utils::evalOpParm(myBoneTransformPath, node, "bonetransformpath", time, 0);
        else myBoneTransformPath = ""_sh;
        if (true)
            OP_Utils::evalOpParm(myOtherAttribs, node, "otherattribs", time, 0);
        else myOtherAttribs = ""_sh;
        if (true)
            OP_Utils::evalOpParm(myDoNormals, node, "donormal", time, 0);
        else myDoNormals = false;
        if (true)
            OP_Utils::evalOpParm(myDeleteCaptureAttrib, node, "deletecaptureattrib", time, 0);
        else myDeleteCaptureAttrib = false;
        if (true)
            OP_Utils::evalOpParm(myDeletePointColors, node, "deletepointtcolors", time, 0);
        else myDeletePointColors = false;

    }


    virtual void loadFromOpSubclass(const LoadParms &loadparms)
    {
        buildFromOp(loadparms.node(), loadparms.context().getTime(), loadparms.depnode());
    }


    virtual void copyFrom(const SOP_NodeParms *src)
    {
        *this = *((const SOP_BoneDeformParms *)src);
    }

    template <typename T>
    void
    doGetParmValue(exint idx, T &value) const
    {
        switch (idx)
        {
            case 0:
                coerceValue(value, myGroup);
                break;
            case 1:
                coerceValue(value, mySkeletonRootPath);
                break;
            case 2:
                coerceValue(value, myMethod);
                break;
            case 3:
                coerceValue(value, myDualQuaternionBlendAttrib);
                break;
            case 4:
                coerceValue(value, myBoneTransformPath);
                break;
            case 5:
                coerceValue(value, myOtherAttribs);
                break;
            case 6:
                coerceValue(value, myDoNormals);
                break;
            case 7:
                coerceValue(value, myDeleteCaptureAttrib);
                break;
            case 8:
                coerceValue(value, myDeletePointColors);
                break;

        }
    }

    void        getParmValue(exint idx, exint &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, fpreal &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Vector2D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Vector3D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Vector4D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Matrix2D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Matrix3D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Matrix4D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_StringHolder &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_SharedPtr<UT_Ramp> &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, PRM_DataItemHandle &value) const
    { doGetParmValue(idx, value); }

    template <typename T>
    void
    doSetParmValue(exint idx, const T &value) 
    {
        switch (idx)
        {
            case 0:
                coerceValue(myGroup, value);
                break;
            case 1:
                coerceValue(mySkeletonRootPath, value);
                break;
            case 2:
                coerceValue(myMethod, value);
                break;
            case 3:
                coerceValue(myDualQuaternionBlendAttrib, value);
                break;
            case 4:
                coerceValue(myBoneTransformPath, value);
                break;
            case 5:
                coerceValue(myOtherAttribs, value);
                break;
            case 6:
                coerceValue(myDoNormals, value);
                break;
            case 7:
                coerceValue(myDeleteCaptureAttrib, value);
                break;
            case 8:
                coerceValue(myDeletePointColors, value);
                break;

        }
    }

    void        setParmValue(exint idx, const exint &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const fpreal &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Vector2D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Vector3D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Vector4D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Matrix2D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Matrix3D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Matrix4D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_StringHolder &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_SharedPtr<UT_Ramp> &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const PRM_DataItemHandle &value) 
    { doSetParmValue(idx, value); }

    virtual exint    getNumParms() const
    {
        return 9;
    }

    virtual const char *getParmName(exint fieldnum) const
    {
        switch (fieldnum)
        {
            case 0:
                return "group";
            case 1:
                return "skelrootpath";
            case 2:
                return "method";
            case 3:
                return "dqblendattrib";
            case 4:
                return "bonetransformpath";
            case 5:
                return "otherattribs";
            case 6:
                return "donormal";
            case 7:
                return "deletecaptureattrib";
            case 8:
                return "deletepointtcolors";

        }
        return 0;
    }

    virtual ParmType getParmType(exint fieldnum) const
    {
        switch (fieldnum)
        {
                case 0:
                    return PARM_STRING;
                case 1:
                    return PARM_STRING;
                case 2:
                    return PARM_INTEGER;
                case 3:
                    return PARM_STRING;
                case 4:
                    return PARM_STRING;
                case 5:
                    return PARM_STRING;
                case 6:
                    return PARM_INTEGER;
                case 7:
                    return PARM_INTEGER;
                case 8:
                    return PARM_INTEGER;

        }
        return PARM_UNSUPPORTED;
    }

    // Boiler plate to load individual types.
    static void  loadData(UT_IStream &is, int64 &v)
    { is.bread(&v, 1); }
    static void  loadData(UT_IStream &is, bool &v)
    { int64     iv; is.bread(&iv, 1); v = iv; }
    static void  loadData(UT_IStream &is, fpreal64 &v)
    { is.bread<fpreal64>(&v, 1); }
    static void  loadData(UT_IStream &is, UT_Vector2D &v)
    { is.bread<fpreal64>(&v.x(), 1); is.bread<fpreal64>(&v.y(), 1); }
    static void  loadData(UT_IStream &is, UT_Vector3D &v)
    { is.bread<fpreal64>(&v.x(), 1); is.bread<fpreal64>(&v.y(), 1);
      is.bread<fpreal64>(&v.z(), 1); }
    static void  loadData(UT_IStream &is, UT_Vector4D &v)
    { is.bread<fpreal64>(&v.x(), 1); is.bread<fpreal64>(&v.y(), 1);
      is.bread<fpreal64>(&v.z(), 1); is.bread<fpreal64>(&v.w(), 1); }
    static void  loadData(UT_IStream &is, UT_Matrix2D &v)
    { for (int r = 0; r < 2; r++) for (int c = 0; c < 2; c++) is.bread<fpreal64>(&v(r, c), 1); }
    static void  loadData(UT_IStream &is, UT_Matrix3D &v)
    { for (int r = 0; r < 3; r++) for (int c = 0; c < 3; c++) is.bread<fpreal64>(&v(r, c), 1); }
    static void  loadData(UT_IStream &is, UT_Matrix4D &v)
    { for (int r = 0; r < 4; r++) for (int c = 0; c < 4; c++) is.bread<fpreal64>(&v(r, c), 1); }
    static void  loadData(UT_IStream &is, UT_Vector2I &v)
    { is.bread<int64>(&v.x(), 1); is.bread<int64>(&v.y(), 1); }
    static void  loadData(UT_IStream &is, UT_Vector3I &v)
    { is.bread<int64>(&v.x(), 1); is.bread<int64>(&v.y(), 1);
      is.bread<int64>(&v.z(), 1); }
    static void  loadData(UT_IStream &is, UT_Vector4I &v)
    { is.bread<int64>(&v.x(), 1); is.bread<int64>(&v.y(), 1);
      is.bread<int64>(&v.z(), 1); is.bread<int64>(&v.w(), 1); }
    static void  loadData(UT_IStream &is, UT_StringHolder &v)
    { is.bread(v); }
    static void  loadData(UT_IStream &is, UT_SharedPtr<UT_Ramp> &v)
    {   UT_StringHolder   rampdata;
        loadData(is, rampdata);
        if (rampdata.isstring())
        {
            v.reset(new UT_Ramp());
            UT_IStream  istr((const char *) rampdata, rampdata.length(), UT_ISTREAM_ASCII);
            v->load(istr);
        }
        else v.reset();
    }
    static void  loadData(UT_IStream &is, PRM_DataItemHandle &v)
    {   UT_StringHolder   data;
        loadData(is, data);
        if (data.isstring())
        {
            // Find the data type.
            char *colon = UT_StringWrap(data).findChar(':');
            if (colon)
            {
                int             typelen = colon - data.buffer();
                UT_WorkBuffer   type;
                type.strncpy(data.buffer(), typelen);
                UT_IStream  istr(((const char *) data) + typelen + 1, data.length() - (typelen + 1), UT_ISTREAM_BINARY);
                
                v = PRM_DataFactory::parseBinary(type.buffer(), istr);
            }
        }
        else v.reset();
    }

    static void  saveData(std::ostream &os, int64 v)
    { UTwrite(os, &v); }
    static void  saveData(std::ostream &os, bool v)
    { int64 iv = v; UTwrite(os, &iv); }
    static void  saveData(std::ostream &os, fpreal64 v)
    { UTwrite<fpreal64>(os, &v); }
    static void  saveData(std::ostream &os, UT_Vector2D v)
    { UTwrite<fpreal64>(os, &v.x()); UTwrite<fpreal64>(os, &v.y()); }
    static void  saveData(std::ostream &os, UT_Vector3D v)
    { UTwrite<fpreal64>(os, &v.x()); UTwrite<fpreal64>(os, &v.y());
      UTwrite<fpreal64>(os, &v.z()); }
    static void  saveData(std::ostream &os, UT_Vector4D v)
    { UTwrite<fpreal64>(os, &v.x()); UTwrite<fpreal64>(os, &v.y());
      UTwrite<fpreal64>(os, &v.z()); UTwrite<fpreal64>(os, &v.w()); }
    static void  saveData(std::ostream &os, UT_Matrix2D v)
    { for (int r = 0; r < 2; r++) for (int c = 0; c < 2; c++) UTwrite<fpreal64>(os, &v(r, c)); }
    static void  saveData(std::ostream &os, UT_Matrix3D v)
    { for (int r = 0; r < 3; r++) for (int c = 0; c < 3; c++) UTwrite<fpreal64>(os, &v(r, c)); }
    static void  saveData(std::ostream &os, UT_Matrix4D v)
    { for (int r = 0; r < 4; r++) for (int c = 0; c < 4; c++) UTwrite<fpreal64>(os, &v(r, c)); }
    static void  saveData(std::ostream &os, UT_StringHolder s)
    { UT_StringWrap(s).saveBinary(os); }
    static void  saveData(std::ostream &os, UT_SharedPtr<UT_Ramp> s)
    {   UT_StringHolder         result;
        UT_OStringStream        ostr;
        if (s) s->save(ostr);
        result = ostr.str();
        saveData(os, result);
    }
    static void  saveData(std::ostream &os, PRM_DataItemHandle s)
    {   UT_StringHolder         result;
        UT_OStringStream        ostr;
        if (s) 
        {
            ostr << s->getDataTypeToken();
            ostr << ":";
            s->saveBinary(ostr);
        }
        result = ostr.str();
        saveData(os, result);
    }


    void         save(std::ostream &os) const
    {
        int32           v = version();
        UTwrite(os, &v);
        saveData(os, myGroup);
        saveData(os, mySkeletonRootPath);
        saveData(os, myMethod);
        saveData(os, myDualQuaternionBlendAttrib);
        saveData(os, myBoneTransformPath);
        saveData(os, myOtherAttribs);
        saveData(os, myDoNormals);
        saveData(os, myDeleteCaptureAttrib);
        saveData(os, myDeletePointColors);

    }

    bool         load(UT_IStream &is)
    {
        int32           v;
        is.bread(&v, 1);
        if (version() != v)
        {
            // Fail incompatible versions
            return false;
        }
        loadData(is, myGroup);
        loadData(is, mySkeletonRootPath);
        loadData(is, myMethod);
        loadData(is, myDualQuaternionBlendAttrib);
        loadData(is, myBoneTransformPath);
        loadData(is, myOtherAttribs);
        loadData(is, myDoNormals);
        loadData(is, myDeleteCaptureAttrib);
        loadData(is, myDeletePointColors);

        return true;
    }

    const UT_StringHolder & getGroup() const { return myGroup; }
    void setGroup(const UT_StringHolder & val) { myGroup = val; }
    UT_StringHolder opGroup(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getGroup();
        UT_StringHolder result;
        OP_Utils::evalOpParm(result, thissop, "group", cookparms.getCookTime(), 0);
        return result;
    }
    const UT_StringHolder & getSkeletonRootPath() const { return mySkeletonRootPath; }
    void setSkeletonRootPath(const UT_StringHolder & val) { mySkeletonRootPath = val; }
    UT_StringHolder opSkeletonRootPath(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getSkeletonRootPath();
        UT_StringHolder result;
        OP_Utils::evalOpParm(result, thissop, "skelrootpath", cookparms.getCookTime(), 0);
        return result;
    }
    Method getMethod() const { return Method(myMethod); }
    void setMethod(Method val) { myMethod = int64(val); }
    Method opMethod(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getMethod();
        int64 result;
        OP_Utils::evalOpParm(result, thissop, "method", cookparms.getCookTime(), 0);
        return Method(result);
    }
    const UT_StringHolder & getDualQuaternionBlendAttrib() const { return myDualQuaternionBlendAttrib; }
    void setDualQuaternionBlendAttrib(const UT_StringHolder & val) { myDualQuaternionBlendAttrib = val; }
    UT_StringHolder opDualQuaternionBlendAttrib(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getDualQuaternionBlendAttrib();
        UT_StringHolder result;
        OP_Utils::evalOpParm(result, thissop, "dqblendattrib", cookparms.getCookTime(), 0);
        return result;
    }
    const UT_StringHolder & getBoneTransformPath() const { return myBoneTransformPath; }
    void setBoneTransformPath(const UT_StringHolder & val) { myBoneTransformPath = val; }
    UT_StringHolder opBoneTransformPath(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getBoneTransformPath();
        UT_StringHolder result;
        OP_Utils::evalOpParm(result, thissop, "bonetransformpath", cookparms.getCookTime(), 0);
        return result;
    }
    const UT_StringHolder & getOtherAttribs() const { return myOtherAttribs; }
    void setOtherAttribs(const UT_StringHolder & val) { myOtherAttribs = val; }
    UT_StringHolder opOtherAttribs(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getOtherAttribs();
        UT_StringHolder result;
        OP_Utils::evalOpParm(result, thissop, "otherattribs", cookparms.getCookTime(), 0);
        return result;
    }
    bool getDoNormals() const { return myDoNormals; }
    void setDoNormals(bool val) { myDoNormals = val; }
    bool opDoNormals(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getDoNormals();
        bool result;
        OP_Utils::evalOpParm(result, thissop, "donormal", cookparms.getCookTime(), 0);
        return result;
    }
    bool getDeleteCaptureAttrib() const { return myDeleteCaptureAttrib; }
    void setDeleteCaptureAttrib(bool val) { myDeleteCaptureAttrib = val; }
    bool opDeleteCaptureAttrib(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getDeleteCaptureAttrib();
        bool result;
        OP_Utils::evalOpParm(result, thissop, "deletecaptureattrib", cookparms.getCookTime(), 0);
        return result;
    }
    bool getDeletePointColors() const { return myDeletePointColors; }
    void setDeletePointColors(bool val) { myDeletePointColors = val; }
    bool opDeletePointColors(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getDeletePointColors();
        bool result;
        OP_Utils::evalOpParm(result, thissop, "deletepointtcolors", cookparms.getCookTime(), 0);
        return result;
    }

private:
    UT_StringHolder myGroup;
    UT_StringHolder mySkeletonRootPath;
    int64 myMethod;
    UT_StringHolder myDualQuaternionBlendAttrib;
    UT_StringHolder myBoneTransformPath;
    UT_StringHolder myOtherAttribs;
    bool myDoNormals;
    bool myDeleteCaptureAttrib;
    bool myDeletePointColors;

};
