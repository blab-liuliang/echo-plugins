/* Automagically Generated by generate_proto.py
 * Do not Edit
 */
#pragma once

#include <SOP/SOP_NodeVerb.h>
#include <OP/OP_Utils.h>
#include <PRM/PRM_Parm.h>
#include <UT/UT_IStream.h>
#include <UT/UT_NTStreamUtil.h>
#include <UT/UT_Ramp.h>
#include <UT/UT_SharedPtr.h>
#include <UT/UT_StringHolder.h>
#include <UT/UT_StringStream.h>
#include <UT/UT_VectorTypes.h>
#include <SYS/SYS_Types.h>

using namespace UT::Literal;

class DEP_MicroNode;
namespace SOP_CurveNetworkEnums
{
    enum class Surftype
    {
        ROWS = 0,
        COLS,
        ROWCOL,
        TRIANGLES,
        QUADS,
        ALTTRIANGLES,
        REVTRIANGLES
    };
    enum class Closev
    {
        NONEWV = 0,
        WV,
        IFPRIMWV
    };
    enum class Skinops
    {
        ALL = 0,
        GROUP,
        SKIP
    };
}


class SOP_API SOP_CurveNetworkParms  : public SOP_NodeParms
{
public:
    static int version() { return 1; }

    SOP_CurveNetworkParms()
    {
        myUprims = ""_sh;
        myVprims = ""_sh;
        mySurftype = 4;
        myKeepshape = false;
        myClosev = 0;
        myForce = false;
        myOrderv = 4;
        mySkinops = 0;
        myInc = 2;
        myPrim = false;
        myPolys = true;

    }

    explicit SOP_CurveNetworkParms(const SOP_CurveNetworkParms &) = default;

    virtual ~SOP_CurveNetworkParms() {}

    bool operator==(const SOP_CurveNetworkParms &src) const
    {
        if (myUprims != src.myUprims) return false;
        if (myVprims != src.myVprims) return false;
        if (mySurftype != src.mySurftype) return false;
        if (myKeepshape != src.myKeepshape) return false;
        if (myClosev != src.myClosev) return false;
        if (myForce != src.myForce) return false;
        if (myOrderv != src.myOrderv) return false;
        if (mySkinops != src.mySkinops) return false;
        if (myInc != src.myInc) return false;
        if (myPrim != src.myPrim) return false;
        if (myPolys != src.myPolys) return false;

        return true;
    }
    bool operator!=(const SOP_CurveNetworkParms &src) const
    {
        return !operator==(src);
    }
    using Surftype = SOP_CurveNetworkEnums::Surftype;
    using Closev = SOP_CurveNetworkEnums::Closev;
    using Skinops = SOP_CurveNetworkEnums::Skinops;



    void        buildFromOp(const OP_Node *node, fpreal time, DEP_MicroNode *depnode)
    {
        if (true)
            OP_Utils::evalOpParm(myUprims, node, "uprims", time, 0);
        else myUprims = ""_sh;
        if (true)
            OP_Utils::evalOpParm(myVprims, node, "vprims", time, 0);
        else myVprims = ""_sh;
        if (true)
            OP_Utils::evalOpParm(mySurftype, node, "surftype", time, 0);
        else mySurftype = 4;
        if (true)
            OP_Utils::evalOpParm(myKeepshape, node, "keepshape", time, 0);
        else myKeepshape = false;
        if (true && ( (!((((node->getInput(1)!=0)==1))||((getVprims()!="")))) ) )
            OP_Utils::evalOpParm(myClosev, node, "closev", time, 0);
        else myClosev = 0;
        if (true && ( (!((((node->getInput(1)!=0)==1))||((getVprims()!="")))) ) )
            OP_Utils::evalOpParm(myForce, node, "force", time, 0);
        else myForce = false;
        if (true && ( (!((((node->getInput(1)!=0)==1))||((getVprims()!=""))||((getForce()==0)))) ) )
            OP_Utils::evalOpParm(myOrderv, node, "orderv", time, 0);
        else myOrderv = 4;
        if (true && ( (!((((node->getInput(1)!=0)==1))||((getVprims()!="")))) ) )
            OP_Utils::evalOpParm(mySkinops, node, "skinops", time, 0);
        else mySkinops = 0;
        if (true && ( (!((((node->getInput(1)!=0)==1))||((getVprims()!=""))||((int64(getSkinops())==0)))) ) )
            OP_Utils::evalOpParm(myInc, node, "inc", time, 0);
        else myInc = 2;
        if (true)
            OP_Utils::evalOpParm(myPrim, node, "prim", time, 0);
        else myPrim = false;
        if (true)
            OP_Utils::evalOpParm(myPolys, node, "polys", time, 0);
        else myPolys = true;

    }


    virtual void loadFromOpSubclass(const LoadParms &loadparms)
    {
        buildFromOp(loadparms.node(), loadparms.context().getTime(), loadparms.depnode());
    }


    virtual void copyFrom(const SOP_NodeParms *src)
    {
        *this = *((const SOP_CurveNetworkParms *)src);
    }

    template <typename T>
    void
    doGetParmValue(exint idx, T &value) const
    {
        switch (idx)
        {
            case 0:
                coerceValue(value, myUprims);
                break;
            case 1:
                coerceValue(value, myVprims);
                break;
            case 2:
                coerceValue(value, mySurftype);
                break;
            case 3:
                coerceValue(value, myKeepshape);
                break;
            case 4:
                coerceValue(value, myClosev);
                break;
            case 5:
                coerceValue(value, myForce);
                break;
            case 6:
                coerceValue(value, myOrderv);
                break;
            case 7:
                coerceValue(value, mySkinops);
                break;
            case 8:
                coerceValue(value, myInc);
                break;
            case 9:
                coerceValue(value, myPrim);
                break;
            case 10:
                coerceValue(value, myPolys);
                break;

        }
    }

    void        getParmValue(exint idx, exint &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, fpreal &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Vector2D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Vector3D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Vector4D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Matrix2D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Matrix3D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Matrix4D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_StringHolder &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_SharedPtr<UT_Ramp> &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, PRM_DataItemHandle &value) const
    { doGetParmValue(idx, value); }

    template <typename T>
    void
    doSetParmValue(exint idx, const T &value) 
    {
        switch (idx)
        {
            case 0:
                coerceValue(myUprims, value);
                break;
            case 1:
                coerceValue(myVprims, value);
                break;
            case 2:
                coerceValue(mySurftype, value);
                break;
            case 3:
                coerceValue(myKeepshape, value);
                break;
            case 4:
                coerceValue(myClosev, value);
                break;
            case 5:
                coerceValue(myForce, value);
                break;
            case 6:
                coerceValue(myOrderv, value);
                break;
            case 7:
                coerceValue(mySkinops, value);
                break;
            case 8:
                coerceValue(myInc, value);
                break;
            case 9:
                coerceValue(myPrim, value);
                break;
            case 10:
                coerceValue(myPolys, value);
                break;

        }
    }

    void        setParmValue(exint idx, const exint &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const fpreal &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Vector2D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Vector3D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Vector4D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Matrix2D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Matrix3D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Matrix4D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_StringHolder &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_SharedPtr<UT_Ramp> &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const PRM_DataItemHandle &value) 
    { doSetParmValue(idx, value); }

    virtual exint    getNumParms() const
    {
        return 11;
    }

    virtual const char *getParmName(exint fieldnum) const
    {
        switch (fieldnum)
        {
            case 0:
                return "uprims";
            case 1:
                return "vprims";
            case 2:
                return "surftype";
            case 3:
                return "keepshape";
            case 4:
                return "closev";
            case 5:
                return "force";
            case 6:
                return "orderv";
            case 7:
                return "skinops";
            case 8:
                return "inc";
            case 9:
                return "prim";
            case 10:
                return "polys";

        }
        return 0;
    }

    virtual ParmType getParmType(exint fieldnum) const
    {
        switch (fieldnum)
        {
                case 0:
                    return PARM_STRING;
                case 1:
                    return PARM_STRING;
                case 2:
                    return PARM_INTEGER;
                case 3:
                    return PARM_INTEGER;
                case 4:
                    return PARM_INTEGER;
                case 5:
                    return PARM_INTEGER;
                case 6:
                    return PARM_INTEGER;
                case 7:
                    return PARM_INTEGER;
                case 8:
                    return PARM_INTEGER;
                case 9:
                    return PARM_INTEGER;
                case 10:
                    return PARM_INTEGER;

        }
        return PARM_UNSUPPORTED;
    }

    // Boiler plate to load individual types.
    static void  loadData(UT_IStream &is, int64 &v)
    { is.bread(&v, 1); }
    static void  loadData(UT_IStream &is, bool &v)
    { int64     iv; is.bread(&iv, 1); v = iv; }
    static void  loadData(UT_IStream &is, fpreal64 &v)
    { is.bread<fpreal64>(&v, 1); }
    static void  loadData(UT_IStream &is, UT_Vector2D &v)
    { is.bread<fpreal64>(&v.x(), 1); is.bread<fpreal64>(&v.y(), 1); }
    static void  loadData(UT_IStream &is, UT_Vector3D &v)
    { is.bread<fpreal64>(&v.x(), 1); is.bread<fpreal64>(&v.y(), 1);
      is.bread<fpreal64>(&v.z(), 1); }
    static void  loadData(UT_IStream &is, UT_Vector4D &v)
    { is.bread<fpreal64>(&v.x(), 1); is.bread<fpreal64>(&v.y(), 1);
      is.bread<fpreal64>(&v.z(), 1); is.bread<fpreal64>(&v.w(), 1); }
    static void  loadData(UT_IStream &is, UT_Matrix2D &v)
    { for (int r = 0; r < 2; r++) for (int c = 0; c < 2; c++) is.bread<fpreal64>(&v(r, c), 1); }
    static void  loadData(UT_IStream &is, UT_Matrix3D &v)
    { for (int r = 0; r < 3; r++) for (int c = 0; c < 3; c++) is.bread<fpreal64>(&v(r, c), 1); }
    static void  loadData(UT_IStream &is, UT_Matrix4D &v)
    { for (int r = 0; r < 4; r++) for (int c = 0; c < 4; c++) is.bread<fpreal64>(&v(r, c), 1); }
    static void  loadData(UT_IStream &is, UT_Vector2I &v)
    { is.bread<int64>(&v.x(), 1); is.bread<int64>(&v.y(), 1); }
    static void  loadData(UT_IStream &is, UT_Vector3I &v)
    { is.bread<int64>(&v.x(), 1); is.bread<int64>(&v.y(), 1);
      is.bread<int64>(&v.z(), 1); }
    static void  loadData(UT_IStream &is, UT_Vector4I &v)
    { is.bread<int64>(&v.x(), 1); is.bread<int64>(&v.y(), 1);
      is.bread<int64>(&v.z(), 1); is.bread<int64>(&v.w(), 1); }
    static void  loadData(UT_IStream &is, UT_StringHolder &v)
    { is.bread(v); }
    static void  loadData(UT_IStream &is, UT_SharedPtr<UT_Ramp> &v)
    {   UT_StringHolder   rampdata;
        loadData(is, rampdata);
        if (rampdata.isstring())
        {
            v.reset(new UT_Ramp());
            UT_IStream  istr((const char *) rampdata, rampdata.length(), UT_ISTREAM_ASCII);
            v->load(istr);
        }
        else v.reset();
    }
    static void  loadData(UT_IStream &is, PRM_DataItemHandle &v)
    {   UT_StringHolder   data;
        loadData(is, data);
        if (data.isstring())
        {
            // Find the data type.
            char *colon = UT_StringWrap(data).findChar(':');
            if (colon)
            {
                int             typelen = colon - data.buffer();
                UT_WorkBuffer   type;
                type.strncpy(data.buffer(), typelen);
                UT_IStream  istr(((const char *) data) + typelen + 1, data.length() - (typelen + 1), UT_ISTREAM_BINARY);
                
                v = PRM_DataFactory::parseBinary(type.buffer(), istr);
            }
        }
        else v.reset();
    }

    static void  saveData(std::ostream &os, int64 v)
    { UTwrite(os, &v); }
    static void  saveData(std::ostream &os, bool v)
    { int64 iv = v; UTwrite(os, &iv); }
    static void  saveData(std::ostream &os, fpreal64 v)
    { UTwrite<fpreal64>(os, &v); }
    static void  saveData(std::ostream &os, UT_Vector2D v)
    { UTwrite<fpreal64>(os, &v.x()); UTwrite<fpreal64>(os, &v.y()); }
    static void  saveData(std::ostream &os, UT_Vector3D v)
    { UTwrite<fpreal64>(os, &v.x()); UTwrite<fpreal64>(os, &v.y());
      UTwrite<fpreal64>(os, &v.z()); }
    static void  saveData(std::ostream &os, UT_Vector4D v)
    { UTwrite<fpreal64>(os, &v.x()); UTwrite<fpreal64>(os, &v.y());
      UTwrite<fpreal64>(os, &v.z()); UTwrite<fpreal64>(os, &v.w()); }
    static void  saveData(std::ostream &os, UT_Matrix2D v)
    { for (int r = 0; r < 2; r++) for (int c = 0; c < 2; c++) UTwrite<fpreal64>(os, &v(r, c)); }
    static void  saveData(std::ostream &os, UT_Matrix3D v)
    { for (int r = 0; r < 3; r++) for (int c = 0; c < 3; c++) UTwrite<fpreal64>(os, &v(r, c)); }
    static void  saveData(std::ostream &os, UT_Matrix4D v)
    { for (int r = 0; r < 4; r++) for (int c = 0; c < 4; c++) UTwrite<fpreal64>(os, &v(r, c)); }
    static void  saveData(std::ostream &os, UT_StringHolder s)
    { UT_StringWrap(s).saveBinary(os); }
    static void  saveData(std::ostream &os, UT_SharedPtr<UT_Ramp> s)
    {   UT_StringHolder         result;
        UT_OStringStream        ostr;
        if (s) s->save(ostr);
        result = ostr.str();
        saveData(os, result);
    }
    static void  saveData(std::ostream &os, PRM_DataItemHandle s)
    {   UT_StringHolder         result;
        UT_OStringStream        ostr;
        if (s) 
        {
            ostr << s->getDataTypeToken();
            ostr << ":";
            s->saveBinary(ostr);
        }
        result = ostr.str();
        saveData(os, result);
    }


    void         save(std::ostream &os) const
    {
        int32           v = version();
        UTwrite(os, &v);
        saveData(os, myUprims);
        saveData(os, myVprims);
        saveData(os, mySurftype);
        saveData(os, myKeepshape);
        saveData(os, myClosev);
        saveData(os, myForce);
        saveData(os, myOrderv);
        saveData(os, mySkinops);
        saveData(os, myInc);
        saveData(os, myPrim);
        saveData(os, myPolys);

    }

    bool         load(UT_IStream &is)
    {
        int32           v;
        is.bread(&v, 1);
        if (version() != v)
        {
            // Fail incompatible versions
            return false;
        }
        loadData(is, myUprims);
        loadData(is, myVprims);
        loadData(is, mySurftype);
        loadData(is, myKeepshape);
        loadData(is, myClosev);
        loadData(is, myForce);
        loadData(is, myOrderv);
        loadData(is, mySkinops);
        loadData(is, myInc);
        loadData(is, myPrim);
        loadData(is, myPolys);

        return true;
    }

    const UT_StringHolder & getUprims() const { return myUprims; }
    void setUprims(const UT_StringHolder & val) { myUprims = val; }
    UT_StringHolder opUprims(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getUprims();
        UT_StringHolder result;
        OP_Utils::evalOpParm(result, thissop, "uprims", cookparms.getCookTime(), 0);
        return result;
    }
    const UT_StringHolder & getVprims() const { return myVprims; }
    void setVprims(const UT_StringHolder & val) { myVprims = val; }
    UT_StringHolder opVprims(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getVprims();
        UT_StringHolder result;
        OP_Utils::evalOpParm(result, thissop, "vprims", cookparms.getCookTime(), 0);
        return result;
    }
    Surftype getSurftype() const { return Surftype(mySurftype); }
    void setSurftype(Surftype val) { mySurftype = int64(val); }
    Surftype opSurftype(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getSurftype();
        int64 result;
        OP_Utils::evalOpParm(result, thissop, "surftype", cookparms.getCookTime(), 0);
        return Surftype(result);
    }
    bool getKeepshape() const { return myKeepshape; }
    void setKeepshape(bool val) { myKeepshape = val; }
    bool opKeepshape(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getKeepshape();
        bool result;
        OP_Utils::evalOpParm(result, thissop, "keepshape", cookparms.getCookTime(), 0);
        return result;
    }
    Closev getClosev() const { return Closev(myClosev); }
    void setClosev(Closev val) { myClosev = int64(val); }
    Closev opClosev(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getClosev();
        int64 result;
        OP_Utils::evalOpParm(result, thissop, "closev", cookparms.getCookTime(), 0);
        return Closev(result);
    }
    bool getForce() const { return myForce; }
    void setForce(bool val) { myForce = val; }
    bool opForce(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getForce();
        bool result;
        OP_Utils::evalOpParm(result, thissop, "force", cookparms.getCookTime(), 0);
        return result;
    }
    int64 getOrderv() const { return myOrderv; }
    void setOrderv(int64 val) { myOrderv = val; }
    int64 opOrderv(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getOrderv();
        int64 result;
        OP_Utils::evalOpParm(result, thissop, "orderv", cookparms.getCookTime(), 0);
        return result;
    }
    Skinops getSkinops() const { return Skinops(mySkinops); }
    void setSkinops(Skinops val) { mySkinops = int64(val); }
    Skinops opSkinops(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getSkinops();
        int64 result;
        OP_Utils::evalOpParm(result, thissop, "skinops", cookparms.getCookTime(), 0);
        return Skinops(result);
    }
    int64 getInc() const { return myInc; }
    void setInc(int64 val) { myInc = val; }
    int64 opInc(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getInc();
        int64 result;
        OP_Utils::evalOpParm(result, thissop, "inc", cookparms.getCookTime(), 0);
        return result;
    }
    bool getPrim() const { return myPrim; }
    void setPrim(bool val) { myPrim = val; }
    bool opPrim(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getPrim();
        bool result;
        OP_Utils::evalOpParm(result, thissop, "prim", cookparms.getCookTime(), 0);
        return result;
    }
    bool getPolys() const { return myPolys; }
    void setPolys(bool val) { myPolys = val; }
    bool opPolys(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getPolys();
        bool result;
        OP_Utils::evalOpParm(result, thissop, "polys", cookparms.getCookTime(), 0);
        return result;
    }

private:
    UT_StringHolder myUprims;
    UT_StringHolder myVprims;
    int64 mySurftype;
    bool myKeepshape;
    int64 myClosev;
    bool myForce;
    int64 myOrderv;
    int64 mySkinops;
    int64 myInc;
    bool myPrim;
    bool myPolys;

};
