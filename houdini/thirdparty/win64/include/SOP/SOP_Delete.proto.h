/* Automagically Generated by generate_proto.py
 * Do not Edit
 */
#pragma once

#include <SOP/SOP_NodeVerb.h>
#include <OP/OP_Utils.h>
#include <PRM/PRM_Parm.h>
#include <UT/UT_IStream.h>
#include <UT/UT_NTStreamUtil.h>
#include <UT/UT_Ramp.h>
#include <UT/UT_SharedPtr.h>
#include <UT/UT_StringHolder.h>
#include <UT/UT_StringStream.h>
#include <UT/UT_VectorTypes.h>
#include <SYS/SYS_Types.h>

using namespace UT::Literal;

class DEP_MicroNode;
namespace SOP_DeleteEnums
{
    enum class Negate
    {
        DELE = 0,
        KEEP
    };
    enum class Entity
    {
        PRIMITIVE = 0,
        POINT,
        EDGE
    };
    enum class Groupop
    {
        PATTERN = 0,
        RANGE,
        FILTER
    };
    enum class Boundtype
    {
        USEBBOX = 0,
        USEBSPHERE
    };
}


class SOP_API SOP_DeleteParms  : public SOP_NodeParms
{
public:
    static int version() { return 1; }

    SOP_DeleteParms()
    {
        myGroup = ""_sh;
        myNegate = 0;
        myEntity = 0;
        myAffectnumber = false;
        myGroupop = 0;
        myFilter = 1;
        myPattern = "!*"_sh;
        myRange = UT_Vector2I(0,0);
        mySelect = UT_Vector2I(1,2);
        myAffectvolume = false;
        myBoundtype = 0;
        mySize = UT_Vector3D(1,1,1);
        myT = UT_Vector3D(0,0,0);
        myAffectnormal = false;
        myCamerapath = ""_sh;
        myAffectdegenerate = false;
        myDegenerate = false;
        myZaf = false;
        myDoopen = false;
        myTol = 0.001;
        myRemovegrp = false;
        myKeeppoints = false;
        myGeotype = 0;
        myDir = UT_Vector3D(0,0,1);
        myAngle = 180;

    }

    explicit SOP_DeleteParms(const SOP_DeleteParms &) = default;

    virtual ~SOP_DeleteParms() {}

    bool operator==(const SOP_DeleteParms &src) const
    {
        if (myGroup != src.myGroup) return false;
        if (myNegate != src.myNegate) return false;
        if (myEntity != src.myEntity) return false;
        if (myAffectnumber != src.myAffectnumber) return false;
        if (myGroupop != src.myGroupop) return false;
        if (myFilter != src.myFilter) return false;
        if (myPattern != src.myPattern) return false;
        if (myRange != src.myRange) return false;
        if (mySelect != src.mySelect) return false;
        if (myAffectvolume != src.myAffectvolume) return false;
        if (myBoundtype != src.myBoundtype) return false;
        if (mySize != src.mySize) return false;
        if (myT != src.myT) return false;
        if (myAffectnormal != src.myAffectnormal) return false;
        if (myCamerapath != src.myCamerapath) return false;
        if (myAffectdegenerate != src.myAffectdegenerate) return false;
        if (myDegenerate != src.myDegenerate) return false;
        if (myZaf != src.myZaf) return false;
        if (myDoopen != src.myDoopen) return false;
        if (myTol != src.myTol) return false;
        if (myRemovegrp != src.myRemovegrp) return false;
        if (myKeeppoints != src.myKeeppoints) return false;
        if (myGeotype != src.myGeotype) return false;
        if (myDir != src.myDir) return false;
        if (myAngle != src.myAngle) return false;

        return true;
    }
    bool operator!=(const SOP_DeleteParms &src) const
    {
        return !operator==(src);
    }
    using Negate = SOP_DeleteEnums::Negate;
    using Entity = SOP_DeleteEnums::Entity;
    using Groupop = SOP_DeleteEnums::Groupop;
    using Boundtype = SOP_DeleteEnums::Boundtype;



    void        buildFromOp(const OP_Node *node, fpreal time, DEP_MicroNode *depnode)
    {
        if (true)
            OP_Utils::evalOpParm(myGroup, node, "group", time, 0);
        else myGroup = ""_sh;
        if (true)
            OP_Utils::evalOpParm(myNegate, node, "negate", time, 0);
        else myNegate = 0;
        if (true)
            OP_Utils::evalOpParm(myEntity, node, "entity", time, 0);
        else myEntity = 0;
        if (true)
            OP_Utils::evalOpParm(myAffectnumber, node, "affectnumber", time, 0);
        else myAffectnumber = false;
        if (true && ( (!(((getAffectnumber()==0)))) ) )
            OP_Utils::evalOpParm(myGroupop, node, "groupop", time, 0);
        else myGroupop = 0;
        if (true && ( (!(((getAffectnumber()==0))||((int64(getGroupop())!=2)))) ) )
            OP_Utils::evalOpParm(myFilter, node, "filter", time, 0);
        else myFilter = 1;
        if (true && ( (!(((getAffectnumber()==0))||((int64(getGroupop())!=0)))) ) )
            OP_Utils::evalOpParm(myPattern, node, "pattern", time, 0);
        else myPattern = "!*"_sh;
        if (true && ( (!(((getAffectnumber()==0))||((int64(getGroupop())!=1)))) ) )
            OP_Utils::evalOpParm(myRange, node, "range", time, 0);
        else myRange = UT_Vector2I(0,0);
        if (true && ( (!(((getAffectnumber()==0))||((int64(getGroupop())!=1)))) ) )
            OP_Utils::evalOpParm(mySelect, node, "select", time, 0);
        else mySelect = UT_Vector2I(1,2);
        if (true)
            OP_Utils::evalOpParm(myAffectvolume, node, "affectvolume", time, 0);
        else myAffectvolume = false;
        if (true && ( (!(((getAffectvolume()==0)))) ) )
            OP_Utils::evalOpParm(myBoundtype, node, "boundtype", time, 0);
        else myBoundtype = 0;
        if (true && ( (!(((getAffectvolume()==0)))) ) )
            OP_Utils::evalOpParm(mySize, node, "size", time, 0);
        else mySize = UT_Vector3D(1,1,1);
        if (true && ( (!(((getAffectvolume()==0)))) ) )
            OP_Utils::evalOpParm(myT, node, "t", time, 0);
        else myT = UT_Vector3D(0,0,0);
        if (true)
            OP_Utils::evalOpParm(myAffectnormal, node, "affectnormal", time, 0);
        else myAffectnormal = false;
        if (true && ( (!(((getAffectnormal()==0)))) ) )
            OP_Utils::evalOpParm(myCamerapath, node, "camerapath", time, 0);
        else myCamerapath = ""_sh;
        if (true)
            OP_Utils::evalOpParm(myAffectdegenerate, node, "affectdegenerate", time, 0);
        else myAffectdegenerate = false;
        if (true && ( (!(((getAffectdegenerate()==0)))) ) )
            OP_Utils::evalOpParm(myDegenerate, node, "degenerate", time, 0);
        else myDegenerate = false;
        if (true && ( (!(((getAffectdegenerate()==0))||((int64(getEntity())!=0)))) ) )
            OP_Utils::evalOpParm(myZaf, node, "zaf", time, 0);
        else myZaf = false;
        if (true && ( (!(((getAffectdegenerate()==0))||((int64(getEntity())!=0))||((getZaf()==0)))) ) )
            OP_Utils::evalOpParm(myDoopen, node, "doopen", time, 0);
        else myDoopen = false;
        if (true && ( (!(((getAffectdegenerate()==0))||((getZaf()==0)&&(getDegenerate()==0)))) ) )
            OP_Utils::evalOpParm(myTol, node, "tol", time, 0);
        else myTol = 0.001;
        if (true)
            OP_Utils::evalOpParm(myRemovegrp, node, "removegrp", time, 0);
        else myRemovegrp = false;
        if (true && ( (!(((int64(getEntity())!=0)))) ) )
            OP_Utils::evalOpParm(myKeeppoints, node, "keeppoints", time, 0);
        else myKeeppoints = false;
        if (true && ( (!(((getAffectnumber()==0)&&(getAffectvolume()==0)&&(getAffectnormal()==0)&&(getAffectdegenerate()==0)))) ) )
            OP_Utils::evalOpParm(myGeotype, node, "geotype", time, 0);
        else myGeotype = 0;
        if (true && ( (!(((getAffectnormal()==0))||((getCamerapath()!="")))) ) )
            OP_Utils::evalOpParm(myDir, node, "dir", time, 0);
        else myDir = UT_Vector3D(0,0,1);
        if (true && ( (!(((getAffectnormal()==0))||((getCamerapath()!="")))) ) )
            OP_Utils::evalOpParm(myAngle, node, "angle", time, 0);
        else myAngle = 180;

    }


    virtual void loadFromOpSubclass(const LoadParms &loadparms)
    {
        buildFromOp(loadparms.node(), loadparms.context().getTime(), loadparms.depnode());
    }


    virtual void copyFrom(const SOP_NodeParms *src)
    {
        *this = *((const SOP_DeleteParms *)src);
    }

    template <typename T>
    void
    doGetParmValue(exint idx, T &value) const
    {
        switch (idx)
        {
            case 0:
                coerceValue(value, myGroup);
                break;
            case 1:
                coerceValue(value, myNegate);
                break;
            case 2:
                coerceValue(value, myEntity);
                break;
            case 3:
                coerceValue(value, myAffectnumber);
                break;
            case 4:
                coerceValue(value, myGroupop);
                break;
            case 5:
                coerceValue(value, myFilter);
                break;
            case 6:
                coerceValue(value, myPattern);
                break;
            case 7:
                coerceValue(value, myRange);
                break;
            case 8:
                coerceValue(value, mySelect);
                break;
            case 9:
                coerceValue(value, myAffectvolume);
                break;
            case 10:
                coerceValue(value, myBoundtype);
                break;
            case 11:
                coerceValue(value, mySize);
                break;
            case 12:
                coerceValue(value, myT);
                break;
            case 13:
                coerceValue(value, myAffectnormal);
                break;
            case 14:
                coerceValue(value, myCamerapath);
                break;
            case 15:
                coerceValue(value, myAffectdegenerate);
                break;
            case 16:
                coerceValue(value, myDegenerate);
                break;
            case 17:
                coerceValue(value, myZaf);
                break;
            case 18:
                coerceValue(value, myDoopen);
                break;
            case 19:
                coerceValue(value, myTol);
                break;
            case 20:
                coerceValue(value, myRemovegrp);
                break;
            case 21:
                coerceValue(value, myKeeppoints);
                break;
            case 22:
                coerceValue(value, myGeotype);
                break;
            case 23:
                coerceValue(value, myDir);
                break;
            case 24:
                coerceValue(value, myAngle);
                break;

        }
    }

    void        getParmValue(exint idx, exint &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, fpreal &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Vector2D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Vector3D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Vector4D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Matrix2D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Matrix3D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Matrix4D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_StringHolder &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_SharedPtr<UT_Ramp> &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, PRM_DataItemHandle &value) const
    { doGetParmValue(idx, value); }

    template <typename T>
    void
    doSetParmValue(exint idx, const T &value) 
    {
        switch (idx)
        {
            case 0:
                coerceValue(myGroup, value);
                break;
            case 1:
                coerceValue(myNegate, value);
                break;
            case 2:
                coerceValue(myEntity, value);
                break;
            case 3:
                coerceValue(myAffectnumber, value);
                break;
            case 4:
                coerceValue(myGroupop, value);
                break;
            case 5:
                coerceValue(myFilter, value);
                break;
            case 6:
                coerceValue(myPattern, value);
                break;
            case 7:
                coerceValue(myRange, value);
                break;
            case 8:
                coerceValue(mySelect, value);
                break;
            case 9:
                coerceValue(myAffectvolume, value);
                break;
            case 10:
                coerceValue(myBoundtype, value);
                break;
            case 11:
                coerceValue(mySize, value);
                break;
            case 12:
                coerceValue(myT, value);
                break;
            case 13:
                coerceValue(myAffectnormal, value);
                break;
            case 14:
                coerceValue(myCamerapath, value);
                break;
            case 15:
                coerceValue(myAffectdegenerate, value);
                break;
            case 16:
                coerceValue(myDegenerate, value);
                break;
            case 17:
                coerceValue(myZaf, value);
                break;
            case 18:
                coerceValue(myDoopen, value);
                break;
            case 19:
                coerceValue(myTol, value);
                break;
            case 20:
                coerceValue(myRemovegrp, value);
                break;
            case 21:
                coerceValue(myKeeppoints, value);
                break;
            case 22:
                coerceValue(myGeotype, value);
                break;
            case 23:
                coerceValue(myDir, value);
                break;
            case 24:
                coerceValue(myAngle, value);
                break;

        }
    }

    void        setParmValue(exint idx, const exint &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const fpreal &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Vector2D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Vector3D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Vector4D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Matrix2D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Matrix3D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Matrix4D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_StringHolder &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_SharedPtr<UT_Ramp> &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const PRM_DataItemHandle &value) 
    { doSetParmValue(idx, value); }

    virtual exint    getNumParms() const
    {
        return 25;
    }

    virtual const char *getParmName(exint fieldnum) const
    {
        switch (fieldnum)
        {
            case 0:
                return "group";
            case 1:
                return "negate";
            case 2:
                return "entity";
            case 3:
                return "affectnumber";
            case 4:
                return "groupop";
            case 5:
                return "filter";
            case 6:
                return "pattern";
            case 7:
                return "range";
            case 8:
                return "select";
            case 9:
                return "affectvolume";
            case 10:
                return "boundtype";
            case 11:
                return "size";
            case 12:
                return "t";
            case 13:
                return "affectnormal";
            case 14:
                return "camerapath";
            case 15:
                return "affectdegenerate";
            case 16:
                return "degenerate";
            case 17:
                return "zaf";
            case 18:
                return "doopen";
            case 19:
                return "tol";
            case 20:
                return "removegrp";
            case 21:
                return "keeppoints";
            case 22:
                return "geotype";
            case 23:
                return "dir";
            case 24:
                return "angle";

        }
        return 0;
    }

    virtual ParmType getParmType(exint fieldnum) const
    {
        switch (fieldnum)
        {
                case 0:
                    return PARM_STRING;
                case 1:
                    return PARM_INTEGER;
                case 2:
                    return PARM_INTEGER;
                case 3:
                    return PARM_INTEGER;
                case 4:
                    return PARM_INTEGER;
                case 5:
                    return PARM_INTEGER;
                case 6:
                    return PARM_STRING;
                case 7:
                    return PARM_VECTOR2;
                case 8:
                    return PARM_VECTOR2;
                case 9:
                    return PARM_INTEGER;
                case 10:
                    return PARM_INTEGER;
                case 11:
                    return PARM_VECTOR3;
                case 12:
                    return PARM_VECTOR3;
                case 13:
                    return PARM_INTEGER;
                case 14:
                    return PARM_STRING;
                case 15:
                    return PARM_INTEGER;
                case 16:
                    return PARM_INTEGER;
                case 17:
                    return PARM_INTEGER;
                case 18:
                    return PARM_INTEGER;
                case 19:
                    return PARM_FLOAT;
                case 20:
                    return PARM_INTEGER;
                case 21:
                    return PARM_INTEGER;
                case 22:
                    return PARM_INTEGER;
                case 23:
                    return PARM_VECTOR3;
                case 24:
                    return PARM_FLOAT;

        }
        return PARM_UNSUPPORTED;
    }

    // Boiler plate to load individual types.
    static void  loadData(UT_IStream &is, int64 &v)
    { is.bread(&v, 1); }
    static void  loadData(UT_IStream &is, bool &v)
    { int64     iv; is.bread(&iv, 1); v = iv; }
    static void  loadData(UT_IStream &is, fpreal64 &v)
    { is.bread<fpreal64>(&v, 1); }
    static void  loadData(UT_IStream &is, UT_Vector2D &v)
    { is.bread<fpreal64>(&v.x(), 1); is.bread<fpreal64>(&v.y(), 1); }
    static void  loadData(UT_IStream &is, UT_Vector3D &v)
    { is.bread<fpreal64>(&v.x(), 1); is.bread<fpreal64>(&v.y(), 1);
      is.bread<fpreal64>(&v.z(), 1); }
    static void  loadData(UT_IStream &is, UT_Vector4D &v)
    { is.bread<fpreal64>(&v.x(), 1); is.bread<fpreal64>(&v.y(), 1);
      is.bread<fpreal64>(&v.z(), 1); is.bread<fpreal64>(&v.w(), 1); }
    static void  loadData(UT_IStream &is, UT_Matrix2D &v)
    { for (int r = 0; r < 2; r++) for (int c = 0; c < 2; c++) is.bread<fpreal64>(&v(r, c), 1); }
    static void  loadData(UT_IStream &is, UT_Matrix3D &v)
    { for (int r = 0; r < 3; r++) for (int c = 0; c < 3; c++) is.bread<fpreal64>(&v(r, c), 1); }
    static void  loadData(UT_IStream &is, UT_Matrix4D &v)
    { for (int r = 0; r < 4; r++) for (int c = 0; c < 4; c++) is.bread<fpreal64>(&v(r, c), 1); }
    static void  loadData(UT_IStream &is, UT_Vector2I &v)
    { is.bread<int64>(&v.x(), 1); is.bread<int64>(&v.y(), 1); }
    static void  loadData(UT_IStream &is, UT_Vector3I &v)
    { is.bread<int64>(&v.x(), 1); is.bread<int64>(&v.y(), 1);
      is.bread<int64>(&v.z(), 1); }
    static void  loadData(UT_IStream &is, UT_Vector4I &v)
    { is.bread<int64>(&v.x(), 1); is.bread<int64>(&v.y(), 1);
      is.bread<int64>(&v.z(), 1); is.bread<int64>(&v.w(), 1); }
    static void  loadData(UT_IStream &is, UT_StringHolder &v)
    { is.bread(v); }
    static void  loadData(UT_IStream &is, UT_SharedPtr<UT_Ramp> &v)
    {   UT_StringHolder   rampdata;
        loadData(is, rampdata);
        if (rampdata.isstring())
        {
            v.reset(new UT_Ramp());
            UT_IStream  istr((const char *) rampdata, rampdata.length(), UT_ISTREAM_ASCII);
            v->load(istr);
        }
        else v.reset();
    }
    static void  loadData(UT_IStream &is, PRM_DataItemHandle &v)
    {   UT_StringHolder   data;
        loadData(is, data);
        if (data.isstring())
        {
            // Find the data type.
            char *colon = UT_StringWrap(data).findChar(':');
            if (colon)
            {
                int             typelen = colon - data.buffer();
                UT_WorkBuffer   type;
                type.strncpy(data.buffer(), typelen);
                UT_IStream  istr(((const char *) data) + typelen + 1, data.length() - (typelen + 1), UT_ISTREAM_BINARY);
                
                v = PRM_DataFactory::parseBinary(type.buffer(), istr);
            }
        }
        else v.reset();
    }

    static void  saveData(std::ostream &os, int64 v)
    { UTwrite(os, &v); }
    static void  saveData(std::ostream &os, bool v)
    { int64 iv = v; UTwrite(os, &iv); }
    static void  saveData(std::ostream &os, fpreal64 v)
    { UTwrite<fpreal64>(os, &v); }
    static void  saveData(std::ostream &os, UT_Vector2D v)
    { UTwrite<fpreal64>(os, &v.x()); UTwrite<fpreal64>(os, &v.y()); }
    static void  saveData(std::ostream &os, UT_Vector3D v)
    { UTwrite<fpreal64>(os, &v.x()); UTwrite<fpreal64>(os, &v.y());
      UTwrite<fpreal64>(os, &v.z()); }
    static void  saveData(std::ostream &os, UT_Vector4D v)
    { UTwrite<fpreal64>(os, &v.x()); UTwrite<fpreal64>(os, &v.y());
      UTwrite<fpreal64>(os, &v.z()); UTwrite<fpreal64>(os, &v.w()); }
    static void  saveData(std::ostream &os, UT_Matrix2D v)
    { for (int r = 0; r < 2; r++) for (int c = 0; c < 2; c++) UTwrite<fpreal64>(os, &v(r, c)); }
    static void  saveData(std::ostream &os, UT_Matrix3D v)
    { for (int r = 0; r < 3; r++) for (int c = 0; c < 3; c++) UTwrite<fpreal64>(os, &v(r, c)); }
    static void  saveData(std::ostream &os, UT_Matrix4D v)
    { for (int r = 0; r < 4; r++) for (int c = 0; c < 4; c++) UTwrite<fpreal64>(os, &v(r, c)); }
    static void  saveData(std::ostream &os, UT_StringHolder s)
    { UT_StringWrap(s).saveBinary(os); }
    static void  saveData(std::ostream &os, UT_SharedPtr<UT_Ramp> s)
    {   UT_StringHolder         result;
        UT_OStringStream        ostr;
        if (s) s->save(ostr);
        result = ostr.str();
        saveData(os, result);
    }
    static void  saveData(std::ostream &os, PRM_DataItemHandle s)
    {   UT_StringHolder         result;
        UT_OStringStream        ostr;
        if (s) 
        {
            ostr << s->getDataTypeToken();
            ostr << ":";
            s->saveBinary(ostr);
        }
        result = ostr.str();
        saveData(os, result);
    }


    void         save(std::ostream &os) const
    {
        int32           v = version();
        UTwrite(os, &v);
        saveData(os, myGroup);
        saveData(os, myNegate);
        saveData(os, myEntity);
        saveData(os, myAffectnumber);
        saveData(os, myGroupop);
        saveData(os, myFilter);
        saveData(os, myPattern);
        saveData(os, myRange);
        saveData(os, mySelect);
        saveData(os, myAffectvolume);
        saveData(os, myBoundtype);
        saveData(os, mySize);
        saveData(os, myT);
        saveData(os, myAffectnormal);
        saveData(os, myCamerapath);
        saveData(os, myAffectdegenerate);
        saveData(os, myDegenerate);
        saveData(os, myZaf);
        saveData(os, myDoopen);
        saveData(os, myTol);
        saveData(os, myRemovegrp);
        saveData(os, myKeeppoints);
        saveData(os, myGeotype);
        saveData(os, myDir);
        saveData(os, myAngle);

    }

    bool         load(UT_IStream &is)
    {
        int32           v;
        is.bread(&v, 1);
        if (version() != v)
        {
            // Fail incompatible versions
            return false;
        }
        loadData(is, myGroup);
        loadData(is, myNegate);
        loadData(is, myEntity);
        loadData(is, myAffectnumber);
        loadData(is, myGroupop);
        loadData(is, myFilter);
        loadData(is, myPattern);
        loadData(is, myRange);
        loadData(is, mySelect);
        loadData(is, myAffectvolume);
        loadData(is, myBoundtype);
        loadData(is, mySize);
        loadData(is, myT);
        loadData(is, myAffectnormal);
        loadData(is, myCamerapath);
        loadData(is, myAffectdegenerate);
        loadData(is, myDegenerate);
        loadData(is, myZaf);
        loadData(is, myDoopen);
        loadData(is, myTol);
        loadData(is, myRemovegrp);
        loadData(is, myKeeppoints);
        loadData(is, myGeotype);
        loadData(is, myDir);
        loadData(is, myAngle);

        return true;
    }

    const UT_StringHolder & getGroup() const { return myGroup; }
    void setGroup(const UT_StringHolder & val) { myGroup = val; }
    UT_StringHolder opGroup(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getGroup();
        UT_StringHolder result;
        OP_Utils::evalOpParm(result, thissop, "group", cookparms.getCookTime(), 0);
        return result;
    }
    Negate getNegate() const { return Negate(myNegate); }
    void setNegate(Negate val) { myNegate = int64(val); }
    Negate opNegate(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getNegate();
        int64 result;
        OP_Utils::evalOpParm(result, thissop, "negate", cookparms.getCookTime(), 0);
        return Negate(result);
    }
    Entity getEntity() const { return Entity(myEntity); }
    void setEntity(Entity val) { myEntity = int64(val); }
    Entity opEntity(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getEntity();
        int64 result;
        OP_Utils::evalOpParm(result, thissop, "entity", cookparms.getCookTime(), 0);
        return Entity(result);
    }
    bool getAffectnumber() const { return myAffectnumber; }
    void setAffectnumber(bool val) { myAffectnumber = val; }
    bool opAffectnumber(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getAffectnumber();
        bool result;
        OP_Utils::evalOpParm(result, thissop, "affectnumber", cookparms.getCookTime(), 0);
        return result;
    }
    Groupop getGroupop() const { return Groupop(myGroupop); }
    void setGroupop(Groupop val) { myGroupop = int64(val); }
    Groupop opGroupop(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getGroupop();
        int64 result;
        OP_Utils::evalOpParm(result, thissop, "groupop", cookparms.getCookTime(), 0);
        return Groupop(result);
    }
    int64 getFilter() const { return myFilter; }
    void setFilter(int64 val) { myFilter = val; }
    int64 opFilter(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getFilter();
        int64 result;
        OP_Utils::evalOpParm(result, thissop, "filter", cookparms.getCookTime(), 0);
        return result;
    }
    const UT_StringHolder & getPattern() const { return myPattern; }
    void setPattern(const UT_StringHolder & val) { myPattern = val; }
    UT_StringHolder opPattern(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getPattern();
        UT_StringHolder result;
        OP_Utils::evalOpParm(result, thissop, "pattern", cookparms.getCookTime(), 0);
        return result;
    }
    UT_Vector2I getRange() const { return myRange; }
    void setRange(UT_Vector2I val) { myRange = val; }
    UT_Vector2I opRange(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getRange();
        UT_Vector2I result;
        OP_Utils::evalOpParm(result, thissop, "range", cookparms.getCookTime(), 0);
        return result;
    }
    UT_Vector2I getSelect() const { return mySelect; }
    void setSelect(UT_Vector2I val) { mySelect = val; }
    UT_Vector2I opSelect(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getSelect();
        UT_Vector2I result;
        OP_Utils::evalOpParm(result, thissop, "select", cookparms.getCookTime(), 0);
        return result;
    }
    bool getAffectvolume() const { return myAffectvolume; }
    void setAffectvolume(bool val) { myAffectvolume = val; }
    bool opAffectvolume(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getAffectvolume();
        bool result;
        OP_Utils::evalOpParm(result, thissop, "affectvolume", cookparms.getCookTime(), 0);
        return result;
    }
    Boundtype getBoundtype() const { return Boundtype(myBoundtype); }
    void setBoundtype(Boundtype val) { myBoundtype = int64(val); }
    Boundtype opBoundtype(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getBoundtype();
        int64 result;
        OP_Utils::evalOpParm(result, thissop, "boundtype", cookparms.getCookTime(), 0);
        return Boundtype(result);
    }
    UT_Vector3D getSize() const { return mySize; }
    void setSize(UT_Vector3D val) { mySize = val; }
    UT_Vector3D opSize(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getSize();
        UT_Vector3D result;
        OP_Utils::evalOpParm(result, thissop, "size", cookparms.getCookTime(), 0);
        return result;
    }
    UT_Vector3D getT() const { return myT; }
    void setT(UT_Vector3D val) { myT = val; }
    UT_Vector3D opT(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getT();
        UT_Vector3D result;
        OP_Utils::evalOpParm(result, thissop, "t", cookparms.getCookTime(), 0);
        return result;
    }
    bool getAffectnormal() const { return myAffectnormal; }
    void setAffectnormal(bool val) { myAffectnormal = val; }
    bool opAffectnormal(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getAffectnormal();
        bool result;
        OP_Utils::evalOpParm(result, thissop, "affectnormal", cookparms.getCookTime(), 0);
        return result;
    }
    const UT_StringHolder & getCamerapath() const { return myCamerapath; }
    void setCamerapath(const UT_StringHolder & val) { myCamerapath = val; }
    UT_StringHolder opCamerapath(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getCamerapath();
        UT_StringHolder result;
        OP_Utils::evalOpParm(result, thissop, "camerapath", cookparms.getCookTime(), 0);
        return result;
    }
    bool getAffectdegenerate() const { return myAffectdegenerate; }
    void setAffectdegenerate(bool val) { myAffectdegenerate = val; }
    bool opAffectdegenerate(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getAffectdegenerate();
        bool result;
        OP_Utils::evalOpParm(result, thissop, "affectdegenerate", cookparms.getCookTime(), 0);
        return result;
    }
    bool getDegenerate() const { return myDegenerate; }
    void setDegenerate(bool val) { myDegenerate = val; }
    bool opDegenerate(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getDegenerate();
        bool result;
        OP_Utils::evalOpParm(result, thissop, "degenerate", cookparms.getCookTime(), 0);
        return result;
    }
    bool getZaf() const { return myZaf; }
    void setZaf(bool val) { myZaf = val; }
    bool opZaf(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getZaf();
        bool result;
        OP_Utils::evalOpParm(result, thissop, "zaf", cookparms.getCookTime(), 0);
        return result;
    }
    bool getDoopen() const { return myDoopen; }
    void setDoopen(bool val) { myDoopen = val; }
    bool opDoopen(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getDoopen();
        bool result;
        OP_Utils::evalOpParm(result, thissop, "doopen", cookparms.getCookTime(), 0);
        return result;
    }
    fpreal64 getTol() const { return myTol; }
    void setTol(fpreal64 val) { myTol = val; }
    fpreal64 opTol(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getTol();
        fpreal64 result;
        OP_Utils::evalOpParm(result, thissop, "tol", cookparms.getCookTime(), 0);
        return result;
    }
    bool getRemovegrp() const { return myRemovegrp; }
    void setRemovegrp(bool val) { myRemovegrp = val; }
    bool opRemovegrp(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getRemovegrp();
        bool result;
        OP_Utils::evalOpParm(result, thissop, "removegrp", cookparms.getCookTime(), 0);
        return result;
    }
    bool getKeeppoints() const { return myKeeppoints; }
    void setKeeppoints(bool val) { myKeeppoints = val; }
    bool opKeeppoints(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getKeeppoints();
        bool result;
        OP_Utils::evalOpParm(result, thissop, "keeppoints", cookparms.getCookTime(), 0);
        return result;
    }
    int64 getGeotype() const { return myGeotype; }
    void setGeotype(int64 val) { myGeotype = val; }
    int64 opGeotype(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getGeotype();
        int64 result;
        OP_Utils::evalOpParm(result, thissop, "geotype", cookparms.getCookTime(), 0);
        return result;
    }
    UT_Vector3D getDir() const { return myDir; }
    void setDir(UT_Vector3D val) { myDir = val; }
    UT_Vector3D opDir(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getDir();
        UT_Vector3D result;
        OP_Utils::evalOpParm(result, thissop, "dir", cookparms.getCookTime(), 0);
        return result;
    }
    fpreal64 getAngle() const { return myAngle; }
    void setAngle(fpreal64 val) { myAngle = val; }
    fpreal64 opAngle(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getAngle();
        fpreal64 result;
        OP_Utils::evalOpParm(result, thissop, "angle", cookparms.getCookTime(), 0);
        return result;
    }

private:
    UT_StringHolder myGroup;
    int64 myNegate;
    int64 myEntity;
    bool myAffectnumber;
    int64 myGroupop;
    int64 myFilter;
    UT_StringHolder myPattern;
    UT_Vector2I myRange;
    UT_Vector2I mySelect;
    bool myAffectvolume;
    int64 myBoundtype;
    UT_Vector3D mySize;
    UT_Vector3D myT;
    bool myAffectnormal;
    UT_StringHolder myCamerapath;
    bool myAffectdegenerate;
    bool myDegenerate;
    bool myZaf;
    bool myDoopen;
    fpreal64 myTol;
    bool myRemovegrp;
    bool myKeeppoints;
    int64 myGeotype;
    UT_Vector3D myDir;
    fpreal64 myAngle;

};
