/* Automagically Generated by generate_proto.py
 * Do not Edit
 */
#pragma once

#include <SOP/SOP_NodeVerb.h>
#include <OP/OP_Utils.h>
#include <PRM/PRM_Parm.h>
#include <UT/UT_IStream.h>
#include <UT/UT_NTStreamUtil.h>
#include <UT/UT_Ramp.h>
#include <UT/UT_SharedPtr.h>
#include <UT/UT_StringHolder.h>
#include <UT/UT_StringStream.h>
#include <UT/UT_VectorTypes.h>
#include <SYS/SYS_Types.h>

using namespace UT::Literal;

class DEP_MicroNode;
namespace SOP_GroupPromoteEnums
{
    enum class Fromtype
    {
        AUTO = 0,
        PRIMS,
        POINTS,
        EDGES,
        VERTICES
    };
    enum class Totype
    {
        PRIMS = 0,
        POINTS,
        EDGES,
        VERTICES
    };
}


class SOP_API SOP_GroupPromoteParms  : public SOP_NodeParms
{
public:
    static int version() { return 1; }
    struct Promotions
    {
        bool enable;
        int64 fromtype;
        int64 totype;
        UT_StringHolder group;
        UT_StringHolder newname;
        bool preserve;
        bool onlyfull;
        bool toattrib;


        Promotions()
        {
            enable = false;
            fromtype = 0;
            totype = 1;
            group = ""_sh;
            newname = ""_sh;
            preserve = false;
            onlyfull = false;
            toattrib = false;

        }

        bool operator==(const Promotions &src) const
        {
            if (enable != src.enable) return false;
            if (fromtype != src.fromtype) return false;
            if (totype != src.totype) return false;
            if (group != src.group) return false;
            if (newname != src.newname) return false;
            if (preserve != src.preserve) return false;
            if (onlyfull != src.onlyfull) return false;
            if (toattrib != src.toattrib) return false;

            return true;
        }
        bool operator!=(const Promotions &src) const
        {
            return !operator==(src);
        }

    };

    UT_StringHolder createString(const UT_Array<Promotions> &list) const
    {
        UT_WorkBuffer   buf;

        buf.strcat("[ ");
        for (int i = 0; i < list.entries(); i++)
        {
            if (i)
                buf.strcat(", ");
            buf.strcat("( ");
            buf.append("");
            buf.appendSprintf("%s", (list(i).enable) ? "true" : "false");
            buf.append(", ");
            buf.appendSprintf("%d", (int) list(i).fromtype);
            buf.append(", ");
            buf.appendSprintf("%d", (int) list(i).totype);
            buf.append(", ");
            { UT_String tmp; tmp = UT_StringWrap(list(i).group).makeQuotedString('"'); buf.strcat(tmp); }
            buf.append(", ");
            { UT_String tmp; tmp = UT_StringWrap(list(i).newname).makeQuotedString('"'); buf.strcat(tmp); }
            buf.append(", ");
            buf.appendSprintf("%s", (list(i).preserve) ? "true" : "false");
            buf.append(", ");
            buf.appendSprintf("%s", (list(i).onlyfull) ? "true" : "false");
            buf.append(", ");
            buf.appendSprintf("%s", (list(i).toattrib) ? "true" : "false");

            buf.strcat(" )");
        }
        buf.strcat(" ]");

        UT_StringHolder result = buf;
        return result;
    }

    SOP_GroupPromoteParms()
    {

    }

    explicit SOP_GroupPromoteParms(const SOP_GroupPromoteParms &) = default;

    virtual ~SOP_GroupPromoteParms() {}

    bool operator==(const SOP_GroupPromoteParms &src) const
    {
        if (myPromotions != src.myPromotions) return false;

        return true;
    }
    bool operator!=(const SOP_GroupPromoteParms &src) const
    {
        return !operator==(src);
    }
    using Fromtype = SOP_GroupPromoteEnums::Fromtype;
    using Totype = SOP_GroupPromoteEnums::Totype;



    void        buildFromOp(const OP_Node *node, fpreal time, DEP_MicroNode *depnode)
    {
            if (true)
            {
                int64   length;
                OP_Utils::evalOpParm(length, node, "promotions", time, 0);
                myPromotions.entries(length);
                for (exint i = 0; i < length; i++)
                {
                    int     parmidx = i+1;
                    auto && _curentry = myPromotions(i);
                    (void) _curentry;
                    if (true)
                        OP_Utils::evalOpParmInst(myPromotions(i).enable, node, "enable#", &parmidx, time, 0);
                    else myPromotions(i).enable = false;
                    if (true && ( (!(((_curentry.enable==0)))) ) )
                        OP_Utils::evalOpParmInst(myPromotions(i).fromtype, node, "fromtype#", &parmidx, time, 0);
                    else myPromotions(i).fromtype = 0;
                    if (true && ( (!(((_curentry.enable==0)))) ) )
                        OP_Utils::evalOpParmInst(myPromotions(i).totype, node, "totype#", &parmidx, time, 0);
                    else myPromotions(i).totype = 1;
                    if (true && ( (!(((_curentry.enable==0)))) ) )
                        OP_Utils::evalOpParmInst(myPromotions(i).group, node, "group#", &parmidx, time, 0);
                    else myPromotions(i).group = ""_sh;
                    if (true && ( (!(((_curentry.enable==0)))) ) )
                        OP_Utils::evalOpParmInst(myPromotions(i).newname, node, "newname#", &parmidx, time, 0);
                    else myPromotions(i).newname = ""_sh;
                    if (true && ( (!(((_curentry.enable==0)))) ) )
                        OP_Utils::evalOpParmInst(myPromotions(i).preserve, node, "preserve#", &parmidx, time, 0);
                    else myPromotions(i).preserve = false;
                    if (true && ( (!(((_curentry.enable==0))||((_curentry.totype==1)))) ) )
                        OP_Utils::evalOpParmInst(myPromotions(i).onlyfull, node, "onlyfull#", &parmidx, time, 0);
                    else myPromotions(i).onlyfull = false;
                    if (true && ( (!(((_curentry.enable==0))||((_curentry.totype==2)))) ) )
                        OP_Utils::evalOpParmInst(myPromotions(i).toattrib, node, "toattrib#", &parmidx, time, 0);
                    else myPromotions(i).toattrib = false;

                }
            }
            else
                myPromotions.clear();

    }


    virtual void loadFromOpSubclass(const LoadParms &loadparms)
    {
        buildFromOp(loadparms.node(), loadparms.context().getTime(), loadparms.depnode());
    }


    virtual void copyFrom(const SOP_NodeParms *src)
    {
        *this = *((const SOP_GroupPromoteParms *)src);
    }

    template <typename T>
    void
    doGetParmValue(exint idx, T &value) const
    {
        switch (idx)
        {

        }
    }

    void        getParmValue(exint idx, exint &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, fpreal &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Vector2D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Vector3D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Vector4D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Matrix2D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Matrix3D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Matrix4D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_StringHolder &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_SharedPtr<UT_Ramp> &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, PRM_DataItemHandle &value) const
    { doGetParmValue(idx, value); }

    template <typename T>
    void
    doSetParmValue(exint idx, const T &value) 
    {
        switch (idx)
        {

        }
    }

    void        setParmValue(exint idx, const exint &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const fpreal &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Vector2D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Vector3D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Vector4D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Matrix2D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Matrix3D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Matrix4D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_StringHolder &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_SharedPtr<UT_Ramp> &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const PRM_DataItemHandle &value) 
    { doSetParmValue(idx, value); }

    virtual exint    getNumParms() const
    {
        return 1;
    }

    virtual const char *getParmName(exint fieldnum) const
    {
        switch (fieldnum)
        {
                case 0:
                    return "promotions";

        }
        return 0;
    }

    virtual ParmType getParmType(exint fieldnum) const
    {
        switch (fieldnum)
        {

        }
        return PARM_UNSUPPORTED;
    }

    // Boiler plate to load individual types.
    static void  loadData(UT_IStream &is, int64 &v)
    { is.bread(&v, 1); }
    static void  loadData(UT_IStream &is, bool &v)
    { int64     iv; is.bread(&iv, 1); v = iv; }
    static void  loadData(UT_IStream &is, fpreal64 &v)
    { is.bread<fpreal64>(&v, 1); }
    static void  loadData(UT_IStream &is, UT_Vector2D &v)
    { is.bread<fpreal64>(&v.x(), 1); is.bread<fpreal64>(&v.y(), 1); }
    static void  loadData(UT_IStream &is, UT_Vector3D &v)
    { is.bread<fpreal64>(&v.x(), 1); is.bread<fpreal64>(&v.y(), 1);
      is.bread<fpreal64>(&v.z(), 1); }
    static void  loadData(UT_IStream &is, UT_Vector4D &v)
    { is.bread<fpreal64>(&v.x(), 1); is.bread<fpreal64>(&v.y(), 1);
      is.bread<fpreal64>(&v.z(), 1); is.bread<fpreal64>(&v.w(), 1); }
    static void  loadData(UT_IStream &is, UT_Matrix2D &v)
    { for (int r = 0; r < 2; r++) for (int c = 0; c < 2; c++) is.bread<fpreal64>(&v(r, c), 1); }
    static void  loadData(UT_IStream &is, UT_Matrix3D &v)
    { for (int r = 0; r < 3; r++) for (int c = 0; c < 3; c++) is.bread<fpreal64>(&v(r, c), 1); }
    static void  loadData(UT_IStream &is, UT_Matrix4D &v)
    { for (int r = 0; r < 4; r++) for (int c = 0; c < 4; c++) is.bread<fpreal64>(&v(r, c), 1); }
    static void  loadData(UT_IStream &is, UT_Vector2I &v)
    { is.bread<int64>(&v.x(), 1); is.bread<int64>(&v.y(), 1); }
    static void  loadData(UT_IStream &is, UT_Vector3I &v)
    { is.bread<int64>(&v.x(), 1); is.bread<int64>(&v.y(), 1);
      is.bread<int64>(&v.z(), 1); }
    static void  loadData(UT_IStream &is, UT_Vector4I &v)
    { is.bread<int64>(&v.x(), 1); is.bread<int64>(&v.y(), 1);
      is.bread<int64>(&v.z(), 1); is.bread<int64>(&v.w(), 1); }
    static void  loadData(UT_IStream &is, UT_StringHolder &v)
    { is.bread(v); }
    static void  loadData(UT_IStream &is, UT_SharedPtr<UT_Ramp> &v)
    {   UT_StringHolder   rampdata;
        loadData(is, rampdata);
        if (rampdata.isstring())
        {
            v.reset(new UT_Ramp());
            UT_IStream  istr((const char *) rampdata, rampdata.length(), UT_ISTREAM_ASCII);
            v->load(istr);
        }
        else v.reset();
    }
    static void  loadData(UT_IStream &is, PRM_DataItemHandle &v)
    {   UT_StringHolder   data;
        loadData(is, data);
        if (data.isstring())
        {
            // Find the data type.
            char *colon = UT_StringWrap(data).findChar(':');
            if (colon)
            {
                int             typelen = colon - data.buffer();
                UT_WorkBuffer   type;
                type.strncpy(data.buffer(), typelen);
                UT_IStream  istr(((const char *) data) + typelen + 1, data.length() - (typelen + 1), UT_ISTREAM_BINARY);
                
                v = PRM_DataFactory::parseBinary(type.buffer(), istr);
            }
        }
        else v.reset();
    }

    static void  saveData(std::ostream &os, int64 v)
    { UTwrite(os, &v); }
    static void  saveData(std::ostream &os, bool v)
    { int64 iv = v; UTwrite(os, &iv); }
    static void  saveData(std::ostream &os, fpreal64 v)
    { UTwrite<fpreal64>(os, &v); }
    static void  saveData(std::ostream &os, UT_Vector2D v)
    { UTwrite<fpreal64>(os, &v.x()); UTwrite<fpreal64>(os, &v.y()); }
    static void  saveData(std::ostream &os, UT_Vector3D v)
    { UTwrite<fpreal64>(os, &v.x()); UTwrite<fpreal64>(os, &v.y());
      UTwrite<fpreal64>(os, &v.z()); }
    static void  saveData(std::ostream &os, UT_Vector4D v)
    { UTwrite<fpreal64>(os, &v.x()); UTwrite<fpreal64>(os, &v.y());
      UTwrite<fpreal64>(os, &v.z()); UTwrite<fpreal64>(os, &v.w()); }
    static void  saveData(std::ostream &os, UT_Matrix2D v)
    { for (int r = 0; r < 2; r++) for (int c = 0; c < 2; c++) UTwrite<fpreal64>(os, &v(r, c)); }
    static void  saveData(std::ostream &os, UT_Matrix3D v)
    { for (int r = 0; r < 3; r++) for (int c = 0; c < 3; c++) UTwrite<fpreal64>(os, &v(r, c)); }
    static void  saveData(std::ostream &os, UT_Matrix4D v)
    { for (int r = 0; r < 4; r++) for (int c = 0; c < 4; c++) UTwrite<fpreal64>(os, &v(r, c)); }
    static void  saveData(std::ostream &os, UT_StringHolder s)
    { UT_StringWrap(s).saveBinary(os); }
    static void  saveData(std::ostream &os, UT_SharedPtr<UT_Ramp> s)
    {   UT_StringHolder         result;
        UT_OStringStream        ostr;
        if (s) s->save(ostr);
        result = ostr.str();
        saveData(os, result);
    }
    static void  saveData(std::ostream &os, PRM_DataItemHandle s)
    {   UT_StringHolder         result;
        UT_OStringStream        ostr;
        if (s) 
        {
            ostr << s->getDataTypeToken();
            ostr << ":";
            s->saveBinary(ostr);
        }
        result = ostr.str();
        saveData(os, result);
    }


    void         save(std::ostream &os) const
    {
        int32           v = version();
        UTwrite(os, &v);
        {
            int64   length = myPromotions.entries();
            UTwrite(os, &length);
            for (exint i = 0; i < length; i++)
            {
                saveData(os, myPromotions(i).enable);
                saveData(os, myPromotions(i).fromtype);
                saveData(os, myPromotions(i).totype);
                saveData(os, myPromotions(i).group);
                saveData(os, myPromotions(i).newname);
                saveData(os, myPromotions(i).preserve);
                saveData(os, myPromotions(i).onlyfull);
                saveData(os, myPromotions(i).toattrib);

            }
        }

    }

    bool         load(UT_IStream &is)
    {
        int32           v;
        is.bread(&v, 1);
        if (version() != v)
        {
            // Fail incompatible versions
            return false;
        }
        {
            int64   length;
            is.read(&length, 1);
            myPromotions.entries(length);
            for (exint i = 0; i < length; i++)
            {
                loadData(is, myPromotions(i).enable);
                loadData(is, myPromotions(i).fromtype);
                loadData(is, myPromotions(i).totype);
                loadData(is, myPromotions(i).group);
                loadData(is, myPromotions(i).newname);
                loadData(is, myPromotions(i).preserve);
                loadData(is, myPromotions(i).onlyfull);
                loadData(is, myPromotions(i).toattrib);

            }
        }

        return true;
    }

    const UT_Array<Promotions> &getPromotions() const { return myPromotions; }
    void setPromotions(const UT_Array<Promotions> &val) { myPromotions = val; }
    exint opPromotions(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getPromotions().entries();
        exint result;
        OP_Utils::evalOpParm(result, thissop, "promotions", cookparms.getCookTime(), 0);
        return result;
    }
            bool opPromotions_enable(const SOP_NodeVerb::CookParms &cookparms, exint _idx) const
        {
            SOP_Node *thissop = cookparms.getNode();
            if (!thissop) return (myPromotions(_idx).enable);
            int _parmidx = _idx + 1;
            bool result;
            OP_Utils::evalOpParmInst(result, thissop, "enable#", &_parmidx, cookparms.getCookTime(), 0);
            return (result);
        }
        int64 opPromotions_fromtype(const SOP_NodeVerb::CookParms &cookparms, exint _idx) const
        {
            SOP_Node *thissop = cookparms.getNode();
            if (!thissop) return (myPromotions(_idx).fromtype);
            int _parmidx = _idx + 1;
            int64 result;
            OP_Utils::evalOpParmInst(result, thissop, "fromtype#", &_parmidx, cookparms.getCookTime(), 0);
            return (result);
        }
        int64 opPromotions_totype(const SOP_NodeVerb::CookParms &cookparms, exint _idx) const
        {
            SOP_Node *thissop = cookparms.getNode();
            if (!thissop) return (myPromotions(_idx).totype);
            int _parmidx = _idx + 1;
            int64 result;
            OP_Utils::evalOpParmInst(result, thissop, "totype#", &_parmidx, cookparms.getCookTime(), 0);
            return (result);
        }
        UT_StringHolder opPromotions_group(const SOP_NodeVerb::CookParms &cookparms, exint _idx) const
        {
            SOP_Node *thissop = cookparms.getNode();
            if (!thissop) return (myPromotions(_idx).group);
            int _parmidx = _idx + 1;
            UT_StringHolder result;
            OP_Utils::evalOpParmInst(result, thissop, "group#", &_parmidx, cookparms.getCookTime(), 0);
            return (result);
        }
        UT_StringHolder opPromotions_newname(const SOP_NodeVerb::CookParms &cookparms, exint _idx) const
        {
            SOP_Node *thissop = cookparms.getNode();
            if (!thissop) return (myPromotions(_idx).newname);
            int _parmidx = _idx + 1;
            UT_StringHolder result;
            OP_Utils::evalOpParmInst(result, thissop, "newname#", &_parmidx, cookparms.getCookTime(), 0);
            return (result);
        }
        bool opPromotions_preserve(const SOP_NodeVerb::CookParms &cookparms, exint _idx) const
        {
            SOP_Node *thissop = cookparms.getNode();
            if (!thissop) return (myPromotions(_idx).preserve);
            int _parmidx = _idx + 1;
            bool result;
            OP_Utils::evalOpParmInst(result, thissop, "preserve#", &_parmidx, cookparms.getCookTime(), 0);
            return (result);
        }
        bool opPromotions_onlyfull(const SOP_NodeVerb::CookParms &cookparms, exint _idx) const
        {
            SOP_Node *thissop = cookparms.getNode();
            if (!thissop) return (myPromotions(_idx).onlyfull);
            int _parmidx = _idx + 1;
            bool result;
            OP_Utils::evalOpParmInst(result, thissop, "onlyfull#", &_parmidx, cookparms.getCookTime(), 0);
            return (result);
        }
        bool opPromotions_toattrib(const SOP_NodeVerb::CookParms &cookparms, exint _idx) const
        {
            SOP_Node *thissop = cookparms.getNode();
            if (!thissop) return (myPromotions(_idx).toattrib);
            int _parmidx = _idx + 1;
            bool result;
            OP_Utils::evalOpParmInst(result, thissop, "toattrib#", &_parmidx, cookparms.getCookTime(), 0);
            return (result);
        }


private:
    UT_Array<Promotions> myPromotions;

};
