/* Automagically Generated by generate_proto.py
 * Do not Edit
 */
#pragma once

#include <SOP/SOP_NodeVerb.h>
#include <OP/OP_Utils.h>
#include <PRM/PRM_Parm.h>
#include <UT/UT_IStream.h>
#include <UT/UT_NTStreamUtil.h>
#include <UT/UT_Ramp.h>
#include <UT/UT_SharedPtr.h>
#include <UT/UT_StringHolder.h>
#include <UT/UT_StringStream.h>
#include <UT/UT_VectorTypes.h>
#include <SYS/SYS_Types.h>

using namespace UT::Literal;

class DEP_MicroNode;
namespace SOP_RevolveEnums
{
    enum class Surftype
    {
        ROWS = 0,
        COLS,
        ROWCOL,
        TRIANGLES,
        QUADS,
        ALTTRIANGLES,
        REVTRIANGLES
    };
    enum class Type
    {
        CLOSED = 0,
        OPENARC,
        CLOSEDARC
    };
}


class SOP_API SOP_RevolveParms  : public SOP_NodeParms
{
public:
    static int version() { return 1; }

    SOP_RevolveParms()
    {
        myGroup = ""_sh;
        mySurftype = 4;
        myOrigin = UT_Vector3D(0,0,0);
        myDir = UT_Vector3D(0,1,0);
        myPolys = true;
        myImperfect = true;
        myType = 0;
        myAngle = UT_Vector2D(0,360);
        myDivs = 10;
        myOrder = 4;
        myCap = false;

    }

    explicit SOP_RevolveParms(const SOP_RevolveParms &) = default;

    virtual ~SOP_RevolveParms() {}

    bool operator==(const SOP_RevolveParms &src) const
    {
        if (myGroup != src.myGroup) return false;
        if (mySurftype != src.mySurftype) return false;
        if (myOrigin != src.myOrigin) return false;
        if (myDir != src.myDir) return false;
        if (myPolys != src.myPolys) return false;
        if (myImperfect != src.myImperfect) return false;
        if (myType != src.myType) return false;
        if (myAngle != src.myAngle) return false;
        if (myDivs != src.myDivs) return false;
        if (myOrder != src.myOrder) return false;
        if (myCap != src.myCap) return false;

        return true;
    }
    bool operator!=(const SOP_RevolveParms &src) const
    {
        return !operator==(src);
    }
    using Surftype = SOP_RevolveEnums::Surftype;
    using Type = SOP_RevolveEnums::Type;



    void        buildFromOp(const OP_Node *node, fpreal time, DEP_MicroNode *depnode)
    {
        if (true)
            OP_Utils::evalOpParm(myGroup, node, "group", time, 0);
        else myGroup = ""_sh;
        if (true)
            OP_Utils::evalOpParm(mySurftype, node, "surftype", time, 0);
        else mySurftype = 4;
        if (true)
            OP_Utils::evalOpParm(myOrigin, node, "origin", time, 0);
        else myOrigin = UT_Vector3D(0,0,0);
        if (true)
            OP_Utils::evalOpParm(myDir, node, "dir", time, 0);
        else myDir = UT_Vector3D(0,1,0);
        if (true)
            OP_Utils::evalOpParm(myPolys, node, "polys", time, 0);
        else myPolys = true;
        if (true)
            OP_Utils::evalOpParm(myImperfect, node, "imperfect", time, 0);
        else myImperfect = true;
        if (true)
            OP_Utils::evalOpParm(myType, node, "type", time, 0);
        else myType = 0;
        if (true)
            OP_Utils::evalOpParm(myAngle, node, "angle", time, 0);
        else myAngle = UT_Vector2D(0,360);
        if (true)
            OP_Utils::evalOpParm(myDivs, node, "divs", time, 0);
        else myDivs = 10;
        if (true)
            OP_Utils::evalOpParm(myOrder, node, "order", time, 0);
        else myOrder = 4;
        if (true)
            OP_Utils::evalOpParm(myCap, node, "cap", time, 0);
        else myCap = false;

    }


    virtual void loadFromOpSubclass(const LoadParms &loadparms)
    {
        buildFromOp(loadparms.node(), loadparms.context().getTime(), loadparms.depnode());
    }


    virtual void copyFrom(const SOP_NodeParms *src)
    {
        *this = *((const SOP_RevolveParms *)src);
    }

    template <typename T>
    void
    doGetParmValue(exint idx, T &value) const
    {
        switch (idx)
        {
            case 0:
                coerceValue(value, myGroup);
                break;
            case 1:
                coerceValue(value, mySurftype);
                break;
            case 2:
                coerceValue(value, myOrigin);
                break;
            case 3:
                coerceValue(value, myDir);
                break;
            case 4:
                coerceValue(value, myPolys);
                break;
            case 5:
                coerceValue(value, myImperfect);
                break;
            case 6:
                coerceValue(value, myType);
                break;
            case 7:
                coerceValue(value, myAngle);
                break;
            case 8:
                coerceValue(value, myDivs);
                break;
            case 9:
                coerceValue(value, myOrder);
                break;
            case 10:
                coerceValue(value, myCap);
                break;

        }
    }

    void        getParmValue(exint idx, exint &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, fpreal &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Vector2D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Vector3D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Vector4D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Matrix2D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Matrix3D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Matrix4D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_StringHolder &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_SharedPtr<UT_Ramp> &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, PRM_DataItemHandle &value) const
    { doGetParmValue(idx, value); }

    template <typename T>
    void
    doSetParmValue(exint idx, const T &value) 
    {
        switch (idx)
        {
            case 0:
                coerceValue(myGroup, value);
                break;
            case 1:
                coerceValue(mySurftype, value);
                break;
            case 2:
                coerceValue(myOrigin, value);
                break;
            case 3:
                coerceValue(myDir, value);
                break;
            case 4:
                coerceValue(myPolys, value);
                break;
            case 5:
                coerceValue(myImperfect, value);
                break;
            case 6:
                coerceValue(myType, value);
                break;
            case 7:
                coerceValue(myAngle, value);
                break;
            case 8:
                coerceValue(myDivs, value);
                break;
            case 9:
                coerceValue(myOrder, value);
                break;
            case 10:
                coerceValue(myCap, value);
                break;

        }
    }

    void        setParmValue(exint idx, const exint &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const fpreal &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Vector2D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Vector3D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Vector4D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Matrix2D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Matrix3D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Matrix4D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_StringHolder &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_SharedPtr<UT_Ramp> &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const PRM_DataItemHandle &value) 
    { doSetParmValue(idx, value); }

    virtual exint    getNumParms() const
    {
        return 11;
    }

    virtual const char *getParmName(exint fieldnum) const
    {
        switch (fieldnum)
        {
            case 0:
                return "group";
            case 1:
                return "surftype";
            case 2:
                return "origin";
            case 3:
                return "dir";
            case 4:
                return "polys";
            case 5:
                return "imperfect";
            case 6:
                return "type";
            case 7:
                return "angle";
            case 8:
                return "divs";
            case 9:
                return "order";
            case 10:
                return "cap";

        }
        return 0;
    }

    virtual ParmType getParmType(exint fieldnum) const
    {
        switch (fieldnum)
        {
                case 0:
                    return PARM_STRING;
                case 1:
                    return PARM_INTEGER;
                case 2:
                    return PARM_VECTOR3;
                case 3:
                    return PARM_VECTOR3;
                case 4:
                    return PARM_INTEGER;
                case 5:
                    return PARM_INTEGER;
                case 6:
                    return PARM_INTEGER;
                case 7:
                    return PARM_VECTOR2;
                case 8:
                    return PARM_INTEGER;
                case 9:
                    return PARM_INTEGER;
                case 10:
                    return PARM_INTEGER;

        }
        return PARM_UNSUPPORTED;
    }

    // Boiler plate to load individual types.
    static void  loadData(UT_IStream &is, int64 &v)
    { is.bread(&v, 1); }
    static void  loadData(UT_IStream &is, bool &v)
    { int64     iv; is.bread(&iv, 1); v = iv; }
    static void  loadData(UT_IStream &is, fpreal64 &v)
    { is.bread<fpreal64>(&v, 1); }
    static void  loadData(UT_IStream &is, UT_Vector2D &v)
    { is.bread<fpreal64>(&v.x(), 1); is.bread<fpreal64>(&v.y(), 1); }
    static void  loadData(UT_IStream &is, UT_Vector3D &v)
    { is.bread<fpreal64>(&v.x(), 1); is.bread<fpreal64>(&v.y(), 1);
      is.bread<fpreal64>(&v.z(), 1); }
    static void  loadData(UT_IStream &is, UT_Vector4D &v)
    { is.bread<fpreal64>(&v.x(), 1); is.bread<fpreal64>(&v.y(), 1);
      is.bread<fpreal64>(&v.z(), 1); is.bread<fpreal64>(&v.w(), 1); }
    static void  loadData(UT_IStream &is, UT_Matrix2D &v)
    { for (int r = 0; r < 2; r++) for (int c = 0; c < 2; c++) is.bread<fpreal64>(&v(r, c), 1); }
    static void  loadData(UT_IStream &is, UT_Matrix3D &v)
    { for (int r = 0; r < 3; r++) for (int c = 0; c < 3; c++) is.bread<fpreal64>(&v(r, c), 1); }
    static void  loadData(UT_IStream &is, UT_Matrix4D &v)
    { for (int r = 0; r < 4; r++) for (int c = 0; c < 4; c++) is.bread<fpreal64>(&v(r, c), 1); }
    static void  loadData(UT_IStream &is, UT_Vector2I &v)
    { is.bread<int64>(&v.x(), 1); is.bread<int64>(&v.y(), 1); }
    static void  loadData(UT_IStream &is, UT_Vector3I &v)
    { is.bread<int64>(&v.x(), 1); is.bread<int64>(&v.y(), 1);
      is.bread<int64>(&v.z(), 1); }
    static void  loadData(UT_IStream &is, UT_Vector4I &v)
    { is.bread<int64>(&v.x(), 1); is.bread<int64>(&v.y(), 1);
      is.bread<int64>(&v.z(), 1); is.bread<int64>(&v.w(), 1); }
    static void  loadData(UT_IStream &is, UT_StringHolder &v)
    { is.bread(v); }
    static void  loadData(UT_IStream &is, UT_SharedPtr<UT_Ramp> &v)
    {   UT_StringHolder   rampdata;
        loadData(is, rampdata);
        if (rampdata.isstring())
        {
            v.reset(new UT_Ramp());
            UT_IStream  istr((const char *) rampdata, rampdata.length(), UT_ISTREAM_ASCII);
            v->load(istr);
        }
        else v.reset();
    }
    static void  loadData(UT_IStream &is, PRM_DataItemHandle &v)
    {   UT_StringHolder   data;
        loadData(is, data);
        if (data.isstring())
        {
            // Find the data type.
            char *colon = UT_StringWrap(data).findChar(':');
            if (colon)
            {
                int             typelen = colon - data.buffer();
                UT_WorkBuffer   type;
                type.strncpy(data.buffer(), typelen);
                UT_IStream  istr(((const char *) data) + typelen + 1, data.length() - (typelen + 1), UT_ISTREAM_BINARY);
                
                v = PRM_DataFactory::parseBinary(type.buffer(), istr);
            }
        }
        else v.reset();
    }

    static void  saveData(std::ostream &os, int64 v)
    { UTwrite(os, &v); }
    static void  saveData(std::ostream &os, bool v)
    { int64 iv = v; UTwrite(os, &iv); }
    static void  saveData(std::ostream &os, fpreal64 v)
    { UTwrite<fpreal64>(os, &v); }
    static void  saveData(std::ostream &os, UT_Vector2D v)
    { UTwrite<fpreal64>(os, &v.x()); UTwrite<fpreal64>(os, &v.y()); }
    static void  saveData(std::ostream &os, UT_Vector3D v)
    { UTwrite<fpreal64>(os, &v.x()); UTwrite<fpreal64>(os, &v.y());
      UTwrite<fpreal64>(os, &v.z()); }
    static void  saveData(std::ostream &os, UT_Vector4D v)
    { UTwrite<fpreal64>(os, &v.x()); UTwrite<fpreal64>(os, &v.y());
      UTwrite<fpreal64>(os, &v.z()); UTwrite<fpreal64>(os, &v.w()); }
    static void  saveData(std::ostream &os, UT_Matrix2D v)
    { for (int r = 0; r < 2; r++) for (int c = 0; c < 2; c++) UTwrite<fpreal64>(os, &v(r, c)); }
    static void  saveData(std::ostream &os, UT_Matrix3D v)
    { for (int r = 0; r < 3; r++) for (int c = 0; c < 3; c++) UTwrite<fpreal64>(os, &v(r, c)); }
    static void  saveData(std::ostream &os, UT_Matrix4D v)
    { for (int r = 0; r < 4; r++) for (int c = 0; c < 4; c++) UTwrite<fpreal64>(os, &v(r, c)); }
    static void  saveData(std::ostream &os, UT_StringHolder s)
    { UT_StringWrap(s).saveBinary(os); }
    static void  saveData(std::ostream &os, UT_SharedPtr<UT_Ramp> s)
    {   UT_StringHolder         result;
        UT_OStringStream        ostr;
        if (s) s->save(ostr);
        result = ostr.str();
        saveData(os, result);
    }
    static void  saveData(std::ostream &os, PRM_DataItemHandle s)
    {   UT_StringHolder         result;
        UT_OStringStream        ostr;
        if (s) 
        {
            ostr << s->getDataTypeToken();
            ostr << ":";
            s->saveBinary(ostr);
        }
        result = ostr.str();
        saveData(os, result);
    }


    void         save(std::ostream &os) const
    {
        int32           v = version();
        UTwrite(os, &v);
        saveData(os, myGroup);
        saveData(os, mySurftype);
        saveData(os, myOrigin);
        saveData(os, myDir);
        saveData(os, myPolys);
        saveData(os, myImperfect);
        saveData(os, myType);
        saveData(os, myAngle);
        saveData(os, myDivs);
        saveData(os, myOrder);
        saveData(os, myCap);

    }

    bool         load(UT_IStream &is)
    {
        int32           v;
        is.bread(&v, 1);
        if (version() != v)
        {
            // Fail incompatible versions
            return false;
        }
        loadData(is, myGroup);
        loadData(is, mySurftype);
        loadData(is, myOrigin);
        loadData(is, myDir);
        loadData(is, myPolys);
        loadData(is, myImperfect);
        loadData(is, myType);
        loadData(is, myAngle);
        loadData(is, myDivs);
        loadData(is, myOrder);
        loadData(is, myCap);

        return true;
    }

    const UT_StringHolder & getGroup() const { return myGroup; }
    void setGroup(const UT_StringHolder & val) { myGroup = val; }
    UT_StringHolder opGroup(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getGroup();
        UT_StringHolder result;
        OP_Utils::evalOpParm(result, thissop, "group", cookparms.getCookTime(), 0);
        return result;
    }
    Surftype getSurftype() const { return Surftype(mySurftype); }
    void setSurftype(Surftype val) { mySurftype = int64(val); }
    Surftype opSurftype(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getSurftype();
        int64 result;
        OP_Utils::evalOpParm(result, thissop, "surftype", cookparms.getCookTime(), 0);
        return Surftype(result);
    }
    UT_Vector3D getOrigin() const { return myOrigin; }
    void setOrigin(UT_Vector3D val) { myOrigin = val; }
    UT_Vector3D opOrigin(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getOrigin();
        UT_Vector3D result;
        OP_Utils::evalOpParm(result, thissop, "origin", cookparms.getCookTime(), 0);
        return result;
    }
    UT_Vector3D getDir() const { return myDir; }
    void setDir(UT_Vector3D val) { myDir = val; }
    UT_Vector3D opDir(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getDir();
        UT_Vector3D result;
        OP_Utils::evalOpParm(result, thissop, "dir", cookparms.getCookTime(), 0);
        return result;
    }
    bool getPolys() const { return myPolys; }
    void setPolys(bool val) { myPolys = val; }
    bool opPolys(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getPolys();
        bool result;
        OP_Utils::evalOpParm(result, thissop, "polys", cookparms.getCookTime(), 0);
        return result;
    }
    bool getImperfect() const { return myImperfect; }
    void setImperfect(bool val) { myImperfect = val; }
    bool opImperfect(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getImperfect();
        bool result;
        OP_Utils::evalOpParm(result, thissop, "imperfect", cookparms.getCookTime(), 0);
        return result;
    }
    Type getType() const { return Type(myType); }
    void setType(Type val) { myType = int64(val); }
    Type opType(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getType();
        int64 result;
        OP_Utils::evalOpParm(result, thissop, "type", cookparms.getCookTime(), 0);
        return Type(result);
    }
    UT_Vector2D getAngle() const { return myAngle; }
    void setAngle(UT_Vector2D val) { myAngle = val; }
    UT_Vector2D opAngle(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getAngle();
        UT_Vector2D result;
        OP_Utils::evalOpParm(result, thissop, "angle", cookparms.getCookTime(), 0);
        return result;
    }
    int64 getDivs() const { return myDivs; }
    void setDivs(int64 val) { myDivs = val; }
    int64 opDivs(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getDivs();
        int64 result;
        OP_Utils::evalOpParm(result, thissop, "divs", cookparms.getCookTime(), 0);
        return result;
    }
    int64 getOrder() const { return myOrder; }
    void setOrder(int64 val) { myOrder = val; }
    int64 opOrder(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getOrder();
        int64 result;
        OP_Utils::evalOpParm(result, thissop, "order", cookparms.getCookTime(), 0);
        return result;
    }
    bool getCap() const { return myCap; }
    void setCap(bool val) { myCap = val; }
    bool opCap(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getCap();
        bool result;
        OP_Utils::evalOpParm(result, thissop, "cap", cookparms.getCookTime(), 0);
        return result;
    }

private:
    UT_StringHolder myGroup;
    int64 mySurftype;
    UT_Vector3D myOrigin;
    UT_Vector3D myDir;
    bool myPolys;
    bool myImperfect;
    int64 myType;
    UT_Vector2D myAngle;
    int64 myDivs;
    int64 myOrder;
    bool myCap;

};
