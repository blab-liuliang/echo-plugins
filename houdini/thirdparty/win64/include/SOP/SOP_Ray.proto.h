/* Automagically Generated by generate_proto.py
 * Do not Edit
 */
#pragma once

#include <SOP/SOP_NodeVerb.h>
#include <OP/OP_Utils.h>
#include <PRM/PRM_Parm.h>
#include <UT/UT_IStream.h>
#include <UT/UT_NTStreamUtil.h>
#include <UT/UT_Ramp.h>
#include <UT/UT_SharedPtr.h>
#include <UT/UT_StringHolder.h>
#include <UT/UT_StringStream.h>
#include <UT/UT_VectorTypes.h>
#include <SYS/SYS_Types.h>

using namespace UT::Literal;

class DEP_MicroNode;
namespace SOP_RayEnums
{
    enum class Entity
    {
        PRIMITIVE = 0,
        POINT
    };
    enum class Method
    {
        MINIMUM = 0,
        PROJECT
    };
    enum class DirMethod
    {
        VECTOR = 0,
        NORMAL,
        ATTRIBUTE
    };
    enum class Combinetype
    {
        AVERAGE = 0,
        MEDIAN,
        SHORTEST,
        LONGEST
    };
}


class SOP_API SOP_RayParms  : public SOP_NodeParms
{
public:
    static int version() { return 1; }

    SOP_RayParms()
    {
        myGroup = ""_sh;
        myEntity = 0;
        myCollision = ""_sh;
        myMethod = 1;
        myDirMethod = 1;
        myDir = UT_Vector3D(0,0,0);
        myDirAttrib = "N"_sh;
        myShowguide = true;
        myDotrans = false;
        myLookfar = false;
        myPutnml = false;
        myPutdist = false;
        myReverserays = false;
        myRtolerance = 0.01;
        myScale = 1;
        myLift = 0;
        myBias = 0;
        myMaxraydistcheck = false;
        myMaxraydist = 0;
        mySample = 1;
        myJitter = 0;
        myCombinetype = 0;
        mySeed = 1;
        myNewgrp = false;
        myHitgrp = "rayHitGroup"_sh;
        myUseprimnumattrib = false;
        myPrimnumattrib = "hitprim"_sh;
        myUseprimuvwattrib = false;
        myPrimuvwattrib = "hitprimuv"_sh;
        myGetptattribs = false;
        myPtattribnames = "*"_sh;
        myVertexattribnames = ""_sh;
        myPrimitiveattribnames = ""_sh;
        myDetailattribnames = ""_sh;

    }

    explicit SOP_RayParms(const SOP_RayParms &) = default;

    virtual ~SOP_RayParms() {}

    bool operator==(const SOP_RayParms &src) const
    {
        if (myGroup != src.myGroup) return false;
        if (myEntity != src.myEntity) return false;
        if (myCollision != src.myCollision) return false;
        if (myMethod != src.myMethod) return false;
        if (myDirMethod != src.myDirMethod) return false;
        if (myDir != src.myDir) return false;
        if (myDirAttrib != src.myDirAttrib) return false;
        if (myShowguide != src.myShowguide) return false;
        if (myDotrans != src.myDotrans) return false;
        if (myLookfar != src.myLookfar) return false;
        if (myPutnml != src.myPutnml) return false;
        if (myPutdist != src.myPutdist) return false;
        if (myReverserays != src.myReverserays) return false;
        if (myRtolerance != src.myRtolerance) return false;
        if (myScale != src.myScale) return false;
        if (myLift != src.myLift) return false;
        if (myBias != src.myBias) return false;
        if (myMaxraydistcheck != src.myMaxraydistcheck) return false;
        if (myMaxraydist != src.myMaxraydist) return false;
        if (mySample != src.mySample) return false;
        if (myJitter != src.myJitter) return false;
        if (myCombinetype != src.myCombinetype) return false;
        if (mySeed != src.mySeed) return false;
        if (myNewgrp != src.myNewgrp) return false;
        if (myHitgrp != src.myHitgrp) return false;
        if (myUseprimnumattrib != src.myUseprimnumattrib) return false;
        if (myPrimnumattrib != src.myPrimnumattrib) return false;
        if (myUseprimuvwattrib != src.myUseprimuvwattrib) return false;
        if (myPrimuvwattrib != src.myPrimuvwattrib) return false;
        if (myGetptattribs != src.myGetptattribs) return false;
        if (myPtattribnames != src.myPtattribnames) return false;
        if (myVertexattribnames != src.myVertexattribnames) return false;
        if (myPrimitiveattribnames != src.myPrimitiveattribnames) return false;
        if (myDetailattribnames != src.myDetailattribnames) return false;

        return true;
    }
    bool operator!=(const SOP_RayParms &src) const
    {
        return !operator==(src);
    }
    using Entity = SOP_RayEnums::Entity;
    using Method = SOP_RayEnums::Method;
    using DirMethod = SOP_RayEnums::DirMethod;
    using Combinetype = SOP_RayEnums::Combinetype;



    void        buildFromOp(const OP_Node *node, fpreal time, DEP_MicroNode *depnode)
    {
        if (true)
            OP_Utils::evalOpParm(myGroup, node, "group", time, 0);
        else myGroup = ""_sh;
        if (true)
            OP_Utils::evalOpParm(myEntity, node, "entity", time, 0);
        else myEntity = 0;
        if (true)
            OP_Utils::evalOpParm(myCollision, node, "collision", time, 0);
        else myCollision = ""_sh;
        if (true)
            OP_Utils::evalOpParm(myMethod, node, "method", time, 0);
        else myMethod = 1;
        if (true && ( (!(((int64(getMethod())!=1)))) ) )
            OP_Utils::evalOpParm(myDirMethod, node, "dirmethod", time, 0);
        else myDirMethod = 1;
        if (true && ( (!(((int64(getMethod())!=1))||((int64(getDirMethod())!=0)))) ) )
            OP_Utils::evalOpParm(myDir, node, "dir", time, 0);
        else myDir = UT_Vector3D(0,0,0);
        if (true && ( (!(((int64(getMethod())!=1))||((int64(getDirMethod())!=2)))) ) )
            OP_Utils::evalOpParm(myDirAttrib, node, "dirattrib", time, 0);
        else myDirAttrib = "N"_sh;
        if (true && ( (!(((int64(getMethod())>=0)))) ) )
            OP_Utils::evalOpParm(myShowguide, node, "showguide", time, 0);
        else myShowguide = true;
        if (true)
            OP_Utils::evalOpParm(myDotrans, node, "dotrans", time, 0);
        else myDotrans = false;
        if (true && ( (!(((int64(getMethod())!=1)))) ) )
            OP_Utils::evalOpParm(myLookfar, node, "lookfar", time, 0);
        else myLookfar = false;
        if (true)
            OP_Utils::evalOpParm(myPutnml, node, "putnml", time, 0);
        else myPutnml = false;
        if (true)
            OP_Utils::evalOpParm(myPutdist, node, "putdist", time, 0);
        else myPutdist = false;
        if (true && ( (!(((int64(getMethod())!=1)))) ) )
            OP_Utils::evalOpParm(myReverserays, node, "reverserays", time, 0);
        else myReverserays = false;
        if (true && ( (!(((int64(getMethod())!=1)))) ) )
            OP_Utils::evalOpParm(myRtolerance, node, "rtolerance", time, 0);
        else myRtolerance = 0.01;
        if (true && ( (!(((getDotrans()==0)))) ) )
            OP_Utils::evalOpParm(myScale, node, "scale", time, 0);
        else myScale = 1;
        if (true)
            OP_Utils::evalOpParm(myLift, node, "lift", time, 0);
        else myLift = 0;
        if (true && ( (!(((int64(getMethod())!=1)))) ) )
            OP_Utils::evalOpParm(myBias, node, "bias", time, 0);
        else myBias = 0;
        if (true)
            OP_Utils::evalOpParm(myMaxraydistcheck, node, "maxraydistcheck", time, 0);
        else myMaxraydistcheck = false;
        if (true && ( (!(((getMaxraydistcheck()==0)))) ) )
            OP_Utils::evalOpParm(myMaxraydist, node, "maxraydist", time, 0);
        else myMaxraydist = 0;
        if (true && ( (!(((int64(getMethod())!=1)))) ) )
            OP_Utils::evalOpParm(mySample, node, "sample", time, 0);
        else mySample = 1;
        if (true && ( (!(((int64(getMethod())!=1)))) ) )
            OP_Utils::evalOpParm(myJitter, node, "jitter", time, 0);
        else myJitter = 0;
        if (true && ( (!(((int64(getMethod())!=1)))) ) )
            OP_Utils::evalOpParm(myCombinetype, node, "combinetype", time, 0);
        else myCombinetype = 0;
        if (true && ( (!(((int64(getMethod())!=1)))) ) )
            OP_Utils::evalOpParm(mySeed, node, "seed", time, 0);
        else mySeed = 1;
        if (true)
            OP_Utils::evalOpParm(myNewgrp, node, "newgrp", time, 0);
        else myNewgrp = false;
        if (true && ( (!(((getNewgrp()==0)))) ) )
            OP_Utils::evalOpParm(myHitgrp, node, "hitgrp", time, 0);
        else myHitgrp = "rayHitGroup"_sh;
        if (true)
            OP_Utils::evalOpParm(myUseprimnumattrib, node, "useprimnumattrib", time, 0);
        else myUseprimnumattrib = false;
        if (true && ( (!(((getUseprimnumattrib()==0)))) ) )
            OP_Utils::evalOpParm(myPrimnumattrib, node, "primnumattrib", time, 0);
        else myPrimnumattrib = "hitprim"_sh;
        if (true)
            OP_Utils::evalOpParm(myUseprimuvwattrib, node, "useprimuvwattrib", time, 0);
        else myUseprimuvwattrib = false;
        if (true && ( (!(((getUseprimuvwattrib()==0)))) ) )
            OP_Utils::evalOpParm(myPrimuvwattrib, node, "primuvwattrib", time, 0);
        else myPrimuvwattrib = "hitprimuv"_sh;
        if (true)
            OP_Utils::evalOpParm(myGetptattribs, node, "getptattribs", time, 0);
        else myGetptattribs = false;
        if (true && ( (!(((getGetptattribs()==0)))) ) )
            OP_Utils::evalOpParm(myPtattribnames, node, "ptattribnames", time, 0);
        else myPtattribnames = "*"_sh;
        if (true && ( (!(((getGetptattribs()==0)))) ) )
            OP_Utils::evalOpParm(myVertexattribnames, node, "vertexattribnames", time, 0);
        else myVertexattribnames = ""_sh;
        if (true && ( (!(((getGetptattribs()==0)))) ) )
            OP_Utils::evalOpParm(myPrimitiveattribnames, node, "primitiveattribnames", time, 0);
        else myPrimitiveattribnames = ""_sh;
        if (true && ( (!(((getGetptattribs()==0)))) ) )
            OP_Utils::evalOpParm(myDetailattribnames, node, "detailattribnames", time, 0);
        else myDetailattribnames = ""_sh;

    }


    virtual void loadFromOpSubclass(const LoadParms &loadparms)
    {
        buildFromOp(loadparms.node(), loadparms.context().getTime(), loadparms.depnode());
    }


    virtual void copyFrom(const SOP_NodeParms *src)
    {
        *this = *((const SOP_RayParms *)src);
    }

    template <typename T>
    void
    doGetParmValue(exint idx, T &value) const
    {
        switch (idx)
        {
            case 0:
                coerceValue(value, myGroup);
                break;
            case 1:
                coerceValue(value, myEntity);
                break;
            case 2:
                coerceValue(value, myCollision);
                break;
            case 3:
                coerceValue(value, myMethod);
                break;
            case 4:
                coerceValue(value, myDirMethod);
                break;
            case 5:
                coerceValue(value, myDir);
                break;
            case 6:
                coerceValue(value, myDirAttrib);
                break;
            case 7:
                coerceValue(value, myShowguide);
                break;
            case 8:
                coerceValue(value, myDotrans);
                break;
            case 9:
                coerceValue(value, myLookfar);
                break;
            case 10:
                coerceValue(value, myPutnml);
                break;
            case 11:
                coerceValue(value, myPutdist);
                break;
            case 12:
                coerceValue(value, myReverserays);
                break;
            case 13:
                coerceValue(value, myRtolerance);
                break;
            case 14:
                coerceValue(value, myScale);
                break;
            case 15:
                coerceValue(value, myLift);
                break;
            case 16:
                coerceValue(value, myBias);
                break;
            case 17:
                coerceValue(value, myMaxraydistcheck);
                break;
            case 18:
                coerceValue(value, myMaxraydist);
                break;
            case 19:
                coerceValue(value, mySample);
                break;
            case 20:
                coerceValue(value, myJitter);
                break;
            case 21:
                coerceValue(value, myCombinetype);
                break;
            case 22:
                coerceValue(value, mySeed);
                break;
            case 23:
                coerceValue(value, myNewgrp);
                break;
            case 24:
                coerceValue(value, myHitgrp);
                break;
            case 25:
                coerceValue(value, myUseprimnumattrib);
                break;
            case 26:
                coerceValue(value, myPrimnumattrib);
                break;
            case 27:
                coerceValue(value, myUseprimuvwattrib);
                break;
            case 28:
                coerceValue(value, myPrimuvwattrib);
                break;
            case 29:
                coerceValue(value, myGetptattribs);
                break;
            case 30:
                coerceValue(value, myPtattribnames);
                break;
            case 31:
                coerceValue(value, myVertexattribnames);
                break;
            case 32:
                coerceValue(value, myPrimitiveattribnames);
                break;
            case 33:
                coerceValue(value, myDetailattribnames);
                break;

        }
    }

    void        getParmValue(exint idx, exint &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, fpreal &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Vector2D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Vector3D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Vector4D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Matrix2D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Matrix3D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Matrix4D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_StringHolder &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_SharedPtr<UT_Ramp> &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, PRM_DataItemHandle &value) const
    { doGetParmValue(idx, value); }

    template <typename T>
    void
    doSetParmValue(exint idx, const T &value) 
    {
        switch (idx)
        {
            case 0:
                coerceValue(myGroup, value);
                break;
            case 1:
                coerceValue(myEntity, value);
                break;
            case 2:
                coerceValue(myCollision, value);
                break;
            case 3:
                coerceValue(myMethod, value);
                break;
            case 4:
                coerceValue(myDirMethod, value);
                break;
            case 5:
                coerceValue(myDir, value);
                break;
            case 6:
                coerceValue(myDirAttrib, value);
                break;
            case 7:
                coerceValue(myShowguide, value);
                break;
            case 8:
                coerceValue(myDotrans, value);
                break;
            case 9:
                coerceValue(myLookfar, value);
                break;
            case 10:
                coerceValue(myPutnml, value);
                break;
            case 11:
                coerceValue(myPutdist, value);
                break;
            case 12:
                coerceValue(myReverserays, value);
                break;
            case 13:
                coerceValue(myRtolerance, value);
                break;
            case 14:
                coerceValue(myScale, value);
                break;
            case 15:
                coerceValue(myLift, value);
                break;
            case 16:
                coerceValue(myBias, value);
                break;
            case 17:
                coerceValue(myMaxraydistcheck, value);
                break;
            case 18:
                coerceValue(myMaxraydist, value);
                break;
            case 19:
                coerceValue(mySample, value);
                break;
            case 20:
                coerceValue(myJitter, value);
                break;
            case 21:
                coerceValue(myCombinetype, value);
                break;
            case 22:
                coerceValue(mySeed, value);
                break;
            case 23:
                coerceValue(myNewgrp, value);
                break;
            case 24:
                coerceValue(myHitgrp, value);
                break;
            case 25:
                coerceValue(myUseprimnumattrib, value);
                break;
            case 26:
                coerceValue(myPrimnumattrib, value);
                break;
            case 27:
                coerceValue(myUseprimuvwattrib, value);
                break;
            case 28:
                coerceValue(myPrimuvwattrib, value);
                break;
            case 29:
                coerceValue(myGetptattribs, value);
                break;
            case 30:
                coerceValue(myPtattribnames, value);
                break;
            case 31:
                coerceValue(myVertexattribnames, value);
                break;
            case 32:
                coerceValue(myPrimitiveattribnames, value);
                break;
            case 33:
                coerceValue(myDetailattribnames, value);
                break;

        }
    }

    void        setParmValue(exint idx, const exint &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const fpreal &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Vector2D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Vector3D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Vector4D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Matrix2D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Matrix3D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Matrix4D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_StringHolder &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_SharedPtr<UT_Ramp> &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const PRM_DataItemHandle &value) 
    { doSetParmValue(idx, value); }

    virtual exint    getNumParms() const
    {
        return 34;
    }

    virtual const char *getParmName(exint fieldnum) const
    {
        switch (fieldnum)
        {
            case 0:
                return "group";
            case 1:
                return "entity";
            case 2:
                return "collision";
            case 3:
                return "method";
            case 4:
                return "dirmethod";
            case 5:
                return "dir";
            case 6:
                return "dirattrib";
            case 7:
                return "showguide";
            case 8:
                return "dotrans";
            case 9:
                return "lookfar";
            case 10:
                return "putnml";
            case 11:
                return "putdist";
            case 12:
                return "reverserays";
            case 13:
                return "rtolerance";
            case 14:
                return "scale";
            case 15:
                return "lift";
            case 16:
                return "bias";
            case 17:
                return "maxraydistcheck";
            case 18:
                return "maxraydist";
            case 19:
                return "sample";
            case 20:
                return "jitter";
            case 21:
                return "combinetype";
            case 22:
                return "seed";
            case 23:
                return "newgrp";
            case 24:
                return "hitgrp";
            case 25:
                return "useprimnumattrib";
            case 26:
                return "primnumattrib";
            case 27:
                return "useprimuvwattrib";
            case 28:
                return "primuvwattrib";
            case 29:
                return "getptattribs";
            case 30:
                return "ptattribnames";
            case 31:
                return "vertexattribnames";
            case 32:
                return "primitiveattribnames";
            case 33:
                return "detailattribnames";

        }
        return 0;
    }

    virtual ParmType getParmType(exint fieldnum) const
    {
        switch (fieldnum)
        {
                case 0:
                    return PARM_STRING;
                case 1:
                    return PARM_INTEGER;
                case 2:
                    return PARM_STRING;
                case 3:
                    return PARM_INTEGER;
                case 4:
                    return PARM_INTEGER;
                case 5:
                    return PARM_VECTOR3;
                case 6:
                    return PARM_STRING;
                case 7:
                    return PARM_INTEGER;
                case 8:
                    return PARM_INTEGER;
                case 9:
                    return PARM_INTEGER;
                case 10:
                    return PARM_INTEGER;
                case 11:
                    return PARM_INTEGER;
                case 12:
                    return PARM_INTEGER;
                case 13:
                    return PARM_FLOAT;
                case 14:
                    return PARM_FLOAT;
                case 15:
                    return PARM_FLOAT;
                case 16:
                    return PARM_FLOAT;
                case 17:
                    return PARM_INTEGER;
                case 18:
                    return PARM_FLOAT;
                case 19:
                    return PARM_INTEGER;
                case 20:
                    return PARM_FLOAT;
                case 21:
                    return PARM_INTEGER;
                case 22:
                    return PARM_INTEGER;
                case 23:
                    return PARM_INTEGER;
                case 24:
                    return PARM_STRING;
                case 25:
                    return PARM_INTEGER;
                case 26:
                    return PARM_STRING;
                case 27:
                    return PARM_INTEGER;
                case 28:
                    return PARM_STRING;
                case 29:
                    return PARM_INTEGER;
                case 30:
                    return PARM_STRING;
                case 31:
                    return PARM_STRING;
                case 32:
                    return PARM_STRING;
                case 33:
                    return PARM_STRING;

        }
        return PARM_UNSUPPORTED;
    }

    // Boiler plate to load individual types.
    static void  loadData(UT_IStream &is, int64 &v)
    { is.bread(&v, 1); }
    static void  loadData(UT_IStream &is, bool &v)
    { int64     iv; is.bread(&iv, 1); v = iv; }
    static void  loadData(UT_IStream &is, fpreal64 &v)
    { is.bread<fpreal64>(&v, 1); }
    static void  loadData(UT_IStream &is, UT_Vector2D &v)
    { is.bread<fpreal64>(&v.x(), 1); is.bread<fpreal64>(&v.y(), 1); }
    static void  loadData(UT_IStream &is, UT_Vector3D &v)
    { is.bread<fpreal64>(&v.x(), 1); is.bread<fpreal64>(&v.y(), 1);
      is.bread<fpreal64>(&v.z(), 1); }
    static void  loadData(UT_IStream &is, UT_Vector4D &v)
    { is.bread<fpreal64>(&v.x(), 1); is.bread<fpreal64>(&v.y(), 1);
      is.bread<fpreal64>(&v.z(), 1); is.bread<fpreal64>(&v.w(), 1); }
    static void  loadData(UT_IStream &is, UT_Matrix2D &v)
    { for (int r = 0; r < 2; r++) for (int c = 0; c < 2; c++) is.bread<fpreal64>(&v(r, c), 1); }
    static void  loadData(UT_IStream &is, UT_Matrix3D &v)
    { for (int r = 0; r < 3; r++) for (int c = 0; c < 3; c++) is.bread<fpreal64>(&v(r, c), 1); }
    static void  loadData(UT_IStream &is, UT_Matrix4D &v)
    { for (int r = 0; r < 4; r++) for (int c = 0; c < 4; c++) is.bread<fpreal64>(&v(r, c), 1); }
    static void  loadData(UT_IStream &is, UT_Vector2I &v)
    { is.bread<int64>(&v.x(), 1); is.bread<int64>(&v.y(), 1); }
    static void  loadData(UT_IStream &is, UT_Vector3I &v)
    { is.bread<int64>(&v.x(), 1); is.bread<int64>(&v.y(), 1);
      is.bread<int64>(&v.z(), 1); }
    static void  loadData(UT_IStream &is, UT_Vector4I &v)
    { is.bread<int64>(&v.x(), 1); is.bread<int64>(&v.y(), 1);
      is.bread<int64>(&v.z(), 1); is.bread<int64>(&v.w(), 1); }
    static void  loadData(UT_IStream &is, UT_StringHolder &v)
    { is.bread(v); }
    static void  loadData(UT_IStream &is, UT_SharedPtr<UT_Ramp> &v)
    {   UT_StringHolder   rampdata;
        loadData(is, rampdata);
        if (rampdata.isstring())
        {
            v.reset(new UT_Ramp());
            UT_IStream  istr((const char *) rampdata, rampdata.length(), UT_ISTREAM_ASCII);
            v->load(istr);
        }
        else v.reset();
    }
    static void  loadData(UT_IStream &is, PRM_DataItemHandle &v)
    {   UT_StringHolder   data;
        loadData(is, data);
        if (data.isstring())
        {
            // Find the data type.
            char *colon = UT_StringWrap(data).findChar(':');
            if (colon)
            {
                int             typelen = colon - data.buffer();
                UT_WorkBuffer   type;
                type.strncpy(data.buffer(), typelen);
                UT_IStream  istr(((const char *) data) + typelen + 1, data.length() - (typelen + 1), UT_ISTREAM_BINARY);
                
                v = PRM_DataFactory::parseBinary(type.buffer(), istr);
            }
        }
        else v.reset();
    }

    static void  saveData(std::ostream &os, int64 v)
    { UTwrite(os, &v); }
    static void  saveData(std::ostream &os, bool v)
    { int64 iv = v; UTwrite(os, &iv); }
    static void  saveData(std::ostream &os, fpreal64 v)
    { UTwrite<fpreal64>(os, &v); }
    static void  saveData(std::ostream &os, UT_Vector2D v)
    { UTwrite<fpreal64>(os, &v.x()); UTwrite<fpreal64>(os, &v.y()); }
    static void  saveData(std::ostream &os, UT_Vector3D v)
    { UTwrite<fpreal64>(os, &v.x()); UTwrite<fpreal64>(os, &v.y());
      UTwrite<fpreal64>(os, &v.z()); }
    static void  saveData(std::ostream &os, UT_Vector4D v)
    { UTwrite<fpreal64>(os, &v.x()); UTwrite<fpreal64>(os, &v.y());
      UTwrite<fpreal64>(os, &v.z()); UTwrite<fpreal64>(os, &v.w()); }
    static void  saveData(std::ostream &os, UT_Matrix2D v)
    { for (int r = 0; r < 2; r++) for (int c = 0; c < 2; c++) UTwrite<fpreal64>(os, &v(r, c)); }
    static void  saveData(std::ostream &os, UT_Matrix3D v)
    { for (int r = 0; r < 3; r++) for (int c = 0; c < 3; c++) UTwrite<fpreal64>(os, &v(r, c)); }
    static void  saveData(std::ostream &os, UT_Matrix4D v)
    { for (int r = 0; r < 4; r++) for (int c = 0; c < 4; c++) UTwrite<fpreal64>(os, &v(r, c)); }
    static void  saveData(std::ostream &os, UT_StringHolder s)
    { UT_StringWrap(s).saveBinary(os); }
    static void  saveData(std::ostream &os, UT_SharedPtr<UT_Ramp> s)
    {   UT_StringHolder         result;
        UT_OStringStream        ostr;
        if (s) s->save(ostr);
        result = ostr.str();
        saveData(os, result);
    }
    static void  saveData(std::ostream &os, PRM_DataItemHandle s)
    {   UT_StringHolder         result;
        UT_OStringStream        ostr;
        if (s) 
        {
            ostr << s->getDataTypeToken();
            ostr << ":";
            s->saveBinary(ostr);
        }
        result = ostr.str();
        saveData(os, result);
    }


    void         save(std::ostream &os) const
    {
        int32           v = version();
        UTwrite(os, &v);
        saveData(os, myGroup);
        saveData(os, myEntity);
        saveData(os, myCollision);
        saveData(os, myMethod);
        saveData(os, myDirMethod);
        saveData(os, myDir);
        saveData(os, myDirAttrib);
        saveData(os, myShowguide);
        saveData(os, myDotrans);
        saveData(os, myLookfar);
        saveData(os, myPutnml);
        saveData(os, myPutdist);
        saveData(os, myReverserays);
        saveData(os, myRtolerance);
        saveData(os, myScale);
        saveData(os, myLift);
        saveData(os, myBias);
        saveData(os, myMaxraydistcheck);
        saveData(os, myMaxraydist);
        saveData(os, mySample);
        saveData(os, myJitter);
        saveData(os, myCombinetype);
        saveData(os, mySeed);
        saveData(os, myNewgrp);
        saveData(os, myHitgrp);
        saveData(os, myUseprimnumattrib);
        saveData(os, myPrimnumattrib);
        saveData(os, myUseprimuvwattrib);
        saveData(os, myPrimuvwattrib);
        saveData(os, myGetptattribs);
        saveData(os, myPtattribnames);
        saveData(os, myVertexattribnames);
        saveData(os, myPrimitiveattribnames);
        saveData(os, myDetailattribnames);

    }

    bool         load(UT_IStream &is)
    {
        int32           v;
        is.bread(&v, 1);
        if (version() != v)
        {
            // Fail incompatible versions
            return false;
        }
        loadData(is, myGroup);
        loadData(is, myEntity);
        loadData(is, myCollision);
        loadData(is, myMethod);
        loadData(is, myDirMethod);
        loadData(is, myDir);
        loadData(is, myDirAttrib);
        loadData(is, myShowguide);
        loadData(is, myDotrans);
        loadData(is, myLookfar);
        loadData(is, myPutnml);
        loadData(is, myPutdist);
        loadData(is, myReverserays);
        loadData(is, myRtolerance);
        loadData(is, myScale);
        loadData(is, myLift);
        loadData(is, myBias);
        loadData(is, myMaxraydistcheck);
        loadData(is, myMaxraydist);
        loadData(is, mySample);
        loadData(is, myJitter);
        loadData(is, myCombinetype);
        loadData(is, mySeed);
        loadData(is, myNewgrp);
        loadData(is, myHitgrp);
        loadData(is, myUseprimnumattrib);
        loadData(is, myPrimnumattrib);
        loadData(is, myUseprimuvwattrib);
        loadData(is, myPrimuvwattrib);
        loadData(is, myGetptattribs);
        loadData(is, myPtattribnames);
        loadData(is, myVertexattribnames);
        loadData(is, myPrimitiveattribnames);
        loadData(is, myDetailattribnames);

        return true;
    }

    const UT_StringHolder & getGroup() const { return myGroup; }
    void setGroup(const UT_StringHolder & val) { myGroup = val; }
    UT_StringHolder opGroup(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getGroup();
        UT_StringHolder result;
        OP_Utils::evalOpParm(result, thissop, "group", cookparms.getCookTime(), 0);
        return result;
    }
    Entity getEntity() const { return Entity(myEntity); }
    void setEntity(Entity val) { myEntity = int64(val); }
    Entity opEntity(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getEntity();
        int64 result;
        OP_Utils::evalOpParm(result, thissop, "entity", cookparms.getCookTime(), 0);
        return Entity(result);
    }
    const UT_StringHolder & getCollision() const { return myCollision; }
    void setCollision(const UT_StringHolder & val) { myCollision = val; }
    UT_StringHolder opCollision(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getCollision();
        UT_StringHolder result;
        OP_Utils::evalOpParm(result, thissop, "collision", cookparms.getCookTime(), 0);
        return result;
    }
    Method getMethod() const { return Method(myMethod); }
    void setMethod(Method val) { myMethod = int64(val); }
    Method opMethod(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getMethod();
        int64 result;
        OP_Utils::evalOpParm(result, thissop, "method", cookparms.getCookTime(), 0);
        return Method(result);
    }
    DirMethod getDirMethod() const { return DirMethod(myDirMethod); }
    void setDirMethod(DirMethod val) { myDirMethod = int64(val); }
    DirMethod opDirMethod(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getDirMethod();
        int64 result;
        OP_Utils::evalOpParm(result, thissop, "dirmethod", cookparms.getCookTime(), 0);
        return DirMethod(result);
    }
    UT_Vector3D getDir() const { return myDir; }
    void setDir(UT_Vector3D val) { myDir = val; }
    UT_Vector3D opDir(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getDir();
        UT_Vector3D result;
        OP_Utils::evalOpParm(result, thissop, "dir", cookparms.getCookTime(), 0);
        return result;
    }
    const UT_StringHolder & getDirAttrib() const { return myDirAttrib; }
    void setDirAttrib(const UT_StringHolder & val) { myDirAttrib = val; }
    UT_StringHolder opDirAttrib(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getDirAttrib();
        UT_StringHolder result;
        OP_Utils::evalOpParm(result, thissop, "dirattrib", cookparms.getCookTime(), 0);
        return result;
    }
    bool getShowguide() const { return myShowguide; }
    void setShowguide(bool val) { myShowguide = val; }
    bool opShowguide(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getShowguide();
        bool result;
        OP_Utils::evalOpParm(result, thissop, "showguide", cookparms.getCookTime(), 0);
        return result;
    }
    bool getDotrans() const { return myDotrans; }
    void setDotrans(bool val) { myDotrans = val; }
    bool opDotrans(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getDotrans();
        bool result;
        OP_Utils::evalOpParm(result, thissop, "dotrans", cookparms.getCookTime(), 0);
        return result;
    }
    bool getLookfar() const { return myLookfar; }
    void setLookfar(bool val) { myLookfar = val; }
    bool opLookfar(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getLookfar();
        bool result;
        OP_Utils::evalOpParm(result, thissop, "lookfar", cookparms.getCookTime(), 0);
        return result;
    }
    bool getPutnml() const { return myPutnml; }
    void setPutnml(bool val) { myPutnml = val; }
    bool opPutnml(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getPutnml();
        bool result;
        OP_Utils::evalOpParm(result, thissop, "putnml", cookparms.getCookTime(), 0);
        return result;
    }
    bool getPutdist() const { return myPutdist; }
    void setPutdist(bool val) { myPutdist = val; }
    bool opPutdist(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getPutdist();
        bool result;
        OP_Utils::evalOpParm(result, thissop, "putdist", cookparms.getCookTime(), 0);
        return result;
    }
    bool getReverserays() const { return myReverserays; }
    void setReverserays(bool val) { myReverserays = val; }
    bool opReverserays(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getReverserays();
        bool result;
        OP_Utils::evalOpParm(result, thissop, "reverserays", cookparms.getCookTime(), 0);
        return result;
    }
    fpreal64 getRtolerance() const { return myRtolerance; }
    void setRtolerance(fpreal64 val) { myRtolerance = val; }
    fpreal64 opRtolerance(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getRtolerance();
        fpreal64 result;
        OP_Utils::evalOpParm(result, thissop, "rtolerance", cookparms.getCookTime(), 0);
        return result;
    }
    fpreal64 getScale() const { return myScale; }
    void setScale(fpreal64 val) { myScale = val; }
    fpreal64 opScale(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getScale();
        fpreal64 result;
        OP_Utils::evalOpParm(result, thissop, "scale", cookparms.getCookTime(), 0);
        return result;
    }
    fpreal64 getLift() const { return myLift; }
    void setLift(fpreal64 val) { myLift = val; }
    fpreal64 opLift(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getLift();
        fpreal64 result;
        OP_Utils::evalOpParm(result, thissop, "lift", cookparms.getCookTime(), 0);
        return result;
    }
    fpreal64 getBias() const { return myBias; }
    void setBias(fpreal64 val) { myBias = val; }
    fpreal64 opBias(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getBias();
        fpreal64 result;
        OP_Utils::evalOpParm(result, thissop, "bias", cookparms.getCookTime(), 0);
        return result;
    }
    bool getMaxraydistcheck() const { return myMaxraydistcheck; }
    void setMaxraydistcheck(bool val) { myMaxraydistcheck = val; }
    bool opMaxraydistcheck(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getMaxraydistcheck();
        bool result;
        OP_Utils::evalOpParm(result, thissop, "maxraydistcheck", cookparms.getCookTime(), 0);
        return result;
    }
    fpreal64 getMaxraydist() const { return myMaxraydist; }
    void setMaxraydist(fpreal64 val) { myMaxraydist = val; }
    fpreal64 opMaxraydist(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getMaxraydist();
        fpreal64 result;
        OP_Utils::evalOpParm(result, thissop, "maxraydist", cookparms.getCookTime(), 0);
        return result;
    }
    int64 getSample() const { return mySample; }
    void setSample(int64 val) { mySample = val; }
    int64 opSample(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getSample();
        int64 result;
        OP_Utils::evalOpParm(result, thissop, "sample", cookparms.getCookTime(), 0);
        return result;
    }
    fpreal64 getJitter() const { return myJitter; }
    void setJitter(fpreal64 val) { myJitter = val; }
    fpreal64 opJitter(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getJitter();
        fpreal64 result;
        OP_Utils::evalOpParm(result, thissop, "jitter", cookparms.getCookTime(), 0);
        return result;
    }
    Combinetype getCombinetype() const { return Combinetype(myCombinetype); }
    void setCombinetype(Combinetype val) { myCombinetype = int64(val); }
    Combinetype opCombinetype(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getCombinetype();
        int64 result;
        OP_Utils::evalOpParm(result, thissop, "combinetype", cookparms.getCookTime(), 0);
        return Combinetype(result);
    }
    int64 getSeed() const { return mySeed; }
    void setSeed(int64 val) { mySeed = val; }
    int64 opSeed(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getSeed();
        int64 result;
        OP_Utils::evalOpParm(result, thissop, "seed", cookparms.getCookTime(), 0);
        return result;
    }
    bool getNewgrp() const { return myNewgrp; }
    void setNewgrp(bool val) { myNewgrp = val; }
    bool opNewgrp(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getNewgrp();
        bool result;
        OP_Utils::evalOpParm(result, thissop, "newgrp", cookparms.getCookTime(), 0);
        return result;
    }
    const UT_StringHolder & getHitgrp() const { return myHitgrp; }
    void setHitgrp(const UT_StringHolder & val) { myHitgrp = val; }
    UT_StringHolder opHitgrp(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getHitgrp();
        UT_StringHolder result;
        OP_Utils::evalOpParm(result, thissop, "hitgrp", cookparms.getCookTime(), 0);
        return result;
    }
    bool getUseprimnumattrib() const { return myUseprimnumattrib; }
    void setUseprimnumattrib(bool val) { myUseprimnumattrib = val; }
    bool opUseprimnumattrib(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getUseprimnumattrib();
        bool result;
        OP_Utils::evalOpParm(result, thissop, "useprimnumattrib", cookparms.getCookTime(), 0);
        return result;
    }
    const UT_StringHolder & getPrimnumattrib() const { return myPrimnumattrib; }
    void setPrimnumattrib(const UT_StringHolder & val) { myPrimnumattrib = val; }
    UT_StringHolder opPrimnumattrib(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getPrimnumattrib();
        UT_StringHolder result;
        OP_Utils::evalOpParm(result, thissop, "primnumattrib", cookparms.getCookTime(), 0);
        return result;
    }
    bool getUseprimuvwattrib() const { return myUseprimuvwattrib; }
    void setUseprimuvwattrib(bool val) { myUseprimuvwattrib = val; }
    bool opUseprimuvwattrib(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getUseprimuvwattrib();
        bool result;
        OP_Utils::evalOpParm(result, thissop, "useprimuvwattrib", cookparms.getCookTime(), 0);
        return result;
    }
    const UT_StringHolder & getPrimuvwattrib() const { return myPrimuvwattrib; }
    void setPrimuvwattrib(const UT_StringHolder & val) { myPrimuvwattrib = val; }
    UT_StringHolder opPrimuvwattrib(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getPrimuvwattrib();
        UT_StringHolder result;
        OP_Utils::evalOpParm(result, thissop, "primuvwattrib", cookparms.getCookTime(), 0);
        return result;
    }
    bool getGetptattribs() const { return myGetptattribs; }
    void setGetptattribs(bool val) { myGetptattribs = val; }
    bool opGetptattribs(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getGetptattribs();
        bool result;
        OP_Utils::evalOpParm(result, thissop, "getptattribs", cookparms.getCookTime(), 0);
        return result;
    }
    const UT_StringHolder & getPtattribnames() const { return myPtattribnames; }
    void setPtattribnames(const UT_StringHolder & val) { myPtattribnames = val; }
    UT_StringHolder opPtattribnames(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getPtattribnames();
        UT_StringHolder result;
        OP_Utils::evalOpParm(result, thissop, "ptattribnames", cookparms.getCookTime(), 0);
        return result;
    }
    const UT_StringHolder & getVertexattribnames() const { return myVertexattribnames; }
    void setVertexattribnames(const UT_StringHolder & val) { myVertexattribnames = val; }
    UT_StringHolder opVertexattribnames(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getVertexattribnames();
        UT_StringHolder result;
        OP_Utils::evalOpParm(result, thissop, "vertexattribnames", cookparms.getCookTime(), 0);
        return result;
    }
    const UT_StringHolder & getPrimitiveattribnames() const { return myPrimitiveattribnames; }
    void setPrimitiveattribnames(const UT_StringHolder & val) { myPrimitiveattribnames = val; }
    UT_StringHolder opPrimitiveattribnames(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getPrimitiveattribnames();
        UT_StringHolder result;
        OP_Utils::evalOpParm(result, thissop, "primitiveattribnames", cookparms.getCookTime(), 0);
        return result;
    }
    const UT_StringHolder & getDetailattribnames() const { return myDetailattribnames; }
    void setDetailattribnames(const UT_StringHolder & val) { myDetailattribnames = val; }
    UT_StringHolder opDetailattribnames(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getDetailattribnames();
        UT_StringHolder result;
        OP_Utils::evalOpParm(result, thissop, "detailattribnames", cookparms.getCookTime(), 0);
        return result;
    }

private:
    UT_StringHolder myGroup;
    int64 myEntity;
    UT_StringHolder myCollision;
    int64 myMethod;
    int64 myDirMethod;
    UT_Vector3D myDir;
    UT_StringHolder myDirAttrib;
    bool myShowguide;
    bool myDotrans;
    bool myLookfar;
    bool myPutnml;
    bool myPutdist;
    bool myReverserays;
    fpreal64 myRtolerance;
    fpreal64 myScale;
    fpreal64 myLift;
    fpreal64 myBias;
    bool myMaxraydistcheck;
    fpreal64 myMaxraydist;
    int64 mySample;
    fpreal64 myJitter;
    int64 myCombinetype;
    int64 mySeed;
    bool myNewgrp;
    UT_StringHolder myHitgrp;
    bool myUseprimnumattrib;
    UT_StringHolder myPrimnumattrib;
    bool myUseprimuvwattrib;
    UT_StringHolder myPrimuvwattrib;
    bool myGetptattribs;
    UT_StringHolder myPtattribnames;
    UT_StringHolder myVertexattribnames;
    UT_StringHolder myPrimitiveattribnames;
    UT_StringHolder myDetailattribnames;

};
