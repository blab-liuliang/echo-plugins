/* Automagically Generated by generate_proto.py
 * Do not Edit
 */
#pragma once

#include <SOP/SOP_NodeVerb.h>
#include <OP/OP_Utils.h>
#include <PRM/PRM_Parm.h>
#include <UT/UT_IStream.h>
#include <UT/UT_NTStreamUtil.h>
#include <UT/UT_Ramp.h>
#include <UT/UT_SharedPtr.h>
#include <UT/UT_StringHolder.h>
#include <UT/UT_StringStream.h>
#include <UT/UT_VectorTypes.h>
#include <SYS/SYS_Types.h>

using namespace UT::Literal;

class DEP_MicroNode;
namespace SOP_ClipEnums
{
    enum class Clipop
    {
        ABOVE = 0,
        BELOW,
        BOTH
    };
}


class SOP_API SOP_ClipParms  : public SOP_NodeParms
{
public:
    static int version() { return 1; }

    SOP_ClipParms()
    {
        myGroup = ""_sh;
        myClipop = 0;
        myOrigin = UT_Vector3D(0,0,0);
        myDist = 0;
        myDir = UT_Vector3D(0,1,0);
        myNewg = false;
        myAbove = "above_plane"_sh;
        myBelow = "below_plane"_sh;
        myClippts = false;

    }

    explicit SOP_ClipParms(const SOP_ClipParms &) = default;

    virtual ~SOP_ClipParms() {}

    bool operator==(const SOP_ClipParms &src) const
    {
        if (myGroup != src.myGroup) return false;
        if (myClipop != src.myClipop) return false;
        if (myOrigin != src.myOrigin) return false;
        if (myDist != src.myDist) return false;
        if (myDir != src.myDir) return false;
        if (myNewg != src.myNewg) return false;
        if (myAbove != src.myAbove) return false;
        if (myBelow != src.myBelow) return false;
        if (myClippts != src.myClippts) return false;

        return true;
    }
    bool operator!=(const SOP_ClipParms &src) const
    {
        return !operator==(src);
    }
    using Clipop = SOP_ClipEnums::Clipop;



    void        buildFromOp(const OP_Node *node, fpreal time, DEP_MicroNode *depnode)
    {
        if (true)
            OP_Utils::evalOpParm(myGroup, node, "group", time, 0);
        else myGroup = ""_sh;
        if (true)
            OP_Utils::evalOpParm(myClipop, node, "clipop", time, 0);
        else myClipop = 0;
        if (true)
            OP_Utils::evalOpParm(myOrigin, node, "origin", time, 0);
        else myOrigin = UT_Vector3D(0,0,0);
        if (true)
            OP_Utils::evalOpParm(myDist, node, "dist", time, 0);
        else myDist = 0;
        if (true)
            OP_Utils::evalOpParm(myDir, node, "dir", time, 0);
        else myDir = UT_Vector3D(0,1,0);
        if (true && ( (!(((int64(getClipop())!=2)))) ) )
            OP_Utils::evalOpParm(myNewg, node, "newg", time, 0);
        else myNewg = false;
        if (true && ( (!(((int64(getClipop())!=2))||((getNewg()==0)))) ) )
            OP_Utils::evalOpParm(myAbove, node, "above", time, 0);
        else myAbove = "above_plane"_sh;
        if (true && ( (!(((int64(getClipop())!=2))||((getNewg()==0)))) ) )
            OP_Utils::evalOpParm(myBelow, node, "below", time, 0);
        else myBelow = "below_plane"_sh;
        if (true)
            OP_Utils::evalOpParm(myClippts, node, "clippts", time, 0);
        else myClippts = false;

    }


    virtual void loadFromOpSubclass(const LoadParms &loadparms)
    {
        buildFromOp(loadparms.node(), loadparms.context().getTime(), loadparms.depnode());
    }


    virtual void copyFrom(const SOP_NodeParms *src)
    {
        *this = *((const SOP_ClipParms *)src);
    }

    template <typename T>
    void
    doGetParmValue(exint idx, T &value) const
    {
        switch (idx)
        {
            case 0:
                coerceValue(value, myGroup);
                break;
            case 1:
                coerceValue(value, myClipop);
                break;
            case 2:
                coerceValue(value, myOrigin);
                break;
            case 3:
                coerceValue(value, myDist);
                break;
            case 4:
                coerceValue(value, myDir);
                break;
            case 5:
                coerceValue(value, myNewg);
                break;
            case 6:
                coerceValue(value, myAbove);
                break;
            case 7:
                coerceValue(value, myBelow);
                break;
            case 8:
                coerceValue(value, myClippts);
                break;

        }
    }

    void        getParmValue(exint idx, exint &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, fpreal &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Vector2D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Vector3D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Vector4D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Matrix2D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Matrix3D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Matrix4D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_StringHolder &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_SharedPtr<UT_Ramp> &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, PRM_DataItemHandle &value) const
    { doGetParmValue(idx, value); }

    template <typename T>
    void
    doSetParmValue(exint idx, const T &value) 
    {
        switch (idx)
        {
            case 0:
                coerceValue(myGroup, value);
                break;
            case 1:
                coerceValue(myClipop, value);
                break;
            case 2:
                coerceValue(myOrigin, value);
                break;
            case 3:
                coerceValue(myDist, value);
                break;
            case 4:
                coerceValue(myDir, value);
                break;
            case 5:
                coerceValue(myNewg, value);
                break;
            case 6:
                coerceValue(myAbove, value);
                break;
            case 7:
                coerceValue(myBelow, value);
                break;
            case 8:
                coerceValue(myClippts, value);
                break;

        }
    }

    void        setParmValue(exint idx, const exint &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const fpreal &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Vector2D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Vector3D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Vector4D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Matrix2D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Matrix3D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Matrix4D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_StringHolder &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_SharedPtr<UT_Ramp> &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const PRM_DataItemHandle &value) 
    { doSetParmValue(idx, value); }

    virtual exint    getNumParms() const
    {
        return 9;
    }

    virtual const char *getParmName(exint fieldnum) const
    {
        switch (fieldnum)
        {
            case 0:
                return "group";
            case 1:
                return "clipop";
            case 2:
                return "origin";
            case 3:
                return "dist";
            case 4:
                return "dir";
            case 5:
                return "newg";
            case 6:
                return "above";
            case 7:
                return "below";
            case 8:
                return "clippts";

        }
        return 0;
    }

    virtual ParmType getParmType(exint fieldnum) const
    {
        switch (fieldnum)
        {
                case 0:
                    return PARM_STRING;
                case 1:
                    return PARM_INTEGER;
                case 2:
                    return PARM_VECTOR3;
                case 3:
                    return PARM_FLOAT;
                case 4:
                    return PARM_VECTOR3;
                case 5:
                    return PARM_INTEGER;
                case 6:
                    return PARM_STRING;
                case 7:
                    return PARM_STRING;
                case 8:
                    return PARM_INTEGER;

        }
        return PARM_UNSUPPORTED;
    }

    // Boiler plate to load individual types.
    static void  loadData(UT_IStream &is, int64 &v)
    { is.bread(&v, 1); }
    static void  loadData(UT_IStream &is, bool &v)
    { int64     iv; is.bread(&iv, 1); v = iv; }
    static void  loadData(UT_IStream &is, fpreal64 &v)
    { is.bread<fpreal64>(&v, 1); }
    static void  loadData(UT_IStream &is, UT_Vector2D &v)
    { is.bread<fpreal64>(&v.x(), 1); is.bread<fpreal64>(&v.y(), 1); }
    static void  loadData(UT_IStream &is, UT_Vector3D &v)
    { is.bread<fpreal64>(&v.x(), 1); is.bread<fpreal64>(&v.y(), 1);
      is.bread<fpreal64>(&v.z(), 1); }
    static void  loadData(UT_IStream &is, UT_Vector4D &v)
    { is.bread<fpreal64>(&v.x(), 1); is.bread<fpreal64>(&v.y(), 1);
      is.bread<fpreal64>(&v.z(), 1); is.bread<fpreal64>(&v.w(), 1); }
    static void  loadData(UT_IStream &is, UT_Matrix2D &v)
    { for (int r = 0; r < 2; r++) for (int c = 0; c < 2; c++) is.bread<fpreal64>(&v(r, c), 1); }
    static void  loadData(UT_IStream &is, UT_Matrix3D &v)
    { for (int r = 0; r < 3; r++) for (int c = 0; c < 3; c++) is.bread<fpreal64>(&v(r, c), 1); }
    static void  loadData(UT_IStream &is, UT_Matrix4D &v)
    { for (int r = 0; r < 4; r++) for (int c = 0; c < 4; c++) is.bread<fpreal64>(&v(r, c), 1); }
    static void  loadData(UT_IStream &is, UT_Vector2I &v)
    { is.bread<int64>(&v.x(), 1); is.bread<int64>(&v.y(), 1); }
    static void  loadData(UT_IStream &is, UT_Vector3I &v)
    { is.bread<int64>(&v.x(), 1); is.bread<int64>(&v.y(), 1);
      is.bread<int64>(&v.z(), 1); }
    static void  loadData(UT_IStream &is, UT_Vector4I &v)
    { is.bread<int64>(&v.x(), 1); is.bread<int64>(&v.y(), 1);
      is.bread<int64>(&v.z(), 1); is.bread<int64>(&v.w(), 1); }
    static void  loadData(UT_IStream &is, UT_StringHolder &v)
    { is.bread(v); }
    static void  loadData(UT_IStream &is, UT_SharedPtr<UT_Ramp> &v)
    {   UT_StringHolder   rampdata;
        loadData(is, rampdata);
        if (rampdata.isstring())
        {
            v.reset(new UT_Ramp());
            UT_IStream  istr((const char *) rampdata, rampdata.length(), UT_ISTREAM_ASCII);
            v->load(istr);
        }
        else v.reset();
    }
    static void  loadData(UT_IStream &is, PRM_DataItemHandle &v)
    {   UT_StringHolder   data;
        loadData(is, data);
        if (data.isstring())
        {
            // Find the data type.
            char *colon = UT_StringWrap(data).findChar(':');
            if (colon)
            {
                int             typelen = colon - data.buffer();
                UT_WorkBuffer   type;
                type.strncpy(data.buffer(), typelen);
                UT_IStream  istr(((const char *) data) + typelen + 1, data.length() - (typelen + 1), UT_ISTREAM_BINARY);
                
                v = PRM_DataFactory::parseBinary(type.buffer(), istr);
            }
        }
        else v.reset();
    }

    static void  saveData(std::ostream &os, int64 v)
    { UTwrite(os, &v); }
    static void  saveData(std::ostream &os, bool v)
    { int64 iv = v; UTwrite(os, &iv); }
    static void  saveData(std::ostream &os, fpreal64 v)
    { UTwrite<fpreal64>(os, &v); }
    static void  saveData(std::ostream &os, UT_Vector2D v)
    { UTwrite<fpreal64>(os, &v.x()); UTwrite<fpreal64>(os, &v.y()); }
    static void  saveData(std::ostream &os, UT_Vector3D v)
    { UTwrite<fpreal64>(os, &v.x()); UTwrite<fpreal64>(os, &v.y());
      UTwrite<fpreal64>(os, &v.z()); }
    static void  saveData(std::ostream &os, UT_Vector4D v)
    { UTwrite<fpreal64>(os, &v.x()); UTwrite<fpreal64>(os, &v.y());
      UTwrite<fpreal64>(os, &v.z()); UTwrite<fpreal64>(os, &v.w()); }
    static void  saveData(std::ostream &os, UT_Matrix2D v)
    { for (int r = 0; r < 2; r++) for (int c = 0; c < 2; c++) UTwrite<fpreal64>(os, &v(r, c)); }
    static void  saveData(std::ostream &os, UT_Matrix3D v)
    { for (int r = 0; r < 3; r++) for (int c = 0; c < 3; c++) UTwrite<fpreal64>(os, &v(r, c)); }
    static void  saveData(std::ostream &os, UT_Matrix4D v)
    { for (int r = 0; r < 4; r++) for (int c = 0; c < 4; c++) UTwrite<fpreal64>(os, &v(r, c)); }
    static void  saveData(std::ostream &os, UT_StringHolder s)
    { UT_StringWrap(s).saveBinary(os); }
    static void  saveData(std::ostream &os, UT_SharedPtr<UT_Ramp> s)
    {   UT_StringHolder         result;
        UT_OStringStream        ostr;
        if (s) s->save(ostr);
        result = ostr.str();
        saveData(os, result);
    }
    static void  saveData(std::ostream &os, PRM_DataItemHandle s)
    {   UT_StringHolder         result;
        UT_OStringStream        ostr;
        if (s) 
        {
            ostr << s->getDataTypeToken();
            ostr << ":";
            s->saveBinary(ostr);
        }
        result = ostr.str();
        saveData(os, result);
    }


    void         save(std::ostream &os) const
    {
        int32           v = version();
        UTwrite(os, &v);
        saveData(os, myGroup);
        saveData(os, myClipop);
        saveData(os, myOrigin);
        saveData(os, myDist);
        saveData(os, myDir);
        saveData(os, myNewg);
        saveData(os, myAbove);
        saveData(os, myBelow);
        saveData(os, myClippts);

    }

    bool         load(UT_IStream &is)
    {
        int32           v;
        is.bread(&v, 1);
        if (version() != v)
        {
            // Fail incompatible versions
            return false;
        }
        loadData(is, myGroup);
        loadData(is, myClipop);
        loadData(is, myOrigin);
        loadData(is, myDist);
        loadData(is, myDir);
        loadData(is, myNewg);
        loadData(is, myAbove);
        loadData(is, myBelow);
        loadData(is, myClippts);

        return true;
    }

    const UT_StringHolder & getGroup() const { return myGroup; }
    void setGroup(const UT_StringHolder & val) { myGroup = val; }
    UT_StringHolder opGroup(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getGroup();
        UT_StringHolder result;
        OP_Utils::evalOpParm(result, thissop, "group", cookparms.getCookTime(), 0);
        return result;
    }
    Clipop getClipop() const { return Clipop(myClipop); }
    void setClipop(Clipop val) { myClipop = int64(val); }
    Clipop opClipop(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getClipop();
        int64 result;
        OP_Utils::evalOpParm(result, thissop, "clipop", cookparms.getCookTime(), 0);
        return Clipop(result);
    }
    UT_Vector3D getOrigin() const { return myOrigin; }
    void setOrigin(UT_Vector3D val) { myOrigin = val; }
    UT_Vector3D opOrigin(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getOrigin();
        UT_Vector3D result;
        OP_Utils::evalOpParm(result, thissop, "origin", cookparms.getCookTime(), 0);
        return result;
    }
    fpreal64 getDist() const { return myDist; }
    void setDist(fpreal64 val) { myDist = val; }
    fpreal64 opDist(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getDist();
        fpreal64 result;
        OP_Utils::evalOpParm(result, thissop, "dist", cookparms.getCookTime(), 0);
        return result;
    }
    UT_Vector3D getDir() const { return myDir; }
    void setDir(UT_Vector3D val) { myDir = val; }
    UT_Vector3D opDir(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getDir();
        UT_Vector3D result;
        OP_Utils::evalOpParm(result, thissop, "dir", cookparms.getCookTime(), 0);
        return result;
    }
    bool getNewg() const { return myNewg; }
    void setNewg(bool val) { myNewg = val; }
    bool opNewg(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getNewg();
        bool result;
        OP_Utils::evalOpParm(result, thissop, "newg", cookparms.getCookTime(), 0);
        return result;
    }
    const UT_StringHolder & getAbove() const { return myAbove; }
    void setAbove(const UT_StringHolder & val) { myAbove = val; }
    UT_StringHolder opAbove(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getAbove();
        UT_StringHolder result;
        OP_Utils::evalOpParm(result, thissop, "above", cookparms.getCookTime(), 0);
        return result;
    }
    const UT_StringHolder & getBelow() const { return myBelow; }
    void setBelow(const UT_StringHolder & val) { myBelow = val; }
    UT_StringHolder opBelow(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getBelow();
        UT_StringHolder result;
        OP_Utils::evalOpParm(result, thissop, "below", cookparms.getCookTime(), 0);
        return result;
    }
    bool getClippts() const { return myClippts; }
    void setClippts(bool val) { myClippts = val; }
    bool opClippts(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getClippts();
        bool result;
        OP_Utils::evalOpParm(result, thissop, "clippts", cookparms.getCookTime(), 0);
        return result;
    }

private:
    UT_StringHolder myGroup;
    int64 myClipop;
    UT_Vector3D myOrigin;
    fpreal64 myDist;
    UT_Vector3D myDir;
    bool myNewg;
    UT_StringHolder myAbove;
    UT_StringHolder myBelow;
    bool myClippts;

};
