/* Automagically Generated by generate_proto.py
 * Do not Edit
 */
#pragma once

#include <SOP/SOP_NodeVerb.h>
#include <OP/OP_Utils.h>
#include <PRM/PRM_Parm.h>
#include <UT/UT_IStream.h>
#include <UT/UT_NTStreamUtil.h>
#include <UT/UT_Ramp.h>
#include <UT/UT_SharedPtr.h>
#include <UT/UT_StringHolder.h>
#include <UT/UT_StringStream.h>
#include <UT/UT_VectorTypes.h>
#include <SYS/SYS_Types.h>

using namespace UT::Literal;

class DEP_MicroNode;
namespace SOP_ShapeDiffEnums
{
    enum class DiffType
    {
        PREDEFORM = 0,
        POSTDEFORM,
        POSTDEFORM_ORIENT,
        FROMINPUTGEO
    };
    enum class SkinType
    {
        LINEAR = 0,
        DUALQUAT,
        BLENDDUALQUAT,
        FROMINPUTGEO
    };
}


class SOP_API SOP_ShapeDiffParms  : public SOP_NodeParms
{
public:
    static int version() { return 1; }

    SOP_ShapeDiffParms()
    {
        myDiffType = 1;
        myOrientAttrib = ""_sh;
        mySkelRootPath = ""_sh;
        myBoneTransformPath = ""_sh;
        mySkinType = 1;
        myBlendAttrib = ""_sh;
        myDoNormal = false;
        myDoVAttribs = true;
        myVattribs = "P"_sh;
        myDoQAttribs = false;
        myQattribs = ""_sh;
        myMaskAttrib = ""_sh;
        myScaleMask = 1;

    }

    explicit SOP_ShapeDiffParms(const SOP_ShapeDiffParms &) = default;

    virtual ~SOP_ShapeDiffParms() {}

    bool operator==(const SOP_ShapeDiffParms &src) const
    {
        if (myDiffType != src.myDiffType) return false;
        if (myOrientAttrib != src.myOrientAttrib) return false;
        if (mySkelRootPath != src.mySkelRootPath) return false;
        if (myBoneTransformPath != src.myBoneTransformPath) return false;
        if (mySkinType != src.mySkinType) return false;
        if (myBlendAttrib != src.myBlendAttrib) return false;
        if (myDoNormal != src.myDoNormal) return false;
        if (myDoVAttribs != src.myDoVAttribs) return false;
        if (myVattribs != src.myVattribs) return false;
        if (myDoQAttribs != src.myDoQAttribs) return false;
        if (myQattribs != src.myQattribs) return false;
        if (myMaskAttrib != src.myMaskAttrib) return false;
        if (myScaleMask != src.myScaleMask) return false;

        return true;
    }
    bool operator!=(const SOP_ShapeDiffParms &src) const
    {
        return !operator==(src);
    }
    using DiffType = SOP_ShapeDiffEnums::DiffType;
    using SkinType = SOP_ShapeDiffEnums::SkinType;



    void        buildFromOp(const OP_Node *node, fpreal time, DEP_MicroNode *depnode)
    {
        if (true)
            OP_Utils::evalOpParm(myDiffType, node, "difftype", time, 0);
        else myDiffType = 1;
        if (true && ( (!(((int64(getDiffType())!=2)))) ) )
            OP_Utils::evalOpParm(myOrientAttrib, node, "orientattrib", time, 0);
        else myOrientAttrib = ""_sh;
        if (true && ( (!(((int64(getDiffType())==1))||((int64(getDiffType())==2)))) ) )
            OP_Utils::evalOpParm(mySkelRootPath, node, "skelrootpath", time, 0);
        else mySkelRootPath = ""_sh;
        if (true && ( (!(((int64(getDiffType())==1))||((int64(getDiffType())==2)))) ) )
            OP_Utils::evalOpParm(myBoneTransformPath, node, "bonetransformpath", time, 0);
        else myBoneTransformPath = ""_sh;
        if (true && ( (!(((int64(getDiffType())==1))||((int64(getDiffType())==2)))) ) )
            OP_Utils::evalOpParm(mySkinType, node, "skintype", time, 0);
        else mySkinType = 1;
        if (true && ( (!(((int64(getSkinType())!=2))||((int64(getDiffType())==1))||((int64(getDiffType())==2)))) ) )
            OP_Utils::evalOpParm(myBlendAttrib, node, "blendattrib", time, 0);
        else myBlendAttrib = ""_sh;
        if (true)
            OP_Utils::evalOpParm(myDoNormal, node, "donormal", time, 0);
        else myDoNormal = false;
        if (true)
            OP_Utils::evalOpParm(myDoVAttribs, node, "dovattribs", time, 0);
        else myDoVAttribs = true;
        if (true && ( (!(((getDoVAttribs()==0)))) ) )
            OP_Utils::evalOpParm(myVattribs, node, "vattribs", time, 0);
        else myVattribs = "P"_sh;
        if (true)
            OP_Utils::evalOpParm(myDoQAttribs, node, "doqattribs", time, 0);
        else myDoQAttribs = false;
        if (true && ( (!(((getDoQAttribs()==0)))) ) )
            OP_Utils::evalOpParm(myQattribs, node, "qattribs", time, 0);
        else myQattribs = ""_sh;
        if (true)
            OP_Utils::evalOpParm(myMaskAttrib, node, "maskattrib", time, 0);
        else myMaskAttrib = ""_sh;
        if (true && ( (!(((getMaskAttrib()=="''")))) ) )
            OP_Utils::evalOpParm(myScaleMask, node, "scalemask", time, 0);
        else myScaleMask = 1;

    }


    virtual void loadFromOpSubclass(const LoadParms &loadparms)
    {
        buildFromOp(loadparms.node(), loadparms.context().getTime(), loadparms.depnode());
    }


    virtual void copyFrom(const SOP_NodeParms *src)
    {
        *this = *((const SOP_ShapeDiffParms *)src);
    }

    template <typename T>
    void
    doGetParmValue(exint idx, T &value) const
    {
        switch (idx)
        {
            case 0:
                coerceValue(value, myDiffType);
                break;
            case 1:
                coerceValue(value, myOrientAttrib);
                break;
            case 2:
                coerceValue(value, mySkelRootPath);
                break;
            case 3:
                coerceValue(value, myBoneTransformPath);
                break;
            case 4:
                coerceValue(value, mySkinType);
                break;
            case 5:
                coerceValue(value, myBlendAttrib);
                break;
            case 6:
                coerceValue(value, myDoNormal);
                break;
            case 7:
                coerceValue(value, myDoVAttribs);
                break;
            case 8:
                coerceValue(value, myVattribs);
                break;
            case 9:
                coerceValue(value, myDoQAttribs);
                break;
            case 10:
                coerceValue(value, myQattribs);
                break;
            case 11:
                coerceValue(value, myMaskAttrib);
                break;
            case 12:
                coerceValue(value, myScaleMask);
                break;

        }
    }

    void        getParmValue(exint idx, exint &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, fpreal &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Vector2D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Vector3D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Vector4D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Matrix2D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Matrix3D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Matrix4D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_StringHolder &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_SharedPtr<UT_Ramp> &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, PRM_DataItemHandle &value) const
    { doGetParmValue(idx, value); }

    template <typename T>
    void
    doSetParmValue(exint idx, const T &value) 
    {
        switch (idx)
        {
            case 0:
                coerceValue(myDiffType, value);
                break;
            case 1:
                coerceValue(myOrientAttrib, value);
                break;
            case 2:
                coerceValue(mySkelRootPath, value);
                break;
            case 3:
                coerceValue(myBoneTransformPath, value);
                break;
            case 4:
                coerceValue(mySkinType, value);
                break;
            case 5:
                coerceValue(myBlendAttrib, value);
                break;
            case 6:
                coerceValue(myDoNormal, value);
                break;
            case 7:
                coerceValue(myDoVAttribs, value);
                break;
            case 8:
                coerceValue(myVattribs, value);
                break;
            case 9:
                coerceValue(myDoQAttribs, value);
                break;
            case 10:
                coerceValue(myQattribs, value);
                break;
            case 11:
                coerceValue(myMaskAttrib, value);
                break;
            case 12:
                coerceValue(myScaleMask, value);
                break;

        }
    }

    void        setParmValue(exint idx, const exint &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const fpreal &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Vector2D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Vector3D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Vector4D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Matrix2D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Matrix3D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Matrix4D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_StringHolder &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_SharedPtr<UT_Ramp> &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const PRM_DataItemHandle &value) 
    { doSetParmValue(idx, value); }

    virtual exint    getNumParms() const
    {
        return 13;
    }

    virtual const char *getParmName(exint fieldnum) const
    {
        switch (fieldnum)
        {
            case 0:
                return "difftype";
            case 1:
                return "orientattrib";
            case 2:
                return "skelrootpath";
            case 3:
                return "bonetransformpath";
            case 4:
                return "skintype";
            case 5:
                return "blendattrib";
            case 6:
                return "donormal";
            case 7:
                return "dovattribs";
            case 8:
                return "vattribs";
            case 9:
                return "doqattribs";
            case 10:
                return "qattribs";
            case 11:
                return "maskattrib";
            case 12:
                return "scalemask";

        }
        return 0;
    }

    virtual ParmType getParmType(exint fieldnum) const
    {
        switch (fieldnum)
        {
                case 0:
                    return PARM_INTEGER;
                case 1:
                    return PARM_STRING;
                case 2:
                    return PARM_STRING;
                case 3:
                    return PARM_STRING;
                case 4:
                    return PARM_INTEGER;
                case 5:
                    return PARM_STRING;
                case 6:
                    return PARM_INTEGER;
                case 7:
                    return PARM_INTEGER;
                case 8:
                    return PARM_STRING;
                case 9:
                    return PARM_INTEGER;
                case 10:
                    return PARM_STRING;
                case 11:
                    return PARM_STRING;
                case 12:
                    return PARM_FLOAT;

        }
        return PARM_UNSUPPORTED;
    }

    // Boiler plate to load individual types.
    static void  loadData(UT_IStream &is, int64 &v)
    { is.bread(&v, 1); }
    static void  loadData(UT_IStream &is, bool &v)
    { int64     iv; is.bread(&iv, 1); v = iv; }
    static void  loadData(UT_IStream &is, fpreal64 &v)
    { is.bread<fpreal64>(&v, 1); }
    static void  loadData(UT_IStream &is, UT_Vector2D &v)
    { is.bread<fpreal64>(&v.x(), 1); is.bread<fpreal64>(&v.y(), 1); }
    static void  loadData(UT_IStream &is, UT_Vector3D &v)
    { is.bread<fpreal64>(&v.x(), 1); is.bread<fpreal64>(&v.y(), 1);
      is.bread<fpreal64>(&v.z(), 1); }
    static void  loadData(UT_IStream &is, UT_Vector4D &v)
    { is.bread<fpreal64>(&v.x(), 1); is.bread<fpreal64>(&v.y(), 1);
      is.bread<fpreal64>(&v.z(), 1); is.bread<fpreal64>(&v.w(), 1); }
    static void  loadData(UT_IStream &is, UT_Matrix2D &v)
    { for (int r = 0; r < 2; r++) for (int c = 0; c < 2; c++) is.bread<fpreal64>(&v(r, c), 1); }
    static void  loadData(UT_IStream &is, UT_Matrix3D &v)
    { for (int r = 0; r < 3; r++) for (int c = 0; c < 3; c++) is.bread<fpreal64>(&v(r, c), 1); }
    static void  loadData(UT_IStream &is, UT_Matrix4D &v)
    { for (int r = 0; r < 4; r++) for (int c = 0; c < 4; c++) is.bread<fpreal64>(&v(r, c), 1); }
    static void  loadData(UT_IStream &is, UT_Vector2I &v)
    { is.bread<int64>(&v.x(), 1); is.bread<int64>(&v.y(), 1); }
    static void  loadData(UT_IStream &is, UT_Vector3I &v)
    { is.bread<int64>(&v.x(), 1); is.bread<int64>(&v.y(), 1);
      is.bread<int64>(&v.z(), 1); }
    static void  loadData(UT_IStream &is, UT_Vector4I &v)
    { is.bread<int64>(&v.x(), 1); is.bread<int64>(&v.y(), 1);
      is.bread<int64>(&v.z(), 1); is.bread<int64>(&v.w(), 1); }
    static void  loadData(UT_IStream &is, UT_StringHolder &v)
    { is.bread(v); }
    static void  loadData(UT_IStream &is, UT_SharedPtr<UT_Ramp> &v)
    {   UT_StringHolder   rampdata;
        loadData(is, rampdata);
        if (rampdata.isstring())
        {
            v.reset(new UT_Ramp());
            UT_IStream  istr((const char *) rampdata, rampdata.length(), UT_ISTREAM_ASCII);
            v->load(istr);
        }
        else v.reset();
    }
    static void  loadData(UT_IStream &is, PRM_DataItemHandle &v)
    {   UT_StringHolder   data;
        loadData(is, data);
        if (data.isstring())
        {
            // Find the data type.
            char *colon = UT_StringWrap(data).findChar(':');
            if (colon)
            {
                int             typelen = colon - data.buffer();
                UT_WorkBuffer   type;
                type.strncpy(data.buffer(), typelen);
                UT_IStream  istr(((const char *) data) + typelen + 1, data.length() - (typelen + 1), UT_ISTREAM_BINARY);
                
                v = PRM_DataFactory::parseBinary(type.buffer(), istr);
            }
        }
        else v.reset();
    }

    static void  saveData(std::ostream &os, int64 v)
    { UTwrite(os, &v); }
    static void  saveData(std::ostream &os, bool v)
    { int64 iv = v; UTwrite(os, &iv); }
    static void  saveData(std::ostream &os, fpreal64 v)
    { UTwrite<fpreal64>(os, &v); }
    static void  saveData(std::ostream &os, UT_Vector2D v)
    { UTwrite<fpreal64>(os, &v.x()); UTwrite<fpreal64>(os, &v.y()); }
    static void  saveData(std::ostream &os, UT_Vector3D v)
    { UTwrite<fpreal64>(os, &v.x()); UTwrite<fpreal64>(os, &v.y());
      UTwrite<fpreal64>(os, &v.z()); }
    static void  saveData(std::ostream &os, UT_Vector4D v)
    { UTwrite<fpreal64>(os, &v.x()); UTwrite<fpreal64>(os, &v.y());
      UTwrite<fpreal64>(os, &v.z()); UTwrite<fpreal64>(os, &v.w()); }
    static void  saveData(std::ostream &os, UT_Matrix2D v)
    { for (int r = 0; r < 2; r++) for (int c = 0; c < 2; c++) UTwrite<fpreal64>(os, &v(r, c)); }
    static void  saveData(std::ostream &os, UT_Matrix3D v)
    { for (int r = 0; r < 3; r++) for (int c = 0; c < 3; c++) UTwrite<fpreal64>(os, &v(r, c)); }
    static void  saveData(std::ostream &os, UT_Matrix4D v)
    { for (int r = 0; r < 4; r++) for (int c = 0; c < 4; c++) UTwrite<fpreal64>(os, &v(r, c)); }
    static void  saveData(std::ostream &os, UT_StringHolder s)
    { UT_StringWrap(s).saveBinary(os); }
    static void  saveData(std::ostream &os, UT_SharedPtr<UT_Ramp> s)
    {   UT_StringHolder         result;
        UT_OStringStream        ostr;
        if (s) s->save(ostr);
        result = ostr.str();
        saveData(os, result);
    }
    static void  saveData(std::ostream &os, PRM_DataItemHandle s)
    {   UT_StringHolder         result;
        UT_OStringStream        ostr;
        if (s) 
        {
            ostr << s->getDataTypeToken();
            ostr << ":";
            s->saveBinary(ostr);
        }
        result = ostr.str();
        saveData(os, result);
    }


    void         save(std::ostream &os) const
    {
        int32           v = version();
        UTwrite(os, &v);
        saveData(os, myDiffType);
        saveData(os, myOrientAttrib);
        saveData(os, mySkelRootPath);
        saveData(os, myBoneTransformPath);
        saveData(os, mySkinType);
        saveData(os, myBlendAttrib);
        saveData(os, myDoNormal);
        saveData(os, myDoVAttribs);
        saveData(os, myVattribs);
        saveData(os, myDoQAttribs);
        saveData(os, myQattribs);
        saveData(os, myMaskAttrib);
        saveData(os, myScaleMask);

    }

    bool         load(UT_IStream &is)
    {
        int32           v;
        is.bread(&v, 1);
        if (version() != v)
        {
            // Fail incompatible versions
            return false;
        }
        loadData(is, myDiffType);
        loadData(is, myOrientAttrib);
        loadData(is, mySkelRootPath);
        loadData(is, myBoneTransformPath);
        loadData(is, mySkinType);
        loadData(is, myBlendAttrib);
        loadData(is, myDoNormal);
        loadData(is, myDoVAttribs);
        loadData(is, myVattribs);
        loadData(is, myDoQAttribs);
        loadData(is, myQattribs);
        loadData(is, myMaskAttrib);
        loadData(is, myScaleMask);

        return true;
    }

    DiffType getDiffType() const { return DiffType(myDiffType); }
    void setDiffType(DiffType val) { myDiffType = int64(val); }
    DiffType opDiffType(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getDiffType();
        int64 result;
        OP_Utils::evalOpParm(result, thissop, "difftype", cookparms.getCookTime(), 0);
        return DiffType(result);
    }
    const UT_StringHolder & getOrientAttrib() const { return myOrientAttrib; }
    void setOrientAttrib(const UT_StringHolder & val) { myOrientAttrib = val; }
    UT_StringHolder opOrientAttrib(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getOrientAttrib();
        UT_StringHolder result;
        OP_Utils::evalOpParm(result, thissop, "orientattrib", cookparms.getCookTime(), 0);
        return result;
    }
    const UT_StringHolder & getSkelRootPath() const { return mySkelRootPath; }
    void setSkelRootPath(const UT_StringHolder & val) { mySkelRootPath = val; }
    UT_StringHolder opSkelRootPath(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getSkelRootPath();
        UT_StringHolder result;
        OP_Utils::evalOpParm(result, thissop, "skelrootpath", cookparms.getCookTime(), 0);
        return result;
    }
    const UT_StringHolder & getBoneTransformPath() const { return myBoneTransformPath; }
    void setBoneTransformPath(const UT_StringHolder & val) { myBoneTransformPath = val; }
    UT_StringHolder opBoneTransformPath(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getBoneTransformPath();
        UT_StringHolder result;
        OP_Utils::evalOpParm(result, thissop, "bonetransformpath", cookparms.getCookTime(), 0);
        return result;
    }
    SkinType getSkinType() const { return SkinType(mySkinType); }
    void setSkinType(SkinType val) { mySkinType = int64(val); }
    SkinType opSkinType(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getSkinType();
        int64 result;
        OP_Utils::evalOpParm(result, thissop, "skintype", cookparms.getCookTime(), 0);
        return SkinType(result);
    }
    const UT_StringHolder & getBlendAttrib() const { return myBlendAttrib; }
    void setBlendAttrib(const UT_StringHolder & val) { myBlendAttrib = val; }
    UT_StringHolder opBlendAttrib(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getBlendAttrib();
        UT_StringHolder result;
        OP_Utils::evalOpParm(result, thissop, "blendattrib", cookparms.getCookTime(), 0);
        return result;
    }
    bool getDoNormal() const { return myDoNormal; }
    void setDoNormal(bool val) { myDoNormal = val; }
    bool opDoNormal(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getDoNormal();
        bool result;
        OP_Utils::evalOpParm(result, thissop, "donormal", cookparms.getCookTime(), 0);
        return result;
    }
    bool getDoVAttribs() const { return myDoVAttribs; }
    void setDoVAttribs(bool val) { myDoVAttribs = val; }
    bool opDoVAttribs(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getDoVAttribs();
        bool result;
        OP_Utils::evalOpParm(result, thissop, "dovattribs", cookparms.getCookTime(), 0);
        return result;
    }
    const UT_StringHolder & getVattribs() const { return myVattribs; }
    void setVattribs(const UT_StringHolder & val) { myVattribs = val; }
    UT_StringHolder opVattribs(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getVattribs();
        UT_StringHolder result;
        OP_Utils::evalOpParm(result, thissop, "vattribs", cookparms.getCookTime(), 0);
        return result;
    }
    bool getDoQAttribs() const { return myDoQAttribs; }
    void setDoQAttribs(bool val) { myDoQAttribs = val; }
    bool opDoQAttribs(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getDoQAttribs();
        bool result;
        OP_Utils::evalOpParm(result, thissop, "doqattribs", cookparms.getCookTime(), 0);
        return result;
    }
    const UT_StringHolder & getQattribs() const { return myQattribs; }
    void setQattribs(const UT_StringHolder & val) { myQattribs = val; }
    UT_StringHolder opQattribs(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getQattribs();
        UT_StringHolder result;
        OP_Utils::evalOpParm(result, thissop, "qattribs", cookparms.getCookTime(), 0);
        return result;
    }
    const UT_StringHolder & getMaskAttrib() const { return myMaskAttrib; }
    void setMaskAttrib(const UT_StringHolder & val) { myMaskAttrib = val; }
    UT_StringHolder opMaskAttrib(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getMaskAttrib();
        UT_StringHolder result;
        OP_Utils::evalOpParm(result, thissop, "maskattrib", cookparms.getCookTime(), 0);
        return result;
    }
    fpreal64 getScaleMask() const { return myScaleMask; }
    void setScaleMask(fpreal64 val) { myScaleMask = val; }
    fpreal64 opScaleMask(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getScaleMask();
        fpreal64 result;
        OP_Utils::evalOpParm(result, thissop, "scalemask", cookparms.getCookTime(), 0);
        return result;
    }

private:
    int64 myDiffType;
    UT_StringHolder myOrientAttrib;
    UT_StringHolder mySkelRootPath;
    UT_StringHolder myBoneTransformPath;
    int64 mySkinType;
    UT_StringHolder myBlendAttrib;
    bool myDoNormal;
    bool myDoVAttribs;
    UT_StringHolder myVattribs;
    bool myDoQAttribs;
    UT_StringHolder myQattribs;
    UT_StringHolder myMaskAttrib;
    fpreal64 myScaleMask;

};
