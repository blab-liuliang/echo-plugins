/* Automagically Generated by generate_proto.py
 * Do not Edit
 */
#pragma once

#include <SOP/SOP_NodeVerb.h>
#include <OP/OP_Utils.h>
#include <PRM/PRM_Parm.h>
#include <UT/UT_IStream.h>
#include <UT/UT_NTStreamUtil.h>
#include <UT/UT_Ramp.h>
#include <UT/UT_SharedPtr.h>
#include <UT/UT_StringHolder.h>
#include <UT/UT_StringStream.h>
#include <UT/UT_VectorTypes.h>
#include <SYS/SYS_Types.h>

using namespace UT::Literal;

class DEP_MicroNode;
namespace SOP_UVTransform_2_0Enums
{
    enum class GroupType
    {
        GUESS = 0,
        VERTICES,
        EDGES,
        POINTS,
        PRIMS
    };
    enum class XOrd
    {
        SRT = 0,
        STR,
        RST,
        RTS,
        TSR,
        TRS
    };
    enum class ROrd
    {
        XYZ = 0,
        XZY,
        YXZ,
        YZX,
        ZXY,
        ZYX
    };
    enum class Type
    {
        LINEAR = 0,
        QUADRATIC,
        CUBIC,
        META
    };
    enum class Metric
    {
        UV = 0,
        UVW,
        XYZ
    };
    enum class Visualizefalloff
    {
        NEVER = 0,
        ALWAYS,
        STATE
    };
}


class SOP_API SOP_UVTransform_2_0Parms  : public SOP_NodeParms
{
public:
    static int version() { return 1; }

    SOP_UVTransform_2_0Parms()
    {
        myGroup = ""_sh;
        myGroupType = 0;
        myUVAttrib = "uv"_sh;
        myXOrd = 0;
        myROrd = 0;
        myT = UT_Vector3D(0,0,0);
        myR = UT_Vector3D(0,0,0);
        myS = UT_Vector3D(1,1,1);
        myShear = UT_Vector3D(0,0,0);
        myP = UT_Vector3D(0,0,0);
        myRad = 0;
        myType = 2;
        myTandeg = UT_Vector2D(0,0);
        myKernel = "wyvill"_sh;
        myMetric = 0;
        myGlobal = false;
        myUVGlobal = false;
        myVisualizefalloff = 2;

    }

    explicit SOP_UVTransform_2_0Parms(const SOP_UVTransform_2_0Parms &) = default;

    virtual ~SOP_UVTransform_2_0Parms() {}

    bool operator==(const SOP_UVTransform_2_0Parms &src) const
    {
        if (myGroup != src.myGroup) return false;
        if (myGroupType != src.myGroupType) return false;
        if (myUVAttrib != src.myUVAttrib) return false;
        if (myXOrd != src.myXOrd) return false;
        if (myROrd != src.myROrd) return false;
        if (myT != src.myT) return false;
        if (myR != src.myR) return false;
        if (myS != src.myS) return false;
        if (myShear != src.myShear) return false;
        if (myP != src.myP) return false;
        if (myRad != src.myRad) return false;
        if (myType != src.myType) return false;
        if (myTandeg != src.myTandeg) return false;
        if (myKernel != src.myKernel) return false;
        if (myMetric != src.myMetric) return false;
        if (myGlobal != src.myGlobal) return false;
        if (myUVGlobal != src.myUVGlobal) return false;
        if (myVisualizefalloff != src.myVisualizefalloff) return false;

        return true;
    }
    bool operator!=(const SOP_UVTransform_2_0Parms &src) const
    {
        return !operator==(src);
    }
    using GroupType = SOP_UVTransform_2_0Enums::GroupType;
    using XOrd = SOP_UVTransform_2_0Enums::XOrd;
    using ROrd = SOP_UVTransform_2_0Enums::ROrd;
    using Type = SOP_UVTransform_2_0Enums::Type;
    using Metric = SOP_UVTransform_2_0Enums::Metric;
    using Visualizefalloff = SOP_UVTransform_2_0Enums::Visualizefalloff;



    void        buildFromOp(const OP_Node *node, fpreal time, DEP_MicroNode *depnode)
    {
        if (true)
            OP_Utils::evalOpParm(myGroup, node, "group", time, 0);
        else myGroup = ""_sh;
        if (true)
            OP_Utils::evalOpParm(myGroupType, node, "grouptype", time, 0);
        else myGroupType = 0;
        if (true)
            OP_Utils::evalOpParm(myUVAttrib, node, "uvattrib", time, 0);
        else myUVAttrib = "uv"_sh;
        if (true)
            OP_Utils::evalOpParm(myXOrd, node, "xOrd", time, 0);
        else myXOrd = 0;
        if (true)
            OP_Utils::evalOpParm(myROrd, node, "rOrd", time, 0);
        else myROrd = 0;
        if (true)
            OP_Utils::evalOpParm(myT, node, "t", time, 0);
        else myT = UT_Vector3D(0,0,0);
        if (true)
            OP_Utils::evalOpParm(myR, node, "r", time, 0);
        else myR = UT_Vector3D(0,0,0);
        if (true)
            OP_Utils::evalOpParm(myS, node, "s", time, 0);
        else myS = UT_Vector3D(1,1,1);
        if (true)
            OP_Utils::evalOpParm(myShear, node, "shear", time, 0);
        else myShear = UT_Vector3D(0,0,0);
        if (true)
            OP_Utils::evalOpParm(myP, node, "p", time, 0);
        else myP = UT_Vector3D(0,0,0);
        if (true)
            OP_Utils::evalOpParm(myRad, node, "rad", time, 0);
        else myRad = 0;
        if (true)
            OP_Utils::evalOpParm(myType, node, "type", time, 0);
        else myType = 2;
        if (true && ( (!(((int64(getType())!=2)))) ) )
            OP_Utils::evalOpParm(myTandeg, node, "tandeg", time, 0);
        else myTandeg = UT_Vector2D(0,0);
        if (true && ( (!(((int64(getType())!=3)))) ) )
            OP_Utils::evalOpParm(myKernel, node, "kernel", time, 0);
        else myKernel = "wyvill"_sh;
        if (true)
            OP_Utils::evalOpParm(myMetric, node, "metric", time, 0);
        else myMetric = 0;
        if (true)
            OP_Utils::evalOpParm(myGlobal, node, "global", time, 0);
        else myGlobal = false;
        if (true)
            OP_Utils::evalOpParm(myUVGlobal, node, "uvglobal", time, 0);
        else myUVGlobal = false;
        if (true)
            OP_Utils::evalOpParm(myVisualizefalloff, node, "visualizefalloff", time, 0);
        else myVisualizefalloff = 2;

    }


    virtual void loadFromOpSubclass(const LoadParms &loadparms)
    {
        buildFromOp(loadparms.node(), loadparms.context().getTime(), loadparms.depnode());
    }


    virtual void copyFrom(const SOP_NodeParms *src)
    {
        *this = *((const SOP_UVTransform_2_0Parms *)src);
    }

    template <typename T>
    void
    doGetParmValue(exint idx, T &value) const
    {
        switch (idx)
        {
            case 0:
                coerceValue(value, myGroup);
                break;
            case 1:
                coerceValue(value, myGroupType);
                break;
            case 2:
                coerceValue(value, myUVAttrib);
                break;
            case 3:
                coerceValue(value, myXOrd);
                break;
            case 4:
                coerceValue(value, myROrd);
                break;
            case 5:
                coerceValue(value, myT);
                break;
            case 6:
                coerceValue(value, myR);
                break;
            case 7:
                coerceValue(value, myS);
                break;
            case 8:
                coerceValue(value, myShear);
                break;
            case 9:
                coerceValue(value, myP);
                break;
            case 10:
                coerceValue(value, myRad);
                break;
            case 11:
                coerceValue(value, myType);
                break;
            case 12:
                coerceValue(value, myTandeg);
                break;
            case 13:
                coerceValue(value, myKernel);
                break;
            case 14:
                coerceValue(value, myMetric);
                break;
            case 15:
                coerceValue(value, myGlobal);
                break;
            case 16:
                coerceValue(value, myUVGlobal);
                break;
            case 17:
                coerceValue(value, myVisualizefalloff);
                break;

        }
    }

    void        getParmValue(exint idx, exint &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, fpreal &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Vector2D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Vector3D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Vector4D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Matrix2D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Matrix3D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Matrix4D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_StringHolder &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_SharedPtr<UT_Ramp> &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, PRM_DataItemHandle &value) const
    { doGetParmValue(idx, value); }

    template <typename T>
    void
    doSetParmValue(exint idx, const T &value) 
    {
        switch (idx)
        {
            case 0:
                coerceValue(myGroup, value);
                break;
            case 1:
                coerceValue(myGroupType, value);
                break;
            case 2:
                coerceValue(myUVAttrib, value);
                break;
            case 3:
                coerceValue(myXOrd, value);
                break;
            case 4:
                coerceValue(myROrd, value);
                break;
            case 5:
                coerceValue(myT, value);
                break;
            case 6:
                coerceValue(myR, value);
                break;
            case 7:
                coerceValue(myS, value);
                break;
            case 8:
                coerceValue(myShear, value);
                break;
            case 9:
                coerceValue(myP, value);
                break;
            case 10:
                coerceValue(myRad, value);
                break;
            case 11:
                coerceValue(myType, value);
                break;
            case 12:
                coerceValue(myTandeg, value);
                break;
            case 13:
                coerceValue(myKernel, value);
                break;
            case 14:
                coerceValue(myMetric, value);
                break;
            case 15:
                coerceValue(myGlobal, value);
                break;
            case 16:
                coerceValue(myUVGlobal, value);
                break;
            case 17:
                coerceValue(myVisualizefalloff, value);
                break;

        }
    }

    void        setParmValue(exint idx, const exint &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const fpreal &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Vector2D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Vector3D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Vector4D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Matrix2D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Matrix3D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Matrix4D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_StringHolder &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_SharedPtr<UT_Ramp> &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const PRM_DataItemHandle &value) 
    { doSetParmValue(idx, value); }

    virtual exint    getNumParms() const
    {
        return 18;
    }

    virtual const char *getParmName(exint fieldnum) const
    {
        switch (fieldnum)
        {
            case 0:
                return "group";
            case 1:
                return "grouptype";
            case 2:
                return "uvattrib";
            case 3:
                return "xOrd";
            case 4:
                return "rOrd";
            case 5:
                return "t";
            case 6:
                return "r";
            case 7:
                return "s";
            case 8:
                return "shear";
            case 9:
                return "p";
            case 10:
                return "rad";
            case 11:
                return "type";
            case 12:
                return "tandeg";
            case 13:
                return "kernel";
            case 14:
                return "metric";
            case 15:
                return "global";
            case 16:
                return "uvglobal";
            case 17:
                return "visualizefalloff";

        }
        return 0;
    }

    virtual ParmType getParmType(exint fieldnum) const
    {
        switch (fieldnum)
        {
                case 0:
                    return PARM_STRING;
                case 1:
                    return PARM_INTEGER;
                case 2:
                    return PARM_STRING;
                case 3:
                    return PARM_INTEGER;
                case 4:
                    return PARM_INTEGER;
                case 5:
                    return PARM_VECTOR3;
                case 6:
                    return PARM_VECTOR3;
                case 7:
                    return PARM_VECTOR3;
                case 8:
                    return PARM_VECTOR3;
                case 9:
                    return PARM_VECTOR3;
                case 10:
                    return PARM_FLOAT;
                case 11:
                    return PARM_INTEGER;
                case 12:
                    return PARM_VECTOR2;
                case 13:
                    return PARM_STRING;
                case 14:
                    return PARM_INTEGER;
                case 15:
                    return PARM_INTEGER;
                case 16:
                    return PARM_INTEGER;
                case 17:
                    return PARM_INTEGER;

        }
        return PARM_UNSUPPORTED;
    }

    // Boiler plate to load individual types.
    static void  loadData(UT_IStream &is, int64 &v)
    { is.bread(&v, 1); }
    static void  loadData(UT_IStream &is, bool &v)
    { int64     iv; is.bread(&iv, 1); v = iv; }
    static void  loadData(UT_IStream &is, fpreal64 &v)
    { is.bread<fpreal64>(&v, 1); }
    static void  loadData(UT_IStream &is, UT_Vector2D &v)
    { is.bread<fpreal64>(&v.x(), 1); is.bread<fpreal64>(&v.y(), 1); }
    static void  loadData(UT_IStream &is, UT_Vector3D &v)
    { is.bread<fpreal64>(&v.x(), 1); is.bread<fpreal64>(&v.y(), 1);
      is.bread<fpreal64>(&v.z(), 1); }
    static void  loadData(UT_IStream &is, UT_Vector4D &v)
    { is.bread<fpreal64>(&v.x(), 1); is.bread<fpreal64>(&v.y(), 1);
      is.bread<fpreal64>(&v.z(), 1); is.bread<fpreal64>(&v.w(), 1); }
    static void  loadData(UT_IStream &is, UT_Matrix2D &v)
    { for (int r = 0; r < 2; r++) for (int c = 0; c < 2; c++) is.bread<fpreal64>(&v(r, c), 1); }
    static void  loadData(UT_IStream &is, UT_Matrix3D &v)
    { for (int r = 0; r < 3; r++) for (int c = 0; c < 3; c++) is.bread<fpreal64>(&v(r, c), 1); }
    static void  loadData(UT_IStream &is, UT_Matrix4D &v)
    { for (int r = 0; r < 4; r++) for (int c = 0; c < 4; c++) is.bread<fpreal64>(&v(r, c), 1); }
    static void  loadData(UT_IStream &is, UT_Vector2I &v)
    { is.bread<int64>(&v.x(), 1); is.bread<int64>(&v.y(), 1); }
    static void  loadData(UT_IStream &is, UT_Vector3I &v)
    { is.bread<int64>(&v.x(), 1); is.bread<int64>(&v.y(), 1);
      is.bread<int64>(&v.z(), 1); }
    static void  loadData(UT_IStream &is, UT_Vector4I &v)
    { is.bread<int64>(&v.x(), 1); is.bread<int64>(&v.y(), 1);
      is.bread<int64>(&v.z(), 1); is.bread<int64>(&v.w(), 1); }
    static void  loadData(UT_IStream &is, UT_StringHolder &v)
    { is.bread(v); }
    static void  loadData(UT_IStream &is, UT_SharedPtr<UT_Ramp> &v)
    {   UT_StringHolder   rampdata;
        loadData(is, rampdata);
        if (rampdata.isstring())
        {
            v.reset(new UT_Ramp());
            UT_IStream  istr((const char *) rampdata, rampdata.length(), UT_ISTREAM_ASCII);
            v->load(istr);
        }
        else v.reset();
    }
    static void  loadData(UT_IStream &is, PRM_DataItemHandle &v)
    {   UT_StringHolder   data;
        loadData(is, data);
        if (data.isstring())
        {
            // Find the data type.
            char *colon = UT_StringWrap(data).findChar(':');
            if (colon)
            {
                int             typelen = colon - data.buffer();
                UT_WorkBuffer   type;
                type.strncpy(data.buffer(), typelen);
                UT_IStream  istr(((const char *) data) + typelen + 1, data.length() - (typelen + 1), UT_ISTREAM_BINARY);
                
                v = PRM_DataFactory::parseBinary(type.buffer(), istr);
            }
        }
        else v.reset();
    }

    static void  saveData(std::ostream &os, int64 v)
    { UTwrite(os, &v); }
    static void  saveData(std::ostream &os, bool v)
    { int64 iv = v; UTwrite(os, &iv); }
    static void  saveData(std::ostream &os, fpreal64 v)
    { UTwrite<fpreal64>(os, &v); }
    static void  saveData(std::ostream &os, UT_Vector2D v)
    { UTwrite<fpreal64>(os, &v.x()); UTwrite<fpreal64>(os, &v.y()); }
    static void  saveData(std::ostream &os, UT_Vector3D v)
    { UTwrite<fpreal64>(os, &v.x()); UTwrite<fpreal64>(os, &v.y());
      UTwrite<fpreal64>(os, &v.z()); }
    static void  saveData(std::ostream &os, UT_Vector4D v)
    { UTwrite<fpreal64>(os, &v.x()); UTwrite<fpreal64>(os, &v.y());
      UTwrite<fpreal64>(os, &v.z()); UTwrite<fpreal64>(os, &v.w()); }
    static void  saveData(std::ostream &os, UT_Matrix2D v)
    { for (int r = 0; r < 2; r++) for (int c = 0; c < 2; c++) UTwrite<fpreal64>(os, &v(r, c)); }
    static void  saveData(std::ostream &os, UT_Matrix3D v)
    { for (int r = 0; r < 3; r++) for (int c = 0; c < 3; c++) UTwrite<fpreal64>(os, &v(r, c)); }
    static void  saveData(std::ostream &os, UT_Matrix4D v)
    { for (int r = 0; r < 4; r++) for (int c = 0; c < 4; c++) UTwrite<fpreal64>(os, &v(r, c)); }
    static void  saveData(std::ostream &os, UT_StringHolder s)
    { UT_StringWrap(s).saveBinary(os); }
    static void  saveData(std::ostream &os, UT_SharedPtr<UT_Ramp> s)
    {   UT_StringHolder         result;
        UT_OStringStream        ostr;
        if (s) s->save(ostr);
        result = ostr.str();
        saveData(os, result);
    }
    static void  saveData(std::ostream &os, PRM_DataItemHandle s)
    {   UT_StringHolder         result;
        UT_OStringStream        ostr;
        if (s) 
        {
            ostr << s->getDataTypeToken();
            ostr << ":";
            s->saveBinary(ostr);
        }
        result = ostr.str();
        saveData(os, result);
    }


    void         save(std::ostream &os) const
    {
        int32           v = version();
        UTwrite(os, &v);
        saveData(os, myGroup);
        saveData(os, myGroupType);
        saveData(os, myUVAttrib);
        saveData(os, myXOrd);
        saveData(os, myROrd);
        saveData(os, myT);
        saveData(os, myR);
        saveData(os, myS);
        saveData(os, myShear);
        saveData(os, myP);
        saveData(os, myRad);
        saveData(os, myType);
        saveData(os, myTandeg);
        saveData(os, myKernel);
        saveData(os, myMetric);
        saveData(os, myGlobal);
        saveData(os, myUVGlobal);
        saveData(os, myVisualizefalloff);

    }

    bool         load(UT_IStream &is)
    {
        int32           v;
        is.bread(&v, 1);
        if (version() != v)
        {
            // Fail incompatible versions
            return false;
        }
        loadData(is, myGroup);
        loadData(is, myGroupType);
        loadData(is, myUVAttrib);
        loadData(is, myXOrd);
        loadData(is, myROrd);
        loadData(is, myT);
        loadData(is, myR);
        loadData(is, myS);
        loadData(is, myShear);
        loadData(is, myP);
        loadData(is, myRad);
        loadData(is, myType);
        loadData(is, myTandeg);
        loadData(is, myKernel);
        loadData(is, myMetric);
        loadData(is, myGlobal);
        loadData(is, myUVGlobal);
        loadData(is, myVisualizefalloff);

        return true;
    }

    const UT_StringHolder & getGroup() const { return myGroup; }
    void setGroup(const UT_StringHolder & val) { myGroup = val; }
    UT_StringHolder opGroup(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getGroup();
        UT_StringHolder result;
        OP_Utils::evalOpParm(result, thissop, "group", cookparms.getCookTime(), 0);
        return result;
    }
    GroupType getGroupType() const { return GroupType(myGroupType); }
    void setGroupType(GroupType val) { myGroupType = int64(val); }
    GroupType opGroupType(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getGroupType();
        int64 result;
        OP_Utils::evalOpParm(result, thissop, "grouptype", cookparms.getCookTime(), 0);
        return GroupType(result);
    }
    const UT_StringHolder & getUVAttrib() const { return myUVAttrib; }
    void setUVAttrib(const UT_StringHolder & val) { myUVAttrib = val; }
    UT_StringHolder opUVAttrib(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getUVAttrib();
        UT_StringHolder result;
        OP_Utils::evalOpParm(result, thissop, "uvattrib", cookparms.getCookTime(), 0);
        return result;
    }
    XOrd getXOrd() const { return XOrd(myXOrd); }
    void setXOrd(XOrd val) { myXOrd = int64(val); }
    XOrd opXOrd(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getXOrd();
        int64 result;
        OP_Utils::evalOpParm(result, thissop, "xOrd", cookparms.getCookTime(), 0);
        return XOrd(result);
    }
    ROrd getROrd() const { return ROrd(myROrd); }
    void setROrd(ROrd val) { myROrd = int64(val); }
    ROrd opROrd(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getROrd();
        int64 result;
        OP_Utils::evalOpParm(result, thissop, "rOrd", cookparms.getCookTime(), 0);
        return ROrd(result);
    }
    UT_Vector3D getT() const { return myT; }
    void setT(UT_Vector3D val) { myT = val; }
    UT_Vector3D opT(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getT();
        UT_Vector3D result;
        OP_Utils::evalOpParm(result, thissop, "t", cookparms.getCookTime(), 0);
        return result;
    }
    UT_Vector3D getR() const { return myR; }
    void setR(UT_Vector3D val) { myR = val; }
    UT_Vector3D opR(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getR();
        UT_Vector3D result;
        OP_Utils::evalOpParm(result, thissop, "r", cookparms.getCookTime(), 0);
        return result;
    }
    UT_Vector3D getS() const { return myS; }
    void setS(UT_Vector3D val) { myS = val; }
    UT_Vector3D opS(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getS();
        UT_Vector3D result;
        OP_Utils::evalOpParm(result, thissop, "s", cookparms.getCookTime(), 0);
        return result;
    }
    UT_Vector3D getShear() const { return myShear; }
    void setShear(UT_Vector3D val) { myShear = val; }
    UT_Vector3D opShear(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getShear();
        UT_Vector3D result;
        OP_Utils::evalOpParm(result, thissop, "shear", cookparms.getCookTime(), 0);
        return result;
    }
    UT_Vector3D getP() const { return myP; }
    void setP(UT_Vector3D val) { myP = val; }
    UT_Vector3D opP(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getP();
        UT_Vector3D result;
        OP_Utils::evalOpParm(result, thissop, "p", cookparms.getCookTime(), 0);
        return result;
    }
    fpreal64 getRad() const { return myRad; }
    void setRad(fpreal64 val) { myRad = val; }
    fpreal64 opRad(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getRad();
        fpreal64 result;
        OP_Utils::evalOpParm(result, thissop, "rad", cookparms.getCookTime(), 0);
        return result;
    }
    Type getType() const { return Type(myType); }
    void setType(Type val) { myType = int64(val); }
    Type opType(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getType();
        int64 result;
        OP_Utils::evalOpParm(result, thissop, "type", cookparms.getCookTime(), 0);
        return Type(result);
    }
    UT_Vector2D getTandeg() const { return myTandeg; }
    void setTandeg(UT_Vector2D val) { myTandeg = val; }
    UT_Vector2D opTandeg(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getTandeg();
        UT_Vector2D result;
        OP_Utils::evalOpParm(result, thissop, "tandeg", cookparms.getCookTime(), 0);
        return result;
    }
    const UT_StringHolder & getKernel() const { return myKernel; }
    void setKernel(const UT_StringHolder & val) { myKernel = val; }
    UT_StringHolder opKernel(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getKernel();
        UT_StringHolder result;
        OP_Utils::evalOpParm(result, thissop, "kernel", cookparms.getCookTime(), 0);
        return result;
    }
    Metric getMetric() const { return Metric(myMetric); }
    void setMetric(Metric val) { myMetric = int64(val); }
    Metric opMetric(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getMetric();
        int64 result;
        OP_Utils::evalOpParm(result, thissop, "metric", cookparms.getCookTime(), 0);
        return Metric(result);
    }
    bool getGlobal() const { return myGlobal; }
    void setGlobal(bool val) { myGlobal = val; }
    bool opGlobal(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getGlobal();
        bool result;
        OP_Utils::evalOpParm(result, thissop, "global", cookparms.getCookTime(), 0);
        return result;
    }
    bool getUVGlobal() const { return myUVGlobal; }
    void setUVGlobal(bool val) { myUVGlobal = val; }
    bool opUVGlobal(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getUVGlobal();
        bool result;
        OP_Utils::evalOpParm(result, thissop, "uvglobal", cookparms.getCookTime(), 0);
        return result;
    }
    Visualizefalloff getVisualizefalloff() const { return Visualizefalloff(myVisualizefalloff); }
    void setVisualizefalloff(Visualizefalloff val) { myVisualizefalloff = int64(val); }
    Visualizefalloff opVisualizefalloff(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getVisualizefalloff();
        int64 result;
        OP_Utils::evalOpParm(result, thissop, "visualizefalloff", cookparms.getCookTime(), 0);
        return Visualizefalloff(result);
    }

private:
    UT_StringHolder myGroup;
    int64 myGroupType;
    UT_StringHolder myUVAttrib;
    int64 myXOrd;
    int64 myROrd;
    UT_Vector3D myT;
    UT_Vector3D myR;
    UT_Vector3D myS;
    UT_Vector3D myShear;
    UT_Vector3D myP;
    fpreal64 myRad;
    int64 myType;
    UT_Vector2D myTandeg;
    UT_StringHolder myKernel;
    int64 myMetric;
    bool myGlobal;
    bool myUVGlobal;
    int64 myVisualizefalloff;

};
