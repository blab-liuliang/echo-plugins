/* Automagically Generated by generate_proto.py
 * Do not Edit
 */
#pragma once

#include <SOP/SOP_NodeVerb.h>
#include <OP/OP_Utils.h>
#include <PRM/PRM_Parm.h>
#include <UT/UT_IStream.h>
#include <UT/UT_NTStreamUtil.h>
#include <UT/UT_Ramp.h>
#include <UT/UT_SharedPtr.h>
#include <UT/UT_StringHolder.h>
#include <UT/UT_StringStream.h>
#include <UT/UT_VectorTypes.h>
#include <SYS/SYS_Types.h>

using namespace UT::Literal;

class DEP_MicroNode;
namespace SOP_VolumeBreakEnums
{
    enum class Breaktype
    {
        FRACTURE = 0,
        OUTSIDE,
        INSIDE
    };
    enum class Closeholes
    {
        NOCLOSE = 0,
        FLATCLOSE,
        PYRAMIDCLOSE
    };
}


class SOP_API SOP_VolumeBreakParms  : public SOP_NodeParms
{
public:
    static int version() { return 1; }

    SOP_VolumeBreakParms()
    {
        myGroup = ""_sh;
        myBreaktype = 1;
        myCloseholes = 0;
        myClosegeo = false;
        mySnapdistance = 0.01;
        myCreategroups = false;
        myInsidegroup = "inside"_sh;
        myInsideclosuregroup = "insideClosure"_sh;
        myOutsidegroup = "outside"_sh;
        myOutsideclosuregroup = "outsideClosure"_sh;

    }

    explicit SOP_VolumeBreakParms(const SOP_VolumeBreakParms &) = default;

    virtual ~SOP_VolumeBreakParms() {}

    bool operator==(const SOP_VolumeBreakParms &src) const
    {
        if (myGroup != src.myGroup) return false;
        if (myBreaktype != src.myBreaktype) return false;
        if (myCloseholes != src.myCloseholes) return false;
        if (myClosegeo != src.myClosegeo) return false;
        if (mySnapdistance != src.mySnapdistance) return false;
        if (myCreategroups != src.myCreategroups) return false;
        if (myInsidegroup != src.myInsidegroup) return false;
        if (myInsideclosuregroup != src.myInsideclosuregroup) return false;
        if (myOutsidegroup != src.myOutsidegroup) return false;
        if (myOutsideclosuregroup != src.myOutsideclosuregroup) return false;

        return true;
    }
    bool operator!=(const SOP_VolumeBreakParms &src) const
    {
        return !operator==(src);
    }
    using Breaktype = SOP_VolumeBreakEnums::Breaktype;
    using Closeholes = SOP_VolumeBreakEnums::Closeholes;



    void        buildFromOp(const OP_Node *node, fpreal time, DEP_MicroNode *depnode)
    {
        if (true)
            OP_Utils::evalOpParm(myGroup, node, "group", time, 0);
        else myGroup = ""_sh;
        if (true)
            OP_Utils::evalOpParm(myBreaktype, node, "breaktype", time, 0);
        else myBreaktype = 1;
        if (true)
            OP_Utils::evalOpParm(myCloseholes, node, "closeholes", time, 0);
        else myCloseholes = 0;
        if (true && ( (!(((int64(getCloseholes())!=0)))) ) )
            OP_Utils::evalOpParm(myClosegeo, node, "closegeo", time, 0);
        else myClosegeo = false;
        if (true)
            OP_Utils::evalOpParm(mySnapdistance, node, "snapdistance", time, 0);
        else mySnapdistance = 0.01;
        if (true)
            OP_Utils::evalOpParm(myCreategroups, node, "creategroups", time, 0);
        else myCreategroups = false;
        if (true && ( (!(((getCreategroups()==0))||((int64(getBreaktype())==1)))) ) )
            OP_Utils::evalOpParm(myInsidegroup, node, "insidegroup", time, 0);
        else myInsidegroup = "inside"_sh;
        if (true && ( (!(((getCreategroups()==0))||((int64(getBreaktype())==1))||((int64(getCloseholes())==0)))) ) )
            OP_Utils::evalOpParm(myInsideclosuregroup, node, "insideclosuregroup", time, 0);
        else myInsideclosuregroup = "insideClosure"_sh;
        if (true && ( (!(((getCreategroups()==0))||((int64(getBreaktype())==2)))) ) )
            OP_Utils::evalOpParm(myOutsidegroup, node, "outsidegroup", time, 0);
        else myOutsidegroup = "outside"_sh;
        if (true && ( (!(((getCreategroups()==0))||((int64(getBreaktype())==2))||((int64(getCloseholes())==0)))) ) )
            OP_Utils::evalOpParm(myOutsideclosuregroup, node, "outsideclosuregroup", time, 0);
        else myOutsideclosuregroup = "outsideClosure"_sh;

    }


    virtual void loadFromOpSubclass(const LoadParms &loadparms)
    {
        buildFromOp(loadparms.node(), loadparms.context().getTime(), loadparms.depnode());
    }


    virtual void copyFrom(const SOP_NodeParms *src)
    {
        *this = *((const SOP_VolumeBreakParms *)src);
    }

    template <typename T>
    void
    doGetParmValue(exint idx, T &value) const
    {
        switch (idx)
        {
            case 0:
                coerceValue(value, myGroup);
                break;
            case 1:
                coerceValue(value, myBreaktype);
                break;
            case 2:
                coerceValue(value, myCloseholes);
                break;
            case 3:
                coerceValue(value, myClosegeo);
                break;
            case 4:
                coerceValue(value, mySnapdistance);
                break;
            case 5:
                coerceValue(value, myCreategroups);
                break;
            case 6:
                coerceValue(value, myInsidegroup);
                break;
            case 7:
                coerceValue(value, myInsideclosuregroup);
                break;
            case 8:
                coerceValue(value, myOutsidegroup);
                break;
            case 9:
                coerceValue(value, myOutsideclosuregroup);
                break;

        }
    }

    void        getParmValue(exint idx, exint &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, fpreal &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Vector2D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Vector3D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Vector4D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Matrix2D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Matrix3D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Matrix4D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_StringHolder &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_SharedPtr<UT_Ramp> &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, PRM_DataItemHandle &value) const
    { doGetParmValue(idx, value); }

    template <typename T>
    void
    doSetParmValue(exint idx, const T &value) 
    {
        switch (idx)
        {
            case 0:
                coerceValue(myGroup, value);
                break;
            case 1:
                coerceValue(myBreaktype, value);
                break;
            case 2:
                coerceValue(myCloseholes, value);
                break;
            case 3:
                coerceValue(myClosegeo, value);
                break;
            case 4:
                coerceValue(mySnapdistance, value);
                break;
            case 5:
                coerceValue(myCreategroups, value);
                break;
            case 6:
                coerceValue(myInsidegroup, value);
                break;
            case 7:
                coerceValue(myInsideclosuregroup, value);
                break;
            case 8:
                coerceValue(myOutsidegroup, value);
                break;
            case 9:
                coerceValue(myOutsideclosuregroup, value);
                break;

        }
    }

    void        setParmValue(exint idx, const exint &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const fpreal &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Vector2D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Vector3D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Vector4D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Matrix2D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Matrix3D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Matrix4D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_StringHolder &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_SharedPtr<UT_Ramp> &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const PRM_DataItemHandle &value) 
    { doSetParmValue(idx, value); }

    virtual exint    getNumParms() const
    {
        return 10;
    }

    virtual const char *getParmName(exint fieldnum) const
    {
        switch (fieldnum)
        {
            case 0:
                return "group";
            case 1:
                return "breaktype";
            case 2:
                return "closeholes";
            case 3:
                return "closegeo";
            case 4:
                return "snapdistance";
            case 5:
                return "creategroups";
            case 6:
                return "insidegroup";
            case 7:
                return "insideclosuregroup";
            case 8:
                return "outsidegroup";
            case 9:
                return "outsideclosuregroup";

        }
        return 0;
    }

    virtual ParmType getParmType(exint fieldnum) const
    {
        switch (fieldnum)
        {
                case 0:
                    return PARM_STRING;
                case 1:
                    return PARM_INTEGER;
                case 2:
                    return PARM_INTEGER;
                case 3:
                    return PARM_INTEGER;
                case 4:
                    return PARM_FLOAT;
                case 5:
                    return PARM_INTEGER;
                case 6:
                    return PARM_STRING;
                case 7:
                    return PARM_STRING;
                case 8:
                    return PARM_STRING;
                case 9:
                    return PARM_STRING;

        }
        return PARM_UNSUPPORTED;
    }

    // Boiler plate to load individual types.
    static void  loadData(UT_IStream &is, int64 &v)
    { is.bread(&v, 1); }
    static void  loadData(UT_IStream &is, bool &v)
    { int64     iv; is.bread(&iv, 1); v = iv; }
    static void  loadData(UT_IStream &is, fpreal64 &v)
    { is.bread<fpreal64>(&v, 1); }
    static void  loadData(UT_IStream &is, UT_Vector2D &v)
    { is.bread<fpreal64>(&v.x(), 1); is.bread<fpreal64>(&v.y(), 1); }
    static void  loadData(UT_IStream &is, UT_Vector3D &v)
    { is.bread<fpreal64>(&v.x(), 1); is.bread<fpreal64>(&v.y(), 1);
      is.bread<fpreal64>(&v.z(), 1); }
    static void  loadData(UT_IStream &is, UT_Vector4D &v)
    { is.bread<fpreal64>(&v.x(), 1); is.bread<fpreal64>(&v.y(), 1);
      is.bread<fpreal64>(&v.z(), 1); is.bread<fpreal64>(&v.w(), 1); }
    static void  loadData(UT_IStream &is, UT_Matrix2D &v)
    { for (int r = 0; r < 2; r++) for (int c = 0; c < 2; c++) is.bread<fpreal64>(&v(r, c), 1); }
    static void  loadData(UT_IStream &is, UT_Matrix3D &v)
    { for (int r = 0; r < 3; r++) for (int c = 0; c < 3; c++) is.bread<fpreal64>(&v(r, c), 1); }
    static void  loadData(UT_IStream &is, UT_Matrix4D &v)
    { for (int r = 0; r < 4; r++) for (int c = 0; c < 4; c++) is.bread<fpreal64>(&v(r, c), 1); }
    static void  loadData(UT_IStream &is, UT_Vector2I &v)
    { is.bread<int64>(&v.x(), 1); is.bread<int64>(&v.y(), 1); }
    static void  loadData(UT_IStream &is, UT_Vector3I &v)
    { is.bread<int64>(&v.x(), 1); is.bread<int64>(&v.y(), 1);
      is.bread<int64>(&v.z(), 1); }
    static void  loadData(UT_IStream &is, UT_Vector4I &v)
    { is.bread<int64>(&v.x(), 1); is.bread<int64>(&v.y(), 1);
      is.bread<int64>(&v.z(), 1); is.bread<int64>(&v.w(), 1); }
    static void  loadData(UT_IStream &is, UT_StringHolder &v)
    { is.bread(v); }
    static void  loadData(UT_IStream &is, UT_SharedPtr<UT_Ramp> &v)
    {   UT_StringHolder   rampdata;
        loadData(is, rampdata);
        if (rampdata.isstring())
        {
            v.reset(new UT_Ramp());
            UT_IStream  istr((const char *) rampdata, rampdata.length(), UT_ISTREAM_ASCII);
            v->load(istr);
        }
        else v.reset();
    }
    static void  loadData(UT_IStream &is, PRM_DataItemHandle &v)
    {   UT_StringHolder   data;
        loadData(is, data);
        if (data.isstring())
        {
            // Find the data type.
            char *colon = UT_StringWrap(data).findChar(':');
            if (colon)
            {
                int             typelen = colon - data.buffer();
                UT_WorkBuffer   type;
                type.strncpy(data.buffer(), typelen);
                UT_IStream  istr(((const char *) data) + typelen + 1, data.length() - (typelen + 1), UT_ISTREAM_BINARY);
                
                v = PRM_DataFactory::parseBinary(type.buffer(), istr);
            }
        }
        else v.reset();
    }

    static void  saveData(std::ostream &os, int64 v)
    { UTwrite(os, &v); }
    static void  saveData(std::ostream &os, bool v)
    { int64 iv = v; UTwrite(os, &iv); }
    static void  saveData(std::ostream &os, fpreal64 v)
    { UTwrite<fpreal64>(os, &v); }
    static void  saveData(std::ostream &os, UT_Vector2D v)
    { UTwrite<fpreal64>(os, &v.x()); UTwrite<fpreal64>(os, &v.y()); }
    static void  saveData(std::ostream &os, UT_Vector3D v)
    { UTwrite<fpreal64>(os, &v.x()); UTwrite<fpreal64>(os, &v.y());
      UTwrite<fpreal64>(os, &v.z()); }
    static void  saveData(std::ostream &os, UT_Vector4D v)
    { UTwrite<fpreal64>(os, &v.x()); UTwrite<fpreal64>(os, &v.y());
      UTwrite<fpreal64>(os, &v.z()); UTwrite<fpreal64>(os, &v.w()); }
    static void  saveData(std::ostream &os, UT_Matrix2D v)
    { for (int r = 0; r < 2; r++) for (int c = 0; c < 2; c++) UTwrite<fpreal64>(os, &v(r, c)); }
    static void  saveData(std::ostream &os, UT_Matrix3D v)
    { for (int r = 0; r < 3; r++) for (int c = 0; c < 3; c++) UTwrite<fpreal64>(os, &v(r, c)); }
    static void  saveData(std::ostream &os, UT_Matrix4D v)
    { for (int r = 0; r < 4; r++) for (int c = 0; c < 4; c++) UTwrite<fpreal64>(os, &v(r, c)); }
    static void  saveData(std::ostream &os, UT_StringHolder s)
    { UT_StringWrap(s).saveBinary(os); }
    static void  saveData(std::ostream &os, UT_SharedPtr<UT_Ramp> s)
    {   UT_StringHolder         result;
        UT_OStringStream        ostr;
        if (s) s->save(ostr);
        result = ostr.str();
        saveData(os, result);
    }
    static void  saveData(std::ostream &os, PRM_DataItemHandle s)
    {   UT_StringHolder         result;
        UT_OStringStream        ostr;
        if (s) 
        {
            ostr << s->getDataTypeToken();
            ostr << ":";
            s->saveBinary(ostr);
        }
        result = ostr.str();
        saveData(os, result);
    }


    void         save(std::ostream &os) const
    {
        int32           v = version();
        UTwrite(os, &v);
        saveData(os, myGroup);
        saveData(os, myBreaktype);
        saveData(os, myCloseholes);
        saveData(os, myClosegeo);
        saveData(os, mySnapdistance);
        saveData(os, myCreategroups);
        saveData(os, myInsidegroup);
        saveData(os, myInsideclosuregroup);
        saveData(os, myOutsidegroup);
        saveData(os, myOutsideclosuregroup);

    }

    bool         load(UT_IStream &is)
    {
        int32           v;
        is.bread(&v, 1);
        if (version() != v)
        {
            // Fail incompatible versions
            return false;
        }
        loadData(is, myGroup);
        loadData(is, myBreaktype);
        loadData(is, myCloseholes);
        loadData(is, myClosegeo);
        loadData(is, mySnapdistance);
        loadData(is, myCreategroups);
        loadData(is, myInsidegroup);
        loadData(is, myInsideclosuregroup);
        loadData(is, myOutsidegroup);
        loadData(is, myOutsideclosuregroup);

        return true;
    }

    const UT_StringHolder & getGroup() const { return myGroup; }
    void setGroup(const UT_StringHolder & val) { myGroup = val; }
    UT_StringHolder opGroup(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getGroup();
        UT_StringHolder result;
        OP_Utils::evalOpParm(result, thissop, "group", cookparms.getCookTime(), 0);
        return result;
    }
    Breaktype getBreaktype() const { return Breaktype(myBreaktype); }
    void setBreaktype(Breaktype val) { myBreaktype = int64(val); }
    Breaktype opBreaktype(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getBreaktype();
        int64 result;
        OP_Utils::evalOpParm(result, thissop, "breaktype", cookparms.getCookTime(), 0);
        return Breaktype(result);
    }
    Closeholes getCloseholes() const { return Closeholes(myCloseholes); }
    void setCloseholes(Closeholes val) { myCloseholes = int64(val); }
    Closeholes opCloseholes(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getCloseholes();
        int64 result;
        OP_Utils::evalOpParm(result, thissop, "closeholes", cookparms.getCookTime(), 0);
        return Closeholes(result);
    }
    bool getClosegeo() const { return myClosegeo; }
    void setClosegeo(bool val) { myClosegeo = val; }
    bool opClosegeo(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getClosegeo();
        bool result;
        OP_Utils::evalOpParm(result, thissop, "closegeo", cookparms.getCookTime(), 0);
        return result;
    }
    fpreal64 getSnapdistance() const { return mySnapdistance; }
    void setSnapdistance(fpreal64 val) { mySnapdistance = val; }
    fpreal64 opSnapdistance(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getSnapdistance();
        fpreal64 result;
        OP_Utils::evalOpParm(result, thissop, "snapdistance", cookparms.getCookTime(), 0);
        return result;
    }
    bool getCreategroups() const { return myCreategroups; }
    void setCreategroups(bool val) { myCreategroups = val; }
    bool opCreategroups(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getCreategroups();
        bool result;
        OP_Utils::evalOpParm(result, thissop, "creategroups", cookparms.getCookTime(), 0);
        return result;
    }
    const UT_StringHolder & getInsidegroup() const { return myInsidegroup; }
    void setInsidegroup(const UT_StringHolder & val) { myInsidegroup = val; }
    UT_StringHolder opInsidegroup(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getInsidegroup();
        UT_StringHolder result;
        OP_Utils::evalOpParm(result, thissop, "insidegroup", cookparms.getCookTime(), 0);
        return result;
    }
    const UT_StringHolder & getInsideclosuregroup() const { return myInsideclosuregroup; }
    void setInsideclosuregroup(const UT_StringHolder & val) { myInsideclosuregroup = val; }
    UT_StringHolder opInsideclosuregroup(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getInsideclosuregroup();
        UT_StringHolder result;
        OP_Utils::evalOpParm(result, thissop, "insideclosuregroup", cookparms.getCookTime(), 0);
        return result;
    }
    const UT_StringHolder & getOutsidegroup() const { return myOutsidegroup; }
    void setOutsidegroup(const UT_StringHolder & val) { myOutsidegroup = val; }
    UT_StringHolder opOutsidegroup(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getOutsidegroup();
        UT_StringHolder result;
        OP_Utils::evalOpParm(result, thissop, "outsidegroup", cookparms.getCookTime(), 0);
        return result;
    }
    const UT_StringHolder & getOutsideclosuregroup() const { return myOutsideclosuregroup; }
    void setOutsideclosuregroup(const UT_StringHolder & val) { myOutsideclosuregroup = val; }
    UT_StringHolder opOutsideclosuregroup(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getOutsideclosuregroup();
        UT_StringHolder result;
        OP_Utils::evalOpParm(result, thissop, "outsideclosuregroup", cookparms.getCookTime(), 0);
        return result;
    }

private:
    UT_StringHolder myGroup;
    int64 myBreaktype;
    int64 myCloseholes;
    bool myClosegeo;
    fpreal64 mySnapdistance;
    bool myCreategroups;
    UT_StringHolder myInsidegroup;
    UT_StringHolder myInsideclosuregroup;
    UT_StringHolder myOutsidegroup;
    UT_StringHolder myOutsideclosuregroup;

};
