/* Automagically Generated by generate_proto.py
 * Do not Edit
 */
#pragma once

#include <SOP/SOP_NodeVerb.h>
#include <OP/OP_Utils.h>
#include <PRM/PRM_Parm.h>
#include <UT/UT_IStream.h>
#include <UT/UT_NTStreamUtil.h>
#include <UT/UT_Ramp.h>
#include <UT/UT_SharedPtr.h>
#include <UT/UT_StringHolder.h>
#include <UT/UT_StringStream.h>
#include <UT/UT_VectorTypes.h>
#include <SYS/SYS_Types.h>

using namespace UT::Literal;

class DEP_MicroNode;
namespace SOP_GroupCombineEnums
{
    enum class Grouptype
    {
        GUESS = 0,
        POINTS,
        PRIMS,
        EDGES
    };
    enum class Negate_a
    {
        OFF = 0,
        ON
    };
    enum class Op_ab
    {
        NONE = 0,
        OR,
        AND,
        XOR,
        SUB
    };
    enum class Negate_b
    {
        OFF = 0,
        ON
    };
    enum class Op_bc
    {
        NONE = 0,
        OR,
        AND,
        XOR,
        SUB
    };
    enum class Negate_c
    {
        OFF = 0,
        ON
    };
    enum class Op_cd
    {
        NONE = 0,
        OR,
        AND,
        XOR,
        SUB
    };
    enum class Negate_d
    {
        OFF = 0,
        ON
    };
}


class SOP_API SOP_GroupCombineParms  : public SOP_NodeParms
{
public:
    static int version() { return 1; }
    struct Numcombine
    {
        int64 grouptype;
        UT_StringHolder group;
        int64 negate_a;
        UT_StringHolder group_a;
        int64 op_ab;
        int64 negate_b;
        UT_StringHolder group_b;
        int64 op_bc;
        int64 negate_c;
        UT_StringHolder group_c;
        int64 op_cd;
        int64 negate_d;
        UT_StringHolder group_d;


        Numcombine()
        {
            grouptype = 0;
            group = ""_sh;
            negate_a = 0;
            group_a = ""_sh;
            op_ab = 0;
            negate_b = 0;
            group_b = ""_sh;
            op_bc = 0;
            negate_c = 0;
            group_c = ""_sh;
            op_cd = 0;
            negate_d = 0;
            group_d = ""_sh;

        }

        bool operator==(const Numcombine &src) const
        {
            if (grouptype != src.grouptype) return false;
            if (group != src.group) return false;
            if (negate_a != src.negate_a) return false;
            if (group_a != src.group_a) return false;
            if (op_ab != src.op_ab) return false;
            if (negate_b != src.negate_b) return false;
            if (group_b != src.group_b) return false;
            if (op_bc != src.op_bc) return false;
            if (negate_c != src.negate_c) return false;
            if (group_c != src.group_c) return false;
            if (op_cd != src.op_cd) return false;
            if (negate_d != src.negate_d) return false;
            if (group_d != src.group_d) return false;

            return true;
        }
        bool operator!=(const Numcombine &src) const
        {
            return !operator==(src);
        }

    };

    UT_StringHolder createString(const UT_Array<Numcombine> &list) const
    {
        UT_WorkBuffer   buf;

        buf.strcat("[ ");
        for (int i = 0; i < list.entries(); i++)
        {
            if (i)
                buf.strcat(", ");
            buf.strcat("( ");
            buf.append("");
            buf.appendSprintf("%d", (int) list(i).grouptype);
            buf.append(", ");
            { UT_String tmp; tmp = UT_StringWrap(list(i).group).makeQuotedString('"'); buf.strcat(tmp); }
            buf.append(", ");
            buf.appendSprintf("%d", (int) list(i).negate_a);
            buf.append(", ");
            { UT_String tmp; tmp = UT_StringWrap(list(i).group_a).makeQuotedString('"'); buf.strcat(tmp); }
            buf.append(", ");
            buf.appendSprintf("%d", (int) list(i).op_ab);
            buf.append(", ");
            buf.appendSprintf("%d", (int) list(i).negate_b);
            buf.append(", ");
            { UT_String tmp; tmp = UT_StringWrap(list(i).group_b).makeQuotedString('"'); buf.strcat(tmp); }
            buf.append(", ");
            buf.appendSprintf("%d", (int) list(i).op_bc);
            buf.append(", ");
            buf.appendSprintf("%d", (int) list(i).negate_c);
            buf.append(", ");
            { UT_String tmp; tmp = UT_StringWrap(list(i).group_c).makeQuotedString('"'); buf.strcat(tmp); }
            buf.append(", ");
            buf.appendSprintf("%d", (int) list(i).op_cd);
            buf.append(", ");
            buf.appendSprintf("%d", (int) list(i).negate_d);
            buf.append(", ");
            { UT_String tmp; tmp = UT_StringWrap(list(i).group_d).makeQuotedString('"'); buf.strcat(tmp); }

            buf.strcat(" )");
        }
        buf.strcat(" ]");

        UT_StringHolder result = buf;
        return result;
    }

    SOP_GroupCombineParms()
    {

    }

    explicit SOP_GroupCombineParms(const SOP_GroupCombineParms &) = default;

    virtual ~SOP_GroupCombineParms() {}

    bool operator==(const SOP_GroupCombineParms &src) const
    {
        if (myNumcombine != src.myNumcombine) return false;

        return true;
    }
    bool operator!=(const SOP_GroupCombineParms &src) const
    {
        return !operator==(src);
    }
    using Grouptype = SOP_GroupCombineEnums::Grouptype;
    using Negate_a = SOP_GroupCombineEnums::Negate_a;
    using Op_ab = SOP_GroupCombineEnums::Op_ab;
    using Negate_b = SOP_GroupCombineEnums::Negate_b;
    using Op_bc = SOP_GroupCombineEnums::Op_bc;
    using Negate_c = SOP_GroupCombineEnums::Negate_c;
    using Op_cd = SOP_GroupCombineEnums::Op_cd;
    using Negate_d = SOP_GroupCombineEnums::Negate_d;



    void        buildFromOp(const OP_Node *node, fpreal time, DEP_MicroNode *depnode)
    {
            if (true)
            {
                int64   length;
                OP_Utils::evalOpParm(length, node, "numcombine", time, 0);
                myNumcombine.entries(length);
                for (exint i = 0; i < length; i++)
                {
                    int     parmidx = i+1;
                    auto && _curentry = myNumcombine(i);
                    (void) _curentry;
                    if (true)
                        OP_Utils::evalOpParmInst(myNumcombine(i).grouptype, node, "grouptype#", &parmidx, time, 0);
                    else myNumcombine(i).grouptype = 0;
                    if (true)
                        OP_Utils::evalOpParmInst(myNumcombine(i).group, node, "group#", &parmidx, time, 0);
                    else myNumcombine(i).group = ""_sh;
                    if (true)
                        OP_Utils::evalOpParmInst(myNumcombine(i).negate_a, node, "negate_a#", &parmidx, time, 0);
                    else myNumcombine(i).negate_a = 0;
                    if (true)
                        OP_Utils::evalOpParmInst(myNumcombine(i).group_a, node, "group_a#", &parmidx, time, 0);
                    else myNumcombine(i).group_a = ""_sh;
                    if (true)
                        OP_Utils::evalOpParmInst(myNumcombine(i).op_ab, node, "op_ab#", &parmidx, time, 0);
                    else myNumcombine(i).op_ab = 0;
                    if (true && ( (!(((_curentry.op_ab==0)))) ) )
                        OP_Utils::evalOpParmInst(myNumcombine(i).negate_b, node, "negate_b#", &parmidx, time, 0);
                    else myNumcombine(i).negate_b = 0;
                    if (true && ( (!(((_curentry.op_ab==0)))) ) )
                        OP_Utils::evalOpParmInst(myNumcombine(i).group_b, node, "group_b#", &parmidx, time, 0);
                    else myNumcombine(i).group_b = ""_sh;
                    if (true)
                        OP_Utils::evalOpParmInst(myNumcombine(i).op_bc, node, "op_bc#", &parmidx, time, 0);
                    else myNumcombine(i).op_bc = 0;
                    if (true && ( (!(((_curentry.op_bc==0)))) ) )
                        OP_Utils::evalOpParmInst(myNumcombine(i).negate_c, node, "negate_c#", &parmidx, time, 0);
                    else myNumcombine(i).negate_c = 0;
                    if (true && ( (!(((_curentry.op_bc==0)))) ) )
                        OP_Utils::evalOpParmInst(myNumcombine(i).group_c, node, "group_c#", &parmidx, time, 0);
                    else myNumcombine(i).group_c = ""_sh;
                    if (true)
                        OP_Utils::evalOpParmInst(myNumcombine(i).op_cd, node, "op_cd#", &parmidx, time, 0);
                    else myNumcombine(i).op_cd = 0;
                    if (true && ( (!(((_curentry.op_cd==0)))) ) )
                        OP_Utils::evalOpParmInst(myNumcombine(i).negate_d, node, "negate_d#", &parmidx, time, 0);
                    else myNumcombine(i).negate_d = 0;
                    if (true && ( (!(((_curentry.op_cd==0)))) ) )
                        OP_Utils::evalOpParmInst(myNumcombine(i).group_d, node, "group_d#", &parmidx, time, 0);
                    else myNumcombine(i).group_d = ""_sh;

                }
            }
            else
                myNumcombine.clear();

    }


    virtual void loadFromOpSubclass(const LoadParms &loadparms)
    {
        buildFromOp(loadparms.node(), loadparms.context().getTime(), loadparms.depnode());
    }


    virtual void copyFrom(const SOP_NodeParms *src)
    {
        *this = *((const SOP_GroupCombineParms *)src);
    }

    template <typename T>
    void
    doGetParmValue(exint idx, T &value) const
    {
        switch (idx)
        {

        }
    }

    void        getParmValue(exint idx, exint &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, fpreal &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Vector2D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Vector3D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Vector4D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Matrix2D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Matrix3D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Matrix4D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_StringHolder &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_SharedPtr<UT_Ramp> &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, PRM_DataItemHandle &value) const
    { doGetParmValue(idx, value); }

    template <typename T>
    void
    doSetParmValue(exint idx, const T &value) 
    {
        switch (idx)
        {

        }
    }

    void        setParmValue(exint idx, const exint &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const fpreal &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Vector2D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Vector3D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Vector4D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Matrix2D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Matrix3D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Matrix4D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_StringHolder &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_SharedPtr<UT_Ramp> &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const PRM_DataItemHandle &value) 
    { doSetParmValue(idx, value); }

    virtual exint    getNumParms() const
    {
        return 1;
    }

    virtual const char *getParmName(exint fieldnum) const
    {
        switch (fieldnum)
        {
                case 0:
                    return "numcombine";

        }
        return 0;
    }

    virtual ParmType getParmType(exint fieldnum) const
    {
        switch (fieldnum)
        {

        }
        return PARM_UNSUPPORTED;
    }

    // Boiler plate to load individual types.
    static void  loadData(UT_IStream &is, int64 &v)
    { is.bread(&v, 1); }
    static void  loadData(UT_IStream &is, bool &v)
    { int64     iv; is.bread(&iv, 1); v = iv; }
    static void  loadData(UT_IStream &is, fpreal64 &v)
    { is.bread<fpreal64>(&v, 1); }
    static void  loadData(UT_IStream &is, UT_Vector2D &v)
    { is.bread<fpreal64>(&v.x(), 1); is.bread<fpreal64>(&v.y(), 1); }
    static void  loadData(UT_IStream &is, UT_Vector3D &v)
    { is.bread<fpreal64>(&v.x(), 1); is.bread<fpreal64>(&v.y(), 1);
      is.bread<fpreal64>(&v.z(), 1); }
    static void  loadData(UT_IStream &is, UT_Vector4D &v)
    { is.bread<fpreal64>(&v.x(), 1); is.bread<fpreal64>(&v.y(), 1);
      is.bread<fpreal64>(&v.z(), 1); is.bread<fpreal64>(&v.w(), 1); }
    static void  loadData(UT_IStream &is, UT_Matrix2D &v)
    { for (int r = 0; r < 2; r++) for (int c = 0; c < 2; c++) is.bread<fpreal64>(&v(r, c), 1); }
    static void  loadData(UT_IStream &is, UT_Matrix3D &v)
    { for (int r = 0; r < 3; r++) for (int c = 0; c < 3; c++) is.bread<fpreal64>(&v(r, c), 1); }
    static void  loadData(UT_IStream &is, UT_Matrix4D &v)
    { for (int r = 0; r < 4; r++) for (int c = 0; c < 4; c++) is.bread<fpreal64>(&v(r, c), 1); }
    static void  loadData(UT_IStream &is, UT_Vector2I &v)
    { is.bread<int64>(&v.x(), 1); is.bread<int64>(&v.y(), 1); }
    static void  loadData(UT_IStream &is, UT_Vector3I &v)
    { is.bread<int64>(&v.x(), 1); is.bread<int64>(&v.y(), 1);
      is.bread<int64>(&v.z(), 1); }
    static void  loadData(UT_IStream &is, UT_Vector4I &v)
    { is.bread<int64>(&v.x(), 1); is.bread<int64>(&v.y(), 1);
      is.bread<int64>(&v.z(), 1); is.bread<int64>(&v.w(), 1); }
    static void  loadData(UT_IStream &is, UT_StringHolder &v)
    { is.bread(v); }
    static void  loadData(UT_IStream &is, UT_SharedPtr<UT_Ramp> &v)
    {   UT_StringHolder   rampdata;
        loadData(is, rampdata);
        if (rampdata.isstring())
        {
            v.reset(new UT_Ramp());
            UT_IStream  istr((const char *) rampdata, rampdata.length(), UT_ISTREAM_ASCII);
            v->load(istr);
        }
        else v.reset();
    }
    static void  loadData(UT_IStream &is, PRM_DataItemHandle &v)
    {   UT_StringHolder   data;
        loadData(is, data);
        if (data.isstring())
        {
            // Find the data type.
            char *colon = UT_StringWrap(data).findChar(':');
            if (colon)
            {
                int             typelen = colon - data.buffer();
                UT_WorkBuffer   type;
                type.strncpy(data.buffer(), typelen);
                UT_IStream  istr(((const char *) data) + typelen + 1, data.length() - (typelen + 1), UT_ISTREAM_BINARY);
                
                v = PRM_DataFactory::parseBinary(type.buffer(), istr);
            }
        }
        else v.reset();
    }

    static void  saveData(std::ostream &os, int64 v)
    { UTwrite(os, &v); }
    static void  saveData(std::ostream &os, bool v)
    { int64 iv = v; UTwrite(os, &iv); }
    static void  saveData(std::ostream &os, fpreal64 v)
    { UTwrite<fpreal64>(os, &v); }
    static void  saveData(std::ostream &os, UT_Vector2D v)
    { UTwrite<fpreal64>(os, &v.x()); UTwrite<fpreal64>(os, &v.y()); }
    static void  saveData(std::ostream &os, UT_Vector3D v)
    { UTwrite<fpreal64>(os, &v.x()); UTwrite<fpreal64>(os, &v.y());
      UTwrite<fpreal64>(os, &v.z()); }
    static void  saveData(std::ostream &os, UT_Vector4D v)
    { UTwrite<fpreal64>(os, &v.x()); UTwrite<fpreal64>(os, &v.y());
      UTwrite<fpreal64>(os, &v.z()); UTwrite<fpreal64>(os, &v.w()); }
    static void  saveData(std::ostream &os, UT_Matrix2D v)
    { for (int r = 0; r < 2; r++) for (int c = 0; c < 2; c++) UTwrite<fpreal64>(os, &v(r, c)); }
    static void  saveData(std::ostream &os, UT_Matrix3D v)
    { for (int r = 0; r < 3; r++) for (int c = 0; c < 3; c++) UTwrite<fpreal64>(os, &v(r, c)); }
    static void  saveData(std::ostream &os, UT_Matrix4D v)
    { for (int r = 0; r < 4; r++) for (int c = 0; c < 4; c++) UTwrite<fpreal64>(os, &v(r, c)); }
    static void  saveData(std::ostream &os, UT_StringHolder s)
    { UT_StringWrap(s).saveBinary(os); }
    static void  saveData(std::ostream &os, UT_SharedPtr<UT_Ramp> s)
    {   UT_StringHolder         result;
        UT_OStringStream        ostr;
        if (s) s->save(ostr);
        result = ostr.str();
        saveData(os, result);
    }
    static void  saveData(std::ostream &os, PRM_DataItemHandle s)
    {   UT_StringHolder         result;
        UT_OStringStream        ostr;
        if (s) 
        {
            ostr << s->getDataTypeToken();
            ostr << ":";
            s->saveBinary(ostr);
        }
        result = ostr.str();
        saveData(os, result);
    }


    void         save(std::ostream &os) const
    {
        int32           v = version();
        UTwrite(os, &v);
        {
            int64   length = myNumcombine.entries();
            UTwrite(os, &length);
            for (exint i = 0; i < length; i++)
            {
                saveData(os, myNumcombine(i).grouptype);
                saveData(os, myNumcombine(i).group);
                saveData(os, myNumcombine(i).negate_a);
                saveData(os, myNumcombine(i).group_a);
                saveData(os, myNumcombine(i).op_ab);
                saveData(os, myNumcombine(i).negate_b);
                saveData(os, myNumcombine(i).group_b);
                saveData(os, myNumcombine(i).op_bc);
                saveData(os, myNumcombine(i).negate_c);
                saveData(os, myNumcombine(i).group_c);
                saveData(os, myNumcombine(i).op_cd);
                saveData(os, myNumcombine(i).negate_d);
                saveData(os, myNumcombine(i).group_d);

            }
        }

    }

    bool         load(UT_IStream &is)
    {
        int32           v;
        is.bread(&v, 1);
        if (version() != v)
        {
            // Fail incompatible versions
            return false;
        }
        {
            int64   length;
            is.read(&length, 1);
            myNumcombine.entries(length);
            for (exint i = 0; i < length; i++)
            {
                loadData(is, myNumcombine(i).grouptype);
                loadData(is, myNumcombine(i).group);
                loadData(is, myNumcombine(i).negate_a);
                loadData(is, myNumcombine(i).group_a);
                loadData(is, myNumcombine(i).op_ab);
                loadData(is, myNumcombine(i).negate_b);
                loadData(is, myNumcombine(i).group_b);
                loadData(is, myNumcombine(i).op_bc);
                loadData(is, myNumcombine(i).negate_c);
                loadData(is, myNumcombine(i).group_c);
                loadData(is, myNumcombine(i).op_cd);
                loadData(is, myNumcombine(i).negate_d);
                loadData(is, myNumcombine(i).group_d);

            }
        }

        return true;
    }

    const UT_Array<Numcombine> &getNumcombine() const { return myNumcombine; }
    void setNumcombine(const UT_Array<Numcombine> &val) { myNumcombine = val; }
    exint opNumcombine(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getNumcombine().entries();
        exint result;
        OP_Utils::evalOpParm(result, thissop, "numcombine", cookparms.getCookTime(), 0);
        return result;
    }
            int64 opNumcombine_grouptype(const SOP_NodeVerb::CookParms &cookparms, exint _idx) const
        {
            SOP_Node *thissop = cookparms.getNode();
            if (!thissop) return (myNumcombine(_idx).grouptype);
            int _parmidx = _idx + 1;
            int64 result;
            OP_Utils::evalOpParmInst(result, thissop, "grouptype#", &_parmidx, cookparms.getCookTime(), 0);
            return (result);
        }
        UT_StringHolder opNumcombine_group(const SOP_NodeVerb::CookParms &cookparms, exint _idx) const
        {
            SOP_Node *thissop = cookparms.getNode();
            if (!thissop) return (myNumcombine(_idx).group);
            int _parmidx = _idx + 1;
            UT_StringHolder result;
            OP_Utils::evalOpParmInst(result, thissop, "group#", &_parmidx, cookparms.getCookTime(), 0);
            return (result);
        }
        int64 opNumcombine_negate_a(const SOP_NodeVerb::CookParms &cookparms, exint _idx) const
        {
            SOP_Node *thissop = cookparms.getNode();
            if (!thissop) return (myNumcombine(_idx).negate_a);
            int _parmidx = _idx + 1;
            int64 result;
            OP_Utils::evalOpParmInst(result, thissop, "negate_a#", &_parmidx, cookparms.getCookTime(), 0);
            return (result);
        }
        UT_StringHolder opNumcombine_group_a(const SOP_NodeVerb::CookParms &cookparms, exint _idx) const
        {
            SOP_Node *thissop = cookparms.getNode();
            if (!thissop) return (myNumcombine(_idx).group_a);
            int _parmidx = _idx + 1;
            UT_StringHolder result;
            OP_Utils::evalOpParmInst(result, thissop, "group_a#", &_parmidx, cookparms.getCookTime(), 0);
            return (result);
        }
        int64 opNumcombine_op_ab(const SOP_NodeVerb::CookParms &cookparms, exint _idx) const
        {
            SOP_Node *thissop = cookparms.getNode();
            if (!thissop) return (myNumcombine(_idx).op_ab);
            int _parmidx = _idx + 1;
            int64 result;
            OP_Utils::evalOpParmInst(result, thissop, "op_ab#", &_parmidx, cookparms.getCookTime(), 0);
            return (result);
        }
        int64 opNumcombine_negate_b(const SOP_NodeVerb::CookParms &cookparms, exint _idx) const
        {
            SOP_Node *thissop = cookparms.getNode();
            if (!thissop) return (myNumcombine(_idx).negate_b);
            int _parmidx = _idx + 1;
            int64 result;
            OP_Utils::evalOpParmInst(result, thissop, "negate_b#", &_parmidx, cookparms.getCookTime(), 0);
            return (result);
        }
        UT_StringHolder opNumcombine_group_b(const SOP_NodeVerb::CookParms &cookparms, exint _idx) const
        {
            SOP_Node *thissop = cookparms.getNode();
            if (!thissop) return (myNumcombine(_idx).group_b);
            int _parmidx = _idx + 1;
            UT_StringHolder result;
            OP_Utils::evalOpParmInst(result, thissop, "group_b#", &_parmidx, cookparms.getCookTime(), 0);
            return (result);
        }
        int64 opNumcombine_op_bc(const SOP_NodeVerb::CookParms &cookparms, exint _idx) const
        {
            SOP_Node *thissop = cookparms.getNode();
            if (!thissop) return (myNumcombine(_idx).op_bc);
            int _parmidx = _idx + 1;
            int64 result;
            OP_Utils::evalOpParmInst(result, thissop, "op_bc#", &_parmidx, cookparms.getCookTime(), 0);
            return (result);
        }
        int64 opNumcombine_negate_c(const SOP_NodeVerb::CookParms &cookparms, exint _idx) const
        {
            SOP_Node *thissop = cookparms.getNode();
            if (!thissop) return (myNumcombine(_idx).negate_c);
            int _parmidx = _idx + 1;
            int64 result;
            OP_Utils::evalOpParmInst(result, thissop, "negate_c#", &_parmidx, cookparms.getCookTime(), 0);
            return (result);
        }
        UT_StringHolder opNumcombine_group_c(const SOP_NodeVerb::CookParms &cookparms, exint _idx) const
        {
            SOP_Node *thissop = cookparms.getNode();
            if (!thissop) return (myNumcombine(_idx).group_c);
            int _parmidx = _idx + 1;
            UT_StringHolder result;
            OP_Utils::evalOpParmInst(result, thissop, "group_c#", &_parmidx, cookparms.getCookTime(), 0);
            return (result);
        }
        int64 opNumcombine_op_cd(const SOP_NodeVerb::CookParms &cookparms, exint _idx) const
        {
            SOP_Node *thissop = cookparms.getNode();
            if (!thissop) return (myNumcombine(_idx).op_cd);
            int _parmidx = _idx + 1;
            int64 result;
            OP_Utils::evalOpParmInst(result, thissop, "op_cd#", &_parmidx, cookparms.getCookTime(), 0);
            return (result);
        }
        int64 opNumcombine_negate_d(const SOP_NodeVerb::CookParms &cookparms, exint _idx) const
        {
            SOP_Node *thissop = cookparms.getNode();
            if (!thissop) return (myNumcombine(_idx).negate_d);
            int _parmidx = _idx + 1;
            int64 result;
            OP_Utils::evalOpParmInst(result, thissop, "negate_d#", &_parmidx, cookparms.getCookTime(), 0);
            return (result);
        }
        UT_StringHolder opNumcombine_group_d(const SOP_NodeVerb::CookParms &cookparms, exint _idx) const
        {
            SOP_Node *thissop = cookparms.getNode();
            if (!thissop) return (myNumcombine(_idx).group_d);
            int _parmidx = _idx + 1;
            UT_StringHolder result;
            OP_Utils::evalOpParmInst(result, thissop, "group_d#", &_parmidx, cookparms.getCookTime(), 0);
            return (result);
        }


private:
    UT_Array<Numcombine> myNumcombine;

};
