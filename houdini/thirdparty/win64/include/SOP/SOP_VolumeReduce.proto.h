/* Automagically Generated by generate_proto.py
 * Do not Edit
 */
#pragma once

#include <SOP/SOP_NodeVerb.h>
#include <OP/OP_Utils.h>
#include <PRM/PRM_Parm.h>
#include <UT/UT_IStream.h>
#include <UT/UT_NTStreamUtil.h>
#include <UT/UT_Ramp.h>
#include <UT/UT_SharedPtr.h>
#include <UT/UT_StringHolder.h>
#include <UT/UT_StringStream.h>
#include <UT/UT_VectorTypes.h>
#include <SYS/SYS_Types.h>

using namespace UT::Literal;

class DEP_MicroNode;
namespace SOP_VolumeReduceEnums
{
    enum class Reduction
    {
        MAX = 0,
        MIN,
        MAXABS,
        MINABS,
        AVERAGE,
        MEDIAN,
        SUM,
        SUMABS,
        SUMSQUARE,
        RMS
    };
    enum class Scaleby
    {
        NONE = 0,
        LENGTH,
        AREA,
        VOLUME
    };
    enum class Result
    {
        VOLUME = 0,
        VERTEX,
        POINT,
        PRIM,
        DETAIL
    };
}


class SOP_API SOP_VolumeReduceParms  : public SOP_NodeParms
{
public:
    static int version() { return 1; }

    SOP_VolumeReduceParms()
    {
        myGroup = ""_sh;
        myReduction = 0;
        myPercentile = 50;
        myScaleby = 0;
        myResult = 0;
        myResultattrib = "density"_sh;
        myResultlvar = ""_sh;

    }

    explicit SOP_VolumeReduceParms(const SOP_VolumeReduceParms &) = default;

    virtual ~SOP_VolumeReduceParms() {}

    bool operator==(const SOP_VolumeReduceParms &src) const
    {
        if (myGroup != src.myGroup) return false;
        if (myReduction != src.myReduction) return false;
        if (myPercentile != src.myPercentile) return false;
        if (myScaleby != src.myScaleby) return false;
        if (myResult != src.myResult) return false;
        if (myResultattrib != src.myResultattrib) return false;
        if (myResultlvar != src.myResultlvar) return false;

        return true;
    }
    bool operator!=(const SOP_VolumeReduceParms &src) const
    {
        return !operator==(src);
    }
    using Reduction = SOP_VolumeReduceEnums::Reduction;
    using Scaleby = SOP_VolumeReduceEnums::Scaleby;
    using Result = SOP_VolumeReduceEnums::Result;



    void        buildFromOp(const OP_Node *node, fpreal time, DEP_MicroNode *depnode)
    {
        if (true)
            OP_Utils::evalOpParm(myGroup, node, "group", time, 0);
        else myGroup = ""_sh;
        if (true)
            OP_Utils::evalOpParm(myReduction, node, "reduction", time, 0);
        else myReduction = 0;
        if (true && ( (!(((int64(getReduction())!=5)))) ) )
            OP_Utils::evalOpParm(myPercentile, node, "percentile", time, 0);
        else myPercentile = 50;
        if (true)
            OP_Utils::evalOpParm(myScaleby, node, "scaleby", time, 0);
        else myScaleby = 0;
        if (true)
            OP_Utils::evalOpParm(myResult, node, "result", time, 0);
        else myResult = 0;
        if (true && ( (!(((int64(getResult())==0)))) ) )
            OP_Utils::evalOpParm(myResultattrib, node, "resultattrib", time, 0);
        else myResultattrib = "density"_sh;
        if (true && ( (!(((int64(getResult())==0)))) ) )
            OP_Utils::evalOpParm(myResultlvar, node, "resultlvar", time, 0);
        else myResultlvar = ""_sh;

    }


    virtual void loadFromOpSubclass(const LoadParms &loadparms)
    {
        buildFromOp(loadparms.node(), loadparms.context().getTime(), loadparms.depnode());
    }


    virtual void copyFrom(const SOP_NodeParms *src)
    {
        *this = *((const SOP_VolumeReduceParms *)src);
    }

    template <typename T>
    void
    doGetParmValue(exint idx, T &value) const
    {
        switch (idx)
        {
            case 0:
                coerceValue(value, myGroup);
                break;
            case 1:
                coerceValue(value, myReduction);
                break;
            case 2:
                coerceValue(value, myPercentile);
                break;
            case 3:
                coerceValue(value, myScaleby);
                break;
            case 4:
                coerceValue(value, myResult);
                break;
            case 5:
                coerceValue(value, myResultattrib);
                break;
            case 6:
                coerceValue(value, myResultlvar);
                break;

        }
    }

    void        getParmValue(exint idx, exint &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, fpreal &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Vector2D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Vector3D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Vector4D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Matrix2D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Matrix3D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Matrix4D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_StringHolder &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_SharedPtr<UT_Ramp> &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, PRM_DataItemHandle &value) const
    { doGetParmValue(idx, value); }

    template <typename T>
    void
    doSetParmValue(exint idx, const T &value) 
    {
        switch (idx)
        {
            case 0:
                coerceValue(myGroup, value);
                break;
            case 1:
                coerceValue(myReduction, value);
                break;
            case 2:
                coerceValue(myPercentile, value);
                break;
            case 3:
                coerceValue(myScaleby, value);
                break;
            case 4:
                coerceValue(myResult, value);
                break;
            case 5:
                coerceValue(myResultattrib, value);
                break;
            case 6:
                coerceValue(myResultlvar, value);
                break;

        }
    }

    void        setParmValue(exint idx, const exint &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const fpreal &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Vector2D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Vector3D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Vector4D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Matrix2D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Matrix3D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Matrix4D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_StringHolder &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_SharedPtr<UT_Ramp> &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const PRM_DataItemHandle &value) 
    { doSetParmValue(idx, value); }

    virtual exint    getNumParms() const
    {
        return 7;
    }

    virtual const char *getParmName(exint fieldnum) const
    {
        switch (fieldnum)
        {
            case 0:
                return "group";
            case 1:
                return "reduction";
            case 2:
                return "percentile";
            case 3:
                return "scaleby";
            case 4:
                return "result";
            case 5:
                return "resultattrib";
            case 6:
                return "resultlvar";

        }
        return 0;
    }

    virtual ParmType getParmType(exint fieldnum) const
    {
        switch (fieldnum)
        {
                case 0:
                    return PARM_STRING;
                case 1:
                    return PARM_INTEGER;
                case 2:
                    return PARM_FLOAT;
                case 3:
                    return PARM_INTEGER;
                case 4:
                    return PARM_INTEGER;
                case 5:
                    return PARM_STRING;
                case 6:
                    return PARM_STRING;

        }
        return PARM_UNSUPPORTED;
    }

    // Boiler plate to load individual types.
    static void  loadData(UT_IStream &is, int64 &v)
    { is.bread(&v, 1); }
    static void  loadData(UT_IStream &is, bool &v)
    { int64     iv; is.bread(&iv, 1); v = iv; }
    static void  loadData(UT_IStream &is, fpreal64 &v)
    { is.bread<fpreal64>(&v, 1); }
    static void  loadData(UT_IStream &is, UT_Vector2D &v)
    { is.bread<fpreal64>(&v.x(), 1); is.bread<fpreal64>(&v.y(), 1); }
    static void  loadData(UT_IStream &is, UT_Vector3D &v)
    { is.bread<fpreal64>(&v.x(), 1); is.bread<fpreal64>(&v.y(), 1);
      is.bread<fpreal64>(&v.z(), 1); }
    static void  loadData(UT_IStream &is, UT_Vector4D &v)
    { is.bread<fpreal64>(&v.x(), 1); is.bread<fpreal64>(&v.y(), 1);
      is.bread<fpreal64>(&v.z(), 1); is.bread<fpreal64>(&v.w(), 1); }
    static void  loadData(UT_IStream &is, UT_Matrix2D &v)
    { for (int r = 0; r < 2; r++) for (int c = 0; c < 2; c++) is.bread<fpreal64>(&v(r, c), 1); }
    static void  loadData(UT_IStream &is, UT_Matrix3D &v)
    { for (int r = 0; r < 3; r++) for (int c = 0; c < 3; c++) is.bread<fpreal64>(&v(r, c), 1); }
    static void  loadData(UT_IStream &is, UT_Matrix4D &v)
    { for (int r = 0; r < 4; r++) for (int c = 0; c < 4; c++) is.bread<fpreal64>(&v(r, c), 1); }
    static void  loadData(UT_IStream &is, UT_Vector2I &v)
    { is.bread<int64>(&v.x(), 1); is.bread<int64>(&v.y(), 1); }
    static void  loadData(UT_IStream &is, UT_Vector3I &v)
    { is.bread<int64>(&v.x(), 1); is.bread<int64>(&v.y(), 1);
      is.bread<int64>(&v.z(), 1); }
    static void  loadData(UT_IStream &is, UT_Vector4I &v)
    { is.bread<int64>(&v.x(), 1); is.bread<int64>(&v.y(), 1);
      is.bread<int64>(&v.z(), 1); is.bread<int64>(&v.w(), 1); }
    static void  loadData(UT_IStream &is, UT_StringHolder &v)
    { is.bread(v); }
    static void  loadData(UT_IStream &is, UT_SharedPtr<UT_Ramp> &v)
    {   UT_StringHolder   rampdata;
        loadData(is, rampdata);
        if (rampdata.isstring())
        {
            v.reset(new UT_Ramp());
            UT_IStream  istr((const char *) rampdata, rampdata.length(), UT_ISTREAM_ASCII);
            v->load(istr);
        }
        else v.reset();
    }
    static void  loadData(UT_IStream &is, PRM_DataItemHandle &v)
    {   UT_StringHolder   data;
        loadData(is, data);
        if (data.isstring())
        {
            // Find the data type.
            char *colon = UT_StringWrap(data).findChar(':');
            if (colon)
            {
                int             typelen = colon - data.buffer();
                UT_WorkBuffer   type;
                type.strncpy(data.buffer(), typelen);
                UT_IStream  istr(((const char *) data) + typelen + 1, data.length() - (typelen + 1), UT_ISTREAM_BINARY);
                
                v = PRM_DataFactory::parseBinary(type.buffer(), istr);
            }
        }
        else v.reset();
    }

    static void  saveData(std::ostream &os, int64 v)
    { UTwrite(os, &v); }
    static void  saveData(std::ostream &os, bool v)
    { int64 iv = v; UTwrite(os, &iv); }
    static void  saveData(std::ostream &os, fpreal64 v)
    { UTwrite<fpreal64>(os, &v); }
    static void  saveData(std::ostream &os, UT_Vector2D v)
    { UTwrite<fpreal64>(os, &v.x()); UTwrite<fpreal64>(os, &v.y()); }
    static void  saveData(std::ostream &os, UT_Vector3D v)
    { UTwrite<fpreal64>(os, &v.x()); UTwrite<fpreal64>(os, &v.y());
      UTwrite<fpreal64>(os, &v.z()); }
    static void  saveData(std::ostream &os, UT_Vector4D v)
    { UTwrite<fpreal64>(os, &v.x()); UTwrite<fpreal64>(os, &v.y());
      UTwrite<fpreal64>(os, &v.z()); UTwrite<fpreal64>(os, &v.w()); }
    static void  saveData(std::ostream &os, UT_Matrix2D v)
    { for (int r = 0; r < 2; r++) for (int c = 0; c < 2; c++) UTwrite<fpreal64>(os, &v(r, c)); }
    static void  saveData(std::ostream &os, UT_Matrix3D v)
    { for (int r = 0; r < 3; r++) for (int c = 0; c < 3; c++) UTwrite<fpreal64>(os, &v(r, c)); }
    static void  saveData(std::ostream &os, UT_Matrix4D v)
    { for (int r = 0; r < 4; r++) for (int c = 0; c < 4; c++) UTwrite<fpreal64>(os, &v(r, c)); }
    static void  saveData(std::ostream &os, UT_StringHolder s)
    { UT_StringWrap(s).saveBinary(os); }
    static void  saveData(std::ostream &os, UT_SharedPtr<UT_Ramp> s)
    {   UT_StringHolder         result;
        UT_OStringStream        ostr;
        if (s) s->save(ostr);
        result = ostr.str();
        saveData(os, result);
    }
    static void  saveData(std::ostream &os, PRM_DataItemHandle s)
    {   UT_StringHolder         result;
        UT_OStringStream        ostr;
        if (s) 
        {
            ostr << s->getDataTypeToken();
            ostr << ":";
            s->saveBinary(ostr);
        }
        result = ostr.str();
        saveData(os, result);
    }


    void         save(std::ostream &os) const
    {
        int32           v = version();
        UTwrite(os, &v);
        saveData(os, myGroup);
        saveData(os, myReduction);
        saveData(os, myPercentile);
        saveData(os, myScaleby);
        saveData(os, myResult);
        saveData(os, myResultattrib);
        saveData(os, myResultlvar);

    }

    bool         load(UT_IStream &is)
    {
        int32           v;
        is.bread(&v, 1);
        if (version() != v)
        {
            // Fail incompatible versions
            return false;
        }
        loadData(is, myGroup);
        loadData(is, myReduction);
        loadData(is, myPercentile);
        loadData(is, myScaleby);
        loadData(is, myResult);
        loadData(is, myResultattrib);
        loadData(is, myResultlvar);

        return true;
    }

    const UT_StringHolder & getGroup() const { return myGroup; }
    void setGroup(const UT_StringHolder & val) { myGroup = val; }
    UT_StringHolder opGroup(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getGroup();
        UT_StringHolder result;
        OP_Utils::evalOpParm(result, thissop, "group", cookparms.getCookTime(), 0);
        return result;
    }
    Reduction getReduction() const { return Reduction(myReduction); }
    void setReduction(Reduction val) { myReduction = int64(val); }
    Reduction opReduction(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getReduction();
        int64 result;
        OP_Utils::evalOpParm(result, thissop, "reduction", cookparms.getCookTime(), 0);
        return Reduction(result);
    }
    fpreal64 getPercentile() const { return myPercentile; }
    void setPercentile(fpreal64 val) { myPercentile = val; }
    fpreal64 opPercentile(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getPercentile();
        fpreal64 result;
        OP_Utils::evalOpParm(result, thissop, "percentile", cookparms.getCookTime(), 0);
        return result;
    }
    Scaleby getScaleby() const { return Scaleby(myScaleby); }
    void setScaleby(Scaleby val) { myScaleby = int64(val); }
    Scaleby opScaleby(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getScaleby();
        int64 result;
        OP_Utils::evalOpParm(result, thissop, "scaleby", cookparms.getCookTime(), 0);
        return Scaleby(result);
    }
    Result getResult() const { return Result(myResult); }
    void setResult(Result val) { myResult = int64(val); }
    Result opResult(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getResult();
        int64 result;
        OP_Utils::evalOpParm(result, thissop, "result", cookparms.getCookTime(), 0);
        return Result(result);
    }
    const UT_StringHolder & getResultattrib() const { return myResultattrib; }
    void setResultattrib(const UT_StringHolder & val) { myResultattrib = val; }
    UT_StringHolder opResultattrib(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getResultattrib();
        UT_StringHolder result;
        OP_Utils::evalOpParm(result, thissop, "resultattrib", cookparms.getCookTime(), 0);
        return result;
    }
    const UT_StringHolder & getResultlvar() const { return myResultlvar; }
    void setResultlvar(const UT_StringHolder & val) { myResultlvar = val; }
    UT_StringHolder opResultlvar(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getResultlvar();
        UT_StringHolder result;
        OP_Utils::evalOpParm(result, thissop, "resultlvar", cookparms.getCookTime(), 0);
        return result;
    }

private:
    UT_StringHolder myGroup;
    int64 myReduction;
    fpreal64 myPercentile;
    int64 myScaleby;
    int64 myResult;
    UT_StringHolder myResultattrib;
    UT_StringHolder myResultlvar;

};
