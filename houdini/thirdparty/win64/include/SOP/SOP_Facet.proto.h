/* Automagically Generated by generate_proto.py
 * Do not Edit
 */
#pragma once

#include <SOP/SOP_NodeVerb.h>
#include <OP/OP_Utils.h>
#include <PRM/PRM_Parm.h>
#include <UT/UT_IStream.h>
#include <UT/UT_NTStreamUtil.h>
#include <UT/UT_Ramp.h>
#include <UT/UT_SharedPtr.h>
#include <UT/UT_StringHolder.h>
#include <UT/UT_StringStream.h>
#include <UT/UT_VectorTypes.h>
#include <SYS/SYS_Types.h>

using namespace UT::Literal;

class DEP_MicroNode;
namespace SOP_FacetEnums
{
    enum class Cons
    {
        NONE = 0,
        POINTS,
        FPOINTS,
        NORMALS,
        FNORMALS
    };
}


class SOP_API SOP_FacetParms  : public SOP_NodeParms
{
public:
    static int version() { return 1; }

    SOP_FacetParms()
    {
        myGroup = ""_sh;
        myPrenml = false;
        myUnit = false;
        myUnique = false;
        myCons = 0;
        myDist = 0.001;
        myAccurate = true;
        myInline = false;
        myInlinedist = 0.001;
        myOrientpolys = false;
        myCusp = false;
        myAngle = 20;
        myRemove = false;
        myMkplanar = false;
        myPostnml = false;
        myReversenml = false;

    }

    explicit SOP_FacetParms(const SOP_FacetParms &) = default;

    virtual ~SOP_FacetParms() {}

    bool operator==(const SOP_FacetParms &src) const
    {
        if (myGroup != src.myGroup) return false;
        if (myPrenml != src.myPrenml) return false;
        if (myUnit != src.myUnit) return false;
        if (myUnique != src.myUnique) return false;
        if (myCons != src.myCons) return false;
        if (myDist != src.myDist) return false;
        if (myAccurate != src.myAccurate) return false;
        if (myInline != src.myInline) return false;
        if (myInlinedist != src.myInlinedist) return false;
        if (myOrientpolys != src.myOrientpolys) return false;
        if (myCusp != src.myCusp) return false;
        if (myAngle != src.myAngle) return false;
        if (myRemove != src.myRemove) return false;
        if (myMkplanar != src.myMkplanar) return false;
        if (myPostnml != src.myPostnml) return false;
        if (myReversenml != src.myReversenml) return false;

        return true;
    }
    bool operator!=(const SOP_FacetParms &src) const
    {
        return !operator==(src);
    }
    using Cons = SOP_FacetEnums::Cons;



    void        buildFromOp(const OP_Node *node, fpreal time, DEP_MicroNode *depnode)
    {
        if (true)
            OP_Utils::evalOpParm(myGroup, node, "group", time, 0);
        else myGroup = ""_sh;
        if (true)
            OP_Utils::evalOpParm(myPrenml, node, "prenml", time, 0);
        else myPrenml = false;
        if (true && ( (!(((getPrenml()==1)))) ) )
            OP_Utils::evalOpParm(myUnit, node, "unit", time, 0);
        else myUnit = false;
        if (true)
            OP_Utils::evalOpParm(myUnique, node, "unique", time, 0);
        else myUnique = false;
        if (true)
            OP_Utils::evalOpParm(myCons, node, "cons", time, 0);
        else myCons = 0;
        if (true && ( (!(((int64(getCons())==0)))) ) )
            OP_Utils::evalOpParm(myDist, node, "dist", time, 0);
        else myDist = 0.001;
        if (true && ( (!(((int64(getCons())==0)))) ) )
            OP_Utils::evalOpParm(myAccurate, node, "accurate", time, 0);
        else myAccurate = true;
        if (true)
            OP_Utils::evalOpParm(myInline, node, "inline", time, 0);
        else myInline = false;
        if (true && ( (!(((getInline()==0)))) ) )
            OP_Utils::evalOpParm(myInlinedist, node, "inlinedist", time, 0);
        else myInlinedist = 0.001;
        if (true)
            OP_Utils::evalOpParm(myOrientpolys, node, "orientPolys", time, 0);
        else myOrientpolys = false;
        if (true)
            OP_Utils::evalOpParm(myCusp, node, "cusp", time, 0);
        else myCusp = false;
        if (true && ( (!(((getCusp()==0)))) ) )
            OP_Utils::evalOpParm(myAngle, node, "angle", time, 0);
        else myAngle = 20;
        if (true)
            OP_Utils::evalOpParm(myRemove, node, "remove", time, 0);
        else myRemove = false;
        if (true)
            OP_Utils::evalOpParm(myMkplanar, node, "mkplanar", time, 0);
        else myMkplanar = false;
        if (true)
            OP_Utils::evalOpParm(myPostnml, node, "postnml", time, 0);
        else myPostnml = false;
        if (true)
            OP_Utils::evalOpParm(myReversenml, node, "reversenml", time, 0);
        else myReversenml = false;

    }


    virtual void loadFromOpSubclass(const LoadParms &loadparms)
    {
        buildFromOp(loadparms.node(), loadparms.context().getTime(), loadparms.depnode());
    }


    virtual void copyFrom(const SOP_NodeParms *src)
    {
        *this = *((const SOP_FacetParms *)src);
    }

    template <typename T>
    void
    doGetParmValue(exint idx, T &value) const
    {
        switch (idx)
        {
            case 0:
                coerceValue(value, myGroup);
                break;
            case 1:
                coerceValue(value, myPrenml);
                break;
            case 2:
                coerceValue(value, myUnit);
                break;
            case 3:
                coerceValue(value, myUnique);
                break;
            case 4:
                coerceValue(value, myCons);
                break;
            case 5:
                coerceValue(value, myDist);
                break;
            case 6:
                coerceValue(value, myAccurate);
                break;
            case 7:
                coerceValue(value, myInline);
                break;
            case 8:
                coerceValue(value, myInlinedist);
                break;
            case 9:
                coerceValue(value, myOrientpolys);
                break;
            case 10:
                coerceValue(value, myCusp);
                break;
            case 11:
                coerceValue(value, myAngle);
                break;
            case 12:
                coerceValue(value, myRemove);
                break;
            case 13:
                coerceValue(value, myMkplanar);
                break;
            case 14:
                coerceValue(value, myPostnml);
                break;
            case 15:
                coerceValue(value, myReversenml);
                break;

        }
    }

    void        getParmValue(exint idx, exint &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, fpreal &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Vector2D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Vector3D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Vector4D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Matrix2D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Matrix3D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Matrix4D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_StringHolder &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_SharedPtr<UT_Ramp> &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, PRM_DataItemHandle &value) const
    { doGetParmValue(idx, value); }

    template <typename T>
    void
    doSetParmValue(exint idx, const T &value) 
    {
        switch (idx)
        {
            case 0:
                coerceValue(myGroup, value);
                break;
            case 1:
                coerceValue(myPrenml, value);
                break;
            case 2:
                coerceValue(myUnit, value);
                break;
            case 3:
                coerceValue(myUnique, value);
                break;
            case 4:
                coerceValue(myCons, value);
                break;
            case 5:
                coerceValue(myDist, value);
                break;
            case 6:
                coerceValue(myAccurate, value);
                break;
            case 7:
                coerceValue(myInline, value);
                break;
            case 8:
                coerceValue(myInlinedist, value);
                break;
            case 9:
                coerceValue(myOrientpolys, value);
                break;
            case 10:
                coerceValue(myCusp, value);
                break;
            case 11:
                coerceValue(myAngle, value);
                break;
            case 12:
                coerceValue(myRemove, value);
                break;
            case 13:
                coerceValue(myMkplanar, value);
                break;
            case 14:
                coerceValue(myPostnml, value);
                break;
            case 15:
                coerceValue(myReversenml, value);
                break;

        }
    }

    void        setParmValue(exint idx, const exint &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const fpreal &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Vector2D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Vector3D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Vector4D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Matrix2D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Matrix3D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Matrix4D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_StringHolder &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_SharedPtr<UT_Ramp> &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const PRM_DataItemHandle &value) 
    { doSetParmValue(idx, value); }

    virtual exint    getNumParms() const
    {
        return 16;
    }

    virtual const char *getParmName(exint fieldnum) const
    {
        switch (fieldnum)
        {
            case 0:
                return "group";
            case 1:
                return "prenml";
            case 2:
                return "unit";
            case 3:
                return "unique";
            case 4:
                return "cons";
            case 5:
                return "dist";
            case 6:
                return "accurate";
            case 7:
                return "inline";
            case 8:
                return "inlinedist";
            case 9:
                return "orientPolys";
            case 10:
                return "cusp";
            case 11:
                return "angle";
            case 12:
                return "remove";
            case 13:
                return "mkplanar";
            case 14:
                return "postnml";
            case 15:
                return "reversenml";

        }
        return 0;
    }

    virtual ParmType getParmType(exint fieldnum) const
    {
        switch (fieldnum)
        {
                case 0:
                    return PARM_STRING;
                case 1:
                    return PARM_INTEGER;
                case 2:
                    return PARM_INTEGER;
                case 3:
                    return PARM_INTEGER;
                case 4:
                    return PARM_INTEGER;
                case 5:
                    return PARM_FLOAT;
                case 6:
                    return PARM_INTEGER;
                case 7:
                    return PARM_INTEGER;
                case 8:
                    return PARM_FLOAT;
                case 9:
                    return PARM_INTEGER;
                case 10:
                    return PARM_INTEGER;
                case 11:
                    return PARM_FLOAT;
                case 12:
                    return PARM_INTEGER;
                case 13:
                    return PARM_INTEGER;
                case 14:
                    return PARM_INTEGER;
                case 15:
                    return PARM_INTEGER;

        }
        return PARM_UNSUPPORTED;
    }

    // Boiler plate to load individual types.
    static void  loadData(UT_IStream &is, int64 &v)
    { is.bread(&v, 1); }
    static void  loadData(UT_IStream &is, bool &v)
    { int64     iv; is.bread(&iv, 1); v = iv; }
    static void  loadData(UT_IStream &is, fpreal64 &v)
    { is.bread<fpreal64>(&v, 1); }
    static void  loadData(UT_IStream &is, UT_Vector2D &v)
    { is.bread<fpreal64>(&v.x(), 1); is.bread<fpreal64>(&v.y(), 1); }
    static void  loadData(UT_IStream &is, UT_Vector3D &v)
    { is.bread<fpreal64>(&v.x(), 1); is.bread<fpreal64>(&v.y(), 1);
      is.bread<fpreal64>(&v.z(), 1); }
    static void  loadData(UT_IStream &is, UT_Vector4D &v)
    { is.bread<fpreal64>(&v.x(), 1); is.bread<fpreal64>(&v.y(), 1);
      is.bread<fpreal64>(&v.z(), 1); is.bread<fpreal64>(&v.w(), 1); }
    static void  loadData(UT_IStream &is, UT_Matrix2D &v)
    { for (int r = 0; r < 2; r++) for (int c = 0; c < 2; c++) is.bread<fpreal64>(&v(r, c), 1); }
    static void  loadData(UT_IStream &is, UT_Matrix3D &v)
    { for (int r = 0; r < 3; r++) for (int c = 0; c < 3; c++) is.bread<fpreal64>(&v(r, c), 1); }
    static void  loadData(UT_IStream &is, UT_Matrix4D &v)
    { for (int r = 0; r < 4; r++) for (int c = 0; c < 4; c++) is.bread<fpreal64>(&v(r, c), 1); }
    static void  loadData(UT_IStream &is, UT_Vector2I &v)
    { is.bread<int64>(&v.x(), 1); is.bread<int64>(&v.y(), 1); }
    static void  loadData(UT_IStream &is, UT_Vector3I &v)
    { is.bread<int64>(&v.x(), 1); is.bread<int64>(&v.y(), 1);
      is.bread<int64>(&v.z(), 1); }
    static void  loadData(UT_IStream &is, UT_Vector4I &v)
    { is.bread<int64>(&v.x(), 1); is.bread<int64>(&v.y(), 1);
      is.bread<int64>(&v.z(), 1); is.bread<int64>(&v.w(), 1); }
    static void  loadData(UT_IStream &is, UT_StringHolder &v)
    { is.bread(v); }
    static void  loadData(UT_IStream &is, UT_SharedPtr<UT_Ramp> &v)
    {   UT_StringHolder   rampdata;
        loadData(is, rampdata);
        if (rampdata.isstring())
        {
            v.reset(new UT_Ramp());
            UT_IStream  istr((const char *) rampdata, rampdata.length(), UT_ISTREAM_ASCII);
            v->load(istr);
        }
        else v.reset();
    }
    static void  loadData(UT_IStream &is, PRM_DataItemHandle &v)
    {   UT_StringHolder   data;
        loadData(is, data);
        if (data.isstring())
        {
            // Find the data type.
            char *colon = UT_StringWrap(data).findChar(':');
            if (colon)
            {
                int             typelen = colon - data.buffer();
                UT_WorkBuffer   type;
                type.strncpy(data.buffer(), typelen);
                UT_IStream  istr(((const char *) data) + typelen + 1, data.length() - (typelen + 1), UT_ISTREAM_BINARY);
                
                v = PRM_DataFactory::parseBinary(type.buffer(), istr);
            }
        }
        else v.reset();
    }

    static void  saveData(std::ostream &os, int64 v)
    { UTwrite(os, &v); }
    static void  saveData(std::ostream &os, bool v)
    { int64 iv = v; UTwrite(os, &iv); }
    static void  saveData(std::ostream &os, fpreal64 v)
    { UTwrite<fpreal64>(os, &v); }
    static void  saveData(std::ostream &os, UT_Vector2D v)
    { UTwrite<fpreal64>(os, &v.x()); UTwrite<fpreal64>(os, &v.y()); }
    static void  saveData(std::ostream &os, UT_Vector3D v)
    { UTwrite<fpreal64>(os, &v.x()); UTwrite<fpreal64>(os, &v.y());
      UTwrite<fpreal64>(os, &v.z()); }
    static void  saveData(std::ostream &os, UT_Vector4D v)
    { UTwrite<fpreal64>(os, &v.x()); UTwrite<fpreal64>(os, &v.y());
      UTwrite<fpreal64>(os, &v.z()); UTwrite<fpreal64>(os, &v.w()); }
    static void  saveData(std::ostream &os, UT_Matrix2D v)
    { for (int r = 0; r < 2; r++) for (int c = 0; c < 2; c++) UTwrite<fpreal64>(os, &v(r, c)); }
    static void  saveData(std::ostream &os, UT_Matrix3D v)
    { for (int r = 0; r < 3; r++) for (int c = 0; c < 3; c++) UTwrite<fpreal64>(os, &v(r, c)); }
    static void  saveData(std::ostream &os, UT_Matrix4D v)
    { for (int r = 0; r < 4; r++) for (int c = 0; c < 4; c++) UTwrite<fpreal64>(os, &v(r, c)); }
    static void  saveData(std::ostream &os, UT_StringHolder s)
    { UT_StringWrap(s).saveBinary(os); }
    static void  saveData(std::ostream &os, UT_SharedPtr<UT_Ramp> s)
    {   UT_StringHolder         result;
        UT_OStringStream        ostr;
        if (s) s->save(ostr);
        result = ostr.str();
        saveData(os, result);
    }
    static void  saveData(std::ostream &os, PRM_DataItemHandle s)
    {   UT_StringHolder         result;
        UT_OStringStream        ostr;
        if (s) 
        {
            ostr << s->getDataTypeToken();
            ostr << ":";
            s->saveBinary(ostr);
        }
        result = ostr.str();
        saveData(os, result);
    }


    void         save(std::ostream &os) const
    {
        int32           v = version();
        UTwrite(os, &v);
        saveData(os, myGroup);
        saveData(os, myPrenml);
        saveData(os, myUnit);
        saveData(os, myUnique);
        saveData(os, myCons);
        saveData(os, myDist);
        saveData(os, myAccurate);
        saveData(os, myInline);
        saveData(os, myInlinedist);
        saveData(os, myOrientpolys);
        saveData(os, myCusp);
        saveData(os, myAngle);
        saveData(os, myRemove);
        saveData(os, myMkplanar);
        saveData(os, myPostnml);
        saveData(os, myReversenml);

    }

    bool         load(UT_IStream &is)
    {
        int32           v;
        is.bread(&v, 1);
        if (version() != v)
        {
            // Fail incompatible versions
            return false;
        }
        loadData(is, myGroup);
        loadData(is, myPrenml);
        loadData(is, myUnit);
        loadData(is, myUnique);
        loadData(is, myCons);
        loadData(is, myDist);
        loadData(is, myAccurate);
        loadData(is, myInline);
        loadData(is, myInlinedist);
        loadData(is, myOrientpolys);
        loadData(is, myCusp);
        loadData(is, myAngle);
        loadData(is, myRemove);
        loadData(is, myMkplanar);
        loadData(is, myPostnml);
        loadData(is, myReversenml);

        return true;
    }

    const UT_StringHolder & getGroup() const { return myGroup; }
    void setGroup(const UT_StringHolder & val) { myGroup = val; }
    UT_StringHolder opGroup(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getGroup();
        UT_StringHolder result;
        OP_Utils::evalOpParm(result, thissop, "group", cookparms.getCookTime(), 0);
        return result;
    }
    bool getPrenml() const { return myPrenml; }
    void setPrenml(bool val) { myPrenml = val; }
    bool opPrenml(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getPrenml();
        bool result;
        OP_Utils::evalOpParm(result, thissop, "prenml", cookparms.getCookTime(), 0);
        return result;
    }
    bool getUnit() const { return myUnit; }
    void setUnit(bool val) { myUnit = val; }
    bool opUnit(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getUnit();
        bool result;
        OP_Utils::evalOpParm(result, thissop, "unit", cookparms.getCookTime(), 0);
        return result;
    }
    bool getUnique() const { return myUnique; }
    void setUnique(bool val) { myUnique = val; }
    bool opUnique(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getUnique();
        bool result;
        OP_Utils::evalOpParm(result, thissop, "unique", cookparms.getCookTime(), 0);
        return result;
    }
    Cons getCons() const { return Cons(myCons); }
    void setCons(Cons val) { myCons = int64(val); }
    Cons opCons(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getCons();
        int64 result;
        OP_Utils::evalOpParm(result, thissop, "cons", cookparms.getCookTime(), 0);
        return Cons(result);
    }
    fpreal64 getDist() const { return myDist; }
    void setDist(fpreal64 val) { myDist = val; }
    fpreal64 opDist(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getDist();
        fpreal64 result;
        OP_Utils::evalOpParm(result, thissop, "dist", cookparms.getCookTime(), 0);
        return result;
    }
    bool getAccurate() const { return myAccurate; }
    void setAccurate(bool val) { myAccurate = val; }
    bool opAccurate(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getAccurate();
        bool result;
        OP_Utils::evalOpParm(result, thissop, "accurate", cookparms.getCookTime(), 0);
        return result;
    }
    bool getInline() const { return myInline; }
    void setInline(bool val) { myInline = val; }
    bool opInline(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getInline();
        bool result;
        OP_Utils::evalOpParm(result, thissop, "inline", cookparms.getCookTime(), 0);
        return result;
    }
    fpreal64 getInlinedist() const { return myInlinedist; }
    void setInlinedist(fpreal64 val) { myInlinedist = val; }
    fpreal64 opInlinedist(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getInlinedist();
        fpreal64 result;
        OP_Utils::evalOpParm(result, thissop, "inlinedist", cookparms.getCookTime(), 0);
        return result;
    }
    bool getOrientpolys() const { return myOrientpolys; }
    void setOrientpolys(bool val) { myOrientpolys = val; }
    bool opOrientpolys(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getOrientpolys();
        bool result;
        OP_Utils::evalOpParm(result, thissop, "orientPolys", cookparms.getCookTime(), 0);
        return result;
    }
    bool getCusp() const { return myCusp; }
    void setCusp(bool val) { myCusp = val; }
    bool opCusp(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getCusp();
        bool result;
        OP_Utils::evalOpParm(result, thissop, "cusp", cookparms.getCookTime(), 0);
        return result;
    }
    fpreal64 getAngle() const { return myAngle; }
    void setAngle(fpreal64 val) { myAngle = val; }
    fpreal64 opAngle(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getAngle();
        fpreal64 result;
        OP_Utils::evalOpParm(result, thissop, "angle", cookparms.getCookTime(), 0);
        return result;
    }
    bool getRemove() const { return myRemove; }
    void setRemove(bool val) { myRemove = val; }
    bool opRemove(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getRemove();
        bool result;
        OP_Utils::evalOpParm(result, thissop, "remove", cookparms.getCookTime(), 0);
        return result;
    }
    bool getMkplanar() const { return myMkplanar; }
    void setMkplanar(bool val) { myMkplanar = val; }
    bool opMkplanar(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getMkplanar();
        bool result;
        OP_Utils::evalOpParm(result, thissop, "mkplanar", cookparms.getCookTime(), 0);
        return result;
    }
    bool getPostnml() const { return myPostnml; }
    void setPostnml(bool val) { myPostnml = val; }
    bool opPostnml(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getPostnml();
        bool result;
        OP_Utils::evalOpParm(result, thissop, "postnml", cookparms.getCookTime(), 0);
        return result;
    }
    bool getReversenml() const { return myReversenml; }
    void setReversenml(bool val) { myReversenml = val; }
    bool opReversenml(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getReversenml();
        bool result;
        OP_Utils::evalOpParm(result, thissop, "reversenml", cookparms.getCookTime(), 0);
        return result;
    }

private:
    UT_StringHolder myGroup;
    bool myPrenml;
    bool myUnit;
    bool myUnique;
    int64 myCons;
    fpreal64 myDist;
    bool myAccurate;
    bool myInline;
    fpreal64 myInlinedist;
    bool myOrientpolys;
    bool myCusp;
    fpreal64 myAngle;
    bool myRemove;
    bool myMkplanar;
    bool myPostnml;
    bool myReversenml;

};
