/* Automagically Generated by generate_proto.py
 * Do not Edit
 */
#pragma once

#include <SOP/SOP_NodeVerb.h>
#include <OP/OP_Utils.h>
#include <PRM/PRM_Parm.h>
#include <UT/UT_IStream.h>
#include <UT/UT_NTStreamUtil.h>
#include <UT/UT_Ramp.h>
#include <UT/UT_SharedPtr.h>
#include <UT/UT_StringHolder.h>
#include <UT/UT_StringStream.h>
#include <UT/UT_VectorTypes.h>
#include <SYS/SYS_Types.h>

using namespace UT::Literal;

class DEP_MicroNode;
namespace SOP_JoinEnums
{
    enum class Dir
    {
        UJOIN = 0,
        VJOIN
    };
    enum class Joinop
    {
        ALL = 0,
        GROUP,
        SKIP
    };
}


class SOP_API SOP_JoinParms  : public SOP_NodeParms
{
public:
    static int version() { return 1; }

    SOP_JoinParms()
    {
        myGroup = ""_sh;
        myBlend = false;
        myTolerance = 1;
        myBias = 0.5;
        myKnotmult = false;
        myProximity = false;
        myDir = 0;
        myJoinop = 0;
        myInc = 2;
        myLoop = false;
        myPrim = false;
        myOnlyconnected = false;

    }

    explicit SOP_JoinParms(const SOP_JoinParms &) = default;

    virtual ~SOP_JoinParms() {}

    bool operator==(const SOP_JoinParms &src) const
    {
        if (myGroup != src.myGroup) return false;
        if (myBlend != src.myBlend) return false;
        if (myTolerance != src.myTolerance) return false;
        if (myBias != src.myBias) return false;
        if (myKnotmult != src.myKnotmult) return false;
        if (myProximity != src.myProximity) return false;
        if (myDir != src.myDir) return false;
        if (myJoinop != src.myJoinop) return false;
        if (myInc != src.myInc) return false;
        if (myLoop != src.myLoop) return false;
        if (myPrim != src.myPrim) return false;
        if (myOnlyconnected != src.myOnlyconnected) return false;

        return true;
    }
    bool operator!=(const SOP_JoinParms &src) const
    {
        return !operator==(src);
    }
    using Dir = SOP_JoinEnums::Dir;
    using Joinop = SOP_JoinEnums::Joinop;



    void        buildFromOp(const OP_Node *node, fpreal time, DEP_MicroNode *depnode)
    {
        if (true)
            OP_Utils::evalOpParm(myGroup, node, "group", time, 0);
        else myGroup = ""_sh;
        if (true)
            OP_Utils::evalOpParm(myBlend, node, "blend", time, 0);
        else myBlend = false;
        if (true)
            OP_Utils::evalOpParm(myTolerance, node, "tolerance", time, 0);
        else myTolerance = 1;
        if (true && ( (!(((getBlend()==0)))) ) )
            OP_Utils::evalOpParm(myBias, node, "bias", time, 0);
        else myBias = 0.5;
        if (true)
            OP_Utils::evalOpParm(myKnotmult, node, "knotmult", time, 0);
        else myKnotmult = false;
        if (true)
            OP_Utils::evalOpParm(myProximity, node, "proximity", time, 0);
        else myProximity = false;
        if (true)
            OP_Utils::evalOpParm(myDir, node, "dir", time, 0);
        else myDir = 0;
        if (true)
            OP_Utils::evalOpParm(myJoinop, node, "joinop", time, 0);
        else myJoinop = 0;
        if (true && ( (!(((int64(getJoinop())==0)))) ) )
            OP_Utils::evalOpParm(myInc, node, "inc", time, 0);
        else myInc = 2;
        if (true)
            OP_Utils::evalOpParm(myLoop, node, "loop", time, 0);
        else myLoop = false;
        if (true)
            OP_Utils::evalOpParm(myPrim, node, "prim", time, 0);
        else myPrim = false;
        if (true)
            OP_Utils::evalOpParm(myOnlyconnected, node, "onlyconnected", time, 0);
        else myOnlyconnected = false;

    }


    virtual void loadFromOpSubclass(const LoadParms &loadparms)
    {
        buildFromOp(loadparms.node(), loadparms.context().getTime(), loadparms.depnode());
    }


    virtual void copyFrom(const SOP_NodeParms *src)
    {
        *this = *((const SOP_JoinParms *)src);
    }

    template <typename T>
    void
    doGetParmValue(exint idx, T &value) const
    {
        switch (idx)
        {
            case 0:
                coerceValue(value, myGroup);
                break;
            case 1:
                coerceValue(value, myBlend);
                break;
            case 2:
                coerceValue(value, myTolerance);
                break;
            case 3:
                coerceValue(value, myBias);
                break;
            case 4:
                coerceValue(value, myKnotmult);
                break;
            case 5:
                coerceValue(value, myProximity);
                break;
            case 6:
                coerceValue(value, myDir);
                break;
            case 7:
                coerceValue(value, myJoinop);
                break;
            case 8:
                coerceValue(value, myInc);
                break;
            case 9:
                coerceValue(value, myLoop);
                break;
            case 10:
                coerceValue(value, myPrim);
                break;
            case 11:
                coerceValue(value, myOnlyconnected);
                break;

        }
    }

    void        getParmValue(exint idx, exint &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, fpreal &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Vector2D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Vector3D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Vector4D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Matrix2D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Matrix3D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Matrix4D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_StringHolder &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_SharedPtr<UT_Ramp> &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, PRM_DataItemHandle &value) const
    { doGetParmValue(idx, value); }

    template <typename T>
    void
    doSetParmValue(exint idx, const T &value) 
    {
        switch (idx)
        {
            case 0:
                coerceValue(myGroup, value);
                break;
            case 1:
                coerceValue(myBlend, value);
                break;
            case 2:
                coerceValue(myTolerance, value);
                break;
            case 3:
                coerceValue(myBias, value);
                break;
            case 4:
                coerceValue(myKnotmult, value);
                break;
            case 5:
                coerceValue(myProximity, value);
                break;
            case 6:
                coerceValue(myDir, value);
                break;
            case 7:
                coerceValue(myJoinop, value);
                break;
            case 8:
                coerceValue(myInc, value);
                break;
            case 9:
                coerceValue(myLoop, value);
                break;
            case 10:
                coerceValue(myPrim, value);
                break;
            case 11:
                coerceValue(myOnlyconnected, value);
                break;

        }
    }

    void        setParmValue(exint idx, const exint &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const fpreal &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Vector2D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Vector3D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Vector4D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Matrix2D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Matrix3D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Matrix4D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_StringHolder &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_SharedPtr<UT_Ramp> &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const PRM_DataItemHandle &value) 
    { doSetParmValue(idx, value); }

    virtual exint    getNumParms() const
    {
        return 12;
    }

    virtual const char *getParmName(exint fieldnum) const
    {
        switch (fieldnum)
        {
            case 0:
                return "group";
            case 1:
                return "blend";
            case 2:
                return "tolerance";
            case 3:
                return "bias";
            case 4:
                return "knotmult";
            case 5:
                return "proximity";
            case 6:
                return "dir";
            case 7:
                return "joinop";
            case 8:
                return "inc";
            case 9:
                return "loop";
            case 10:
                return "prim";
            case 11:
                return "onlyconnected";

        }
        return 0;
    }

    virtual ParmType getParmType(exint fieldnum) const
    {
        switch (fieldnum)
        {
                case 0:
                    return PARM_STRING;
                case 1:
                    return PARM_INTEGER;
                case 2:
                    return PARM_FLOAT;
                case 3:
                    return PARM_FLOAT;
                case 4:
                    return PARM_INTEGER;
                case 5:
                    return PARM_INTEGER;
                case 6:
                    return PARM_INTEGER;
                case 7:
                    return PARM_INTEGER;
                case 8:
                    return PARM_INTEGER;
                case 9:
                    return PARM_INTEGER;
                case 10:
                    return PARM_INTEGER;
                case 11:
                    return PARM_INTEGER;

        }
        return PARM_UNSUPPORTED;
    }

    // Boiler plate to load individual types.
    static void  loadData(UT_IStream &is, int64 &v)
    { is.bread(&v, 1); }
    static void  loadData(UT_IStream &is, bool &v)
    { int64     iv; is.bread(&iv, 1); v = iv; }
    static void  loadData(UT_IStream &is, fpreal64 &v)
    { is.bread<fpreal64>(&v, 1); }
    static void  loadData(UT_IStream &is, UT_Vector2D &v)
    { is.bread<fpreal64>(&v.x(), 1); is.bread<fpreal64>(&v.y(), 1); }
    static void  loadData(UT_IStream &is, UT_Vector3D &v)
    { is.bread<fpreal64>(&v.x(), 1); is.bread<fpreal64>(&v.y(), 1);
      is.bread<fpreal64>(&v.z(), 1); }
    static void  loadData(UT_IStream &is, UT_Vector4D &v)
    { is.bread<fpreal64>(&v.x(), 1); is.bread<fpreal64>(&v.y(), 1);
      is.bread<fpreal64>(&v.z(), 1); is.bread<fpreal64>(&v.w(), 1); }
    static void  loadData(UT_IStream &is, UT_Matrix2D &v)
    { for (int r = 0; r < 2; r++) for (int c = 0; c < 2; c++) is.bread<fpreal64>(&v(r, c), 1); }
    static void  loadData(UT_IStream &is, UT_Matrix3D &v)
    { for (int r = 0; r < 3; r++) for (int c = 0; c < 3; c++) is.bread<fpreal64>(&v(r, c), 1); }
    static void  loadData(UT_IStream &is, UT_Matrix4D &v)
    { for (int r = 0; r < 4; r++) for (int c = 0; c < 4; c++) is.bread<fpreal64>(&v(r, c), 1); }
    static void  loadData(UT_IStream &is, UT_Vector2I &v)
    { is.bread<int64>(&v.x(), 1); is.bread<int64>(&v.y(), 1); }
    static void  loadData(UT_IStream &is, UT_Vector3I &v)
    { is.bread<int64>(&v.x(), 1); is.bread<int64>(&v.y(), 1);
      is.bread<int64>(&v.z(), 1); }
    static void  loadData(UT_IStream &is, UT_Vector4I &v)
    { is.bread<int64>(&v.x(), 1); is.bread<int64>(&v.y(), 1);
      is.bread<int64>(&v.z(), 1); is.bread<int64>(&v.w(), 1); }
    static void  loadData(UT_IStream &is, UT_StringHolder &v)
    { is.bread(v); }
    static void  loadData(UT_IStream &is, UT_SharedPtr<UT_Ramp> &v)
    {   UT_StringHolder   rampdata;
        loadData(is, rampdata);
        if (rampdata.isstring())
        {
            v.reset(new UT_Ramp());
            UT_IStream  istr((const char *) rampdata, rampdata.length(), UT_ISTREAM_ASCII);
            v->load(istr);
        }
        else v.reset();
    }
    static void  loadData(UT_IStream &is, PRM_DataItemHandle &v)
    {   UT_StringHolder   data;
        loadData(is, data);
        if (data.isstring())
        {
            // Find the data type.
            char *colon = UT_StringWrap(data).findChar(':');
            if (colon)
            {
                int             typelen = colon - data.buffer();
                UT_WorkBuffer   type;
                type.strncpy(data.buffer(), typelen);
                UT_IStream  istr(((const char *) data) + typelen + 1, data.length() - (typelen + 1), UT_ISTREAM_BINARY);
                
                v = PRM_DataFactory::parseBinary(type.buffer(), istr);
            }
        }
        else v.reset();
    }

    static void  saveData(std::ostream &os, int64 v)
    { UTwrite(os, &v); }
    static void  saveData(std::ostream &os, bool v)
    { int64 iv = v; UTwrite(os, &iv); }
    static void  saveData(std::ostream &os, fpreal64 v)
    { UTwrite<fpreal64>(os, &v); }
    static void  saveData(std::ostream &os, UT_Vector2D v)
    { UTwrite<fpreal64>(os, &v.x()); UTwrite<fpreal64>(os, &v.y()); }
    static void  saveData(std::ostream &os, UT_Vector3D v)
    { UTwrite<fpreal64>(os, &v.x()); UTwrite<fpreal64>(os, &v.y());
      UTwrite<fpreal64>(os, &v.z()); }
    static void  saveData(std::ostream &os, UT_Vector4D v)
    { UTwrite<fpreal64>(os, &v.x()); UTwrite<fpreal64>(os, &v.y());
      UTwrite<fpreal64>(os, &v.z()); UTwrite<fpreal64>(os, &v.w()); }
    static void  saveData(std::ostream &os, UT_Matrix2D v)
    { for (int r = 0; r < 2; r++) for (int c = 0; c < 2; c++) UTwrite<fpreal64>(os, &v(r, c)); }
    static void  saveData(std::ostream &os, UT_Matrix3D v)
    { for (int r = 0; r < 3; r++) for (int c = 0; c < 3; c++) UTwrite<fpreal64>(os, &v(r, c)); }
    static void  saveData(std::ostream &os, UT_Matrix4D v)
    { for (int r = 0; r < 4; r++) for (int c = 0; c < 4; c++) UTwrite<fpreal64>(os, &v(r, c)); }
    static void  saveData(std::ostream &os, UT_StringHolder s)
    { UT_StringWrap(s).saveBinary(os); }
    static void  saveData(std::ostream &os, UT_SharedPtr<UT_Ramp> s)
    {   UT_StringHolder         result;
        UT_OStringStream        ostr;
        if (s) s->save(ostr);
        result = ostr.str();
        saveData(os, result);
    }
    static void  saveData(std::ostream &os, PRM_DataItemHandle s)
    {   UT_StringHolder         result;
        UT_OStringStream        ostr;
        if (s) 
        {
            ostr << s->getDataTypeToken();
            ostr << ":";
            s->saveBinary(ostr);
        }
        result = ostr.str();
        saveData(os, result);
    }


    void         save(std::ostream &os) const
    {
        int32           v = version();
        UTwrite(os, &v);
        saveData(os, myGroup);
        saveData(os, myBlend);
        saveData(os, myTolerance);
        saveData(os, myBias);
        saveData(os, myKnotmult);
        saveData(os, myProximity);
        saveData(os, myDir);
        saveData(os, myJoinop);
        saveData(os, myInc);
        saveData(os, myLoop);
        saveData(os, myPrim);
        saveData(os, myOnlyconnected);

    }

    bool         load(UT_IStream &is)
    {
        int32           v;
        is.bread(&v, 1);
        if (version() != v)
        {
            // Fail incompatible versions
            return false;
        }
        loadData(is, myGroup);
        loadData(is, myBlend);
        loadData(is, myTolerance);
        loadData(is, myBias);
        loadData(is, myKnotmult);
        loadData(is, myProximity);
        loadData(is, myDir);
        loadData(is, myJoinop);
        loadData(is, myInc);
        loadData(is, myLoop);
        loadData(is, myPrim);
        loadData(is, myOnlyconnected);

        return true;
    }

    const UT_StringHolder & getGroup() const { return myGroup; }
    void setGroup(const UT_StringHolder & val) { myGroup = val; }
    UT_StringHolder opGroup(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getGroup();
        UT_StringHolder result;
        OP_Utils::evalOpParm(result, thissop, "group", cookparms.getCookTime(), 0);
        return result;
    }
    bool getBlend() const { return myBlend; }
    void setBlend(bool val) { myBlend = val; }
    bool opBlend(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getBlend();
        bool result;
        OP_Utils::evalOpParm(result, thissop, "blend", cookparms.getCookTime(), 0);
        return result;
    }
    fpreal64 getTolerance() const { return myTolerance; }
    void setTolerance(fpreal64 val) { myTolerance = val; }
    fpreal64 opTolerance(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getTolerance();
        fpreal64 result;
        OP_Utils::evalOpParm(result, thissop, "tolerance", cookparms.getCookTime(), 0);
        return result;
    }
    fpreal64 getBias() const { return myBias; }
    void setBias(fpreal64 val) { myBias = val; }
    fpreal64 opBias(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getBias();
        fpreal64 result;
        OP_Utils::evalOpParm(result, thissop, "bias", cookparms.getCookTime(), 0);
        return result;
    }
    bool getKnotmult() const { return myKnotmult; }
    void setKnotmult(bool val) { myKnotmult = val; }
    bool opKnotmult(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getKnotmult();
        bool result;
        OP_Utils::evalOpParm(result, thissop, "knotmult", cookparms.getCookTime(), 0);
        return result;
    }
    bool getProximity() const { return myProximity; }
    void setProximity(bool val) { myProximity = val; }
    bool opProximity(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getProximity();
        bool result;
        OP_Utils::evalOpParm(result, thissop, "proximity", cookparms.getCookTime(), 0);
        return result;
    }
    Dir getDir() const { return Dir(myDir); }
    void setDir(Dir val) { myDir = int64(val); }
    Dir opDir(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getDir();
        int64 result;
        OP_Utils::evalOpParm(result, thissop, "dir", cookparms.getCookTime(), 0);
        return Dir(result);
    }
    Joinop getJoinop() const { return Joinop(myJoinop); }
    void setJoinop(Joinop val) { myJoinop = int64(val); }
    Joinop opJoinop(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getJoinop();
        int64 result;
        OP_Utils::evalOpParm(result, thissop, "joinop", cookparms.getCookTime(), 0);
        return Joinop(result);
    }
    int64 getInc() const { return myInc; }
    void setInc(int64 val) { myInc = val; }
    int64 opInc(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getInc();
        int64 result;
        OP_Utils::evalOpParm(result, thissop, "inc", cookparms.getCookTime(), 0);
        return result;
    }
    bool getLoop() const { return myLoop; }
    void setLoop(bool val) { myLoop = val; }
    bool opLoop(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getLoop();
        bool result;
        OP_Utils::evalOpParm(result, thissop, "loop", cookparms.getCookTime(), 0);
        return result;
    }
    bool getPrim() const { return myPrim; }
    void setPrim(bool val) { myPrim = val; }
    bool opPrim(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getPrim();
        bool result;
        OP_Utils::evalOpParm(result, thissop, "prim", cookparms.getCookTime(), 0);
        return result;
    }
    bool getOnlyconnected() const { return myOnlyconnected; }
    void setOnlyconnected(bool val) { myOnlyconnected = val; }
    bool opOnlyconnected(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getOnlyconnected();
        bool result;
        OP_Utils::evalOpParm(result, thissop, "onlyconnected", cookparms.getCookTime(), 0);
        return result;
    }

private:
    UT_StringHolder myGroup;
    bool myBlend;
    fpreal64 myTolerance;
    fpreal64 myBias;
    bool myKnotmult;
    bool myProximity;
    int64 myDir;
    int64 myJoinop;
    int64 myInc;
    bool myLoop;
    bool myPrim;
    bool myOnlyconnected;

};
