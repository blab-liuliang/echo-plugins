/* Automagically Generated by generate_proto.py
 * Do not Edit
 */
#pragma once

#include <SOP/SOP_NodeVerb.h>
#include <OP/OP_Utils.h>
#include <PRM/PRM_Parm.h>
#include <UT/UT_IStream.h>
#include <UT/UT_NTStreamUtil.h>
#include <UT/UT_Ramp.h>
#include <UT/UT_SharedPtr.h>
#include <UT/UT_StringHolder.h>
#include <UT/UT_StringStream.h>
#include <UT/UT_VectorTypes.h>
#include <SYS/SYS_Types.h>

using namespace UT::Literal;

class DEP_MicroNode;
namespace SOP_NameEnums
{
    enum class Class
    {
        PRIMITIVE = 0,
        POINT
    };
}


class SOP_API SOP_NameParms  : public SOP_NodeParms
{
public:
    static int version() { return 1; }
    struct Numnames
    {
        UT_StringHolder group;
        UT_StringHolder name;


        Numnames()
        {
            group = ""_sh;
            name = ""_sh;

        }

        bool operator==(const Numnames &src) const
        {
            if (group != src.group) return false;
            if (name != src.name) return false;

            return true;
        }
        bool operator!=(const Numnames &src) const
        {
            return !operator==(src);
        }

    };

    UT_StringHolder createString(const UT_Array<Numnames> &list) const
    {
        UT_WorkBuffer   buf;

        buf.strcat("[ ");
        for (int i = 0; i < list.entries(); i++)
        {
            if (i)
                buf.strcat(", ");
            buf.strcat("( ");
            buf.append("");
            { UT_String tmp; tmp = UT_StringWrap(list(i).group).makeQuotedString('"'); buf.strcat(tmp); }
            buf.append(", ");
            { UT_String tmp; tmp = UT_StringWrap(list(i).name).makeQuotedString('"'); buf.strcat(tmp); }

            buf.strcat(" )");
        }
        buf.strcat(" ]");

        UT_StringHolder result = buf;
        return result;
    }
    struct Numrenames
    {
        bool enable;
        bool global;
        UT_StringHolder from;
        UT_StringHolder to;


        Numrenames()
        {
            enable = false;
            global = false;
            from = ""_sh;
            to = ""_sh;

        }

        bool operator==(const Numrenames &src) const
        {
            if (enable != src.enable) return false;
            if (global != src.global) return false;
            if (from != src.from) return false;
            if (to != src.to) return false;

            return true;
        }
        bool operator!=(const Numrenames &src) const
        {
            return !operator==(src);
        }

    };

    UT_StringHolder createString(const UT_Array<Numrenames> &list) const
    {
        UT_WorkBuffer   buf;

        buf.strcat("[ ");
        for (int i = 0; i < list.entries(); i++)
        {
            if (i)
                buf.strcat(", ");
            buf.strcat("( ");
            buf.append("");
            buf.appendSprintf("%s", (list(i).enable) ? "true" : "false");
            buf.append(", ");
            buf.appendSprintf("%s", (list(i).global) ? "true" : "false");
            buf.append(", ");
            { UT_String tmp; tmp = UT_StringWrap(list(i).from).makeQuotedString('"'); buf.strcat(tmp); }
            buf.append(", ");
            { UT_String tmp; tmp = UT_StringWrap(list(i).to).makeQuotedString('"'); buf.strcat(tmp); }

            buf.strcat(" )");
        }
        buf.strcat(" ]");

        UT_StringHolder result = buf;
        return result;
    }

    SOP_NameParms()
    {
        myAttribname = "name"_sh;
        myClass = 0;
        myDonamefromgroup = false;
        myNamefromgroupmask = "piece*"_sh;

    }

    explicit SOP_NameParms(const SOP_NameParms &) = default;

    virtual ~SOP_NameParms() {}

    bool operator==(const SOP_NameParms &src) const
    {
        if (myAttribname != src.myAttribname) return false;
        if (myClass != src.myClass) return false;
        if (myDonamefromgroup != src.myDonamefromgroup) return false;
        if (myNamefromgroupmask != src.myNamefromgroupmask) return false;
        if (myNumnames != src.myNumnames) return false;
        if (myNumrenames != src.myNumrenames) return false;

        return true;
    }
    bool operator!=(const SOP_NameParms &src) const
    {
        return !operator==(src);
    }
    using Class = SOP_NameEnums::Class;



    void        buildFromOp(const OP_Node *node, fpreal time, DEP_MicroNode *depnode)
    {
        if (true)
            OP_Utils::evalOpParm(myAttribname, node, "attribname", time, 0);
        else myAttribname = "name"_sh;
        if (true)
            OP_Utils::evalOpParm(myClass, node, "class", time, 0);
        else myClass = 0;
        if (true)
            OP_Utils::evalOpParm(myDonamefromgroup, node, "donamefromgroup", time, 0);
        else myDonamefromgroup = false;
        if (true && ( (!(((getDonamefromgroup()==0)))) ) )
            OP_Utils::evalOpParm(myNamefromgroupmask, node, "namefromgroupmask", time, 0);
        else myNamefromgroupmask = "piece*"_sh;
            if (true)
            {
                int64   length;
                OP_Utils::evalOpParm(length, node, "numnames", time, 0);
                myNumnames.entries(length);
                for (exint i = 0; i < length; i++)
                {
                    int     parmidx = i+1;
                    auto && _curentry = myNumnames(i);
                    (void) _curentry;
                    if (true)
                        OP_Utils::evalOpParmInst(myNumnames(i).group, node, "group#", &parmidx, time, 0);
                    else myNumnames(i).group = ""_sh;
                    if (true)
                        OP_Utils::evalOpParmInst(myNumnames(i).name, node, "name#", &parmidx, time, 0);
                    else myNumnames(i).name = ""_sh;

                }
            }
            else
                myNumnames.clear();
            if (true)
            {
                int64   length;
                OP_Utils::evalOpParm(length, node, "numrenames", time, 0);
                myNumrenames.entries(length);
                for (exint i = 0; i < length; i++)
                {
                    int     parmidx = i+1;
                    auto && _curentry = myNumrenames(i);
                    (void) _curentry;
                    if (true)
                        OP_Utils::evalOpParmInst(myNumrenames(i).enable, node, "enable#", &parmidx, time, 0);
                    else myNumrenames(i).enable = false;
                    if (true && ( (!(((_curentry.enable==0)))) ) )
                        OP_Utils::evalOpParmInst(myNumrenames(i).global, node, "global#", &parmidx, time, 0);
                    else myNumrenames(i).global = false;
                    if (true && ( (!(((_curentry.enable==0)))) ) )
                        OP_Utils::evalOpParmInst(myNumrenames(i).from, node, "from#", &parmidx, time, 0);
                    else myNumrenames(i).from = ""_sh;
                    if (true && ( (!(((_curentry.enable==0)))) ) )
                        OP_Utils::evalOpParmInst(myNumrenames(i).to, node, "to#", &parmidx, time, 0);
                    else myNumrenames(i).to = ""_sh;

                }
            }
            else
                myNumrenames.clear();

    }


    virtual void loadFromOpSubclass(const LoadParms &loadparms)
    {
        buildFromOp(loadparms.node(), loadparms.context().getTime(), loadparms.depnode());
    }


    virtual void copyFrom(const SOP_NodeParms *src)
    {
        *this = *((const SOP_NameParms *)src);
    }

    template <typename T>
    void
    doGetParmValue(exint idx, T &value) const
    {
        switch (idx)
        {
            case 0:
                coerceValue(value, myAttribname);
                break;
            case 1:
                coerceValue(value, myClass);
                break;
            case 2:
                coerceValue(value, myDonamefromgroup);
                break;
            case 3:
                coerceValue(value, myNamefromgroupmask);
                break;

        }
    }

    void        getParmValue(exint idx, exint &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, fpreal &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Vector2D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Vector3D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Vector4D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Matrix2D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Matrix3D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Matrix4D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_StringHolder &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_SharedPtr<UT_Ramp> &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, PRM_DataItemHandle &value) const
    { doGetParmValue(idx, value); }

    template <typename T>
    void
    doSetParmValue(exint idx, const T &value) 
    {
        switch (idx)
        {
            case 0:
                coerceValue(myAttribname, value);
                break;
            case 1:
                coerceValue(myClass, value);
                break;
            case 2:
                coerceValue(myDonamefromgroup, value);
                break;
            case 3:
                coerceValue(myNamefromgroupmask, value);
                break;

        }
    }

    void        setParmValue(exint idx, const exint &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const fpreal &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Vector2D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Vector3D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Vector4D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Matrix2D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Matrix3D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Matrix4D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_StringHolder &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_SharedPtr<UT_Ramp> &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const PRM_DataItemHandle &value) 
    { doSetParmValue(idx, value); }

    virtual exint    getNumParms() const
    {
        return 6;
    }

    virtual const char *getParmName(exint fieldnum) const
    {
        switch (fieldnum)
        {
            case 0:
                return "attribname";
            case 1:
                return "class";
            case 2:
                return "donamefromgroup";
            case 3:
                return "namefromgroupmask";
                case 4:
                    return "numnames";
                case 5:
                    return "numrenames";

        }
        return 0;
    }

    virtual ParmType getParmType(exint fieldnum) const
    {
        switch (fieldnum)
        {
                case 0:
                    return PARM_STRING;
                case 1:
                    return PARM_INTEGER;
                case 2:
                    return PARM_INTEGER;
                case 3:
                    return PARM_STRING;

        }
        return PARM_UNSUPPORTED;
    }

    // Boiler plate to load individual types.
    static void  loadData(UT_IStream &is, int64 &v)
    { is.bread(&v, 1); }
    static void  loadData(UT_IStream &is, bool &v)
    { int64     iv; is.bread(&iv, 1); v = iv; }
    static void  loadData(UT_IStream &is, fpreal64 &v)
    { is.bread<fpreal64>(&v, 1); }
    static void  loadData(UT_IStream &is, UT_Vector2D &v)
    { is.bread<fpreal64>(&v.x(), 1); is.bread<fpreal64>(&v.y(), 1); }
    static void  loadData(UT_IStream &is, UT_Vector3D &v)
    { is.bread<fpreal64>(&v.x(), 1); is.bread<fpreal64>(&v.y(), 1);
      is.bread<fpreal64>(&v.z(), 1); }
    static void  loadData(UT_IStream &is, UT_Vector4D &v)
    { is.bread<fpreal64>(&v.x(), 1); is.bread<fpreal64>(&v.y(), 1);
      is.bread<fpreal64>(&v.z(), 1); is.bread<fpreal64>(&v.w(), 1); }
    static void  loadData(UT_IStream &is, UT_Matrix2D &v)
    { for (int r = 0; r < 2; r++) for (int c = 0; c < 2; c++) is.bread<fpreal64>(&v(r, c), 1); }
    static void  loadData(UT_IStream &is, UT_Matrix3D &v)
    { for (int r = 0; r < 3; r++) for (int c = 0; c < 3; c++) is.bread<fpreal64>(&v(r, c), 1); }
    static void  loadData(UT_IStream &is, UT_Matrix4D &v)
    { for (int r = 0; r < 4; r++) for (int c = 0; c < 4; c++) is.bread<fpreal64>(&v(r, c), 1); }
    static void  loadData(UT_IStream &is, UT_Vector2I &v)
    { is.bread<int64>(&v.x(), 1); is.bread<int64>(&v.y(), 1); }
    static void  loadData(UT_IStream &is, UT_Vector3I &v)
    { is.bread<int64>(&v.x(), 1); is.bread<int64>(&v.y(), 1);
      is.bread<int64>(&v.z(), 1); }
    static void  loadData(UT_IStream &is, UT_Vector4I &v)
    { is.bread<int64>(&v.x(), 1); is.bread<int64>(&v.y(), 1);
      is.bread<int64>(&v.z(), 1); is.bread<int64>(&v.w(), 1); }
    static void  loadData(UT_IStream &is, UT_StringHolder &v)
    { is.bread(v); }
    static void  loadData(UT_IStream &is, UT_SharedPtr<UT_Ramp> &v)
    {   UT_StringHolder   rampdata;
        loadData(is, rampdata);
        if (rampdata.isstring())
        {
            v.reset(new UT_Ramp());
            UT_IStream  istr((const char *) rampdata, rampdata.length(), UT_ISTREAM_ASCII);
            v->load(istr);
        }
        else v.reset();
    }
    static void  loadData(UT_IStream &is, PRM_DataItemHandle &v)
    {   UT_StringHolder   data;
        loadData(is, data);
        if (data.isstring())
        {
            // Find the data type.
            char *colon = UT_StringWrap(data).findChar(':');
            if (colon)
            {
                int             typelen = colon - data.buffer();
                UT_WorkBuffer   type;
                type.strncpy(data.buffer(), typelen);
                UT_IStream  istr(((const char *) data) + typelen + 1, data.length() - (typelen + 1), UT_ISTREAM_BINARY);
                
                v = PRM_DataFactory::parseBinary(type.buffer(), istr);
            }
        }
        else v.reset();
    }

    static void  saveData(std::ostream &os, int64 v)
    { UTwrite(os, &v); }
    static void  saveData(std::ostream &os, bool v)
    { int64 iv = v; UTwrite(os, &iv); }
    static void  saveData(std::ostream &os, fpreal64 v)
    { UTwrite<fpreal64>(os, &v); }
    static void  saveData(std::ostream &os, UT_Vector2D v)
    { UTwrite<fpreal64>(os, &v.x()); UTwrite<fpreal64>(os, &v.y()); }
    static void  saveData(std::ostream &os, UT_Vector3D v)
    { UTwrite<fpreal64>(os, &v.x()); UTwrite<fpreal64>(os, &v.y());
      UTwrite<fpreal64>(os, &v.z()); }
    static void  saveData(std::ostream &os, UT_Vector4D v)
    { UTwrite<fpreal64>(os, &v.x()); UTwrite<fpreal64>(os, &v.y());
      UTwrite<fpreal64>(os, &v.z()); UTwrite<fpreal64>(os, &v.w()); }
    static void  saveData(std::ostream &os, UT_Matrix2D v)
    { for (int r = 0; r < 2; r++) for (int c = 0; c < 2; c++) UTwrite<fpreal64>(os, &v(r, c)); }
    static void  saveData(std::ostream &os, UT_Matrix3D v)
    { for (int r = 0; r < 3; r++) for (int c = 0; c < 3; c++) UTwrite<fpreal64>(os, &v(r, c)); }
    static void  saveData(std::ostream &os, UT_Matrix4D v)
    { for (int r = 0; r < 4; r++) for (int c = 0; c < 4; c++) UTwrite<fpreal64>(os, &v(r, c)); }
    static void  saveData(std::ostream &os, UT_StringHolder s)
    { UT_StringWrap(s).saveBinary(os); }
    static void  saveData(std::ostream &os, UT_SharedPtr<UT_Ramp> s)
    {   UT_StringHolder         result;
        UT_OStringStream        ostr;
        if (s) s->save(ostr);
        result = ostr.str();
        saveData(os, result);
    }
    static void  saveData(std::ostream &os, PRM_DataItemHandle s)
    {   UT_StringHolder         result;
        UT_OStringStream        ostr;
        if (s) 
        {
            ostr << s->getDataTypeToken();
            ostr << ":";
            s->saveBinary(ostr);
        }
        result = ostr.str();
        saveData(os, result);
    }


    void         save(std::ostream &os) const
    {
        int32           v = version();
        UTwrite(os, &v);
        saveData(os, myAttribname);
        saveData(os, myClass);
        saveData(os, myDonamefromgroup);
        saveData(os, myNamefromgroupmask);
        {
            int64   length = myNumnames.entries();
            UTwrite(os, &length);
            for (exint i = 0; i < length; i++)
            {
                saveData(os, myNumnames(i).group);
                saveData(os, myNumnames(i).name);

            }
        }
        {
            int64   length = myNumrenames.entries();
            UTwrite(os, &length);
            for (exint i = 0; i < length; i++)
            {
                saveData(os, myNumrenames(i).enable);
                saveData(os, myNumrenames(i).global);
                saveData(os, myNumrenames(i).from);
                saveData(os, myNumrenames(i).to);

            }
        }

    }

    bool         load(UT_IStream &is)
    {
        int32           v;
        is.bread(&v, 1);
        if (version() != v)
        {
            // Fail incompatible versions
            return false;
        }
        loadData(is, myAttribname);
        loadData(is, myClass);
        loadData(is, myDonamefromgroup);
        loadData(is, myNamefromgroupmask);
        {
            int64   length;
            is.read(&length, 1);
            myNumnames.entries(length);
            for (exint i = 0; i < length; i++)
            {
                loadData(is, myNumnames(i).group);
                loadData(is, myNumnames(i).name);

            }
        }
        {
            int64   length;
            is.read(&length, 1);
            myNumrenames.entries(length);
            for (exint i = 0; i < length; i++)
            {
                loadData(is, myNumrenames(i).enable);
                loadData(is, myNumrenames(i).global);
                loadData(is, myNumrenames(i).from);
                loadData(is, myNumrenames(i).to);

            }
        }

        return true;
    }

    const UT_StringHolder & getAttribname() const { return myAttribname; }
    void setAttribname(const UT_StringHolder & val) { myAttribname = val; }
    UT_StringHolder opAttribname(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getAttribname();
        UT_StringHolder result;
        OP_Utils::evalOpParm(result, thissop, "attribname", cookparms.getCookTime(), 0);
        return result;
    }
    Class getClass() const { return Class(myClass); }
    void setClass(Class val) { myClass = int64(val); }
    Class opClass(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getClass();
        int64 result;
        OP_Utils::evalOpParm(result, thissop, "class", cookparms.getCookTime(), 0);
        return Class(result);
    }
    bool getDonamefromgroup() const { return myDonamefromgroup; }
    void setDonamefromgroup(bool val) { myDonamefromgroup = val; }
    bool opDonamefromgroup(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getDonamefromgroup();
        bool result;
        OP_Utils::evalOpParm(result, thissop, "donamefromgroup", cookparms.getCookTime(), 0);
        return result;
    }
    const UT_StringHolder & getNamefromgroupmask() const { return myNamefromgroupmask; }
    void setNamefromgroupmask(const UT_StringHolder & val) { myNamefromgroupmask = val; }
    UT_StringHolder opNamefromgroupmask(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getNamefromgroupmask();
        UT_StringHolder result;
        OP_Utils::evalOpParm(result, thissop, "namefromgroupmask", cookparms.getCookTime(), 0);
        return result;
    }
    const UT_Array<Numnames> &getNumnames() const { return myNumnames; }
    void setNumnames(const UT_Array<Numnames> &val) { myNumnames = val; }
    exint opNumnames(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getNumnames().entries();
        exint result;
        OP_Utils::evalOpParm(result, thissop, "numnames", cookparms.getCookTime(), 0);
        return result;
    }
            UT_StringHolder opNumnames_group(const SOP_NodeVerb::CookParms &cookparms, exint _idx) const
        {
            SOP_Node *thissop = cookparms.getNode();
            if (!thissop) return (myNumnames(_idx).group);
            int _parmidx = _idx + 1;
            UT_StringHolder result;
            OP_Utils::evalOpParmInst(result, thissop, "group#", &_parmidx, cookparms.getCookTime(), 0);
            return (result);
        }
        UT_StringHolder opNumnames_name(const SOP_NodeVerb::CookParms &cookparms, exint _idx) const
        {
            SOP_Node *thissop = cookparms.getNode();
            if (!thissop) return (myNumnames(_idx).name);
            int _parmidx = _idx + 1;
            UT_StringHolder result;
            OP_Utils::evalOpParmInst(result, thissop, "name#", &_parmidx, cookparms.getCookTime(), 0);
            return (result);
        }

    const UT_Array<Numrenames> &getNumrenames() const { return myNumrenames; }
    void setNumrenames(const UT_Array<Numrenames> &val) { myNumrenames = val; }
    exint opNumrenames(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getNumrenames().entries();
        exint result;
        OP_Utils::evalOpParm(result, thissop, "numrenames", cookparms.getCookTime(), 0);
        return result;
    }
            bool opNumrenames_enable(const SOP_NodeVerb::CookParms &cookparms, exint _idx) const
        {
            SOP_Node *thissop = cookparms.getNode();
            if (!thissop) return (myNumrenames(_idx).enable);
            int _parmidx = _idx + 1;
            bool result;
            OP_Utils::evalOpParmInst(result, thissop, "enable#", &_parmidx, cookparms.getCookTime(), 0);
            return (result);
        }
        bool opNumrenames_global(const SOP_NodeVerb::CookParms &cookparms, exint _idx) const
        {
            SOP_Node *thissop = cookparms.getNode();
            if (!thissop) return (myNumrenames(_idx).global);
            int _parmidx = _idx + 1;
            bool result;
            OP_Utils::evalOpParmInst(result, thissop, "global#", &_parmidx, cookparms.getCookTime(), 0);
            return (result);
        }
        UT_StringHolder opNumrenames_from(const SOP_NodeVerb::CookParms &cookparms, exint _idx) const
        {
            SOP_Node *thissop = cookparms.getNode();
            if (!thissop) return (myNumrenames(_idx).from);
            int _parmidx = _idx + 1;
            UT_StringHolder result;
            OP_Utils::evalOpParmInst(result, thissop, "from#", &_parmidx, cookparms.getCookTime(), 0);
            return (result);
        }
        UT_StringHolder opNumrenames_to(const SOP_NodeVerb::CookParms &cookparms, exint _idx) const
        {
            SOP_Node *thissop = cookparms.getNode();
            if (!thissop) return (myNumrenames(_idx).to);
            int _parmidx = _idx + 1;
            UT_StringHolder result;
            OP_Utils::evalOpParmInst(result, thissop, "to#", &_parmidx, cookparms.getCookTime(), 0);
            return (result);
        }


private:
    UT_StringHolder myAttribname;
    int64 myClass;
    bool myDonamefromgroup;
    UT_StringHolder myNamefromgroupmask;
    UT_Array<Numnames> myNumnames;
    UT_Array<Numrenames> myNumrenames;

};
