/* Automagically Generated by generate_proto.py
 * Do not Edit
 */
#pragma once

#include <SOP/SOP_NodeVerb.h>
#include <OP/OP_Utils.h>
#include <PRM/PRM_Parm.h>
#include <UT/UT_IStream.h>
#include <UT/UT_NTStreamUtil.h>
#include <UT/UT_Ramp.h>
#include <UT/UT_SharedPtr.h>
#include <UT/UT_StringHolder.h>
#include <UT/UT_StringStream.h>
#include <UT/UT_VectorTypes.h>
#include <SYS/SYS_Types.h>

using namespace UT::Literal;

class DEP_MicroNode;
namespace SOP_TransformEnums
{
    enum class Grouptype
    {
        GUESS = 0,
        BREAKPOINTS,
        EDGES,
        POINTS,
        PRIMS
    };
    enum class Xord
    {
        SRT = 0,
        STR,
        RST,
        RTS,
        TSR,
        TRS
    };
    enum class Rord
    {
        XYZ = 0,
        XZY,
        YXZ,
        YZX,
        ZXY,
        ZYX
    };
    enum class Prexform_xord
    {
        SRT = 0,
        STR,
        RST,
        RTS,
        TSR,
        TRS
    };
    enum class Prexform_rord
    {
        XYZ = 0,
        XZY,
        YXZ,
        YZX,
        ZXY,
        ZYX
    };
    enum class Outputmerge
    {
        REPLACE = 0,
        PRE,
        POST
    };
}


class SOP_API SOP_TransformParms  : public SOP_NodeParms
{
public:
    static int version() { return 1; }

    SOP_TransformParms()
    {
        myGroup = ""_sh;
        myGrouptype = 0;
        myXord = 0;
        myRord = 0;
        myT = UT_Vector3D(0,0,0);
        myR = UT_Vector3D(0,0,0);
        myS = UT_Vector3D(1,1,1);
        myShear = UT_Vector3D(0,0,0);
        myScale = 1;
        myP = UT_Vector3D(0,0,0);
        myPr = UT_Vector3D(0,0,0);
        myPrexform_xord = 0;
        myPrexform_rord = 0;
        myPrexform_t = UT_Vector3D(0,0,0);
        myPrexform_r = UT_Vector3D(0,0,0);
        myPrexform_s = UT_Vector3D(1,1,1);
        myPrexform_shear = UT_Vector3D(0,0,0);
        myAttribs = "*"_sh;
        myUpdatenmls = false;
        myUpdateaffectednmls = true;
        myVlength = true;
        myInvertxform = false;
        myAddattrib = false;
        myOutputattrib = "xform"_sh;
        myOutputmerge = 2;

    }

    explicit SOP_TransformParms(const SOP_TransformParms &) = default;

    virtual ~SOP_TransformParms() {}

    bool operator==(const SOP_TransformParms &src) const
    {
        if (myGroup != src.myGroup) return false;
        if (myGrouptype != src.myGrouptype) return false;
        if (myXord != src.myXord) return false;
        if (myRord != src.myRord) return false;
        if (myT != src.myT) return false;
        if (myR != src.myR) return false;
        if (myS != src.myS) return false;
        if (myShear != src.myShear) return false;
        if (myScale != src.myScale) return false;
        if (myP != src.myP) return false;
        if (myPr != src.myPr) return false;
        if (myPrexform_xord != src.myPrexform_xord) return false;
        if (myPrexform_rord != src.myPrexform_rord) return false;
        if (myPrexform_t != src.myPrexform_t) return false;
        if (myPrexform_r != src.myPrexform_r) return false;
        if (myPrexform_s != src.myPrexform_s) return false;
        if (myPrexform_shear != src.myPrexform_shear) return false;
        if (myAttribs != src.myAttribs) return false;
        if (myUpdatenmls != src.myUpdatenmls) return false;
        if (myUpdateaffectednmls != src.myUpdateaffectednmls) return false;
        if (myVlength != src.myVlength) return false;
        if (myInvertxform != src.myInvertxform) return false;
        if (myAddattrib != src.myAddattrib) return false;
        if (myOutputattrib != src.myOutputattrib) return false;
        if (myOutputmerge != src.myOutputmerge) return false;

        return true;
    }
    bool operator!=(const SOP_TransformParms &src) const
    {
        return !operator==(src);
    }
    using Grouptype = SOP_TransformEnums::Grouptype;
    using Xord = SOP_TransformEnums::Xord;
    using Rord = SOP_TransformEnums::Rord;
    using Prexform_xord = SOP_TransformEnums::Prexform_xord;
    using Prexform_rord = SOP_TransformEnums::Prexform_rord;
    using Outputmerge = SOP_TransformEnums::Outputmerge;



    void        buildFromOp(const OP_Node *node, fpreal time, DEP_MicroNode *depnode)
    {
        if (true)
            OP_Utils::evalOpParm(myGroup, node, "group", time, 0);
        else myGroup = ""_sh;
        if (true)
            OP_Utils::evalOpParm(myGrouptype, node, "grouptype", time, 0);
        else myGrouptype = 0;
        if (true)
            OP_Utils::evalOpParm(myXord, node, "xOrd", time, 0);
        else myXord = 0;
        if (true)
            OP_Utils::evalOpParm(myRord, node, "rOrd", time, 0);
        else myRord = 0;
        if (true)
            OP_Utils::evalOpParm(myT, node, "t", time, 0);
        else myT = UT_Vector3D(0,0,0);
        if (true)
            OP_Utils::evalOpParm(myR, node, "r", time, 0);
        else myR = UT_Vector3D(0,0,0);
        if (true)
            OP_Utils::evalOpParm(myS, node, "s", time, 0);
        else myS = UT_Vector3D(1,1,1);
        if (true)
            OP_Utils::evalOpParm(myShear, node, "shear", time, 0);
        else myShear = UT_Vector3D(0,0,0);
        if (true)
            OP_Utils::evalOpParm(myScale, node, "scale", time, 0);
        else myScale = 1;
        if (true)
            OP_Utils::evalOpParm(myP, node, "p", time, 0);
        else myP = UT_Vector3D(0,0,0);
        if (true)
            OP_Utils::evalOpParm(myPr, node, "pr", time, 0);
        else myPr = UT_Vector3D(0,0,0);
        if (true)
            OP_Utils::evalOpParm(myPrexform_xord, node, "prexform_xOrd", time, 0);
        else myPrexform_xord = 0;
        if (true)
            OP_Utils::evalOpParm(myPrexform_rord, node, "prexform_rOrd", time, 0);
        else myPrexform_rord = 0;
        if (true)
            OP_Utils::evalOpParm(myPrexform_t, node, "prexform_t", time, 0);
        else myPrexform_t = UT_Vector3D(0,0,0);
        if (true)
            OP_Utils::evalOpParm(myPrexform_r, node, "prexform_r", time, 0);
        else myPrexform_r = UT_Vector3D(0,0,0);
        if (true)
            OP_Utils::evalOpParm(myPrexform_s, node, "prexform_s", time, 0);
        else myPrexform_s = UT_Vector3D(1,1,1);
        if (true)
            OP_Utils::evalOpParm(myPrexform_shear, node, "prexform_shear", time, 0);
        else myPrexform_shear = UT_Vector3D(0,0,0);
        if (true)
            OP_Utils::evalOpParm(myAttribs, node, "attribs", time, 0);
        else myAttribs = "*"_sh;
        if (true)
            OP_Utils::evalOpParm(myUpdatenmls, node, "updatenmls", time, 0);
        else myUpdatenmls = false;
        if (true && ( (!(((getUpdatenmls()==1)))) ) )
            OP_Utils::evalOpParm(myUpdateaffectednmls, node, "updateaffectednmls", time, 0);
        else myUpdateaffectednmls = true;
        if (true && ( (!(((getUpdatenmls()==1)))) ) )
            OP_Utils::evalOpParm(myVlength, node, "vlength", time, 0);
        else myVlength = true;
        if (true)
            OP_Utils::evalOpParm(myInvertxform, node, "invertxform", time, 0);
        else myInvertxform = false;
        if (true)
            OP_Utils::evalOpParm(myAddattrib, node, "addattrib", time, 0);
        else myAddattrib = false;
        if (true && ( (!(((getAddattrib()==0)))) ) )
            OP_Utils::evalOpParm(myOutputattrib, node, "outputattrib", time, 0);
        else myOutputattrib = "xform"_sh;
        if (true && ( (!(((getAddattrib()==0)))) ) )
            OP_Utils::evalOpParm(myOutputmerge, node, "outputmerge", time, 0);
        else myOutputmerge = 2;

    }


    virtual void loadFromOpSubclass(const LoadParms &loadparms)
    {
        buildFromOp(loadparms.node(), loadparms.context().getTime(), loadparms.depnode());
    }


    virtual void copyFrom(const SOP_NodeParms *src)
    {
        *this = *((const SOP_TransformParms *)src);
    }

    template <typename T>
    void
    doGetParmValue(exint idx, T &value) const
    {
        switch (idx)
        {
            case 0:
                coerceValue(value, myGroup);
                break;
            case 1:
                coerceValue(value, myGrouptype);
                break;
            case 2:
                coerceValue(value, myXord);
                break;
            case 3:
                coerceValue(value, myRord);
                break;
            case 4:
                coerceValue(value, myT);
                break;
            case 5:
                coerceValue(value, myR);
                break;
            case 6:
                coerceValue(value, myS);
                break;
            case 7:
                coerceValue(value, myShear);
                break;
            case 8:
                coerceValue(value, myScale);
                break;
            case 9:
                coerceValue(value, myP);
                break;
            case 10:
                coerceValue(value, myPr);
                break;
            case 11:
                coerceValue(value, myPrexform_xord);
                break;
            case 12:
                coerceValue(value, myPrexform_rord);
                break;
            case 13:
                coerceValue(value, myPrexform_t);
                break;
            case 14:
                coerceValue(value, myPrexform_r);
                break;
            case 15:
                coerceValue(value, myPrexform_s);
                break;
            case 16:
                coerceValue(value, myPrexform_shear);
                break;
            case 17:
                coerceValue(value, myAttribs);
                break;
            case 18:
                coerceValue(value, myUpdatenmls);
                break;
            case 19:
                coerceValue(value, myUpdateaffectednmls);
                break;
            case 20:
                coerceValue(value, myVlength);
                break;
            case 21:
                coerceValue(value, myInvertxform);
                break;
            case 22:
                coerceValue(value, myAddattrib);
                break;
            case 23:
                coerceValue(value, myOutputattrib);
                break;
            case 24:
                coerceValue(value, myOutputmerge);
                break;

        }
    }

    void        getParmValue(exint idx, exint &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, fpreal &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Vector2D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Vector3D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Vector4D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Matrix2D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Matrix3D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Matrix4D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_StringHolder &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_SharedPtr<UT_Ramp> &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, PRM_DataItemHandle &value) const
    { doGetParmValue(idx, value); }

    template <typename T>
    void
    doSetParmValue(exint idx, const T &value) 
    {
        switch (idx)
        {
            case 0:
                coerceValue(myGroup, value);
                break;
            case 1:
                coerceValue(myGrouptype, value);
                break;
            case 2:
                coerceValue(myXord, value);
                break;
            case 3:
                coerceValue(myRord, value);
                break;
            case 4:
                coerceValue(myT, value);
                break;
            case 5:
                coerceValue(myR, value);
                break;
            case 6:
                coerceValue(myS, value);
                break;
            case 7:
                coerceValue(myShear, value);
                break;
            case 8:
                coerceValue(myScale, value);
                break;
            case 9:
                coerceValue(myP, value);
                break;
            case 10:
                coerceValue(myPr, value);
                break;
            case 11:
                coerceValue(myPrexform_xord, value);
                break;
            case 12:
                coerceValue(myPrexform_rord, value);
                break;
            case 13:
                coerceValue(myPrexform_t, value);
                break;
            case 14:
                coerceValue(myPrexform_r, value);
                break;
            case 15:
                coerceValue(myPrexform_s, value);
                break;
            case 16:
                coerceValue(myPrexform_shear, value);
                break;
            case 17:
                coerceValue(myAttribs, value);
                break;
            case 18:
                coerceValue(myUpdatenmls, value);
                break;
            case 19:
                coerceValue(myUpdateaffectednmls, value);
                break;
            case 20:
                coerceValue(myVlength, value);
                break;
            case 21:
                coerceValue(myInvertxform, value);
                break;
            case 22:
                coerceValue(myAddattrib, value);
                break;
            case 23:
                coerceValue(myOutputattrib, value);
                break;
            case 24:
                coerceValue(myOutputmerge, value);
                break;

        }
    }

    void        setParmValue(exint idx, const exint &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const fpreal &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Vector2D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Vector3D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Vector4D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Matrix2D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Matrix3D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Matrix4D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_StringHolder &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_SharedPtr<UT_Ramp> &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const PRM_DataItemHandle &value) 
    { doSetParmValue(idx, value); }

    virtual exint    getNumParms() const
    {
        return 25;
    }

    virtual const char *getParmName(exint fieldnum) const
    {
        switch (fieldnum)
        {
            case 0:
                return "group";
            case 1:
                return "grouptype";
            case 2:
                return "xOrd";
            case 3:
                return "rOrd";
            case 4:
                return "t";
            case 5:
                return "r";
            case 6:
                return "s";
            case 7:
                return "shear";
            case 8:
                return "scale";
            case 9:
                return "p";
            case 10:
                return "pr";
            case 11:
                return "prexform_xOrd";
            case 12:
                return "prexform_rOrd";
            case 13:
                return "prexform_t";
            case 14:
                return "prexform_r";
            case 15:
                return "prexform_s";
            case 16:
                return "prexform_shear";
            case 17:
                return "attribs";
            case 18:
                return "updatenmls";
            case 19:
                return "updateaffectednmls";
            case 20:
                return "vlength";
            case 21:
                return "invertxform";
            case 22:
                return "addattrib";
            case 23:
                return "outputattrib";
            case 24:
                return "outputmerge";

        }
        return 0;
    }

    virtual ParmType getParmType(exint fieldnum) const
    {
        switch (fieldnum)
        {
                case 0:
                    return PARM_STRING;
                case 1:
                    return PARM_INTEGER;
                case 2:
                    return PARM_INTEGER;
                case 3:
                    return PARM_INTEGER;
                case 4:
                    return PARM_VECTOR3;
                case 5:
                    return PARM_VECTOR3;
                case 6:
                    return PARM_VECTOR3;
                case 7:
                    return PARM_VECTOR3;
                case 8:
                    return PARM_FLOAT;
                case 9:
                    return PARM_VECTOR3;
                case 10:
                    return PARM_VECTOR3;
                case 11:
                    return PARM_INTEGER;
                case 12:
                    return PARM_INTEGER;
                case 13:
                    return PARM_VECTOR3;
                case 14:
                    return PARM_VECTOR3;
                case 15:
                    return PARM_VECTOR3;
                case 16:
                    return PARM_VECTOR3;
                case 17:
                    return PARM_STRING;
                case 18:
                    return PARM_INTEGER;
                case 19:
                    return PARM_INTEGER;
                case 20:
                    return PARM_INTEGER;
                case 21:
                    return PARM_INTEGER;
                case 22:
                    return PARM_INTEGER;
                case 23:
                    return PARM_STRING;
                case 24:
                    return PARM_INTEGER;

        }
        return PARM_UNSUPPORTED;
    }

    // Boiler plate to load individual types.
    static void  loadData(UT_IStream &is, int64 &v)
    { is.bread(&v, 1); }
    static void  loadData(UT_IStream &is, bool &v)
    { int64     iv; is.bread(&iv, 1); v = iv; }
    static void  loadData(UT_IStream &is, fpreal64 &v)
    { is.bread<fpreal64>(&v, 1); }
    static void  loadData(UT_IStream &is, UT_Vector2D &v)
    { is.bread<fpreal64>(&v.x(), 1); is.bread<fpreal64>(&v.y(), 1); }
    static void  loadData(UT_IStream &is, UT_Vector3D &v)
    { is.bread<fpreal64>(&v.x(), 1); is.bread<fpreal64>(&v.y(), 1);
      is.bread<fpreal64>(&v.z(), 1); }
    static void  loadData(UT_IStream &is, UT_Vector4D &v)
    { is.bread<fpreal64>(&v.x(), 1); is.bread<fpreal64>(&v.y(), 1);
      is.bread<fpreal64>(&v.z(), 1); is.bread<fpreal64>(&v.w(), 1); }
    static void  loadData(UT_IStream &is, UT_Matrix2D &v)
    { for (int r = 0; r < 2; r++) for (int c = 0; c < 2; c++) is.bread<fpreal64>(&v(r, c), 1); }
    static void  loadData(UT_IStream &is, UT_Matrix3D &v)
    { for (int r = 0; r < 3; r++) for (int c = 0; c < 3; c++) is.bread<fpreal64>(&v(r, c), 1); }
    static void  loadData(UT_IStream &is, UT_Matrix4D &v)
    { for (int r = 0; r < 4; r++) for (int c = 0; c < 4; c++) is.bread<fpreal64>(&v(r, c), 1); }
    static void  loadData(UT_IStream &is, UT_Vector2I &v)
    { is.bread<int64>(&v.x(), 1); is.bread<int64>(&v.y(), 1); }
    static void  loadData(UT_IStream &is, UT_Vector3I &v)
    { is.bread<int64>(&v.x(), 1); is.bread<int64>(&v.y(), 1);
      is.bread<int64>(&v.z(), 1); }
    static void  loadData(UT_IStream &is, UT_Vector4I &v)
    { is.bread<int64>(&v.x(), 1); is.bread<int64>(&v.y(), 1);
      is.bread<int64>(&v.z(), 1); is.bread<int64>(&v.w(), 1); }
    static void  loadData(UT_IStream &is, UT_StringHolder &v)
    { is.bread(v); }
    static void  loadData(UT_IStream &is, UT_SharedPtr<UT_Ramp> &v)
    {   UT_StringHolder   rampdata;
        loadData(is, rampdata);
        if (rampdata.isstring())
        {
            v.reset(new UT_Ramp());
            UT_IStream  istr((const char *) rampdata, rampdata.length(), UT_ISTREAM_ASCII);
            v->load(istr);
        }
        else v.reset();
    }
    static void  loadData(UT_IStream &is, PRM_DataItemHandle &v)
    {   UT_StringHolder   data;
        loadData(is, data);
        if (data.isstring())
        {
            // Find the data type.
            char *colon = UT_StringWrap(data).findChar(':');
            if (colon)
            {
                int             typelen = colon - data.buffer();
                UT_WorkBuffer   type;
                type.strncpy(data.buffer(), typelen);
                UT_IStream  istr(((const char *) data) + typelen + 1, data.length() - (typelen + 1), UT_ISTREAM_BINARY);
                
                v = PRM_DataFactory::parseBinary(type.buffer(), istr);
            }
        }
        else v.reset();
    }

    static void  saveData(std::ostream &os, int64 v)
    { UTwrite(os, &v); }
    static void  saveData(std::ostream &os, bool v)
    { int64 iv = v; UTwrite(os, &iv); }
    static void  saveData(std::ostream &os, fpreal64 v)
    { UTwrite<fpreal64>(os, &v); }
    static void  saveData(std::ostream &os, UT_Vector2D v)
    { UTwrite<fpreal64>(os, &v.x()); UTwrite<fpreal64>(os, &v.y()); }
    static void  saveData(std::ostream &os, UT_Vector3D v)
    { UTwrite<fpreal64>(os, &v.x()); UTwrite<fpreal64>(os, &v.y());
      UTwrite<fpreal64>(os, &v.z()); }
    static void  saveData(std::ostream &os, UT_Vector4D v)
    { UTwrite<fpreal64>(os, &v.x()); UTwrite<fpreal64>(os, &v.y());
      UTwrite<fpreal64>(os, &v.z()); UTwrite<fpreal64>(os, &v.w()); }
    static void  saveData(std::ostream &os, UT_Matrix2D v)
    { for (int r = 0; r < 2; r++) for (int c = 0; c < 2; c++) UTwrite<fpreal64>(os, &v(r, c)); }
    static void  saveData(std::ostream &os, UT_Matrix3D v)
    { for (int r = 0; r < 3; r++) for (int c = 0; c < 3; c++) UTwrite<fpreal64>(os, &v(r, c)); }
    static void  saveData(std::ostream &os, UT_Matrix4D v)
    { for (int r = 0; r < 4; r++) for (int c = 0; c < 4; c++) UTwrite<fpreal64>(os, &v(r, c)); }
    static void  saveData(std::ostream &os, UT_StringHolder s)
    { UT_StringWrap(s).saveBinary(os); }
    static void  saveData(std::ostream &os, UT_SharedPtr<UT_Ramp> s)
    {   UT_StringHolder         result;
        UT_OStringStream        ostr;
        if (s) s->save(ostr);
        result = ostr.str();
        saveData(os, result);
    }
    static void  saveData(std::ostream &os, PRM_DataItemHandle s)
    {   UT_StringHolder         result;
        UT_OStringStream        ostr;
        if (s) 
        {
            ostr << s->getDataTypeToken();
            ostr << ":";
            s->saveBinary(ostr);
        }
        result = ostr.str();
        saveData(os, result);
    }


    void         save(std::ostream &os) const
    {
        int32           v = version();
        UTwrite(os, &v);
        saveData(os, myGroup);
        saveData(os, myGrouptype);
        saveData(os, myXord);
        saveData(os, myRord);
        saveData(os, myT);
        saveData(os, myR);
        saveData(os, myS);
        saveData(os, myShear);
        saveData(os, myScale);
        saveData(os, myP);
        saveData(os, myPr);
        saveData(os, myPrexform_xord);
        saveData(os, myPrexform_rord);
        saveData(os, myPrexform_t);
        saveData(os, myPrexform_r);
        saveData(os, myPrexform_s);
        saveData(os, myPrexform_shear);
        saveData(os, myAttribs);
        saveData(os, myUpdatenmls);
        saveData(os, myUpdateaffectednmls);
        saveData(os, myVlength);
        saveData(os, myInvertxform);
        saveData(os, myAddattrib);
        saveData(os, myOutputattrib);
        saveData(os, myOutputmerge);

    }

    bool         load(UT_IStream &is)
    {
        int32           v;
        is.bread(&v, 1);
        if (version() != v)
        {
            // Fail incompatible versions
            return false;
        }
        loadData(is, myGroup);
        loadData(is, myGrouptype);
        loadData(is, myXord);
        loadData(is, myRord);
        loadData(is, myT);
        loadData(is, myR);
        loadData(is, myS);
        loadData(is, myShear);
        loadData(is, myScale);
        loadData(is, myP);
        loadData(is, myPr);
        loadData(is, myPrexform_xord);
        loadData(is, myPrexform_rord);
        loadData(is, myPrexform_t);
        loadData(is, myPrexform_r);
        loadData(is, myPrexform_s);
        loadData(is, myPrexform_shear);
        loadData(is, myAttribs);
        loadData(is, myUpdatenmls);
        loadData(is, myUpdateaffectednmls);
        loadData(is, myVlength);
        loadData(is, myInvertxform);
        loadData(is, myAddattrib);
        loadData(is, myOutputattrib);
        loadData(is, myOutputmerge);

        return true;
    }

    const UT_StringHolder & getGroup() const { return myGroup; }
    void setGroup(const UT_StringHolder & val) { myGroup = val; }
    UT_StringHolder opGroup(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getGroup();
        UT_StringHolder result;
        OP_Utils::evalOpParm(result, thissop, "group", cookparms.getCookTime(), 0);
        return result;
    }
    Grouptype getGrouptype() const { return Grouptype(myGrouptype); }
    void setGrouptype(Grouptype val) { myGrouptype = int64(val); }
    Grouptype opGrouptype(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getGrouptype();
        int64 result;
        OP_Utils::evalOpParm(result, thissop, "grouptype", cookparms.getCookTime(), 0);
        return Grouptype(result);
    }
    Xord getXord() const { return Xord(myXord); }
    void setXord(Xord val) { myXord = int64(val); }
    Xord opXord(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getXord();
        int64 result;
        OP_Utils::evalOpParm(result, thissop, "xOrd", cookparms.getCookTime(), 0);
        return Xord(result);
    }
    Rord getRord() const { return Rord(myRord); }
    void setRord(Rord val) { myRord = int64(val); }
    Rord opRord(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getRord();
        int64 result;
        OP_Utils::evalOpParm(result, thissop, "rOrd", cookparms.getCookTime(), 0);
        return Rord(result);
    }
    UT_Vector3D getT() const { return myT; }
    void setT(UT_Vector3D val) { myT = val; }
    UT_Vector3D opT(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getT();
        UT_Vector3D result;
        OP_Utils::evalOpParm(result, thissop, "t", cookparms.getCookTime(), 0);
        return result;
    }
    UT_Vector3D getR() const { return myR; }
    void setR(UT_Vector3D val) { myR = val; }
    UT_Vector3D opR(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getR();
        UT_Vector3D result;
        OP_Utils::evalOpParm(result, thissop, "r", cookparms.getCookTime(), 0);
        return result;
    }
    UT_Vector3D getS() const { return myS; }
    void setS(UT_Vector3D val) { myS = val; }
    UT_Vector3D opS(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getS();
        UT_Vector3D result;
        OP_Utils::evalOpParm(result, thissop, "s", cookparms.getCookTime(), 0);
        return result;
    }
    UT_Vector3D getShear() const { return myShear; }
    void setShear(UT_Vector3D val) { myShear = val; }
    UT_Vector3D opShear(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getShear();
        UT_Vector3D result;
        OP_Utils::evalOpParm(result, thissop, "shear", cookparms.getCookTime(), 0);
        return result;
    }
    fpreal64 getScale() const { return myScale; }
    void setScale(fpreal64 val) { myScale = val; }
    fpreal64 opScale(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getScale();
        fpreal64 result;
        OP_Utils::evalOpParm(result, thissop, "scale", cookparms.getCookTime(), 0);
        return result;
    }
    UT_Vector3D getP() const { return myP; }
    void setP(UT_Vector3D val) { myP = val; }
    UT_Vector3D opP(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getP();
        UT_Vector3D result;
        OP_Utils::evalOpParm(result, thissop, "p", cookparms.getCookTime(), 0);
        return result;
    }
    UT_Vector3D getPr() const { return myPr; }
    void setPr(UT_Vector3D val) { myPr = val; }
    UT_Vector3D opPr(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getPr();
        UT_Vector3D result;
        OP_Utils::evalOpParm(result, thissop, "pr", cookparms.getCookTime(), 0);
        return result;
    }
    Prexform_xord getPrexform_xord() const { return Prexform_xord(myPrexform_xord); }
    void setPrexform_xord(Prexform_xord val) { myPrexform_xord = int64(val); }
    Prexform_xord opPrexform_xord(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getPrexform_xord();
        int64 result;
        OP_Utils::evalOpParm(result, thissop, "prexform_xOrd", cookparms.getCookTime(), 0);
        return Prexform_xord(result);
    }
    Prexform_rord getPrexform_rord() const { return Prexform_rord(myPrexform_rord); }
    void setPrexform_rord(Prexform_rord val) { myPrexform_rord = int64(val); }
    Prexform_rord opPrexform_rord(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getPrexform_rord();
        int64 result;
        OP_Utils::evalOpParm(result, thissop, "prexform_rOrd", cookparms.getCookTime(), 0);
        return Prexform_rord(result);
    }
    UT_Vector3D getPrexform_t() const { return myPrexform_t; }
    void setPrexform_t(UT_Vector3D val) { myPrexform_t = val; }
    UT_Vector3D opPrexform_t(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getPrexform_t();
        UT_Vector3D result;
        OP_Utils::evalOpParm(result, thissop, "prexform_t", cookparms.getCookTime(), 0);
        return result;
    }
    UT_Vector3D getPrexform_r() const { return myPrexform_r; }
    void setPrexform_r(UT_Vector3D val) { myPrexform_r = val; }
    UT_Vector3D opPrexform_r(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getPrexform_r();
        UT_Vector3D result;
        OP_Utils::evalOpParm(result, thissop, "prexform_r", cookparms.getCookTime(), 0);
        return result;
    }
    UT_Vector3D getPrexform_s() const { return myPrexform_s; }
    void setPrexform_s(UT_Vector3D val) { myPrexform_s = val; }
    UT_Vector3D opPrexform_s(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getPrexform_s();
        UT_Vector3D result;
        OP_Utils::evalOpParm(result, thissop, "prexform_s", cookparms.getCookTime(), 0);
        return result;
    }
    UT_Vector3D getPrexform_shear() const { return myPrexform_shear; }
    void setPrexform_shear(UT_Vector3D val) { myPrexform_shear = val; }
    UT_Vector3D opPrexform_shear(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getPrexform_shear();
        UT_Vector3D result;
        OP_Utils::evalOpParm(result, thissop, "prexform_shear", cookparms.getCookTime(), 0);
        return result;
    }
    const UT_StringHolder & getAttribs() const { return myAttribs; }
    void setAttribs(const UT_StringHolder & val) { myAttribs = val; }
    UT_StringHolder opAttribs(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getAttribs();
        UT_StringHolder result;
        OP_Utils::evalOpParm(result, thissop, "attribs", cookparms.getCookTime(), 0);
        return result;
    }
    bool getUpdatenmls() const { return myUpdatenmls; }
    void setUpdatenmls(bool val) { myUpdatenmls = val; }
    bool opUpdatenmls(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getUpdatenmls();
        bool result;
        OP_Utils::evalOpParm(result, thissop, "updatenmls", cookparms.getCookTime(), 0);
        return result;
    }
    bool getUpdateaffectednmls() const { return myUpdateaffectednmls; }
    void setUpdateaffectednmls(bool val) { myUpdateaffectednmls = val; }
    bool opUpdateaffectednmls(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getUpdateaffectednmls();
        bool result;
        OP_Utils::evalOpParm(result, thissop, "updateaffectednmls", cookparms.getCookTime(), 0);
        return result;
    }
    bool getVlength() const { return myVlength; }
    void setVlength(bool val) { myVlength = val; }
    bool opVlength(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getVlength();
        bool result;
        OP_Utils::evalOpParm(result, thissop, "vlength", cookparms.getCookTime(), 0);
        return result;
    }
    bool getInvertxform() const { return myInvertxform; }
    void setInvertxform(bool val) { myInvertxform = val; }
    bool opInvertxform(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getInvertxform();
        bool result;
        OP_Utils::evalOpParm(result, thissop, "invertxform", cookparms.getCookTime(), 0);
        return result;
    }
    bool getAddattrib() const { return myAddattrib; }
    void setAddattrib(bool val) { myAddattrib = val; }
    bool opAddattrib(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getAddattrib();
        bool result;
        OP_Utils::evalOpParm(result, thissop, "addattrib", cookparms.getCookTime(), 0);
        return result;
    }
    const UT_StringHolder & getOutputattrib() const { return myOutputattrib; }
    void setOutputattrib(const UT_StringHolder & val) { myOutputattrib = val; }
    UT_StringHolder opOutputattrib(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getOutputattrib();
        UT_StringHolder result;
        OP_Utils::evalOpParm(result, thissop, "outputattrib", cookparms.getCookTime(), 0);
        return result;
    }
    Outputmerge getOutputmerge() const { return Outputmerge(myOutputmerge); }
    void setOutputmerge(Outputmerge val) { myOutputmerge = int64(val); }
    Outputmerge opOutputmerge(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getOutputmerge();
        int64 result;
        OP_Utils::evalOpParm(result, thissop, "outputmerge", cookparms.getCookTime(), 0);
        return Outputmerge(result);
    }

private:
    UT_StringHolder myGroup;
    int64 myGrouptype;
    int64 myXord;
    int64 myRord;
    UT_Vector3D myT;
    UT_Vector3D myR;
    UT_Vector3D myS;
    UT_Vector3D myShear;
    fpreal64 myScale;
    UT_Vector3D myP;
    UT_Vector3D myPr;
    int64 myPrexform_xord;
    int64 myPrexform_rord;
    UT_Vector3D myPrexform_t;
    UT_Vector3D myPrexform_r;
    UT_Vector3D myPrexform_s;
    UT_Vector3D myPrexform_shear;
    UT_StringHolder myAttribs;
    bool myUpdatenmls;
    bool myUpdateaffectednmls;
    bool myVlength;
    bool myInvertxform;
    bool myAddattrib;
    UT_StringHolder myOutputattrib;
    int64 myOutputmerge;

};
