/* Automagically Generated by generate_proto.py
 * Do not Edit
 */
#pragma once

#include <SOP/SOP_NodeVerb.h>
#include <OP/OP_Utils.h>
#include <PRM/PRM_Parm.h>
#include <UT/UT_IStream.h>
#include <UT/UT_NTStreamUtil.h>
#include <UT/UT_Ramp.h>
#include <UT/UT_SharedPtr.h>
#include <UT/UT_StringHolder.h>
#include <UT/UT_StringStream.h>
#include <UT/UT_VectorTypes.h>
#include <SYS/SYS_Types.h>

using namespace UT::Literal;

class DEP_MicroNode;

class SOP_API SOP_UnpackParms  : public SOP_NodeParms
{
public:
    static int version() { return 1; }

    SOP_UnpackParms()
    {
        myGroup = ""_sh;
        myLimitIterations = true;
        myIterations = 1;
        myDetailAttributes = "detail"_sh;
        myTransferAttributes = ""_sh;
        myTransferGroups = ""_sh;
        myApplyStyleSheets = false;
        mySceneStyleSheet = ""_sh;
        myObjectStyleSheet = ""_sh;

    }

    explicit SOP_UnpackParms(const SOP_UnpackParms &) = default;

    virtual ~SOP_UnpackParms() {}

    bool operator==(const SOP_UnpackParms &src) const
    {
        if (myGroup != src.myGroup) return false;
        if (myLimitIterations != src.myLimitIterations) return false;
        if (myIterations != src.myIterations) return false;
        if (myDetailAttributes != src.myDetailAttributes) return false;
        if (myTransferAttributes != src.myTransferAttributes) return false;
        if (myTransferGroups != src.myTransferGroups) return false;
        if (myApplyStyleSheets != src.myApplyStyleSheets) return false;
        if (mySceneStyleSheet != src.mySceneStyleSheet) return false;
        if (myObjectStyleSheet != src.myObjectStyleSheet) return false;

        return true;
    }
    bool operator!=(const SOP_UnpackParms &src) const
    {
        return !operator==(src);
    }



    void        buildFromOp(const OP_Node *node, fpreal time, DEP_MicroNode *depnode)
    {
        if (true)
            OP_Utils::evalOpParm(myGroup, node, "group", time, 0);
        else myGroup = ""_sh;
        if (true)
            OP_Utils::evalOpParm(myLimitIterations, node, "limit_iterations", time, 0);
        else myLimitIterations = true;
        if (true && ( (getLimitIterations()) ) )
            OP_Utils::evalOpParm(myIterations, node, "iterations", time, 0);
        else myIterations = 1;
        if (true)
            OP_Utils::evalOpParm(myDetailAttributes, node, "detail_attributes", time, 0);
        else myDetailAttributes = "detail"_sh;
        if (true)
            OP_Utils::evalOpParm(myTransferAttributes, node, "transfer_attributes", time, 0);
        else myTransferAttributes = ""_sh;
        if (true)
            OP_Utils::evalOpParm(myTransferGroups, node, "transfer_groups", time, 0);
        else myTransferGroups = ""_sh;
        if (true)
            OP_Utils::evalOpParm(myApplyStyleSheets, node, "apply_style_sheets", time, 0);
        else myApplyStyleSheets = false;
        if (true && ( (getApplyStyleSheets()) ) )
            OP_Utils::evalOpParm(mySceneStyleSheet, node, "scene_style_sheet", time, 0);
        else mySceneStyleSheet = ""_sh;
        if (true && ( (getApplyStyleSheets()) ) )
            OP_Utils::evalOpParm(myObjectStyleSheet, node, "obj_style_sheet", time, 0);
        else myObjectStyleSheet = ""_sh;

    }


    virtual void loadFromOpSubclass(const LoadParms &loadparms)
    {
        buildFromOp(loadparms.node(), loadparms.context().getTime(), loadparms.depnode());
    }


    virtual void copyFrom(const SOP_NodeParms *src)
    {
        *this = *((const SOP_UnpackParms *)src);
    }

    template <typename T>
    void
    doGetParmValue(exint idx, T &value) const
    {
        switch (idx)
        {
            case 0:
                coerceValue(value, myGroup);
                break;
            case 1:
                coerceValue(value, myLimitIterations);
                break;
            case 2:
                coerceValue(value, myIterations);
                break;
            case 3:
                coerceValue(value, myDetailAttributes);
                break;
            case 4:
                coerceValue(value, myTransferAttributes);
                break;
            case 5:
                coerceValue(value, myTransferGroups);
                break;
            case 6:
                coerceValue(value, myApplyStyleSheets);
                break;
            case 7:
                coerceValue(value, mySceneStyleSheet);
                break;
            case 8:
                coerceValue(value, myObjectStyleSheet);
                break;

        }
    }

    void        getParmValue(exint idx, exint &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, fpreal &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Vector2D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Vector3D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Vector4D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Matrix2D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Matrix3D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Matrix4D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_StringHolder &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_SharedPtr<UT_Ramp> &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, PRM_DataItemHandle &value) const
    { doGetParmValue(idx, value); }

    template <typename T>
    void
    doSetParmValue(exint idx, const T &value) 
    {
        switch (idx)
        {
            case 0:
                coerceValue(myGroup, value);
                break;
            case 1:
                coerceValue(myLimitIterations, value);
                break;
            case 2:
                coerceValue(myIterations, value);
                break;
            case 3:
                coerceValue(myDetailAttributes, value);
                break;
            case 4:
                coerceValue(myTransferAttributes, value);
                break;
            case 5:
                coerceValue(myTransferGroups, value);
                break;
            case 6:
                coerceValue(myApplyStyleSheets, value);
                break;
            case 7:
                coerceValue(mySceneStyleSheet, value);
                break;
            case 8:
                coerceValue(myObjectStyleSheet, value);
                break;

        }
    }

    void        setParmValue(exint idx, const exint &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const fpreal &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Vector2D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Vector3D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Vector4D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Matrix2D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Matrix3D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Matrix4D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_StringHolder &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_SharedPtr<UT_Ramp> &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const PRM_DataItemHandle &value) 
    { doSetParmValue(idx, value); }

    virtual exint    getNumParms() const
    {
        return 9;
    }

    virtual const char *getParmName(exint fieldnum) const
    {
        switch (fieldnum)
        {
            case 0:
                return "group";
            case 1:
                return "limit_iterations";
            case 2:
                return "iterations";
            case 3:
                return "detail_attributes";
            case 4:
                return "transfer_attributes";
            case 5:
                return "transfer_groups";
            case 6:
                return "apply_style_sheets";
            case 7:
                return "scene_style_sheet";
            case 8:
                return "obj_style_sheet";

        }
        return 0;
    }

    virtual ParmType getParmType(exint fieldnum) const
    {
        switch (fieldnum)
        {
                case 0:
                    return PARM_STRING;
                case 1:
                    return PARM_INTEGER;
                case 2:
                    return PARM_INTEGER;
                case 3:
                    return PARM_STRING;
                case 4:
                    return PARM_STRING;
                case 5:
                    return PARM_STRING;
                case 6:
                    return PARM_INTEGER;
                case 7:
                    return PARM_STRING;
                case 8:
                    return PARM_STRING;

        }
        return PARM_UNSUPPORTED;
    }

    // Boiler plate to load individual types.
    static void  loadData(UT_IStream &is, int64 &v)
    { is.bread(&v, 1); }
    static void  loadData(UT_IStream &is, bool &v)
    { int64     iv; is.bread(&iv, 1); v = iv; }
    static void  loadData(UT_IStream &is, fpreal64 &v)
    { is.bread<fpreal64>(&v, 1); }
    static void  loadData(UT_IStream &is, UT_Vector2D &v)
    { is.bread<fpreal64>(&v.x(), 1); is.bread<fpreal64>(&v.y(), 1); }
    static void  loadData(UT_IStream &is, UT_Vector3D &v)
    { is.bread<fpreal64>(&v.x(), 1); is.bread<fpreal64>(&v.y(), 1);
      is.bread<fpreal64>(&v.z(), 1); }
    static void  loadData(UT_IStream &is, UT_Vector4D &v)
    { is.bread<fpreal64>(&v.x(), 1); is.bread<fpreal64>(&v.y(), 1);
      is.bread<fpreal64>(&v.z(), 1); is.bread<fpreal64>(&v.w(), 1); }
    static void  loadData(UT_IStream &is, UT_Matrix2D &v)
    { for (int r = 0; r < 2; r++) for (int c = 0; c < 2; c++) is.bread<fpreal64>(&v(r, c), 1); }
    static void  loadData(UT_IStream &is, UT_Matrix3D &v)
    { for (int r = 0; r < 3; r++) for (int c = 0; c < 3; c++) is.bread<fpreal64>(&v(r, c), 1); }
    static void  loadData(UT_IStream &is, UT_Matrix4D &v)
    { for (int r = 0; r < 4; r++) for (int c = 0; c < 4; c++) is.bread<fpreal64>(&v(r, c), 1); }
    static void  loadData(UT_IStream &is, UT_Vector2I &v)
    { is.bread<int64>(&v.x(), 1); is.bread<int64>(&v.y(), 1); }
    static void  loadData(UT_IStream &is, UT_Vector3I &v)
    { is.bread<int64>(&v.x(), 1); is.bread<int64>(&v.y(), 1);
      is.bread<int64>(&v.z(), 1); }
    static void  loadData(UT_IStream &is, UT_Vector4I &v)
    { is.bread<int64>(&v.x(), 1); is.bread<int64>(&v.y(), 1);
      is.bread<int64>(&v.z(), 1); is.bread<int64>(&v.w(), 1); }
    static void  loadData(UT_IStream &is, UT_StringHolder &v)
    { is.bread(v); }
    static void  loadData(UT_IStream &is, UT_SharedPtr<UT_Ramp> &v)
    {   UT_StringHolder   rampdata;
        loadData(is, rampdata);
        if (rampdata.isstring())
        {
            v.reset(new UT_Ramp());
            UT_IStream  istr((const char *) rampdata, rampdata.length(), UT_ISTREAM_ASCII);
            v->load(istr);
        }
        else v.reset();
    }
    static void  loadData(UT_IStream &is, PRM_DataItemHandle &v)
    {   UT_StringHolder   data;
        loadData(is, data);
        if (data.isstring())
        {
            // Find the data type.
            char *colon = UT_StringWrap(data).findChar(':');
            if (colon)
            {
                int             typelen = colon - data.buffer();
                UT_WorkBuffer   type;
                type.strncpy(data.buffer(), typelen);
                UT_IStream  istr(((const char *) data) + typelen + 1, data.length() - (typelen + 1), UT_ISTREAM_BINARY);
                
                v = PRM_DataFactory::parseBinary(type.buffer(), istr);
            }
        }
        else v.reset();
    }

    static void  saveData(std::ostream &os, int64 v)
    { UTwrite(os, &v); }
    static void  saveData(std::ostream &os, bool v)
    { int64 iv = v; UTwrite(os, &iv); }
    static void  saveData(std::ostream &os, fpreal64 v)
    { UTwrite<fpreal64>(os, &v); }
    static void  saveData(std::ostream &os, UT_Vector2D v)
    { UTwrite<fpreal64>(os, &v.x()); UTwrite<fpreal64>(os, &v.y()); }
    static void  saveData(std::ostream &os, UT_Vector3D v)
    { UTwrite<fpreal64>(os, &v.x()); UTwrite<fpreal64>(os, &v.y());
      UTwrite<fpreal64>(os, &v.z()); }
    static void  saveData(std::ostream &os, UT_Vector4D v)
    { UTwrite<fpreal64>(os, &v.x()); UTwrite<fpreal64>(os, &v.y());
      UTwrite<fpreal64>(os, &v.z()); UTwrite<fpreal64>(os, &v.w()); }
    static void  saveData(std::ostream &os, UT_Matrix2D v)
    { for (int r = 0; r < 2; r++) for (int c = 0; c < 2; c++) UTwrite<fpreal64>(os, &v(r, c)); }
    static void  saveData(std::ostream &os, UT_Matrix3D v)
    { for (int r = 0; r < 3; r++) for (int c = 0; c < 3; c++) UTwrite<fpreal64>(os, &v(r, c)); }
    static void  saveData(std::ostream &os, UT_Matrix4D v)
    { for (int r = 0; r < 4; r++) for (int c = 0; c < 4; c++) UTwrite<fpreal64>(os, &v(r, c)); }
    static void  saveData(std::ostream &os, UT_StringHolder s)
    { UT_StringWrap(s).saveBinary(os); }
    static void  saveData(std::ostream &os, UT_SharedPtr<UT_Ramp> s)
    {   UT_StringHolder         result;
        UT_OStringStream        ostr;
        if (s) s->save(ostr);
        result = ostr.str();
        saveData(os, result);
    }
    static void  saveData(std::ostream &os, PRM_DataItemHandle s)
    {   UT_StringHolder         result;
        UT_OStringStream        ostr;
        if (s) 
        {
            ostr << s->getDataTypeToken();
            ostr << ":";
            s->saveBinary(ostr);
        }
        result = ostr.str();
        saveData(os, result);
    }


    void         save(std::ostream &os) const
    {
        int32           v = version();
        UTwrite(os, &v);
        saveData(os, myGroup);
        saveData(os, myLimitIterations);
        saveData(os, myIterations);
        saveData(os, myDetailAttributes);
        saveData(os, myTransferAttributes);
        saveData(os, myTransferGroups);
        saveData(os, myApplyStyleSheets);
        saveData(os, mySceneStyleSheet);
        saveData(os, myObjectStyleSheet);

    }

    bool         load(UT_IStream &is)
    {
        int32           v;
        is.bread(&v, 1);
        if (version() != v)
        {
            // Fail incompatible versions
            return false;
        }
        loadData(is, myGroup);
        loadData(is, myLimitIterations);
        loadData(is, myIterations);
        loadData(is, myDetailAttributes);
        loadData(is, myTransferAttributes);
        loadData(is, myTransferGroups);
        loadData(is, myApplyStyleSheets);
        loadData(is, mySceneStyleSheet);
        loadData(is, myObjectStyleSheet);

        return true;
    }

    const UT_StringHolder & getGroup() const { return myGroup; }
    void setGroup(const UT_StringHolder & val) { myGroup = val; }
    UT_StringHolder opGroup(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getGroup();
        UT_StringHolder result;
        OP_Utils::evalOpParm(result, thissop, "group", cookparms.getCookTime(), 0);
        return result;
    }
    bool getLimitIterations() const { return myLimitIterations; }
    void setLimitIterations(bool val) { myLimitIterations = val; }
    bool opLimitIterations(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getLimitIterations();
        bool result;
        OP_Utils::evalOpParm(result, thissop, "limit_iterations", cookparms.getCookTime(), 0);
        return result;
    }
    int64 getIterations() const { return myIterations; }
    void setIterations(int64 val) { myIterations = val; }
    int64 opIterations(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getIterations();
        int64 result;
        OP_Utils::evalOpParm(result, thissop, "iterations", cookparms.getCookTime(), 0);
        return result;
    }
    const UT_StringHolder & getDetailAttributes() const { return myDetailAttributes; }
    void setDetailAttributes(const UT_StringHolder & val) { myDetailAttributes = val; }
    UT_StringHolder opDetailAttributes(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getDetailAttributes();
        UT_StringHolder result;
        OP_Utils::evalOpParm(result, thissop, "detail_attributes", cookparms.getCookTime(), 0);
        return result;
    }
    const UT_StringHolder & getTransferAttributes() const { return myTransferAttributes; }
    void setTransferAttributes(const UT_StringHolder & val) { myTransferAttributes = val; }
    UT_StringHolder opTransferAttributes(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getTransferAttributes();
        UT_StringHolder result;
        OP_Utils::evalOpParm(result, thissop, "transfer_attributes", cookparms.getCookTime(), 0);
        return result;
    }
    const UT_StringHolder & getTransferGroups() const { return myTransferGroups; }
    void setTransferGroups(const UT_StringHolder & val) { myTransferGroups = val; }
    UT_StringHolder opTransferGroups(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getTransferGroups();
        UT_StringHolder result;
        OP_Utils::evalOpParm(result, thissop, "transfer_groups", cookparms.getCookTime(), 0);
        return result;
    }
    bool getApplyStyleSheets() const { return myApplyStyleSheets; }
    void setApplyStyleSheets(bool val) { myApplyStyleSheets = val; }
    bool opApplyStyleSheets(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getApplyStyleSheets();
        bool result;
        OP_Utils::evalOpParm(result, thissop, "apply_style_sheets", cookparms.getCookTime(), 0);
        return result;
    }
    const UT_StringHolder & getSceneStyleSheet() const { return mySceneStyleSheet; }
    void setSceneStyleSheet(const UT_StringHolder & val) { mySceneStyleSheet = val; }
    UT_StringHolder opSceneStyleSheet(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getSceneStyleSheet();
        UT_StringHolder result;
        OP_Utils::evalOpParm(result, thissop, "scene_style_sheet", cookparms.getCookTime(), 0);
        return result;
    }
    const UT_StringHolder & getObjectStyleSheet() const { return myObjectStyleSheet; }
    void setObjectStyleSheet(const UT_StringHolder & val) { myObjectStyleSheet = val; }
    UT_StringHolder opObjectStyleSheet(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getObjectStyleSheet();
        UT_StringHolder result;
        OP_Utils::evalOpParm(result, thissop, "obj_style_sheet", cookparms.getCookTime(), 0);
        return result;
    }

private:
    UT_StringHolder myGroup;
    bool myLimitIterations;
    int64 myIterations;
    UT_StringHolder myDetailAttributes;
    UT_StringHolder myTransferAttributes;
    UT_StringHolder myTransferGroups;
    bool myApplyStyleSheets;
    UT_StringHolder mySceneStyleSheet;
    UT_StringHolder myObjectStyleSheet;

};
