/* Automagically Generated by generate_proto.py
 * Do not Edit
 */
#pragma once

#include <SOP/SOP_NodeVerb.h>
#include <OP/OP_Utils.h>
#include <PRM/PRM_Parm.h>
#include <UT/UT_IStream.h>
#include <UT/UT_NTStreamUtil.h>
#include <UT/UT_Ramp.h>
#include <UT/UT_SharedPtr.h>
#include <UT/UT_StringHolder.h>
#include <UT/UT_StringStream.h>
#include <UT/UT_VectorTypes.h>
#include <SYS/SYS_Types.h>

using namespace UT::Literal;

class DEP_MicroNode;
namespace SOP_AddEnums
{
    enum class Add
    {
        ALL = 0,
        GROUP,
        SKIP,
        SEP,
        ATTRIBUTE
    };
}


class SOP_API SOP_AddParms  : public SOP_NodeParms
{
public:
    static int version() { return 1; }
    struct Points
    {
        bool usept;
        UT_Vector3D pt;
        fpreal64 weight;


        Points()
        {
            usept = false;
            pt = UT_Vector3D(0,0,0);
            weight = 1;

        }

        bool operator==(const Points &src) const
        {
            if (usept != src.usept) return false;
            if (pt != src.pt) return false;
            if (weight != src.weight) return false;

            return true;
        }
        bool operator!=(const Points &src) const
        {
            return !operator==(src);
        }

    };

    UT_StringHolder createString(const UT_Array<Points> &list) const
    {
        UT_WorkBuffer   buf;

        buf.strcat("[ ");
        for (int i = 0; i < list.entries(); i++)
        {
            if (i)
                buf.strcat(", ");
            buf.strcat("( ");
            buf.append("");
            buf.appendSprintf("%s", (list(i).usept) ? "true" : "false");
            buf.append(", ");
            buf.appendSprintf("(%f, %f, %f)", list(i).pt.x(), list(i).pt.y(), list(i).pt.z());
            buf.append(", ");
            buf.appendSprintf("%f", (list(i).weight));

            buf.strcat(" )");
        }
        buf.strcat(" ]");

        UT_StringHolder result = buf;
        return result;
    }
    struct Prims
    {
        UT_StringHolder prim;
        bool closed;


        Prims()
        {
            prim = ""_sh;
            closed = false;

        }

        bool operator==(const Prims &src) const
        {
            if (prim != src.prim) return false;
            if (closed != src.closed) return false;

            return true;
        }
        bool operator!=(const Prims &src) const
        {
            return !operator==(src);
        }

    };

    UT_StringHolder createString(const UT_Array<Prims> &list) const
    {
        UT_WorkBuffer   buf;

        buf.strcat("[ ");
        for (int i = 0; i < list.entries(); i++)
        {
            if (i)
                buf.strcat(", ");
            buf.strcat("( ");
            buf.append("");
            { UT_String tmp; tmp = UT_StringWrap(list(i).prim).makeQuotedString('"'); buf.strcat(tmp); }
            buf.append(", ");
            buf.appendSprintf("%s", (list(i).closed) ? "true" : "false");

            buf.strcat(" )");
        }
        buf.strcat(" ]");

        UT_StringHolder result = buf;
        return result;
    }

    SOP_AddParms()
    {
        myKeep = false;
        myRemove = false;
        mySwitcher = 0;
        myGroup = ""_sh;
        myAdd = 0;
        myInc = 2;
        myAttrname = ""_sh;
        myClosedall = false;
        myAddparticlesystem = false;
        myParticlegroup = ""_sh;
        myAppendunusedtoparticlesystem = false;

    }

    explicit SOP_AddParms(const SOP_AddParms &) = default;

    virtual ~SOP_AddParms() {}

    bool operator==(const SOP_AddParms &src) const
    {
        if (myKeep != src.myKeep) return false;
        if (myPoints != src.myPoints) return false;
        if (myRemove != src.myRemove) return false;
        if (myPrims != src.myPrims) return false;
        if (mySwitcher != src.mySwitcher) return false;
        if (myGroup != src.myGroup) return false;
        if (myAdd != src.myAdd) return false;
        if (myInc != src.myInc) return false;
        if (myAttrname != src.myAttrname) return false;
        if (myClosedall != src.myClosedall) return false;
        if (myAddparticlesystem != src.myAddparticlesystem) return false;
        if (myParticlegroup != src.myParticlegroup) return false;
        if (myAppendunusedtoparticlesystem != src.myAppendunusedtoparticlesystem) return false;

        return true;
    }
    bool operator!=(const SOP_AddParms &src) const
    {
        return !operator==(src);
    }
    using Add = SOP_AddEnums::Add;



    void        buildFromOp(const OP_Node *node, fpreal time, DEP_MicroNode *depnode)
    {
        if (true && ( (!((((node->getInput(0)!=0)==0)))) ) )
            OP_Utils::evalOpParm(myKeep, node, "keep", time, 0);
        else myKeep = false;
            if (true)
            {
                int64   length;
                OP_Utils::evalOpParm(length, node, "points", time, 0);
                myPoints.entries(length);
                for (exint i = 0; i < length; i++)
                {
                    int     parmidx = i+0;
                    auto && _curentry = myPoints(i);
                    (void) _curentry;
                    if (true)
                        OP_Utils::evalOpParmInst(myPoints(i).usept, node, "usept#", &parmidx, time, 0);
                    else myPoints(i).usept = false;
                    if (true && ( (!(((_curentry.usept==0)))) ) )
                        OP_Utils::evalOpParmInst(myPoints(i).pt, node, "pt#", &parmidx, time, 0);
                    else myPoints(i).pt = UT_Vector3D(0,0,0);
                    if (true && ( (!(((_curentry.usept==0)))) ) )
                        OP_Utils::evalOpParmInst(myPoints(i).weight, node, "weight#", &parmidx, time, 0);
                    else myPoints(i).weight = 1;

                }
            }
            else
                myPoints.clear();
        if (true)
            OP_Utils::evalOpParm(myRemove, node, "remove", time, 0);
        else myRemove = false;
            if (true)
            {
                int64   length;
                OP_Utils::evalOpParm(length, node, "prims", time, 0);
                myPrims.entries(length);
                for (exint i = 0; i < length; i++)
                {
                    int     parmidx = i+0;
                    auto && _curentry = myPrims(i);
                    (void) _curentry;
                    if (true)
                        OP_Utils::evalOpParmInst(myPrims(i).prim, node, "prim#", &parmidx, time, 0);
                    else myPrims(i).prim = ""_sh;
                    if (true)
                        OP_Utils::evalOpParmInst(myPrims(i).closed, node, "closed#", &parmidx, time, 0);
                    else myPrims(i).closed = false;

                }
            }
            else
                myPrims.clear();
        if (true)
            OP_Utils::evalOpParm(mySwitcher, node, "switcher", time, 0);
        else mySwitcher = 0;
        if (true)
            OP_Utils::evalOpParm(myGroup, node, "group", time, 0);
        else myGroup = ""_sh;
        if (true)
            OP_Utils::evalOpParm(myAdd, node, "add", time, 0);
        else myAdd = 0;
        if (true && ( (!(((int64(getAdd())==0))||((int64(getAdd())==3))||((int64(getAdd())==4)))) ) )
            OP_Utils::evalOpParm(myInc, node, "inc", time, 0);
        else myInc = 2;
        if (true && ( (!(((int64(getAdd())!=4)))) ) )
            OP_Utils::evalOpParm(myAttrname, node, "attrname", time, 0);
        else myAttrname = ""_sh;
        if (true)
            OP_Utils::evalOpParm(myClosedall, node, "closedall", time, 0);
        else myClosedall = false;
        if (true)
            OP_Utils::evalOpParm(myAddparticlesystem, node, "addparticlesystem", time, 0);
        else myAddparticlesystem = false;
        if (true && ( (!(((getAddparticlesystem()==0)))) ) )
            OP_Utils::evalOpParm(myParticlegroup, node, "particlegroup", time, 0);
        else myParticlegroup = ""_sh;
        if (true)
            OP_Utils::evalOpParm(myAppendunusedtoparticlesystem, node, "appendunusedtoparticlesystem", time, 0);
        else myAppendunusedtoparticlesystem = false;

    }


    virtual void loadFromOpSubclass(const LoadParms &loadparms)
    {
        buildFromOp(loadparms.node(), loadparms.context().getTime(), loadparms.depnode());
    }


    virtual void copyFrom(const SOP_NodeParms *src)
    {
        *this = *((const SOP_AddParms *)src);
    }

    template <typename T>
    void
    doGetParmValue(exint idx, T &value) const
    {
        switch (idx)
        {
            case 0:
                coerceValue(value, myKeep);
                break;
            case 2:
                coerceValue(value, myRemove);
                break;
            case 4:
                coerceValue(value, mySwitcher);
                break;
            case 5:
                coerceValue(value, myGroup);
                break;
            case 6:
                coerceValue(value, myAdd);
                break;
            case 7:
                coerceValue(value, myInc);
                break;
            case 8:
                coerceValue(value, myAttrname);
                break;
            case 9:
                coerceValue(value, myClosedall);
                break;
            case 10:
                coerceValue(value, myAddparticlesystem);
                break;
            case 11:
                coerceValue(value, myParticlegroup);
                break;
            case 12:
                coerceValue(value, myAppendunusedtoparticlesystem);
                break;

        }
    }

    void        getParmValue(exint idx, exint &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, fpreal &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Vector2D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Vector3D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Vector4D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Matrix2D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Matrix3D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Matrix4D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_StringHolder &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_SharedPtr<UT_Ramp> &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, PRM_DataItemHandle &value) const
    { doGetParmValue(idx, value); }

    template <typename T>
    void
    doSetParmValue(exint idx, const T &value) 
    {
        switch (idx)
        {
            case 0:
                coerceValue(myKeep, value);
                break;
            case 2:
                coerceValue(myRemove, value);
                break;
            case 4:
                coerceValue(mySwitcher, value);
                break;
            case 5:
                coerceValue(myGroup, value);
                break;
            case 6:
                coerceValue(myAdd, value);
                break;
            case 7:
                coerceValue(myInc, value);
                break;
            case 8:
                coerceValue(myAttrname, value);
                break;
            case 9:
                coerceValue(myClosedall, value);
                break;
            case 10:
                coerceValue(myAddparticlesystem, value);
                break;
            case 11:
                coerceValue(myParticlegroup, value);
                break;
            case 12:
                coerceValue(myAppendunusedtoparticlesystem, value);
                break;

        }
    }

    void        setParmValue(exint idx, const exint &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const fpreal &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Vector2D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Vector3D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Vector4D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Matrix2D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Matrix3D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Matrix4D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_StringHolder &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_SharedPtr<UT_Ramp> &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const PRM_DataItemHandle &value) 
    { doSetParmValue(idx, value); }

    virtual exint    getNumParms() const
    {
        return 13;
    }

    virtual const char *getParmName(exint fieldnum) const
    {
        switch (fieldnum)
        {
            case 0:
                return "keep";
                case 1:
                    return "points";
            case 2:
                return "remove";
                case 3:
                    return "prims";
            case 4:
                return "switcher";
            case 5:
                return "group";
            case 6:
                return "add";
            case 7:
                return "inc";
            case 8:
                return "attrname";
            case 9:
                return "closedall";
            case 10:
                return "addparticlesystem";
            case 11:
                return "particlegroup";
            case 12:
                return "appendunusedtoparticlesystem";

        }
        return 0;
    }

    virtual ParmType getParmType(exint fieldnum) const
    {
        switch (fieldnum)
        {
                case 0:
                    return PARM_INTEGER;
                case 2:
                    return PARM_INTEGER;
                case 4:
                    return PARM_INTEGER;
                case 5:
                    return PARM_STRING;
                case 6:
                    return PARM_INTEGER;
                case 7:
                    return PARM_INTEGER;
                case 8:
                    return PARM_STRING;
                case 9:
                    return PARM_INTEGER;
                case 10:
                    return PARM_INTEGER;
                case 11:
                    return PARM_STRING;
                case 12:
                    return PARM_INTEGER;

        }
        return PARM_UNSUPPORTED;
    }

    // Boiler plate to load individual types.
    static void  loadData(UT_IStream &is, int64 &v)
    { is.bread(&v, 1); }
    static void  loadData(UT_IStream &is, bool &v)
    { int64     iv; is.bread(&iv, 1); v = iv; }
    static void  loadData(UT_IStream &is, fpreal64 &v)
    { is.bread<fpreal64>(&v, 1); }
    static void  loadData(UT_IStream &is, UT_Vector2D &v)
    { is.bread<fpreal64>(&v.x(), 1); is.bread<fpreal64>(&v.y(), 1); }
    static void  loadData(UT_IStream &is, UT_Vector3D &v)
    { is.bread<fpreal64>(&v.x(), 1); is.bread<fpreal64>(&v.y(), 1);
      is.bread<fpreal64>(&v.z(), 1); }
    static void  loadData(UT_IStream &is, UT_Vector4D &v)
    { is.bread<fpreal64>(&v.x(), 1); is.bread<fpreal64>(&v.y(), 1);
      is.bread<fpreal64>(&v.z(), 1); is.bread<fpreal64>(&v.w(), 1); }
    static void  loadData(UT_IStream &is, UT_Matrix2D &v)
    { for (int r = 0; r < 2; r++) for (int c = 0; c < 2; c++) is.bread<fpreal64>(&v(r, c), 1); }
    static void  loadData(UT_IStream &is, UT_Matrix3D &v)
    { for (int r = 0; r < 3; r++) for (int c = 0; c < 3; c++) is.bread<fpreal64>(&v(r, c), 1); }
    static void  loadData(UT_IStream &is, UT_Matrix4D &v)
    { for (int r = 0; r < 4; r++) for (int c = 0; c < 4; c++) is.bread<fpreal64>(&v(r, c), 1); }
    static void  loadData(UT_IStream &is, UT_Vector2I &v)
    { is.bread<int64>(&v.x(), 1); is.bread<int64>(&v.y(), 1); }
    static void  loadData(UT_IStream &is, UT_Vector3I &v)
    { is.bread<int64>(&v.x(), 1); is.bread<int64>(&v.y(), 1);
      is.bread<int64>(&v.z(), 1); }
    static void  loadData(UT_IStream &is, UT_Vector4I &v)
    { is.bread<int64>(&v.x(), 1); is.bread<int64>(&v.y(), 1);
      is.bread<int64>(&v.z(), 1); is.bread<int64>(&v.w(), 1); }
    static void  loadData(UT_IStream &is, UT_StringHolder &v)
    { is.bread(v); }
    static void  loadData(UT_IStream &is, UT_SharedPtr<UT_Ramp> &v)
    {   UT_StringHolder   rampdata;
        loadData(is, rampdata);
        if (rampdata.isstring())
        {
            v.reset(new UT_Ramp());
            UT_IStream  istr((const char *) rampdata, rampdata.length(), UT_ISTREAM_ASCII);
            v->load(istr);
        }
        else v.reset();
    }
    static void  loadData(UT_IStream &is, PRM_DataItemHandle &v)
    {   UT_StringHolder   data;
        loadData(is, data);
        if (data.isstring())
        {
            // Find the data type.
            char *colon = UT_StringWrap(data).findChar(':');
            if (colon)
            {
                int             typelen = colon - data.buffer();
                UT_WorkBuffer   type;
                type.strncpy(data.buffer(), typelen);
                UT_IStream  istr(((const char *) data) + typelen + 1, data.length() - (typelen + 1), UT_ISTREAM_BINARY);
                
                v = PRM_DataFactory::parseBinary(type.buffer(), istr);
            }
        }
        else v.reset();
    }

    static void  saveData(std::ostream &os, int64 v)
    { UTwrite(os, &v); }
    static void  saveData(std::ostream &os, bool v)
    { int64 iv = v; UTwrite(os, &iv); }
    static void  saveData(std::ostream &os, fpreal64 v)
    { UTwrite<fpreal64>(os, &v); }
    static void  saveData(std::ostream &os, UT_Vector2D v)
    { UTwrite<fpreal64>(os, &v.x()); UTwrite<fpreal64>(os, &v.y()); }
    static void  saveData(std::ostream &os, UT_Vector3D v)
    { UTwrite<fpreal64>(os, &v.x()); UTwrite<fpreal64>(os, &v.y());
      UTwrite<fpreal64>(os, &v.z()); }
    static void  saveData(std::ostream &os, UT_Vector4D v)
    { UTwrite<fpreal64>(os, &v.x()); UTwrite<fpreal64>(os, &v.y());
      UTwrite<fpreal64>(os, &v.z()); UTwrite<fpreal64>(os, &v.w()); }
    static void  saveData(std::ostream &os, UT_Matrix2D v)
    { for (int r = 0; r < 2; r++) for (int c = 0; c < 2; c++) UTwrite<fpreal64>(os, &v(r, c)); }
    static void  saveData(std::ostream &os, UT_Matrix3D v)
    { for (int r = 0; r < 3; r++) for (int c = 0; c < 3; c++) UTwrite<fpreal64>(os, &v(r, c)); }
    static void  saveData(std::ostream &os, UT_Matrix4D v)
    { for (int r = 0; r < 4; r++) for (int c = 0; c < 4; c++) UTwrite<fpreal64>(os, &v(r, c)); }
    static void  saveData(std::ostream &os, UT_StringHolder s)
    { UT_StringWrap(s).saveBinary(os); }
    static void  saveData(std::ostream &os, UT_SharedPtr<UT_Ramp> s)
    {   UT_StringHolder         result;
        UT_OStringStream        ostr;
        if (s) s->save(ostr);
        result = ostr.str();
        saveData(os, result);
    }
    static void  saveData(std::ostream &os, PRM_DataItemHandle s)
    {   UT_StringHolder         result;
        UT_OStringStream        ostr;
        if (s) 
        {
            ostr << s->getDataTypeToken();
            ostr << ":";
            s->saveBinary(ostr);
        }
        result = ostr.str();
        saveData(os, result);
    }


    void         save(std::ostream &os) const
    {
        int32           v = version();
        UTwrite(os, &v);
        saveData(os, myKeep);
        {
            int64   length = myPoints.entries();
            UTwrite(os, &length);
            for (exint i = 0; i < length; i++)
            {
                saveData(os, myPoints(i).usept);
                saveData(os, myPoints(i).pt);
                saveData(os, myPoints(i).weight);

            }
        }
        saveData(os, myRemove);
        {
            int64   length = myPrims.entries();
            UTwrite(os, &length);
            for (exint i = 0; i < length; i++)
            {
                saveData(os, myPrims(i).prim);
                saveData(os, myPrims(i).closed);

            }
        }
        saveData(os, mySwitcher);
        saveData(os, myGroup);
        saveData(os, myAdd);
        saveData(os, myInc);
        saveData(os, myAttrname);
        saveData(os, myClosedall);
        saveData(os, myAddparticlesystem);
        saveData(os, myParticlegroup);
        saveData(os, myAppendunusedtoparticlesystem);

    }

    bool         load(UT_IStream &is)
    {
        int32           v;
        is.bread(&v, 1);
        if (version() != v)
        {
            // Fail incompatible versions
            return false;
        }
        loadData(is, myKeep);
        {
            int64   length;
            is.read(&length, 1);
            myPoints.entries(length);
            for (exint i = 0; i < length; i++)
            {
                loadData(is, myPoints(i).usept);
                loadData(is, myPoints(i).pt);
                loadData(is, myPoints(i).weight);

            }
        }
        loadData(is, myRemove);
        {
            int64   length;
            is.read(&length, 1);
            myPrims.entries(length);
            for (exint i = 0; i < length; i++)
            {
                loadData(is, myPrims(i).prim);
                loadData(is, myPrims(i).closed);

            }
        }
        loadData(is, mySwitcher);
        loadData(is, myGroup);
        loadData(is, myAdd);
        loadData(is, myInc);
        loadData(is, myAttrname);
        loadData(is, myClosedall);
        loadData(is, myAddparticlesystem);
        loadData(is, myParticlegroup);
        loadData(is, myAppendunusedtoparticlesystem);

        return true;
    }

    bool getKeep() const { return myKeep; }
    void setKeep(bool val) { myKeep = val; }
    bool opKeep(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getKeep();
        bool result;
        OP_Utils::evalOpParm(result, thissop, "keep", cookparms.getCookTime(), 0);
        return result;
    }
    const UT_Array<Points> &getPoints() const { return myPoints; }
    void setPoints(const UT_Array<Points> &val) { myPoints = val; }
    exint opPoints(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getPoints().entries();
        exint result;
        OP_Utils::evalOpParm(result, thissop, "points", cookparms.getCookTime(), 0);
        return result;
    }
            bool opPoints_usept(const SOP_NodeVerb::CookParms &cookparms, exint _idx) const
        {
            SOP_Node *thissop = cookparms.getNode();
            if (!thissop) return (myPoints(_idx).usept);
            int _parmidx = _idx + 0;
            bool result;
            OP_Utils::evalOpParmInst(result, thissop, "usept#", &_parmidx, cookparms.getCookTime(), 0);
            return (result);
        }
        UT_Vector3D opPoints_pt(const SOP_NodeVerb::CookParms &cookparms, exint _idx) const
        {
            SOP_Node *thissop = cookparms.getNode();
            if (!thissop) return (myPoints(_idx).pt);
            int _parmidx = _idx + 0;
            UT_Vector3D result;
            OP_Utils::evalOpParmInst(result, thissop, "pt#", &_parmidx, cookparms.getCookTime(), 0);
            return (result);
        }
        fpreal64 opPoints_weight(const SOP_NodeVerb::CookParms &cookparms, exint _idx) const
        {
            SOP_Node *thissop = cookparms.getNode();
            if (!thissop) return (myPoints(_idx).weight);
            int _parmidx = _idx + 0;
            fpreal64 result;
            OP_Utils::evalOpParmInst(result, thissop, "weight#", &_parmidx, cookparms.getCookTime(), 0);
            return (result);
        }

    bool getRemove() const { return myRemove; }
    void setRemove(bool val) { myRemove = val; }
    bool opRemove(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getRemove();
        bool result;
        OP_Utils::evalOpParm(result, thissop, "remove", cookparms.getCookTime(), 0);
        return result;
    }
    const UT_Array<Prims> &getPrims() const { return myPrims; }
    void setPrims(const UT_Array<Prims> &val) { myPrims = val; }
    exint opPrims(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getPrims().entries();
        exint result;
        OP_Utils::evalOpParm(result, thissop, "prims", cookparms.getCookTime(), 0);
        return result;
    }
            UT_StringHolder opPrims_prim(const SOP_NodeVerb::CookParms &cookparms, exint _idx) const
        {
            SOP_Node *thissop = cookparms.getNode();
            if (!thissop) return (myPrims(_idx).prim);
            int _parmidx = _idx + 0;
            UT_StringHolder result;
            OP_Utils::evalOpParmInst(result, thissop, "prim#", &_parmidx, cookparms.getCookTime(), 0);
            return (result);
        }
        bool opPrims_closed(const SOP_NodeVerb::CookParms &cookparms, exint _idx) const
        {
            SOP_Node *thissop = cookparms.getNode();
            if (!thissop) return (myPrims(_idx).closed);
            int _parmidx = _idx + 0;
            bool result;
            OP_Utils::evalOpParmInst(result, thissop, "closed#", &_parmidx, cookparms.getCookTime(), 0);
            return (result);
        }

    int64 getSwitcher() const { return mySwitcher; }
    void setSwitcher(int64 val) { mySwitcher = val; }
    int64 opSwitcher(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getSwitcher();
        int64 result;
        OP_Utils::evalOpParm(result, thissop, "switcher", cookparms.getCookTime(), 0);
        return result;
    }
    const UT_StringHolder & getGroup() const { return myGroup; }
    void setGroup(const UT_StringHolder & val) { myGroup = val; }
    UT_StringHolder opGroup(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getGroup();
        UT_StringHolder result;
        OP_Utils::evalOpParm(result, thissop, "group", cookparms.getCookTime(), 0);
        return result;
    }
    Add getAdd() const { return Add(myAdd); }
    void setAdd(Add val) { myAdd = int64(val); }
    Add opAdd(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getAdd();
        int64 result;
        OP_Utils::evalOpParm(result, thissop, "add", cookparms.getCookTime(), 0);
        return Add(result);
    }
    int64 getInc() const { return myInc; }
    void setInc(int64 val) { myInc = val; }
    int64 opInc(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getInc();
        int64 result;
        OP_Utils::evalOpParm(result, thissop, "inc", cookparms.getCookTime(), 0);
        return result;
    }
    const UT_StringHolder & getAttrname() const { return myAttrname; }
    void setAttrname(const UT_StringHolder & val) { myAttrname = val; }
    UT_StringHolder opAttrname(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getAttrname();
        UT_StringHolder result;
        OP_Utils::evalOpParm(result, thissop, "attrname", cookparms.getCookTime(), 0);
        return result;
    }
    bool getClosedall() const { return myClosedall; }
    void setClosedall(bool val) { myClosedall = val; }
    bool opClosedall(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getClosedall();
        bool result;
        OP_Utils::evalOpParm(result, thissop, "closedall", cookparms.getCookTime(), 0);
        return result;
    }
    bool getAddparticlesystem() const { return myAddparticlesystem; }
    void setAddparticlesystem(bool val) { myAddparticlesystem = val; }
    bool opAddparticlesystem(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getAddparticlesystem();
        bool result;
        OP_Utils::evalOpParm(result, thissop, "addparticlesystem", cookparms.getCookTime(), 0);
        return result;
    }
    const UT_StringHolder & getParticlegroup() const { return myParticlegroup; }
    void setParticlegroup(const UT_StringHolder & val) { myParticlegroup = val; }
    UT_StringHolder opParticlegroup(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getParticlegroup();
        UT_StringHolder result;
        OP_Utils::evalOpParm(result, thissop, "particlegroup", cookparms.getCookTime(), 0);
        return result;
    }
    bool getAppendunusedtoparticlesystem() const { return myAppendunusedtoparticlesystem; }
    void setAppendunusedtoparticlesystem(bool val) { myAppendunusedtoparticlesystem = val; }
    bool opAppendunusedtoparticlesystem(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getAppendunusedtoparticlesystem();
        bool result;
        OP_Utils::evalOpParm(result, thissop, "appendunusedtoparticlesystem", cookparms.getCookTime(), 0);
        return result;
    }

private:
    bool myKeep;
    UT_Array<Points> myPoints;
    bool myRemove;
    UT_Array<Prims> myPrims;
    int64 mySwitcher;
    UT_StringHolder myGroup;
    int64 myAdd;
    int64 myInc;
    UT_StringHolder myAttrname;
    bool myClosedall;
    bool myAddparticlesystem;
    UT_StringHolder myParticlegroup;
    bool myAppendunusedtoparticlesystem;

};
