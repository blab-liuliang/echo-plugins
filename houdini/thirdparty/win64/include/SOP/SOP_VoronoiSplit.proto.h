/* Automagically Generated by generate_proto.py
 * Do not Edit
 */
#pragma once

#include <SOP/SOP_NodeVerb.h>
#include <OP/OP_Utils.h>
#include <PRM/PRM_Parm.h>
#include <UT/UT_IStream.h>
#include <UT/UT_NTStreamUtil.h>
#include <UT/UT_Ramp.h>
#include <UT/UT_SharedPtr.h>
#include <UT/UT_StringHolder.h>
#include <UT/UT_StringStream.h>
#include <UT/UT_VectorTypes.h>
#include <SYS/SYS_Types.h>

using namespace UT::Literal;

class DEP_MicroNode;
namespace SOP_VoronoiSplitEnums
{
    enum class WeightMethod
    {
        POWER = 0,
        RATIO
    };
}


class SOP_API SOP_VoronoiSplitParms  : public SOP_NodeParms
{
public:
    static int version() { return 1; }

    SOP_VoronoiSplitParms()
    {
        myGroup = ""_sh;
        myClipptsgrp = ""_sh;
        myOffset = 0;
        myInterior = false;
        myStamppieces = false;
        myPieceattrib = "piece"_sh;
        myClipptattrib = "clippt"_sh;
        myUseweightattrib = false;
        myWeightattrib = "pscale"_sh;
        myWeightMethod = 0;

    }

    explicit SOP_VoronoiSplitParms(const SOP_VoronoiSplitParms &) = default;

    virtual ~SOP_VoronoiSplitParms() {}

    bool operator==(const SOP_VoronoiSplitParms &src) const
    {
        if (myGroup != src.myGroup) return false;
        if (myClipptsgrp != src.myClipptsgrp) return false;
        if (myOffset != src.myOffset) return false;
        if (myInterior != src.myInterior) return false;
        if (myStamppieces != src.myStamppieces) return false;
        if (myPieceattrib != src.myPieceattrib) return false;
        if (myClipptattrib != src.myClipptattrib) return false;
        if (myUseweightattrib != src.myUseweightattrib) return false;
        if (myWeightattrib != src.myWeightattrib) return false;
        if (myWeightMethod != src.myWeightMethod) return false;

        return true;
    }
    bool operator!=(const SOP_VoronoiSplitParms &src) const
    {
        return !operator==(src);
    }
    using WeightMethod = SOP_VoronoiSplitEnums::WeightMethod;



    void        buildFromOp(const OP_Node *node, fpreal time, DEP_MicroNode *depnode)
    {
        if (true)
            OP_Utils::evalOpParm(myGroup, node, "group", time, 0);
        else myGroup = ""_sh;
        if (true)
            OP_Utils::evalOpParm(myClipptsgrp, node, "clipptsgrp", time, 0);
        else myClipptsgrp = ""_sh;
        if (true)
            OP_Utils::evalOpParm(myOffset, node, "offset", time, 0);
        else myOffset = 0;
        if (true)
            OP_Utils::evalOpParm(myInterior, node, "interior", time, 0);
        else myInterior = false;
        if (true)
            OP_Utils::evalOpParm(myStamppieces, node, "stamppieces", time, 0);
        else myStamppieces = false;
        if (true && ( (!(((getStamppieces()==0)))) ) )
            OP_Utils::evalOpParm(myPieceattrib, node, "pieceattrib", time, 0);
        else myPieceattrib = "piece"_sh;
        if (true && ( (!(((getStamppieces()==0))||((getInterior()==0)))) ) )
            OP_Utils::evalOpParm(myClipptattrib, node, "clipptattrib", time, 0);
        else myClipptattrib = "clippt"_sh;
        if (true)
            OP_Utils::evalOpParm(myUseweightattrib, node, "useweightattrib", time, 0);
        else myUseweightattrib = false;
        if (true && ( (!(((getUseweightattrib()==0)))) ) )
            OP_Utils::evalOpParm(myWeightattrib, node, "weightattrib", time, 0);
        else myWeightattrib = "pscale"_sh;
        if (true && ( (!(((getUseweightattrib()==0)))) ) )
            OP_Utils::evalOpParm(myWeightMethod, node, "weightmethod", time, 0);
        else myWeightMethod = 0;

    }


    virtual void loadFromOpSubclass(const LoadParms &loadparms)
    {
        buildFromOp(loadparms.node(), loadparms.context().getTime(), loadparms.depnode());
    }


    virtual void copyFrom(const SOP_NodeParms *src)
    {
        *this = *((const SOP_VoronoiSplitParms *)src);
    }

    template <typename T>
    void
    doGetParmValue(exint idx, T &value) const
    {
        switch (idx)
        {
            case 0:
                coerceValue(value, myGroup);
                break;
            case 1:
                coerceValue(value, myClipptsgrp);
                break;
            case 2:
                coerceValue(value, myOffset);
                break;
            case 3:
                coerceValue(value, myInterior);
                break;
            case 4:
                coerceValue(value, myStamppieces);
                break;
            case 5:
                coerceValue(value, myPieceattrib);
                break;
            case 6:
                coerceValue(value, myClipptattrib);
                break;
            case 7:
                coerceValue(value, myUseweightattrib);
                break;
            case 8:
                coerceValue(value, myWeightattrib);
                break;
            case 9:
                coerceValue(value, myWeightMethod);
                break;

        }
    }

    void        getParmValue(exint idx, exint &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, fpreal &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Vector2D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Vector3D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Vector4D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Matrix2D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Matrix3D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Matrix4D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_StringHolder &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_SharedPtr<UT_Ramp> &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, PRM_DataItemHandle &value) const
    { doGetParmValue(idx, value); }

    template <typename T>
    void
    doSetParmValue(exint idx, const T &value) 
    {
        switch (idx)
        {
            case 0:
                coerceValue(myGroup, value);
                break;
            case 1:
                coerceValue(myClipptsgrp, value);
                break;
            case 2:
                coerceValue(myOffset, value);
                break;
            case 3:
                coerceValue(myInterior, value);
                break;
            case 4:
                coerceValue(myStamppieces, value);
                break;
            case 5:
                coerceValue(myPieceattrib, value);
                break;
            case 6:
                coerceValue(myClipptattrib, value);
                break;
            case 7:
                coerceValue(myUseweightattrib, value);
                break;
            case 8:
                coerceValue(myWeightattrib, value);
                break;
            case 9:
                coerceValue(myWeightMethod, value);
                break;

        }
    }

    void        setParmValue(exint idx, const exint &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const fpreal &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Vector2D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Vector3D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Vector4D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Matrix2D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Matrix3D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Matrix4D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_StringHolder &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_SharedPtr<UT_Ramp> &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const PRM_DataItemHandle &value) 
    { doSetParmValue(idx, value); }

    virtual exint    getNumParms() const
    {
        return 10;
    }

    virtual const char *getParmName(exint fieldnum) const
    {
        switch (fieldnum)
        {
            case 0:
                return "group";
            case 1:
                return "clipptsgrp";
            case 2:
                return "offset";
            case 3:
                return "interior";
            case 4:
                return "stamppieces";
            case 5:
                return "pieceattrib";
            case 6:
                return "clipptattrib";
            case 7:
                return "useweightattrib";
            case 8:
                return "weightattrib";
            case 9:
                return "weightmethod";

        }
        return 0;
    }

    virtual ParmType getParmType(exint fieldnum) const
    {
        switch (fieldnum)
        {
                case 0:
                    return PARM_STRING;
                case 1:
                    return PARM_STRING;
                case 2:
                    return PARM_FLOAT;
                case 3:
                    return PARM_INTEGER;
                case 4:
                    return PARM_INTEGER;
                case 5:
                    return PARM_STRING;
                case 6:
                    return PARM_STRING;
                case 7:
                    return PARM_INTEGER;
                case 8:
                    return PARM_STRING;
                case 9:
                    return PARM_INTEGER;

        }
        return PARM_UNSUPPORTED;
    }

    // Boiler plate to load individual types.
    static void  loadData(UT_IStream &is, int64 &v)
    { is.bread(&v, 1); }
    static void  loadData(UT_IStream &is, bool &v)
    { int64     iv; is.bread(&iv, 1); v = iv; }
    static void  loadData(UT_IStream &is, fpreal64 &v)
    { is.bread<fpreal64>(&v, 1); }
    static void  loadData(UT_IStream &is, UT_Vector2D &v)
    { is.bread<fpreal64>(&v.x(), 1); is.bread<fpreal64>(&v.y(), 1); }
    static void  loadData(UT_IStream &is, UT_Vector3D &v)
    { is.bread<fpreal64>(&v.x(), 1); is.bread<fpreal64>(&v.y(), 1);
      is.bread<fpreal64>(&v.z(), 1); }
    static void  loadData(UT_IStream &is, UT_Vector4D &v)
    { is.bread<fpreal64>(&v.x(), 1); is.bread<fpreal64>(&v.y(), 1);
      is.bread<fpreal64>(&v.z(), 1); is.bread<fpreal64>(&v.w(), 1); }
    static void  loadData(UT_IStream &is, UT_Matrix2D &v)
    { for (int r = 0; r < 2; r++) for (int c = 0; c < 2; c++) is.bread<fpreal64>(&v(r, c), 1); }
    static void  loadData(UT_IStream &is, UT_Matrix3D &v)
    { for (int r = 0; r < 3; r++) for (int c = 0; c < 3; c++) is.bread<fpreal64>(&v(r, c), 1); }
    static void  loadData(UT_IStream &is, UT_Matrix4D &v)
    { for (int r = 0; r < 4; r++) for (int c = 0; c < 4; c++) is.bread<fpreal64>(&v(r, c), 1); }
    static void  loadData(UT_IStream &is, UT_Vector2I &v)
    { is.bread<int64>(&v.x(), 1); is.bread<int64>(&v.y(), 1); }
    static void  loadData(UT_IStream &is, UT_Vector3I &v)
    { is.bread<int64>(&v.x(), 1); is.bread<int64>(&v.y(), 1);
      is.bread<int64>(&v.z(), 1); }
    static void  loadData(UT_IStream &is, UT_Vector4I &v)
    { is.bread<int64>(&v.x(), 1); is.bread<int64>(&v.y(), 1);
      is.bread<int64>(&v.z(), 1); is.bread<int64>(&v.w(), 1); }
    static void  loadData(UT_IStream &is, UT_StringHolder &v)
    { is.bread(v); }
    static void  loadData(UT_IStream &is, UT_SharedPtr<UT_Ramp> &v)
    {   UT_StringHolder   rampdata;
        loadData(is, rampdata);
        if (rampdata.isstring())
        {
            v.reset(new UT_Ramp());
            UT_IStream  istr((const char *) rampdata, rampdata.length(), UT_ISTREAM_ASCII);
            v->load(istr);
        }
        else v.reset();
    }
    static void  loadData(UT_IStream &is, PRM_DataItemHandle &v)
    {   UT_StringHolder   data;
        loadData(is, data);
        if (data.isstring())
        {
            // Find the data type.
            char *colon = UT_StringWrap(data).findChar(':');
            if (colon)
            {
                int             typelen = colon - data.buffer();
                UT_WorkBuffer   type;
                type.strncpy(data.buffer(), typelen);
                UT_IStream  istr(((const char *) data) + typelen + 1, data.length() - (typelen + 1), UT_ISTREAM_BINARY);
                
                v = PRM_DataFactory::parseBinary(type.buffer(), istr);
            }
        }
        else v.reset();
    }

    static void  saveData(std::ostream &os, int64 v)
    { UTwrite(os, &v); }
    static void  saveData(std::ostream &os, bool v)
    { int64 iv = v; UTwrite(os, &iv); }
    static void  saveData(std::ostream &os, fpreal64 v)
    { UTwrite<fpreal64>(os, &v); }
    static void  saveData(std::ostream &os, UT_Vector2D v)
    { UTwrite<fpreal64>(os, &v.x()); UTwrite<fpreal64>(os, &v.y()); }
    static void  saveData(std::ostream &os, UT_Vector3D v)
    { UTwrite<fpreal64>(os, &v.x()); UTwrite<fpreal64>(os, &v.y());
      UTwrite<fpreal64>(os, &v.z()); }
    static void  saveData(std::ostream &os, UT_Vector4D v)
    { UTwrite<fpreal64>(os, &v.x()); UTwrite<fpreal64>(os, &v.y());
      UTwrite<fpreal64>(os, &v.z()); UTwrite<fpreal64>(os, &v.w()); }
    static void  saveData(std::ostream &os, UT_Matrix2D v)
    { for (int r = 0; r < 2; r++) for (int c = 0; c < 2; c++) UTwrite<fpreal64>(os, &v(r, c)); }
    static void  saveData(std::ostream &os, UT_Matrix3D v)
    { for (int r = 0; r < 3; r++) for (int c = 0; c < 3; c++) UTwrite<fpreal64>(os, &v(r, c)); }
    static void  saveData(std::ostream &os, UT_Matrix4D v)
    { for (int r = 0; r < 4; r++) for (int c = 0; c < 4; c++) UTwrite<fpreal64>(os, &v(r, c)); }
    static void  saveData(std::ostream &os, UT_StringHolder s)
    { UT_StringWrap(s).saveBinary(os); }
    static void  saveData(std::ostream &os, UT_SharedPtr<UT_Ramp> s)
    {   UT_StringHolder         result;
        UT_OStringStream        ostr;
        if (s) s->save(ostr);
        result = ostr.str();
        saveData(os, result);
    }
    static void  saveData(std::ostream &os, PRM_DataItemHandle s)
    {   UT_StringHolder         result;
        UT_OStringStream        ostr;
        if (s) 
        {
            ostr << s->getDataTypeToken();
            ostr << ":";
            s->saveBinary(ostr);
        }
        result = ostr.str();
        saveData(os, result);
    }


    void         save(std::ostream &os) const
    {
        int32           v = version();
        UTwrite(os, &v);
        saveData(os, myGroup);
        saveData(os, myClipptsgrp);
        saveData(os, myOffset);
        saveData(os, myInterior);
        saveData(os, myStamppieces);
        saveData(os, myPieceattrib);
        saveData(os, myClipptattrib);
        saveData(os, myUseweightattrib);
        saveData(os, myWeightattrib);
        saveData(os, myWeightMethod);

    }

    bool         load(UT_IStream &is)
    {
        int32           v;
        is.bread(&v, 1);
        if (version() != v)
        {
            // Fail incompatible versions
            return false;
        }
        loadData(is, myGroup);
        loadData(is, myClipptsgrp);
        loadData(is, myOffset);
        loadData(is, myInterior);
        loadData(is, myStamppieces);
        loadData(is, myPieceattrib);
        loadData(is, myClipptattrib);
        loadData(is, myUseweightattrib);
        loadData(is, myWeightattrib);
        loadData(is, myWeightMethod);

        return true;
    }

    const UT_StringHolder & getGroup() const { return myGroup; }
    void setGroup(const UT_StringHolder & val) { myGroup = val; }
    UT_StringHolder opGroup(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getGroup();
        UT_StringHolder result;
        OP_Utils::evalOpParm(result, thissop, "group", cookparms.getCookTime(), 0);
        return result;
    }
    const UT_StringHolder & getClipptsgrp() const { return myClipptsgrp; }
    void setClipptsgrp(const UT_StringHolder & val) { myClipptsgrp = val; }
    UT_StringHolder opClipptsgrp(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getClipptsgrp();
        UT_StringHolder result;
        OP_Utils::evalOpParm(result, thissop, "clipptsgrp", cookparms.getCookTime(), 0);
        return result;
    }
    fpreal64 getOffset() const { return myOffset; }
    void setOffset(fpreal64 val) { myOffset = val; }
    fpreal64 opOffset(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getOffset();
        fpreal64 result;
        OP_Utils::evalOpParm(result, thissop, "offset", cookparms.getCookTime(), 0);
        return result;
    }
    bool getInterior() const { return myInterior; }
    void setInterior(bool val) { myInterior = val; }
    bool opInterior(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getInterior();
        bool result;
        OP_Utils::evalOpParm(result, thissop, "interior", cookparms.getCookTime(), 0);
        return result;
    }
    bool getStamppieces() const { return myStamppieces; }
    void setStamppieces(bool val) { myStamppieces = val; }
    bool opStamppieces(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getStamppieces();
        bool result;
        OP_Utils::evalOpParm(result, thissop, "stamppieces", cookparms.getCookTime(), 0);
        return result;
    }
    const UT_StringHolder & getPieceattrib() const { return myPieceattrib; }
    void setPieceattrib(const UT_StringHolder & val) { myPieceattrib = val; }
    UT_StringHolder opPieceattrib(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getPieceattrib();
        UT_StringHolder result;
        OP_Utils::evalOpParm(result, thissop, "pieceattrib", cookparms.getCookTime(), 0);
        return result;
    }
    const UT_StringHolder & getClipptattrib() const { return myClipptattrib; }
    void setClipptattrib(const UT_StringHolder & val) { myClipptattrib = val; }
    UT_StringHolder opClipptattrib(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getClipptattrib();
        UT_StringHolder result;
        OP_Utils::evalOpParm(result, thissop, "clipptattrib", cookparms.getCookTime(), 0);
        return result;
    }
    bool getUseweightattrib() const { return myUseweightattrib; }
    void setUseweightattrib(bool val) { myUseweightattrib = val; }
    bool opUseweightattrib(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getUseweightattrib();
        bool result;
        OP_Utils::evalOpParm(result, thissop, "useweightattrib", cookparms.getCookTime(), 0);
        return result;
    }
    const UT_StringHolder & getWeightattrib() const { return myWeightattrib; }
    void setWeightattrib(const UT_StringHolder & val) { myWeightattrib = val; }
    UT_StringHolder opWeightattrib(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getWeightattrib();
        UT_StringHolder result;
        OP_Utils::evalOpParm(result, thissop, "weightattrib", cookparms.getCookTime(), 0);
        return result;
    }
    WeightMethod getWeightMethod() const { return WeightMethod(myWeightMethod); }
    void setWeightMethod(WeightMethod val) { myWeightMethod = int64(val); }
    WeightMethod opWeightMethod(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getWeightMethod();
        int64 result;
        OP_Utils::evalOpParm(result, thissop, "weightmethod", cookparms.getCookTime(), 0);
        return WeightMethod(result);
    }

private:
    UT_StringHolder myGroup;
    UT_StringHolder myClipptsgrp;
    fpreal64 myOffset;
    bool myInterior;
    bool myStamppieces;
    UT_StringHolder myPieceattrib;
    UT_StringHolder myClipptattrib;
    bool myUseweightattrib;
    UT_StringHolder myWeightattrib;
    int64 myWeightMethod;

};
