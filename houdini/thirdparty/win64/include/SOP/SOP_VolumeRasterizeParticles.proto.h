/* Automagically Generated by generate_proto.py
 * Do not Edit
 */
#pragma once

#include <SOP/SOP_NodeVerb.h>
#include <OP/OP_Utils.h>
#include <PRM/PRM_Parm.h>
#include <UT/UT_IStream.h>
#include <UT/UT_NTStreamUtil.h>
#include <UT/UT_Ramp.h>
#include <UT/UT_SharedPtr.h>
#include <UT/UT_StringHolder.h>
#include <UT/UT_StringStream.h>
#include <UT/UT_VectorTypes.h>
#include <SYS/SYS_Types.h>

using namespace UT::Literal;

class DEP_MicroNode;
namespace SOP_VolumeRasterizeParticlesEnums
{
    enum class Rule
    {
        WAVG = 0,
        THRESHOLD,
        ACCUMULATED,
        STOCHASTIC
    };
}


class SOP_API SOP_VolumeRasterizeParticlesParms  : public SOP_NodeParms
{
public:
    static int version() { return 1; }
    struct Attribrules
    {
        UT_StringHolder attribute;
        int64 rule;


        Attribrules()
        {
            attribute = ""_sh;
            rule = 0;

        }

        bool operator==(const Attribrules &src) const
        {
            if (attribute != src.attribute) return false;
            if (rule != src.rule) return false;

            return true;
        }
        bool operator!=(const Attribrules &src) const
        {
            return !operator==(src);
        }

    };

    UT_StringHolder createString(const UT_Array<Attribrules> &list) const
    {
        UT_WorkBuffer   buf;

        buf.strcat("[ ");
        for (int i = 0; i < list.entries(); i++)
        {
            if (i)
                buf.strcat(", ");
            buf.strcat("( ");
            buf.append("");
            { UT_String tmp; tmp = UT_StringWrap(list(i).attribute).makeQuotedString('"'); buf.strcat(tmp); }
            buf.append(", ");
            buf.appendSprintf("%d", (int) list(i).rule);

            buf.strcat(" )");
        }
        buf.strcat(" ]");

        UT_StringHolder result = buf;
        return result;
    }

    SOP_VolumeRasterizeParticlesParms()
    {
        myGroup = ""_sh;
        myPoints = ""_sh;
        myFilter = "gauss"_sh;
        myDensityattrib = "density"_sh;
        myDensityscale = 1;
        myParticlescale = 1;
        myMinfilter = 0.75;
        myVelocityblur = false;
        myShutter = 0.5;
        myShutteroffset = 1;
        myBlursamples = 4;
        myNormalize = false;

    }

    explicit SOP_VolumeRasterizeParticlesParms(const SOP_VolumeRasterizeParticlesParms &) = default;

    virtual ~SOP_VolumeRasterizeParticlesParms() {}

    bool operator==(const SOP_VolumeRasterizeParticlesParms &src) const
    {
        if (myGroup != src.myGroup) return false;
        if (myPoints != src.myPoints) return false;
        if (myFilter != src.myFilter) return false;
        if (myDensityattrib != src.myDensityattrib) return false;
        if (myDensityscale != src.myDensityscale) return false;
        if (myParticlescale != src.myParticlescale) return false;
        if (myMinfilter != src.myMinfilter) return false;
        if (myVelocityblur != src.myVelocityblur) return false;
        if (myShutter != src.myShutter) return false;
        if (myShutteroffset != src.myShutteroffset) return false;
        if (myBlursamples != src.myBlursamples) return false;
        if (myNormalize != src.myNormalize) return false;
        if (myAttribrules != src.myAttribrules) return false;

        return true;
    }
    bool operator!=(const SOP_VolumeRasterizeParticlesParms &src) const
    {
        return !operator==(src);
    }
    using Rule = SOP_VolumeRasterizeParticlesEnums::Rule;



    void        buildFromOp(const OP_Node *node, fpreal time, DEP_MicroNode *depnode)
    {
        if (true)
            OP_Utils::evalOpParm(myGroup, node, "group", time, 0);
        else myGroup = ""_sh;
        if (true)
            OP_Utils::evalOpParm(myPoints, node, "points", time, 0);
        else myPoints = ""_sh;
        if (true)
            OP_Utils::evalOpParm(myFilter, node, "filter", time, 0);
        else myFilter = "gauss"_sh;
        if (true)
            OP_Utils::evalOpParm(myDensityattrib, node, "densityattrib", time, 0);
        else myDensityattrib = "density"_sh;
        if (true)
            OP_Utils::evalOpParm(myDensityscale, node, "densityscale", time, 0);
        else myDensityscale = 1;
        if (true)
            OP_Utils::evalOpParm(myParticlescale, node, "particlescale", time, 0);
        else myParticlescale = 1;
        if (true)
            OP_Utils::evalOpParm(myMinfilter, node, "minfilter", time, 0);
        else myMinfilter = 0.75;
        if (true)
            OP_Utils::evalOpParm(myVelocityblur, node, "velocityblur", time, 0);
        else myVelocityblur = false;
        if (true && ( (!(((getVelocityblur()==0)))) ) )
            OP_Utils::evalOpParm(myShutter, node, "shutter", time, 0);
        else myShutter = 0.5;
        if (true && ( (!(((getVelocityblur()==0)))) ) )
            OP_Utils::evalOpParm(myShutteroffset, node, "shutteroffset", time, 0);
        else myShutteroffset = 1;
        if (true && ( (!(((getVelocityblur()==0)))) ) )
            OP_Utils::evalOpParm(myBlursamples, node, "blursamples", time, 0);
        else myBlursamples = 4;
        if (true)
            OP_Utils::evalOpParm(myNormalize, node, "normalize", time, 0);
        else myNormalize = false;
            if (true)
            {
                int64   length;
                OP_Utils::evalOpParm(length, node, "attribrules", time, 0);
                myAttribrules.entries(length);
                for (exint i = 0; i < length; i++)
                {
                    int     parmidx = i+1;
                    auto && _curentry = myAttribrules(i);
                    (void) _curentry;
                    if (true)
                        OP_Utils::evalOpParmInst(myAttribrules(i).attribute, node, "attribute#", &parmidx, time, 0);
                    else myAttribrules(i).attribute = ""_sh;
                    if (true)
                        OP_Utils::evalOpParmInst(myAttribrules(i).rule, node, "rule#", &parmidx, time, 0);
                    else myAttribrules(i).rule = 0;

                }
            }
            else
                myAttribrules.clear();

    }


    virtual void loadFromOpSubclass(const LoadParms &loadparms)
    {
        buildFromOp(loadparms.node(), loadparms.context().getTime(), loadparms.depnode());
    }


    virtual void copyFrom(const SOP_NodeParms *src)
    {
        *this = *((const SOP_VolumeRasterizeParticlesParms *)src);
    }

    template <typename T>
    void
    doGetParmValue(exint idx, T &value) const
    {
        switch (idx)
        {
            case 0:
                coerceValue(value, myGroup);
                break;
            case 1:
                coerceValue(value, myPoints);
                break;
            case 2:
                coerceValue(value, myFilter);
                break;
            case 3:
                coerceValue(value, myDensityattrib);
                break;
            case 4:
                coerceValue(value, myDensityscale);
                break;
            case 5:
                coerceValue(value, myParticlescale);
                break;
            case 6:
                coerceValue(value, myMinfilter);
                break;
            case 7:
                coerceValue(value, myVelocityblur);
                break;
            case 8:
                coerceValue(value, myShutter);
                break;
            case 9:
                coerceValue(value, myShutteroffset);
                break;
            case 10:
                coerceValue(value, myBlursamples);
                break;
            case 11:
                coerceValue(value, myNormalize);
                break;

        }
    }

    void        getParmValue(exint idx, exint &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, fpreal &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Vector2D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Vector3D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Vector4D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Matrix2D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Matrix3D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Matrix4D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_StringHolder &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_SharedPtr<UT_Ramp> &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, PRM_DataItemHandle &value) const
    { doGetParmValue(idx, value); }

    template <typename T>
    void
    doSetParmValue(exint idx, const T &value) 
    {
        switch (idx)
        {
            case 0:
                coerceValue(myGroup, value);
                break;
            case 1:
                coerceValue(myPoints, value);
                break;
            case 2:
                coerceValue(myFilter, value);
                break;
            case 3:
                coerceValue(myDensityattrib, value);
                break;
            case 4:
                coerceValue(myDensityscale, value);
                break;
            case 5:
                coerceValue(myParticlescale, value);
                break;
            case 6:
                coerceValue(myMinfilter, value);
                break;
            case 7:
                coerceValue(myVelocityblur, value);
                break;
            case 8:
                coerceValue(myShutter, value);
                break;
            case 9:
                coerceValue(myShutteroffset, value);
                break;
            case 10:
                coerceValue(myBlursamples, value);
                break;
            case 11:
                coerceValue(myNormalize, value);
                break;

        }
    }

    void        setParmValue(exint idx, const exint &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const fpreal &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Vector2D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Vector3D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Vector4D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Matrix2D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Matrix3D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Matrix4D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_StringHolder &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_SharedPtr<UT_Ramp> &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const PRM_DataItemHandle &value) 
    { doSetParmValue(idx, value); }

    virtual exint    getNumParms() const
    {
        return 13;
    }

    virtual const char *getParmName(exint fieldnum) const
    {
        switch (fieldnum)
        {
            case 0:
                return "group";
            case 1:
                return "points";
            case 2:
                return "filter";
            case 3:
                return "densityattrib";
            case 4:
                return "densityscale";
            case 5:
                return "particlescale";
            case 6:
                return "minfilter";
            case 7:
                return "velocityblur";
            case 8:
                return "shutter";
            case 9:
                return "shutteroffset";
            case 10:
                return "blursamples";
            case 11:
                return "normalize";
                case 12:
                    return "attribrules";

        }
        return 0;
    }

    virtual ParmType getParmType(exint fieldnum) const
    {
        switch (fieldnum)
        {
                case 0:
                    return PARM_STRING;
                case 1:
                    return PARM_STRING;
                case 2:
                    return PARM_STRING;
                case 3:
                    return PARM_STRING;
                case 4:
                    return PARM_FLOAT;
                case 5:
                    return PARM_FLOAT;
                case 6:
                    return PARM_FLOAT;
                case 7:
                    return PARM_INTEGER;
                case 8:
                    return PARM_FLOAT;
                case 9:
                    return PARM_FLOAT;
                case 10:
                    return PARM_INTEGER;
                case 11:
                    return PARM_INTEGER;

        }
        return PARM_UNSUPPORTED;
    }

    // Boiler plate to load individual types.
    static void  loadData(UT_IStream &is, int64 &v)
    { is.bread(&v, 1); }
    static void  loadData(UT_IStream &is, bool &v)
    { int64     iv; is.bread(&iv, 1); v = iv; }
    static void  loadData(UT_IStream &is, fpreal64 &v)
    { is.bread<fpreal64>(&v, 1); }
    static void  loadData(UT_IStream &is, UT_Vector2D &v)
    { is.bread<fpreal64>(&v.x(), 1); is.bread<fpreal64>(&v.y(), 1); }
    static void  loadData(UT_IStream &is, UT_Vector3D &v)
    { is.bread<fpreal64>(&v.x(), 1); is.bread<fpreal64>(&v.y(), 1);
      is.bread<fpreal64>(&v.z(), 1); }
    static void  loadData(UT_IStream &is, UT_Vector4D &v)
    { is.bread<fpreal64>(&v.x(), 1); is.bread<fpreal64>(&v.y(), 1);
      is.bread<fpreal64>(&v.z(), 1); is.bread<fpreal64>(&v.w(), 1); }
    static void  loadData(UT_IStream &is, UT_Matrix2D &v)
    { for (int r = 0; r < 2; r++) for (int c = 0; c < 2; c++) is.bread<fpreal64>(&v(r, c), 1); }
    static void  loadData(UT_IStream &is, UT_Matrix3D &v)
    { for (int r = 0; r < 3; r++) for (int c = 0; c < 3; c++) is.bread<fpreal64>(&v(r, c), 1); }
    static void  loadData(UT_IStream &is, UT_Matrix4D &v)
    { for (int r = 0; r < 4; r++) for (int c = 0; c < 4; c++) is.bread<fpreal64>(&v(r, c), 1); }
    static void  loadData(UT_IStream &is, UT_Vector2I &v)
    { is.bread<int64>(&v.x(), 1); is.bread<int64>(&v.y(), 1); }
    static void  loadData(UT_IStream &is, UT_Vector3I &v)
    { is.bread<int64>(&v.x(), 1); is.bread<int64>(&v.y(), 1);
      is.bread<int64>(&v.z(), 1); }
    static void  loadData(UT_IStream &is, UT_Vector4I &v)
    { is.bread<int64>(&v.x(), 1); is.bread<int64>(&v.y(), 1);
      is.bread<int64>(&v.z(), 1); is.bread<int64>(&v.w(), 1); }
    static void  loadData(UT_IStream &is, UT_StringHolder &v)
    { is.bread(v); }
    static void  loadData(UT_IStream &is, UT_SharedPtr<UT_Ramp> &v)
    {   UT_StringHolder   rampdata;
        loadData(is, rampdata);
        if (rampdata.isstring())
        {
            v.reset(new UT_Ramp());
            UT_IStream  istr((const char *) rampdata, rampdata.length(), UT_ISTREAM_ASCII);
            v->load(istr);
        }
        else v.reset();
    }
    static void  loadData(UT_IStream &is, PRM_DataItemHandle &v)
    {   UT_StringHolder   data;
        loadData(is, data);
        if (data.isstring())
        {
            // Find the data type.
            char *colon = UT_StringWrap(data).findChar(':');
            if (colon)
            {
                int             typelen = colon - data.buffer();
                UT_WorkBuffer   type;
                type.strncpy(data.buffer(), typelen);
                UT_IStream  istr(((const char *) data) + typelen + 1, data.length() - (typelen + 1), UT_ISTREAM_BINARY);
                
                v = PRM_DataFactory::parseBinary(type.buffer(), istr);
            }
        }
        else v.reset();
    }

    static void  saveData(std::ostream &os, int64 v)
    { UTwrite(os, &v); }
    static void  saveData(std::ostream &os, bool v)
    { int64 iv = v; UTwrite(os, &iv); }
    static void  saveData(std::ostream &os, fpreal64 v)
    { UTwrite<fpreal64>(os, &v); }
    static void  saveData(std::ostream &os, UT_Vector2D v)
    { UTwrite<fpreal64>(os, &v.x()); UTwrite<fpreal64>(os, &v.y()); }
    static void  saveData(std::ostream &os, UT_Vector3D v)
    { UTwrite<fpreal64>(os, &v.x()); UTwrite<fpreal64>(os, &v.y());
      UTwrite<fpreal64>(os, &v.z()); }
    static void  saveData(std::ostream &os, UT_Vector4D v)
    { UTwrite<fpreal64>(os, &v.x()); UTwrite<fpreal64>(os, &v.y());
      UTwrite<fpreal64>(os, &v.z()); UTwrite<fpreal64>(os, &v.w()); }
    static void  saveData(std::ostream &os, UT_Matrix2D v)
    { for (int r = 0; r < 2; r++) for (int c = 0; c < 2; c++) UTwrite<fpreal64>(os, &v(r, c)); }
    static void  saveData(std::ostream &os, UT_Matrix3D v)
    { for (int r = 0; r < 3; r++) for (int c = 0; c < 3; c++) UTwrite<fpreal64>(os, &v(r, c)); }
    static void  saveData(std::ostream &os, UT_Matrix4D v)
    { for (int r = 0; r < 4; r++) for (int c = 0; c < 4; c++) UTwrite<fpreal64>(os, &v(r, c)); }
    static void  saveData(std::ostream &os, UT_StringHolder s)
    { UT_StringWrap(s).saveBinary(os); }
    static void  saveData(std::ostream &os, UT_SharedPtr<UT_Ramp> s)
    {   UT_StringHolder         result;
        UT_OStringStream        ostr;
        if (s) s->save(ostr);
        result = ostr.str();
        saveData(os, result);
    }
    static void  saveData(std::ostream &os, PRM_DataItemHandle s)
    {   UT_StringHolder         result;
        UT_OStringStream        ostr;
        if (s) 
        {
            ostr << s->getDataTypeToken();
            ostr << ":";
            s->saveBinary(ostr);
        }
        result = ostr.str();
        saveData(os, result);
    }


    void         save(std::ostream &os) const
    {
        int32           v = version();
        UTwrite(os, &v);
        saveData(os, myGroup);
        saveData(os, myPoints);
        saveData(os, myFilter);
        saveData(os, myDensityattrib);
        saveData(os, myDensityscale);
        saveData(os, myParticlescale);
        saveData(os, myMinfilter);
        saveData(os, myVelocityblur);
        saveData(os, myShutter);
        saveData(os, myShutteroffset);
        saveData(os, myBlursamples);
        saveData(os, myNormalize);
        {
            int64   length = myAttribrules.entries();
            UTwrite(os, &length);
            for (exint i = 0; i < length; i++)
            {
                saveData(os, myAttribrules(i).attribute);
                saveData(os, myAttribrules(i).rule);

            }
        }

    }

    bool         load(UT_IStream &is)
    {
        int32           v;
        is.bread(&v, 1);
        if (version() != v)
        {
            // Fail incompatible versions
            return false;
        }
        loadData(is, myGroup);
        loadData(is, myPoints);
        loadData(is, myFilter);
        loadData(is, myDensityattrib);
        loadData(is, myDensityscale);
        loadData(is, myParticlescale);
        loadData(is, myMinfilter);
        loadData(is, myVelocityblur);
        loadData(is, myShutter);
        loadData(is, myShutteroffset);
        loadData(is, myBlursamples);
        loadData(is, myNormalize);
        {
            int64   length;
            is.read(&length, 1);
            myAttribrules.entries(length);
            for (exint i = 0; i < length; i++)
            {
                loadData(is, myAttribrules(i).attribute);
                loadData(is, myAttribrules(i).rule);

            }
        }

        return true;
    }

    const UT_StringHolder & getGroup() const { return myGroup; }
    void setGroup(const UT_StringHolder & val) { myGroup = val; }
    UT_StringHolder opGroup(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getGroup();
        UT_StringHolder result;
        OP_Utils::evalOpParm(result, thissop, "group", cookparms.getCookTime(), 0);
        return result;
    }
    const UT_StringHolder & getPoints() const { return myPoints; }
    void setPoints(const UT_StringHolder & val) { myPoints = val; }
    UT_StringHolder opPoints(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getPoints();
        UT_StringHolder result;
        OP_Utils::evalOpParm(result, thissop, "points", cookparms.getCookTime(), 0);
        return result;
    }
    const UT_StringHolder & getFilter() const { return myFilter; }
    void setFilter(const UT_StringHolder & val) { myFilter = val; }
    UT_StringHolder opFilter(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getFilter();
        UT_StringHolder result;
        OP_Utils::evalOpParm(result, thissop, "filter", cookparms.getCookTime(), 0);
        return result;
    }
    const UT_StringHolder & getDensityattrib() const { return myDensityattrib; }
    void setDensityattrib(const UT_StringHolder & val) { myDensityattrib = val; }
    UT_StringHolder opDensityattrib(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getDensityattrib();
        UT_StringHolder result;
        OP_Utils::evalOpParm(result, thissop, "densityattrib", cookparms.getCookTime(), 0);
        return result;
    }
    fpreal64 getDensityscale() const { return myDensityscale; }
    void setDensityscale(fpreal64 val) { myDensityscale = val; }
    fpreal64 opDensityscale(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getDensityscale();
        fpreal64 result;
        OP_Utils::evalOpParm(result, thissop, "densityscale", cookparms.getCookTime(), 0);
        return result;
    }
    fpreal64 getParticlescale() const { return myParticlescale; }
    void setParticlescale(fpreal64 val) { myParticlescale = val; }
    fpreal64 opParticlescale(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getParticlescale();
        fpreal64 result;
        OP_Utils::evalOpParm(result, thissop, "particlescale", cookparms.getCookTime(), 0);
        return result;
    }
    fpreal64 getMinfilter() const { return myMinfilter; }
    void setMinfilter(fpreal64 val) { myMinfilter = val; }
    fpreal64 opMinfilter(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getMinfilter();
        fpreal64 result;
        OP_Utils::evalOpParm(result, thissop, "minfilter", cookparms.getCookTime(), 0);
        return result;
    }
    bool getVelocityblur() const { return myVelocityblur; }
    void setVelocityblur(bool val) { myVelocityblur = val; }
    bool opVelocityblur(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getVelocityblur();
        bool result;
        OP_Utils::evalOpParm(result, thissop, "velocityblur", cookparms.getCookTime(), 0);
        return result;
    }
    fpreal64 getShutter() const { return myShutter; }
    void setShutter(fpreal64 val) { myShutter = val; }
    fpreal64 opShutter(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getShutter();
        fpreal64 result;
        OP_Utils::evalOpParm(result, thissop, "shutter", cookparms.getCookTime(), 0);
        return result;
    }
    fpreal64 getShutteroffset() const { return myShutteroffset; }
    void setShutteroffset(fpreal64 val) { myShutteroffset = val; }
    fpreal64 opShutteroffset(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getShutteroffset();
        fpreal64 result;
        OP_Utils::evalOpParm(result, thissop, "shutteroffset", cookparms.getCookTime(), 0);
        return result;
    }
    int64 getBlursamples() const { return myBlursamples; }
    void setBlursamples(int64 val) { myBlursamples = val; }
    int64 opBlursamples(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getBlursamples();
        int64 result;
        OP_Utils::evalOpParm(result, thissop, "blursamples", cookparms.getCookTime(), 0);
        return result;
    }
    bool getNormalize() const { return myNormalize; }
    void setNormalize(bool val) { myNormalize = val; }
    bool opNormalize(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getNormalize();
        bool result;
        OP_Utils::evalOpParm(result, thissop, "normalize", cookparms.getCookTime(), 0);
        return result;
    }
    const UT_Array<Attribrules> &getAttribrules() const { return myAttribrules; }
    void setAttribrules(const UT_Array<Attribrules> &val) { myAttribrules = val; }
    exint opAttribrules(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getAttribrules().entries();
        exint result;
        OP_Utils::evalOpParm(result, thissop, "attribrules", cookparms.getCookTime(), 0);
        return result;
    }
            UT_StringHolder opAttribrules_attribute(const SOP_NodeVerb::CookParms &cookparms, exint _idx) const
        {
            SOP_Node *thissop = cookparms.getNode();
            if (!thissop) return (myAttribrules(_idx).attribute);
            int _parmidx = _idx + 1;
            UT_StringHolder result;
            OP_Utils::evalOpParmInst(result, thissop, "attribute#", &_parmidx, cookparms.getCookTime(), 0);
            return (result);
        }
        int64 opAttribrules_rule(const SOP_NodeVerb::CookParms &cookparms, exint _idx) const
        {
            SOP_Node *thissop = cookparms.getNode();
            if (!thissop) return (myAttribrules(_idx).rule);
            int _parmidx = _idx + 1;
            int64 result;
            OP_Utils::evalOpParmInst(result, thissop, "rule#", &_parmidx, cookparms.getCookTime(), 0);
            return (result);
        }


private:
    UT_StringHolder myGroup;
    UT_StringHolder myPoints;
    UT_StringHolder myFilter;
    UT_StringHolder myDensityattrib;
    fpreal64 myDensityscale;
    fpreal64 myParticlescale;
    fpreal64 myMinfilter;
    bool myVelocityblur;
    fpreal64 myShutter;
    fpreal64 myShutteroffset;
    int64 myBlursamples;
    bool myNormalize;
    UT_Array<Attribrules> myAttribrules;

};
