/* Automagically Generated by generate_proto.py
 * Do not Edit
 */
#pragma once

#include <SOP/SOP_NodeVerb.h>
#include <OP/OP_Utils.h>
#include <PRM/PRM_Parm.h>
#include <UT/UT_IStream.h>
#include <UT/UT_NTStreamUtil.h>
#include <UT/UT_Ramp.h>
#include <UT/UT_SharedPtr.h>
#include <UT/UT_StringHolder.h>
#include <UT/UT_StringStream.h>
#include <UT/UT_VectorTypes.h>
#include <SYS/SYS_Types.h>

using namespace UT::Literal;

class DEP_MicroNode;
namespace SOP_VolumeResampleEnums
{
    enum class Uniformsamples
    {
        NONSQUARE = 0,
        X,
        Y,
        Z,
        MAX,
        SIZE
    };
}


class SOP_API SOP_VolumeResampleParms  : public SOP_NodeParms
{
public:
    static int version() { return 1; }

    SOP_VolumeResampleParms()
    {
        myGroup = ""_sh;
        myFilter = "box"_sh;
        myFilterscale = 1;
        myFixedresample = false;
        myUniformsamples = 4;
        mySamplediv = 10;
        myDivs = UT_Vector3I(10,10,10);
        myDivsize = 0.1;
        myScale = 1;
        myDetect2d = true;

    }

    explicit SOP_VolumeResampleParms(const SOP_VolumeResampleParms &) = default;

    virtual ~SOP_VolumeResampleParms() {}

    bool operator==(const SOP_VolumeResampleParms &src) const
    {
        if (myGroup != src.myGroup) return false;
        if (myFilter != src.myFilter) return false;
        if (myFilterscale != src.myFilterscale) return false;
        if (myFixedresample != src.myFixedresample) return false;
        if (myUniformsamples != src.myUniformsamples) return false;
        if (mySamplediv != src.mySamplediv) return false;
        if (myDivs != src.myDivs) return false;
        if (myDivsize != src.myDivsize) return false;
        if (myScale != src.myScale) return false;
        if (myDetect2d != src.myDetect2d) return false;

        return true;
    }
    bool operator!=(const SOP_VolumeResampleParms &src) const
    {
        return !operator==(src);
    }
    using Uniformsamples = SOP_VolumeResampleEnums::Uniformsamples;



    void        buildFromOp(const OP_Node *node, fpreal time, DEP_MicroNode *depnode)
    {
        if (true)
            OP_Utils::evalOpParm(myGroup, node, "group", time, 0);
        else myGroup = ""_sh;
        if (true)
            OP_Utils::evalOpParm(myFilter, node, "filter", time, 0);
        else myFilter = "box"_sh;
        if (true)
            OP_Utils::evalOpParm(myFilterscale, node, "filterscale", time, 0);
        else myFilterscale = 1;
        if (true)
            OP_Utils::evalOpParm(myFixedresample, node, "fixedresample", time, 0);
        else myFixedresample = false;
        if (true && ( (!(((getFixedresample()==0)))) ) )
            OP_Utils::evalOpParm(myUniformsamples, node, "uniformsamples", time, 0);
        else myUniformsamples = 4;
        if (true && ( (!(((getFixedresample()==0))||((int64(getUniformsamples())==0))||((int64(getUniformsamples())==5)))) ) )
            OP_Utils::evalOpParm(mySamplediv, node, "samplediv", time, 0);
        else mySamplediv = 10;
        if (true && ( (!(((getFixedresample()==0))||((int64(getUniformsamples())!=0)))) ) )
            OP_Utils::evalOpParm(myDivs, node, "divs", time, 0);
        else myDivs = UT_Vector3I(10,10,10);
        if (true && ( (!(((getFixedresample()==0))||((int64(getUniformsamples())!=5)))) ) )
            OP_Utils::evalOpParm(myDivsize, node, "divsize", time, 0);
        else myDivsize = 0.1;
        if (true && ( (!(((getFixedresample()==1)))) ) )
            OP_Utils::evalOpParm(myScale, node, "scale", time, 0);
        else myScale = 1;
        if (true)
            OP_Utils::evalOpParm(myDetect2d, node, "detect2d", time, 0);
        else myDetect2d = true;

    }


    virtual void loadFromOpSubclass(const LoadParms &loadparms)
    {
        buildFromOp(loadparms.node(), loadparms.context().getTime(), loadparms.depnode());
    }


    virtual void copyFrom(const SOP_NodeParms *src)
    {
        *this = *((const SOP_VolumeResampleParms *)src);
    }

    template <typename T>
    void
    doGetParmValue(exint idx, T &value) const
    {
        switch (idx)
        {
            case 0:
                coerceValue(value, myGroup);
                break;
            case 1:
                coerceValue(value, myFilter);
                break;
            case 2:
                coerceValue(value, myFilterscale);
                break;
            case 3:
                coerceValue(value, myFixedresample);
                break;
            case 4:
                coerceValue(value, myUniformsamples);
                break;
            case 5:
                coerceValue(value, mySamplediv);
                break;
            case 6:
                coerceValue(value, myDivs);
                break;
            case 7:
                coerceValue(value, myDivsize);
                break;
            case 8:
                coerceValue(value, myScale);
                break;
            case 9:
                coerceValue(value, myDetect2d);
                break;

        }
    }

    void        getParmValue(exint idx, exint &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, fpreal &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Vector2D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Vector3D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Vector4D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Matrix2D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Matrix3D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Matrix4D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_StringHolder &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_SharedPtr<UT_Ramp> &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, PRM_DataItemHandle &value) const
    { doGetParmValue(idx, value); }

    template <typename T>
    void
    doSetParmValue(exint idx, const T &value) 
    {
        switch (idx)
        {
            case 0:
                coerceValue(myGroup, value);
                break;
            case 1:
                coerceValue(myFilter, value);
                break;
            case 2:
                coerceValue(myFilterscale, value);
                break;
            case 3:
                coerceValue(myFixedresample, value);
                break;
            case 4:
                coerceValue(myUniformsamples, value);
                break;
            case 5:
                coerceValue(mySamplediv, value);
                break;
            case 6:
                coerceValue(myDivs, value);
                break;
            case 7:
                coerceValue(myDivsize, value);
                break;
            case 8:
                coerceValue(myScale, value);
                break;
            case 9:
                coerceValue(myDetect2d, value);
                break;

        }
    }

    void        setParmValue(exint idx, const exint &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const fpreal &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Vector2D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Vector3D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Vector4D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Matrix2D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Matrix3D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Matrix4D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_StringHolder &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_SharedPtr<UT_Ramp> &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const PRM_DataItemHandle &value) 
    { doSetParmValue(idx, value); }

    virtual exint    getNumParms() const
    {
        return 10;
    }

    virtual const char *getParmName(exint fieldnum) const
    {
        switch (fieldnum)
        {
            case 0:
                return "group";
            case 1:
                return "filter";
            case 2:
                return "filterscale";
            case 3:
                return "fixedresample";
            case 4:
                return "uniformsamples";
            case 5:
                return "samplediv";
            case 6:
                return "divs";
            case 7:
                return "divsize";
            case 8:
                return "scale";
            case 9:
                return "detect2d";

        }
        return 0;
    }

    virtual ParmType getParmType(exint fieldnum) const
    {
        switch (fieldnum)
        {
                case 0:
                    return PARM_STRING;
                case 1:
                    return PARM_STRING;
                case 2:
                    return PARM_FLOAT;
                case 3:
                    return PARM_INTEGER;
                case 4:
                    return PARM_INTEGER;
                case 5:
                    return PARM_INTEGER;
                case 6:
                    return PARM_VECTOR3;
                case 7:
                    return PARM_FLOAT;
                case 8:
                    return PARM_FLOAT;
                case 9:
                    return PARM_INTEGER;

        }
        return PARM_UNSUPPORTED;
    }

    // Boiler plate to load individual types.
    static void  loadData(UT_IStream &is, int64 &v)
    { is.bread(&v, 1); }
    static void  loadData(UT_IStream &is, bool &v)
    { int64     iv; is.bread(&iv, 1); v = iv; }
    static void  loadData(UT_IStream &is, fpreal64 &v)
    { is.bread<fpreal64>(&v, 1); }
    static void  loadData(UT_IStream &is, UT_Vector2D &v)
    { is.bread<fpreal64>(&v.x(), 1); is.bread<fpreal64>(&v.y(), 1); }
    static void  loadData(UT_IStream &is, UT_Vector3D &v)
    { is.bread<fpreal64>(&v.x(), 1); is.bread<fpreal64>(&v.y(), 1);
      is.bread<fpreal64>(&v.z(), 1); }
    static void  loadData(UT_IStream &is, UT_Vector4D &v)
    { is.bread<fpreal64>(&v.x(), 1); is.bread<fpreal64>(&v.y(), 1);
      is.bread<fpreal64>(&v.z(), 1); is.bread<fpreal64>(&v.w(), 1); }
    static void  loadData(UT_IStream &is, UT_Matrix2D &v)
    { for (int r = 0; r < 2; r++) for (int c = 0; c < 2; c++) is.bread<fpreal64>(&v(r, c), 1); }
    static void  loadData(UT_IStream &is, UT_Matrix3D &v)
    { for (int r = 0; r < 3; r++) for (int c = 0; c < 3; c++) is.bread<fpreal64>(&v(r, c), 1); }
    static void  loadData(UT_IStream &is, UT_Matrix4D &v)
    { for (int r = 0; r < 4; r++) for (int c = 0; c < 4; c++) is.bread<fpreal64>(&v(r, c), 1); }
    static void  loadData(UT_IStream &is, UT_Vector2I &v)
    { is.bread<int64>(&v.x(), 1); is.bread<int64>(&v.y(), 1); }
    static void  loadData(UT_IStream &is, UT_Vector3I &v)
    { is.bread<int64>(&v.x(), 1); is.bread<int64>(&v.y(), 1);
      is.bread<int64>(&v.z(), 1); }
    static void  loadData(UT_IStream &is, UT_Vector4I &v)
    { is.bread<int64>(&v.x(), 1); is.bread<int64>(&v.y(), 1);
      is.bread<int64>(&v.z(), 1); is.bread<int64>(&v.w(), 1); }
    static void  loadData(UT_IStream &is, UT_StringHolder &v)
    { is.bread(v); }
    static void  loadData(UT_IStream &is, UT_SharedPtr<UT_Ramp> &v)
    {   UT_StringHolder   rampdata;
        loadData(is, rampdata);
        if (rampdata.isstring())
        {
            v.reset(new UT_Ramp());
            UT_IStream  istr((const char *) rampdata, rampdata.length(), UT_ISTREAM_ASCII);
            v->load(istr);
        }
        else v.reset();
    }
    static void  loadData(UT_IStream &is, PRM_DataItemHandle &v)
    {   UT_StringHolder   data;
        loadData(is, data);
        if (data.isstring())
        {
            // Find the data type.
            char *colon = UT_StringWrap(data).findChar(':');
            if (colon)
            {
                int             typelen = colon - data.buffer();
                UT_WorkBuffer   type;
                type.strncpy(data.buffer(), typelen);
                UT_IStream  istr(((const char *) data) + typelen + 1, data.length() - (typelen + 1), UT_ISTREAM_BINARY);
                
                v = PRM_DataFactory::parseBinary(type.buffer(), istr);
            }
        }
        else v.reset();
    }

    static void  saveData(std::ostream &os, int64 v)
    { UTwrite(os, &v); }
    static void  saveData(std::ostream &os, bool v)
    { int64 iv = v; UTwrite(os, &iv); }
    static void  saveData(std::ostream &os, fpreal64 v)
    { UTwrite<fpreal64>(os, &v); }
    static void  saveData(std::ostream &os, UT_Vector2D v)
    { UTwrite<fpreal64>(os, &v.x()); UTwrite<fpreal64>(os, &v.y()); }
    static void  saveData(std::ostream &os, UT_Vector3D v)
    { UTwrite<fpreal64>(os, &v.x()); UTwrite<fpreal64>(os, &v.y());
      UTwrite<fpreal64>(os, &v.z()); }
    static void  saveData(std::ostream &os, UT_Vector4D v)
    { UTwrite<fpreal64>(os, &v.x()); UTwrite<fpreal64>(os, &v.y());
      UTwrite<fpreal64>(os, &v.z()); UTwrite<fpreal64>(os, &v.w()); }
    static void  saveData(std::ostream &os, UT_Matrix2D v)
    { for (int r = 0; r < 2; r++) for (int c = 0; c < 2; c++) UTwrite<fpreal64>(os, &v(r, c)); }
    static void  saveData(std::ostream &os, UT_Matrix3D v)
    { for (int r = 0; r < 3; r++) for (int c = 0; c < 3; c++) UTwrite<fpreal64>(os, &v(r, c)); }
    static void  saveData(std::ostream &os, UT_Matrix4D v)
    { for (int r = 0; r < 4; r++) for (int c = 0; c < 4; c++) UTwrite<fpreal64>(os, &v(r, c)); }
    static void  saveData(std::ostream &os, UT_StringHolder s)
    { UT_StringWrap(s).saveBinary(os); }
    static void  saveData(std::ostream &os, UT_SharedPtr<UT_Ramp> s)
    {   UT_StringHolder         result;
        UT_OStringStream        ostr;
        if (s) s->save(ostr);
        result = ostr.str();
        saveData(os, result);
    }
    static void  saveData(std::ostream &os, PRM_DataItemHandle s)
    {   UT_StringHolder         result;
        UT_OStringStream        ostr;
        if (s) 
        {
            ostr << s->getDataTypeToken();
            ostr << ":";
            s->saveBinary(ostr);
        }
        result = ostr.str();
        saveData(os, result);
    }


    void         save(std::ostream &os) const
    {
        int32           v = version();
        UTwrite(os, &v);
        saveData(os, myGroup);
        saveData(os, myFilter);
        saveData(os, myFilterscale);
        saveData(os, myFixedresample);
        saveData(os, myUniformsamples);
        saveData(os, mySamplediv);
        saveData(os, myDivs);
        saveData(os, myDivsize);
        saveData(os, myScale);
        saveData(os, myDetect2d);

    }

    bool         load(UT_IStream &is)
    {
        int32           v;
        is.bread(&v, 1);
        if (version() != v)
        {
            // Fail incompatible versions
            return false;
        }
        loadData(is, myGroup);
        loadData(is, myFilter);
        loadData(is, myFilterscale);
        loadData(is, myFixedresample);
        loadData(is, myUniformsamples);
        loadData(is, mySamplediv);
        loadData(is, myDivs);
        loadData(is, myDivsize);
        loadData(is, myScale);
        loadData(is, myDetect2d);

        return true;
    }

    const UT_StringHolder & getGroup() const { return myGroup; }
    void setGroup(const UT_StringHolder & val) { myGroup = val; }
    UT_StringHolder opGroup(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getGroup();
        UT_StringHolder result;
        OP_Utils::evalOpParm(result, thissop, "group", cookparms.getCookTime(), 0);
        return result;
    }
    const UT_StringHolder & getFilter() const { return myFilter; }
    void setFilter(const UT_StringHolder & val) { myFilter = val; }
    UT_StringHolder opFilter(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getFilter();
        UT_StringHolder result;
        OP_Utils::evalOpParm(result, thissop, "filter", cookparms.getCookTime(), 0);
        return result;
    }
    fpreal64 getFilterscale() const { return myFilterscale; }
    void setFilterscale(fpreal64 val) { myFilterscale = val; }
    fpreal64 opFilterscale(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getFilterscale();
        fpreal64 result;
        OP_Utils::evalOpParm(result, thissop, "filterscale", cookparms.getCookTime(), 0);
        return result;
    }
    bool getFixedresample() const { return myFixedresample; }
    void setFixedresample(bool val) { myFixedresample = val; }
    bool opFixedresample(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getFixedresample();
        bool result;
        OP_Utils::evalOpParm(result, thissop, "fixedresample", cookparms.getCookTime(), 0);
        return result;
    }
    Uniformsamples getUniformsamples() const { return Uniformsamples(myUniformsamples); }
    void setUniformsamples(Uniformsamples val) { myUniformsamples = int64(val); }
    Uniformsamples opUniformsamples(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getUniformsamples();
        int64 result;
        OP_Utils::evalOpParm(result, thissop, "uniformsamples", cookparms.getCookTime(), 0);
        return Uniformsamples(result);
    }
    int64 getSamplediv() const { return mySamplediv; }
    void setSamplediv(int64 val) { mySamplediv = val; }
    int64 opSamplediv(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getSamplediv();
        int64 result;
        OP_Utils::evalOpParm(result, thissop, "samplediv", cookparms.getCookTime(), 0);
        return result;
    }
    UT_Vector3I getDivs() const { return myDivs; }
    void setDivs(UT_Vector3I val) { myDivs = val; }
    UT_Vector3I opDivs(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getDivs();
        UT_Vector3I result;
        OP_Utils::evalOpParm(result, thissop, "divs", cookparms.getCookTime(), 0);
        return result;
    }
    fpreal64 getDivsize() const { return myDivsize; }
    void setDivsize(fpreal64 val) { myDivsize = val; }
    fpreal64 opDivsize(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getDivsize();
        fpreal64 result;
        OP_Utils::evalOpParm(result, thissop, "divsize", cookparms.getCookTime(), 0);
        return result;
    }
    fpreal64 getScale() const { return myScale; }
    void setScale(fpreal64 val) { myScale = val; }
    fpreal64 opScale(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getScale();
        fpreal64 result;
        OP_Utils::evalOpParm(result, thissop, "scale", cookparms.getCookTime(), 0);
        return result;
    }
    bool getDetect2d() const { return myDetect2d; }
    void setDetect2d(bool val) { myDetect2d = val; }
    bool opDetect2d(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getDetect2d();
        bool result;
        OP_Utils::evalOpParm(result, thissop, "detect2d", cookparms.getCookTime(), 0);
        return result;
    }

private:
    UT_StringHolder myGroup;
    UT_StringHolder myFilter;
    fpreal64 myFilterscale;
    bool myFixedresample;
    int64 myUniformsamples;
    int64 mySamplediv;
    UT_Vector3I myDivs;
    fpreal64 myDivsize;
    fpreal64 myScale;
    bool myDetect2d;

};
