/* Automagically Generated by generate_proto.py
 * Do not Edit
 */
#pragma once

#include <SOP/SOP_NodeVerb.h>
#include <OP/OP_Utils.h>
#include <PRM/PRM_Parm.h>
#include <UT/UT_IStream.h>
#include <UT/UT_NTStreamUtil.h>
#include <UT/UT_Ramp.h>
#include <UT/UT_SharedPtr.h>
#include <UT/UT_StringHolder.h>
#include <UT/UT_StringStream.h>
#include <UT/UT_VectorTypes.h>
#include <SYS/SYS_Types.h>

using namespace UT::Literal;

class DEP_MicroNode;
namespace SOP_TransformAxisEnums
{
    enum class Grouptype
    {
        GUESS = 0,
        BREAKPOINTS,
        EDGES,
        POINTS,
        PRIMS
    };
    enum class Outputmerge
    {
        REPLACE = 0,
        PRE,
        POST
    };
}


class SOP_API SOP_TransformAxisParms  : public SOP_NodeParms
{
public:
    static int version() { return 1; }

    SOP_TransformAxisParms()
    {
        myGroup = ""_sh;
        myGrouptype = 0;
        myOrig = UT_Vector3D(0,0,0);
        myDir = UT_Vector3D(0,1,0);
        myTrans = 0;
        myRot = 0;
        myScale = 1;
        myUpdatenmls = false;
        myUpdateaffectednmls = true;
        myVlength = true;
        myInvertxform = false;
        myAddattrib = false;
        myOutputattrib = "xform"_sh;
        myOutputmerge = 2;

    }

    explicit SOP_TransformAxisParms(const SOP_TransformAxisParms &) = default;

    virtual ~SOP_TransformAxisParms() {}

    bool operator==(const SOP_TransformAxisParms &src) const
    {
        if (myGroup != src.myGroup) return false;
        if (myGrouptype != src.myGrouptype) return false;
        if (myOrig != src.myOrig) return false;
        if (myDir != src.myDir) return false;
        if (myTrans != src.myTrans) return false;
        if (myRot != src.myRot) return false;
        if (myScale != src.myScale) return false;
        if (myUpdatenmls != src.myUpdatenmls) return false;
        if (myUpdateaffectednmls != src.myUpdateaffectednmls) return false;
        if (myVlength != src.myVlength) return false;
        if (myInvertxform != src.myInvertxform) return false;
        if (myAddattrib != src.myAddattrib) return false;
        if (myOutputattrib != src.myOutputattrib) return false;
        if (myOutputmerge != src.myOutputmerge) return false;

        return true;
    }
    bool operator!=(const SOP_TransformAxisParms &src) const
    {
        return !operator==(src);
    }
    using Grouptype = SOP_TransformAxisEnums::Grouptype;
    using Outputmerge = SOP_TransformAxisEnums::Outputmerge;



    void        buildFromOp(const OP_Node *node, fpreal time, DEP_MicroNode *depnode)
    {
        if (true)
            OP_Utils::evalOpParm(myGroup, node, "group", time, 0);
        else myGroup = ""_sh;
        if (true)
            OP_Utils::evalOpParm(myGrouptype, node, "grouptype", time, 0);
        else myGrouptype = 0;
        if (true)
            OP_Utils::evalOpParm(myOrig, node, "orig", time, 0);
        else myOrig = UT_Vector3D(0,0,0);
        if (true)
            OP_Utils::evalOpParm(myDir, node, "dir", time, 0);
        else myDir = UT_Vector3D(0,1,0);
        if (true)
            OP_Utils::evalOpParm(myTrans, node, "trans", time, 0);
        else myTrans = 0;
        if (true)
            OP_Utils::evalOpParm(myRot, node, "rot", time, 0);
        else myRot = 0;
        if (true)
            OP_Utils::evalOpParm(myScale, node, "scale", time, 0);
        else myScale = 1;
        if (true)
            OP_Utils::evalOpParm(myUpdatenmls, node, "updatenmls", time, 0);
        else myUpdatenmls = false;
        if (true && ( (!(((getUpdatenmls()==1)))) ) )
            OP_Utils::evalOpParm(myUpdateaffectednmls, node, "updateaffectednmls", time, 0);
        else myUpdateaffectednmls = true;
        if (true && ( (!(((getUpdatenmls()==1)))) ) )
            OP_Utils::evalOpParm(myVlength, node, "vlength", time, 0);
        else myVlength = true;
        if (true)
            OP_Utils::evalOpParm(myInvertxform, node, "invertxform", time, 0);
        else myInvertxform = false;
        if (true)
            OP_Utils::evalOpParm(myAddattrib, node, "addattrib", time, 0);
        else myAddattrib = false;
        if (true && ( (!(((getAddattrib()==0)))) ) )
            OP_Utils::evalOpParm(myOutputattrib, node, "outputattrib", time, 0);
        else myOutputattrib = "xform"_sh;
        if (true && ( (!(((getAddattrib()==0)))) ) )
            OP_Utils::evalOpParm(myOutputmerge, node, "outputmerge", time, 0);
        else myOutputmerge = 2;

    }


    virtual void loadFromOpSubclass(const LoadParms &loadparms)
    {
        buildFromOp(loadparms.node(), loadparms.context().getTime(), loadparms.depnode());
    }


    virtual void copyFrom(const SOP_NodeParms *src)
    {
        *this = *((const SOP_TransformAxisParms *)src);
    }

    template <typename T>
    void
    doGetParmValue(exint idx, T &value) const
    {
        switch (idx)
        {
            case 0:
                coerceValue(value, myGroup);
                break;
            case 1:
                coerceValue(value, myGrouptype);
                break;
            case 2:
                coerceValue(value, myOrig);
                break;
            case 3:
                coerceValue(value, myDir);
                break;
            case 4:
                coerceValue(value, myTrans);
                break;
            case 5:
                coerceValue(value, myRot);
                break;
            case 6:
                coerceValue(value, myScale);
                break;
            case 7:
                coerceValue(value, myUpdatenmls);
                break;
            case 8:
                coerceValue(value, myUpdateaffectednmls);
                break;
            case 9:
                coerceValue(value, myVlength);
                break;
            case 10:
                coerceValue(value, myInvertxform);
                break;
            case 11:
                coerceValue(value, myAddattrib);
                break;
            case 12:
                coerceValue(value, myOutputattrib);
                break;
            case 13:
                coerceValue(value, myOutputmerge);
                break;

        }
    }

    void        getParmValue(exint idx, exint &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, fpreal &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Vector2D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Vector3D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Vector4D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Matrix2D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Matrix3D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Matrix4D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_StringHolder &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_SharedPtr<UT_Ramp> &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, PRM_DataItemHandle &value) const
    { doGetParmValue(idx, value); }

    template <typename T>
    void
    doSetParmValue(exint idx, const T &value) 
    {
        switch (idx)
        {
            case 0:
                coerceValue(myGroup, value);
                break;
            case 1:
                coerceValue(myGrouptype, value);
                break;
            case 2:
                coerceValue(myOrig, value);
                break;
            case 3:
                coerceValue(myDir, value);
                break;
            case 4:
                coerceValue(myTrans, value);
                break;
            case 5:
                coerceValue(myRot, value);
                break;
            case 6:
                coerceValue(myScale, value);
                break;
            case 7:
                coerceValue(myUpdatenmls, value);
                break;
            case 8:
                coerceValue(myUpdateaffectednmls, value);
                break;
            case 9:
                coerceValue(myVlength, value);
                break;
            case 10:
                coerceValue(myInvertxform, value);
                break;
            case 11:
                coerceValue(myAddattrib, value);
                break;
            case 12:
                coerceValue(myOutputattrib, value);
                break;
            case 13:
                coerceValue(myOutputmerge, value);
                break;

        }
    }

    void        setParmValue(exint idx, const exint &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const fpreal &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Vector2D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Vector3D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Vector4D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Matrix2D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Matrix3D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Matrix4D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_StringHolder &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_SharedPtr<UT_Ramp> &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const PRM_DataItemHandle &value) 
    { doSetParmValue(idx, value); }

    virtual exint    getNumParms() const
    {
        return 14;
    }

    virtual const char *getParmName(exint fieldnum) const
    {
        switch (fieldnum)
        {
            case 0:
                return "group";
            case 1:
                return "grouptype";
            case 2:
                return "orig";
            case 3:
                return "dir";
            case 4:
                return "trans";
            case 5:
                return "rot";
            case 6:
                return "scale";
            case 7:
                return "updatenmls";
            case 8:
                return "updateaffectednmls";
            case 9:
                return "vlength";
            case 10:
                return "invertxform";
            case 11:
                return "addattrib";
            case 12:
                return "outputattrib";
            case 13:
                return "outputmerge";

        }
        return 0;
    }

    virtual ParmType getParmType(exint fieldnum) const
    {
        switch (fieldnum)
        {
                case 0:
                    return PARM_STRING;
                case 1:
                    return PARM_INTEGER;
                case 2:
                    return PARM_VECTOR3;
                case 3:
                    return PARM_VECTOR3;
                case 4:
                    return PARM_FLOAT;
                case 5:
                    return PARM_FLOAT;
                case 6:
                    return PARM_FLOAT;
                case 7:
                    return PARM_INTEGER;
                case 8:
                    return PARM_INTEGER;
                case 9:
                    return PARM_INTEGER;
                case 10:
                    return PARM_INTEGER;
                case 11:
                    return PARM_INTEGER;
                case 12:
                    return PARM_STRING;
                case 13:
                    return PARM_INTEGER;

        }
        return PARM_UNSUPPORTED;
    }

    // Boiler plate to load individual types.
    static void  loadData(UT_IStream &is, int64 &v)
    { is.bread(&v, 1); }
    static void  loadData(UT_IStream &is, bool &v)
    { int64     iv; is.bread(&iv, 1); v = iv; }
    static void  loadData(UT_IStream &is, fpreal64 &v)
    { is.bread<fpreal64>(&v, 1); }
    static void  loadData(UT_IStream &is, UT_Vector2D &v)
    { is.bread<fpreal64>(&v.x(), 1); is.bread<fpreal64>(&v.y(), 1); }
    static void  loadData(UT_IStream &is, UT_Vector3D &v)
    { is.bread<fpreal64>(&v.x(), 1); is.bread<fpreal64>(&v.y(), 1);
      is.bread<fpreal64>(&v.z(), 1); }
    static void  loadData(UT_IStream &is, UT_Vector4D &v)
    { is.bread<fpreal64>(&v.x(), 1); is.bread<fpreal64>(&v.y(), 1);
      is.bread<fpreal64>(&v.z(), 1); is.bread<fpreal64>(&v.w(), 1); }
    static void  loadData(UT_IStream &is, UT_Matrix2D &v)
    { for (int r = 0; r < 2; r++) for (int c = 0; c < 2; c++) is.bread<fpreal64>(&v(r, c), 1); }
    static void  loadData(UT_IStream &is, UT_Matrix3D &v)
    { for (int r = 0; r < 3; r++) for (int c = 0; c < 3; c++) is.bread<fpreal64>(&v(r, c), 1); }
    static void  loadData(UT_IStream &is, UT_Matrix4D &v)
    { for (int r = 0; r < 4; r++) for (int c = 0; c < 4; c++) is.bread<fpreal64>(&v(r, c), 1); }
    static void  loadData(UT_IStream &is, UT_Vector2I &v)
    { is.bread<int64>(&v.x(), 1); is.bread<int64>(&v.y(), 1); }
    static void  loadData(UT_IStream &is, UT_Vector3I &v)
    { is.bread<int64>(&v.x(), 1); is.bread<int64>(&v.y(), 1);
      is.bread<int64>(&v.z(), 1); }
    static void  loadData(UT_IStream &is, UT_Vector4I &v)
    { is.bread<int64>(&v.x(), 1); is.bread<int64>(&v.y(), 1);
      is.bread<int64>(&v.z(), 1); is.bread<int64>(&v.w(), 1); }
    static void  loadData(UT_IStream &is, UT_StringHolder &v)
    { is.bread(v); }
    static void  loadData(UT_IStream &is, UT_SharedPtr<UT_Ramp> &v)
    {   UT_StringHolder   rampdata;
        loadData(is, rampdata);
        if (rampdata.isstring())
        {
            v.reset(new UT_Ramp());
            UT_IStream  istr((const char *) rampdata, rampdata.length(), UT_ISTREAM_ASCII);
            v->load(istr);
        }
        else v.reset();
    }
    static void  loadData(UT_IStream &is, PRM_DataItemHandle &v)
    {   UT_StringHolder   data;
        loadData(is, data);
        if (data.isstring())
        {
            // Find the data type.
            char *colon = UT_StringWrap(data).findChar(':');
            if (colon)
            {
                int             typelen = colon - data.buffer();
                UT_WorkBuffer   type;
                type.strncpy(data.buffer(), typelen);
                UT_IStream  istr(((const char *) data) + typelen + 1, data.length() - (typelen + 1), UT_ISTREAM_BINARY);
                
                v = PRM_DataFactory::parseBinary(type.buffer(), istr);
            }
        }
        else v.reset();
    }

    static void  saveData(std::ostream &os, int64 v)
    { UTwrite(os, &v); }
    static void  saveData(std::ostream &os, bool v)
    { int64 iv = v; UTwrite(os, &iv); }
    static void  saveData(std::ostream &os, fpreal64 v)
    { UTwrite<fpreal64>(os, &v); }
    static void  saveData(std::ostream &os, UT_Vector2D v)
    { UTwrite<fpreal64>(os, &v.x()); UTwrite<fpreal64>(os, &v.y()); }
    static void  saveData(std::ostream &os, UT_Vector3D v)
    { UTwrite<fpreal64>(os, &v.x()); UTwrite<fpreal64>(os, &v.y());
      UTwrite<fpreal64>(os, &v.z()); }
    static void  saveData(std::ostream &os, UT_Vector4D v)
    { UTwrite<fpreal64>(os, &v.x()); UTwrite<fpreal64>(os, &v.y());
      UTwrite<fpreal64>(os, &v.z()); UTwrite<fpreal64>(os, &v.w()); }
    static void  saveData(std::ostream &os, UT_Matrix2D v)
    { for (int r = 0; r < 2; r++) for (int c = 0; c < 2; c++) UTwrite<fpreal64>(os, &v(r, c)); }
    static void  saveData(std::ostream &os, UT_Matrix3D v)
    { for (int r = 0; r < 3; r++) for (int c = 0; c < 3; c++) UTwrite<fpreal64>(os, &v(r, c)); }
    static void  saveData(std::ostream &os, UT_Matrix4D v)
    { for (int r = 0; r < 4; r++) for (int c = 0; c < 4; c++) UTwrite<fpreal64>(os, &v(r, c)); }
    static void  saveData(std::ostream &os, UT_StringHolder s)
    { UT_StringWrap(s).saveBinary(os); }
    static void  saveData(std::ostream &os, UT_SharedPtr<UT_Ramp> s)
    {   UT_StringHolder         result;
        UT_OStringStream        ostr;
        if (s) s->save(ostr);
        result = ostr.str();
        saveData(os, result);
    }
    static void  saveData(std::ostream &os, PRM_DataItemHandle s)
    {   UT_StringHolder         result;
        UT_OStringStream        ostr;
        if (s) 
        {
            ostr << s->getDataTypeToken();
            ostr << ":";
            s->saveBinary(ostr);
        }
        result = ostr.str();
        saveData(os, result);
    }


    void         save(std::ostream &os) const
    {
        int32           v = version();
        UTwrite(os, &v);
        saveData(os, myGroup);
        saveData(os, myGrouptype);
        saveData(os, myOrig);
        saveData(os, myDir);
        saveData(os, myTrans);
        saveData(os, myRot);
        saveData(os, myScale);
        saveData(os, myUpdatenmls);
        saveData(os, myUpdateaffectednmls);
        saveData(os, myVlength);
        saveData(os, myInvertxform);
        saveData(os, myAddattrib);
        saveData(os, myOutputattrib);
        saveData(os, myOutputmerge);

    }

    bool         load(UT_IStream &is)
    {
        int32           v;
        is.bread(&v, 1);
        if (version() != v)
        {
            // Fail incompatible versions
            return false;
        }
        loadData(is, myGroup);
        loadData(is, myGrouptype);
        loadData(is, myOrig);
        loadData(is, myDir);
        loadData(is, myTrans);
        loadData(is, myRot);
        loadData(is, myScale);
        loadData(is, myUpdatenmls);
        loadData(is, myUpdateaffectednmls);
        loadData(is, myVlength);
        loadData(is, myInvertxform);
        loadData(is, myAddattrib);
        loadData(is, myOutputattrib);
        loadData(is, myOutputmerge);

        return true;
    }

    const UT_StringHolder & getGroup() const { return myGroup; }
    void setGroup(const UT_StringHolder & val) { myGroup = val; }
    UT_StringHolder opGroup(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getGroup();
        UT_StringHolder result;
        OP_Utils::evalOpParm(result, thissop, "group", cookparms.getCookTime(), 0);
        return result;
    }
    Grouptype getGrouptype() const { return Grouptype(myGrouptype); }
    void setGrouptype(Grouptype val) { myGrouptype = int64(val); }
    Grouptype opGrouptype(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getGrouptype();
        int64 result;
        OP_Utils::evalOpParm(result, thissop, "grouptype", cookparms.getCookTime(), 0);
        return Grouptype(result);
    }
    UT_Vector3D getOrig() const { return myOrig; }
    void setOrig(UT_Vector3D val) { myOrig = val; }
    UT_Vector3D opOrig(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getOrig();
        UT_Vector3D result;
        OP_Utils::evalOpParm(result, thissop, "orig", cookparms.getCookTime(), 0);
        return result;
    }
    UT_Vector3D getDir() const { return myDir; }
    void setDir(UT_Vector3D val) { myDir = val; }
    UT_Vector3D opDir(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getDir();
        UT_Vector3D result;
        OP_Utils::evalOpParm(result, thissop, "dir", cookparms.getCookTime(), 0);
        return result;
    }
    fpreal64 getTrans() const { return myTrans; }
    void setTrans(fpreal64 val) { myTrans = val; }
    fpreal64 opTrans(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getTrans();
        fpreal64 result;
        OP_Utils::evalOpParm(result, thissop, "trans", cookparms.getCookTime(), 0);
        return result;
    }
    fpreal64 getRot() const { return myRot; }
    void setRot(fpreal64 val) { myRot = val; }
    fpreal64 opRot(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getRot();
        fpreal64 result;
        OP_Utils::evalOpParm(result, thissop, "rot", cookparms.getCookTime(), 0);
        return result;
    }
    fpreal64 getScale() const { return myScale; }
    void setScale(fpreal64 val) { myScale = val; }
    fpreal64 opScale(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getScale();
        fpreal64 result;
        OP_Utils::evalOpParm(result, thissop, "scale", cookparms.getCookTime(), 0);
        return result;
    }
    bool getUpdatenmls() const { return myUpdatenmls; }
    void setUpdatenmls(bool val) { myUpdatenmls = val; }
    bool opUpdatenmls(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getUpdatenmls();
        bool result;
        OP_Utils::evalOpParm(result, thissop, "updatenmls", cookparms.getCookTime(), 0);
        return result;
    }
    bool getUpdateaffectednmls() const { return myUpdateaffectednmls; }
    void setUpdateaffectednmls(bool val) { myUpdateaffectednmls = val; }
    bool opUpdateaffectednmls(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getUpdateaffectednmls();
        bool result;
        OP_Utils::evalOpParm(result, thissop, "updateaffectednmls", cookparms.getCookTime(), 0);
        return result;
    }
    bool getVlength() const { return myVlength; }
    void setVlength(bool val) { myVlength = val; }
    bool opVlength(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getVlength();
        bool result;
        OP_Utils::evalOpParm(result, thissop, "vlength", cookparms.getCookTime(), 0);
        return result;
    }
    bool getInvertxform() const { return myInvertxform; }
    void setInvertxform(bool val) { myInvertxform = val; }
    bool opInvertxform(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getInvertxform();
        bool result;
        OP_Utils::evalOpParm(result, thissop, "invertxform", cookparms.getCookTime(), 0);
        return result;
    }
    bool getAddattrib() const { return myAddattrib; }
    void setAddattrib(bool val) { myAddattrib = val; }
    bool opAddattrib(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getAddattrib();
        bool result;
        OP_Utils::evalOpParm(result, thissop, "addattrib", cookparms.getCookTime(), 0);
        return result;
    }
    const UT_StringHolder & getOutputattrib() const { return myOutputattrib; }
    void setOutputattrib(const UT_StringHolder & val) { myOutputattrib = val; }
    UT_StringHolder opOutputattrib(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getOutputattrib();
        UT_StringHolder result;
        OP_Utils::evalOpParm(result, thissop, "outputattrib", cookparms.getCookTime(), 0);
        return result;
    }
    Outputmerge getOutputmerge() const { return Outputmerge(myOutputmerge); }
    void setOutputmerge(Outputmerge val) { myOutputmerge = int64(val); }
    Outputmerge opOutputmerge(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getOutputmerge();
        int64 result;
        OP_Utils::evalOpParm(result, thissop, "outputmerge", cookparms.getCookTime(), 0);
        return Outputmerge(result);
    }

private:
    UT_StringHolder myGroup;
    int64 myGrouptype;
    UT_Vector3D myOrig;
    UT_Vector3D myDir;
    fpreal64 myTrans;
    fpreal64 myRot;
    fpreal64 myScale;
    bool myUpdatenmls;
    bool myUpdateaffectednmls;
    bool myVlength;
    bool myInvertxform;
    bool myAddattrib;
    UT_StringHolder myOutputattrib;
    int64 myOutputmerge;

};
