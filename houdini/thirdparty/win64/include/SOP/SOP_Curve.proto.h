/* Automagically Generated by generate_proto.py
 * Do not Edit
 */
#pragma once

#include <SOP/SOP_NodeVerb.h>
#include <OP/OP_Utils.h>
#include <PRM/PRM_Parm.h>
#include <UT/UT_IStream.h>
#include <UT/UT_NTStreamUtil.h>
#include <UT/UT_Ramp.h>
#include <UT/UT_SharedPtr.h>
#include <UT/UT_StringHolder.h>
#include <UT/UT_StringStream.h>
#include <UT/UT_VectorTypes.h>
#include <SYS/SYS_Types.h>

using namespace UT::Literal;

class DEP_MicroNode;
namespace SOP_CurveEnums
{
    enum class Type
    {
        POLY = 0,
        NURBS,
        BEZIER
    };
    enum class Method
    {
        CV = 0,
        BREAKPOINTS,
        FREEHAND
    };
    enum class Param
    {
        UNIFORM = 0,
        CHRDLEN,
        CENTRIP
    };
}


class SOP_API SOP_CurveParms  : public SOP_NodeParms
{
public:
    static int version() { return 1; }

    SOP_CurveParms()
    {
        myType = 0;
        myMethod = 0;
        myCoords = ""_sh;
        myClose = false;
        myReverse = false;
        myOrder = 4;
        myParam = 0;
        myTolerance = 0.01;
        mySmooth = 0;
        myCsharp = false;
        myKeepgeo = false;
        myNormalize = false;

    }

    explicit SOP_CurveParms(const SOP_CurveParms &) = default;

    virtual ~SOP_CurveParms() {}

    bool operator==(const SOP_CurveParms &src) const
    {
        if (myType != src.myType) return false;
        if (myMethod != src.myMethod) return false;
        if (myCoords != src.myCoords) return false;
        if (myClose != src.myClose) return false;
        if (myReverse != src.myReverse) return false;
        if (myOrder != src.myOrder) return false;
        if (myParam != src.myParam) return false;
        if (myTolerance != src.myTolerance) return false;
        if (mySmooth != src.mySmooth) return false;
        if (myCsharp != src.myCsharp) return false;
        if (myKeepgeo != src.myKeepgeo) return false;
        if (myNormalize != src.myNormalize) return false;

        return true;
    }
    bool operator!=(const SOP_CurveParms &src) const
    {
        return !operator==(src);
    }
    using Type = SOP_CurveEnums::Type;
    using Method = SOP_CurveEnums::Method;
    using Param = SOP_CurveEnums::Param;



    void        buildFromOp(const OP_Node *node, fpreal time, DEP_MicroNode *depnode)
    {
        if (true)
            OP_Utils::evalOpParm(myType, node, "type", time, 0);
        else myType = 0;
        if (true)
            OP_Utils::evalOpParm(myMethod, node, "method", time, 0);
        else myMethod = 0;
        if (true)
            OP_Utils::evalOpParm(myCoords, node, "coords", time, 0);
        else myCoords = ""_sh;
        if (true)
            OP_Utils::evalOpParm(myClose, node, "close", time, 0);
        else myClose = false;
        if (true)
            OP_Utils::evalOpParm(myReverse, node, "reverse", time, 0);
        else myReverse = false;
        if (true && ( (!(((int64(getType())==0)))) ) )
            OP_Utils::evalOpParm(myOrder, node, "order", time, 0);
        else myOrder = 4;
        if (true && ( (!(((int64(getType())==0))||((int64(getMethod())!=1)))) ) )
            OP_Utils::evalOpParm(myParam, node, "param", time, 0);
        else myParam = 0;
        if (true && ( (!(((int64(getType())==0))||((int64(getMethod())!=2)))) ) )
            OP_Utils::evalOpParm(myTolerance, node, "tolerance", time, 0);
        else myTolerance = 0.01;
        if (true && ( (!(((int64(getType())==0))||((int64(getMethod())!=2)))) ) )
            OP_Utils::evalOpParm(mySmooth, node, "smooth", time, 0);
        else mySmooth = 0;
        if (true && ( (!(((int64(getType())==0))||((int64(getMethod())!=2)))) ) )
            OP_Utils::evalOpParm(myCsharp, node, "csharp", time, 0);
        else myCsharp = false;
        if (true)
            OP_Utils::evalOpParm(myKeepgeo, node, "keepgeo", time, 0);
        else myKeepgeo = false;
        if (true && ( (!(((int64(getType())==0))||((int64(getMethod())!=1))||((int64(getParam())!=0)))) ) )
            OP_Utils::evalOpParm(myNormalize, node, "normalize", time, 0);
        else myNormalize = false;

    }


    virtual void loadFromOpSubclass(const LoadParms &loadparms)
    {
        buildFromOp(loadparms.node(), loadparms.context().getTime(), loadparms.depnode());
    }


    virtual void copyFrom(const SOP_NodeParms *src)
    {
        *this = *((const SOP_CurveParms *)src);
    }

    template <typename T>
    void
    doGetParmValue(exint idx, T &value) const
    {
        switch (idx)
        {
            case 0:
                coerceValue(value, myType);
                break;
            case 1:
                coerceValue(value, myMethod);
                break;
            case 2:
                coerceValue(value, myCoords);
                break;
            case 3:
                coerceValue(value, myClose);
                break;
            case 4:
                coerceValue(value, myReverse);
                break;
            case 5:
                coerceValue(value, myOrder);
                break;
            case 6:
                coerceValue(value, myParam);
                break;
            case 7:
                coerceValue(value, myTolerance);
                break;
            case 8:
                coerceValue(value, mySmooth);
                break;
            case 9:
                coerceValue(value, myCsharp);
                break;
            case 10:
                coerceValue(value, myKeepgeo);
                break;
            case 11:
                coerceValue(value, myNormalize);
                break;

        }
    }

    void        getParmValue(exint idx, exint &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, fpreal &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Vector2D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Vector3D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Vector4D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Matrix2D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Matrix3D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Matrix4D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_StringHolder &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_SharedPtr<UT_Ramp> &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, PRM_DataItemHandle &value) const
    { doGetParmValue(idx, value); }

    template <typename T>
    void
    doSetParmValue(exint idx, const T &value) 
    {
        switch (idx)
        {
            case 0:
                coerceValue(myType, value);
                break;
            case 1:
                coerceValue(myMethod, value);
                break;
            case 2:
                coerceValue(myCoords, value);
                break;
            case 3:
                coerceValue(myClose, value);
                break;
            case 4:
                coerceValue(myReverse, value);
                break;
            case 5:
                coerceValue(myOrder, value);
                break;
            case 6:
                coerceValue(myParam, value);
                break;
            case 7:
                coerceValue(myTolerance, value);
                break;
            case 8:
                coerceValue(mySmooth, value);
                break;
            case 9:
                coerceValue(myCsharp, value);
                break;
            case 10:
                coerceValue(myKeepgeo, value);
                break;
            case 11:
                coerceValue(myNormalize, value);
                break;

        }
    }

    void        setParmValue(exint idx, const exint &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const fpreal &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Vector2D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Vector3D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Vector4D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Matrix2D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Matrix3D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Matrix4D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_StringHolder &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_SharedPtr<UT_Ramp> &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const PRM_DataItemHandle &value) 
    { doSetParmValue(idx, value); }

    virtual exint    getNumParms() const
    {
        return 12;
    }

    virtual const char *getParmName(exint fieldnum) const
    {
        switch (fieldnum)
        {
            case 0:
                return "type";
            case 1:
                return "method";
            case 2:
                return "coords";
            case 3:
                return "close";
            case 4:
                return "reverse";
            case 5:
                return "order";
            case 6:
                return "param";
            case 7:
                return "tolerance";
            case 8:
                return "smooth";
            case 9:
                return "csharp";
            case 10:
                return "keepgeo";
            case 11:
                return "normalize";

        }
        return 0;
    }

    virtual ParmType getParmType(exint fieldnum) const
    {
        switch (fieldnum)
        {
                case 0:
                    return PARM_INTEGER;
                case 1:
                    return PARM_INTEGER;
                case 2:
                    return PARM_STRING;
                case 3:
                    return PARM_INTEGER;
                case 4:
                    return PARM_INTEGER;
                case 5:
                    return PARM_INTEGER;
                case 6:
                    return PARM_INTEGER;
                case 7:
                    return PARM_FLOAT;
                case 8:
                    return PARM_FLOAT;
                case 9:
                    return PARM_INTEGER;
                case 10:
                    return PARM_INTEGER;
                case 11:
                    return PARM_INTEGER;

        }
        return PARM_UNSUPPORTED;
    }

    // Boiler plate to load individual types.
    static void  loadData(UT_IStream &is, int64 &v)
    { is.bread(&v, 1); }
    static void  loadData(UT_IStream &is, bool &v)
    { int64     iv; is.bread(&iv, 1); v = iv; }
    static void  loadData(UT_IStream &is, fpreal64 &v)
    { is.bread<fpreal64>(&v, 1); }
    static void  loadData(UT_IStream &is, UT_Vector2D &v)
    { is.bread<fpreal64>(&v.x(), 1); is.bread<fpreal64>(&v.y(), 1); }
    static void  loadData(UT_IStream &is, UT_Vector3D &v)
    { is.bread<fpreal64>(&v.x(), 1); is.bread<fpreal64>(&v.y(), 1);
      is.bread<fpreal64>(&v.z(), 1); }
    static void  loadData(UT_IStream &is, UT_Vector4D &v)
    { is.bread<fpreal64>(&v.x(), 1); is.bread<fpreal64>(&v.y(), 1);
      is.bread<fpreal64>(&v.z(), 1); is.bread<fpreal64>(&v.w(), 1); }
    static void  loadData(UT_IStream &is, UT_Matrix2D &v)
    { for (int r = 0; r < 2; r++) for (int c = 0; c < 2; c++) is.bread<fpreal64>(&v(r, c), 1); }
    static void  loadData(UT_IStream &is, UT_Matrix3D &v)
    { for (int r = 0; r < 3; r++) for (int c = 0; c < 3; c++) is.bread<fpreal64>(&v(r, c), 1); }
    static void  loadData(UT_IStream &is, UT_Matrix4D &v)
    { for (int r = 0; r < 4; r++) for (int c = 0; c < 4; c++) is.bread<fpreal64>(&v(r, c), 1); }
    static void  loadData(UT_IStream &is, UT_Vector2I &v)
    { is.bread<int64>(&v.x(), 1); is.bread<int64>(&v.y(), 1); }
    static void  loadData(UT_IStream &is, UT_Vector3I &v)
    { is.bread<int64>(&v.x(), 1); is.bread<int64>(&v.y(), 1);
      is.bread<int64>(&v.z(), 1); }
    static void  loadData(UT_IStream &is, UT_Vector4I &v)
    { is.bread<int64>(&v.x(), 1); is.bread<int64>(&v.y(), 1);
      is.bread<int64>(&v.z(), 1); is.bread<int64>(&v.w(), 1); }
    static void  loadData(UT_IStream &is, UT_StringHolder &v)
    { is.bread(v); }
    static void  loadData(UT_IStream &is, UT_SharedPtr<UT_Ramp> &v)
    {   UT_StringHolder   rampdata;
        loadData(is, rampdata);
        if (rampdata.isstring())
        {
            v.reset(new UT_Ramp());
            UT_IStream  istr((const char *) rampdata, rampdata.length(), UT_ISTREAM_ASCII);
            v->load(istr);
        }
        else v.reset();
    }
    static void  loadData(UT_IStream &is, PRM_DataItemHandle &v)
    {   UT_StringHolder   data;
        loadData(is, data);
        if (data.isstring())
        {
            // Find the data type.
            char *colon = UT_StringWrap(data).findChar(':');
            if (colon)
            {
                int             typelen = colon - data.buffer();
                UT_WorkBuffer   type;
                type.strncpy(data.buffer(), typelen);
                UT_IStream  istr(((const char *) data) + typelen + 1, data.length() - (typelen + 1), UT_ISTREAM_BINARY);
                
                v = PRM_DataFactory::parseBinary(type.buffer(), istr);
            }
        }
        else v.reset();
    }

    static void  saveData(std::ostream &os, int64 v)
    { UTwrite(os, &v); }
    static void  saveData(std::ostream &os, bool v)
    { int64 iv = v; UTwrite(os, &iv); }
    static void  saveData(std::ostream &os, fpreal64 v)
    { UTwrite<fpreal64>(os, &v); }
    static void  saveData(std::ostream &os, UT_Vector2D v)
    { UTwrite<fpreal64>(os, &v.x()); UTwrite<fpreal64>(os, &v.y()); }
    static void  saveData(std::ostream &os, UT_Vector3D v)
    { UTwrite<fpreal64>(os, &v.x()); UTwrite<fpreal64>(os, &v.y());
      UTwrite<fpreal64>(os, &v.z()); }
    static void  saveData(std::ostream &os, UT_Vector4D v)
    { UTwrite<fpreal64>(os, &v.x()); UTwrite<fpreal64>(os, &v.y());
      UTwrite<fpreal64>(os, &v.z()); UTwrite<fpreal64>(os, &v.w()); }
    static void  saveData(std::ostream &os, UT_Matrix2D v)
    { for (int r = 0; r < 2; r++) for (int c = 0; c < 2; c++) UTwrite<fpreal64>(os, &v(r, c)); }
    static void  saveData(std::ostream &os, UT_Matrix3D v)
    { for (int r = 0; r < 3; r++) for (int c = 0; c < 3; c++) UTwrite<fpreal64>(os, &v(r, c)); }
    static void  saveData(std::ostream &os, UT_Matrix4D v)
    { for (int r = 0; r < 4; r++) for (int c = 0; c < 4; c++) UTwrite<fpreal64>(os, &v(r, c)); }
    static void  saveData(std::ostream &os, UT_StringHolder s)
    { UT_StringWrap(s).saveBinary(os); }
    static void  saveData(std::ostream &os, UT_SharedPtr<UT_Ramp> s)
    {   UT_StringHolder         result;
        UT_OStringStream        ostr;
        if (s) s->save(ostr);
        result = ostr.str();
        saveData(os, result);
    }
    static void  saveData(std::ostream &os, PRM_DataItemHandle s)
    {   UT_StringHolder         result;
        UT_OStringStream        ostr;
        if (s) 
        {
            ostr << s->getDataTypeToken();
            ostr << ":";
            s->saveBinary(ostr);
        }
        result = ostr.str();
        saveData(os, result);
    }


    void         save(std::ostream &os) const
    {
        int32           v = version();
        UTwrite(os, &v);
        saveData(os, myType);
        saveData(os, myMethod);
        saveData(os, myCoords);
        saveData(os, myClose);
        saveData(os, myReverse);
        saveData(os, myOrder);
        saveData(os, myParam);
        saveData(os, myTolerance);
        saveData(os, mySmooth);
        saveData(os, myCsharp);
        saveData(os, myKeepgeo);
        saveData(os, myNormalize);

    }

    bool         load(UT_IStream &is)
    {
        int32           v;
        is.bread(&v, 1);
        if (version() != v)
        {
            // Fail incompatible versions
            return false;
        }
        loadData(is, myType);
        loadData(is, myMethod);
        loadData(is, myCoords);
        loadData(is, myClose);
        loadData(is, myReverse);
        loadData(is, myOrder);
        loadData(is, myParam);
        loadData(is, myTolerance);
        loadData(is, mySmooth);
        loadData(is, myCsharp);
        loadData(is, myKeepgeo);
        loadData(is, myNormalize);

        return true;
    }

    Type getType() const { return Type(myType); }
    void setType(Type val) { myType = int64(val); }
    Type opType(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getType();
        int64 result;
        OP_Utils::evalOpParm(result, thissop, "type", cookparms.getCookTime(), 0);
        return Type(result);
    }
    Method getMethod() const { return Method(myMethod); }
    void setMethod(Method val) { myMethod = int64(val); }
    Method opMethod(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getMethod();
        int64 result;
        OP_Utils::evalOpParm(result, thissop, "method", cookparms.getCookTime(), 0);
        return Method(result);
    }
    const UT_StringHolder & getCoords() const { return myCoords; }
    void setCoords(const UT_StringHolder & val) { myCoords = val; }
    UT_StringHolder opCoords(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getCoords();
        UT_StringHolder result;
        OP_Utils::evalOpParm(result, thissop, "coords", cookparms.getCookTime(), 0);
        return result;
    }
    bool getClose() const { return myClose; }
    void setClose(bool val) { myClose = val; }
    bool opClose(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getClose();
        bool result;
        OP_Utils::evalOpParm(result, thissop, "close", cookparms.getCookTime(), 0);
        return result;
    }
    bool getReverse() const { return myReverse; }
    void setReverse(bool val) { myReverse = val; }
    bool opReverse(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getReverse();
        bool result;
        OP_Utils::evalOpParm(result, thissop, "reverse", cookparms.getCookTime(), 0);
        return result;
    }
    int64 getOrder() const { return myOrder; }
    void setOrder(int64 val) { myOrder = val; }
    int64 opOrder(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getOrder();
        int64 result;
        OP_Utils::evalOpParm(result, thissop, "order", cookparms.getCookTime(), 0);
        return result;
    }
    Param getParam() const { return Param(myParam); }
    void setParam(Param val) { myParam = int64(val); }
    Param opParam(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getParam();
        int64 result;
        OP_Utils::evalOpParm(result, thissop, "param", cookparms.getCookTime(), 0);
        return Param(result);
    }
    fpreal64 getTolerance() const { return myTolerance; }
    void setTolerance(fpreal64 val) { myTolerance = val; }
    fpreal64 opTolerance(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getTolerance();
        fpreal64 result;
        OP_Utils::evalOpParm(result, thissop, "tolerance", cookparms.getCookTime(), 0);
        return result;
    }
    fpreal64 getSmooth() const { return mySmooth; }
    void setSmooth(fpreal64 val) { mySmooth = val; }
    fpreal64 opSmooth(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getSmooth();
        fpreal64 result;
        OP_Utils::evalOpParm(result, thissop, "smooth", cookparms.getCookTime(), 0);
        return result;
    }
    bool getCsharp() const { return myCsharp; }
    void setCsharp(bool val) { myCsharp = val; }
    bool opCsharp(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getCsharp();
        bool result;
        OP_Utils::evalOpParm(result, thissop, "csharp", cookparms.getCookTime(), 0);
        return result;
    }
    bool getKeepgeo() const { return myKeepgeo; }
    void setKeepgeo(bool val) { myKeepgeo = val; }
    bool opKeepgeo(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getKeepgeo();
        bool result;
        OP_Utils::evalOpParm(result, thissop, "keepgeo", cookparms.getCookTime(), 0);
        return result;
    }
    bool getNormalize() const { return myNormalize; }
    void setNormalize(bool val) { myNormalize = val; }
    bool opNormalize(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getNormalize();
        bool result;
        OP_Utils::evalOpParm(result, thissop, "normalize", cookparms.getCookTime(), 0);
        return result;
    }

private:
    int64 myType;
    int64 myMethod;
    UT_StringHolder myCoords;
    bool myClose;
    bool myReverse;
    int64 myOrder;
    int64 myParam;
    fpreal64 myTolerance;
    fpreal64 mySmooth;
    bool myCsharp;
    bool myKeepgeo;
    bool myNormalize;

};
