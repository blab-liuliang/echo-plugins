/* Automagically Generated by generate_proto.py
 * Do not Edit
 */
#pragma once

#include <SOP/SOP_NodeVerb.h>
#include <OP/OP_Utils.h>
#include <PRM/PRM_Parm.h>
#include <UT/UT_IStream.h>
#include <UT/UT_NTStreamUtil.h>
#include <UT/UT_Ramp.h>
#include <UT/UT_SharedPtr.h>
#include <UT/UT_StringHolder.h>
#include <UT/UT_StringStream.h>
#include <UT/UT_VectorTypes.h>
#include <SYS/SYS_Types.h>

using namespace UT::Literal;

class DEP_MicroNode;
namespace SOP_UVAutoseamEnums
{
    enum class BaseSplit
    {
        CURVATURE = 0,
        EXISTING
    };
    enum class Mergemethod
    {
        AREA = 0,
        PTCURVATURE,
        EDGECURVATURE
    };
}


class SOP_API SOP_UVAutoseamParms  : public SOP_NodeParms
{
public:
    static int version() { return 1; }

    SOP_UVAutoseamParms()
    {
        myGroup = ""_sh;
        myAvoidanceWeight = 1;
        myBaseSplit = 0;
        myDistortionTol = 0.5;
        myBoundaryWeight = 0.0;
        myUVAttrib = "uv"_sh;
        myUvtolerance = 1e-5;
        myMergemethod = 0;
        myNum = 0;
        mySeamsGroupName = "seams"_sh;
        myUseOutputIslandAttr = false;
        myOutputIslandAttr = "island"_sh;
        myPreseams = ""_sh;
        myIslandAttr = ""_sh;
        myNonseams = ""_sh;
        myAvoidAttr = ""_sh;

    }

    explicit SOP_UVAutoseamParms(const SOP_UVAutoseamParms &) = default;

    virtual ~SOP_UVAutoseamParms() {}

    bool operator==(const SOP_UVAutoseamParms &src) const
    {
        if (myGroup != src.myGroup) return false;
        if (myAvoidanceWeight != src.myAvoidanceWeight) return false;
        if (myBaseSplit != src.myBaseSplit) return false;
        if (myDistortionTol != src.myDistortionTol) return false;
        if (myBoundaryWeight != src.myBoundaryWeight) return false;
        if (myUVAttrib != src.myUVAttrib) return false;
        if (myUvtolerance != src.myUvtolerance) return false;
        if (myMergemethod != src.myMergemethod) return false;
        if (myNum != src.myNum) return false;
        if (mySeamsGroupName != src.mySeamsGroupName) return false;
        if (myUseOutputIslandAttr != src.myUseOutputIslandAttr) return false;
        if (myOutputIslandAttr != src.myOutputIslandAttr) return false;
        if (myPreseams != src.myPreseams) return false;
        if (myIslandAttr != src.myIslandAttr) return false;
        if (myNonseams != src.myNonseams) return false;
        if (myAvoidAttr != src.myAvoidAttr) return false;

        return true;
    }
    bool operator!=(const SOP_UVAutoseamParms &src) const
    {
        return !operator==(src);
    }
    using BaseSplit = SOP_UVAutoseamEnums::BaseSplit;
    using Mergemethod = SOP_UVAutoseamEnums::Mergemethod;



    void        buildFromOp(const OP_Node *node, fpreal time, DEP_MicroNode *depnode)
    {
        if (true)
            OP_Utils::evalOpParm(myGroup, node, "group", time, 0);
        else myGroup = ""_sh;
        if (true)
            OP_Utils::evalOpParm(myAvoidanceWeight, node, "avoidanceweight", time, 0);
        else myAvoidanceWeight = 1;
        if (true)
            OP_Utils::evalOpParm(myBaseSplit, node, "basesplit", time, 0);
        else myBaseSplit = 0;
        if (true && ( (!(((int64(getBaseSplit())==1)))) ) )
            OP_Utils::evalOpParm(myDistortionTol, node, "distortiontol", time, 0);
        else myDistortionTol = 0.5;
        if (true && ( (!(((int64(getBaseSplit())==1)))) ) )
            OP_Utils::evalOpParm(myBoundaryWeight, node, "boundaryweight", time, 0);
        else myBoundaryWeight = 0.0;
        if (true && ( (!(((int64(getBaseSplit())==0)))) ) )
            OP_Utils::evalOpParm(myUVAttrib, node, "uvattrib", time, 0);
        else myUVAttrib = "uv"_sh;
        if (true && ( (!(((int64(getBaseSplit())==0)))) ) )
            OP_Utils::evalOpParm(myUvtolerance, node, "uvtolerance", time, 0);
        else myUvtolerance = 1e-5;
        if (true)
            OP_Utils::evalOpParm(myMergemethod, node, "mergemethod", time, 0);
        else myMergemethod = 0;
        if (true)
            OP_Utils::evalOpParm(myNum, node, "num", time, 0);
        else myNum = 0;
        if (true)
            OP_Utils::evalOpParm(mySeamsGroupName, node, "seamsgroupname", time, 0);
        else mySeamsGroupName = "seams"_sh;
        if (true)
            OP_Utils::evalOpParm(myUseOutputIslandAttr, node, "useoutputislandattr", time, 0);
        else myUseOutputIslandAttr = false;
        if (true && ( (!(((getUseOutputIslandAttr()==0)))) ) )
            OP_Utils::evalOpParm(myOutputIslandAttr, node, "outputislandattr", time, 0);
        else myOutputIslandAttr = "island"_sh;
        if (true && ( (!(((int64(getBaseSplit())==1)))) ) )
            OP_Utils::evalOpParm(myPreseams, node, "preseams", time, 0);
        else myPreseams = ""_sh;
        if (true && ( (!(((int64(getBaseSplit())==1)))) ) )
            OP_Utils::evalOpParm(myIslandAttr, node, "islandattr", time, 0);
        else myIslandAttr = ""_sh;
        if (true && ( (!(((int64(getBaseSplit())==1)))) ) )
            OP_Utils::evalOpParm(myNonseams, node, "nonseams", time, 0);
        else myNonseams = ""_sh;
        if (true && ( (!(((int64(getBaseSplit())==1)))) ) )
            OP_Utils::evalOpParm(myAvoidAttr, node, "avoidattr", time, 0);
        else myAvoidAttr = ""_sh;

    }


    virtual void loadFromOpSubclass(const LoadParms &loadparms)
    {
        buildFromOp(loadparms.node(), loadparms.context().getTime(), loadparms.depnode());
    }


    virtual void copyFrom(const SOP_NodeParms *src)
    {
        *this = *((const SOP_UVAutoseamParms *)src);
    }

    template <typename T>
    void
    doGetParmValue(exint idx, T &value) const
    {
        switch (idx)
        {
            case 0:
                coerceValue(value, myGroup);
                break;
            case 1:
                coerceValue(value, myAvoidanceWeight);
                break;
            case 2:
                coerceValue(value, myBaseSplit);
                break;
            case 3:
                coerceValue(value, myDistortionTol);
                break;
            case 4:
                coerceValue(value, myBoundaryWeight);
                break;
            case 5:
                coerceValue(value, myUVAttrib);
                break;
            case 6:
                coerceValue(value, myUvtolerance);
                break;
            case 7:
                coerceValue(value, myMergemethod);
                break;
            case 8:
                coerceValue(value, myNum);
                break;
            case 9:
                coerceValue(value, mySeamsGroupName);
                break;
            case 10:
                coerceValue(value, myUseOutputIslandAttr);
                break;
            case 11:
                coerceValue(value, myOutputIslandAttr);
                break;
            case 12:
                coerceValue(value, myPreseams);
                break;
            case 13:
                coerceValue(value, myIslandAttr);
                break;
            case 14:
                coerceValue(value, myNonseams);
                break;
            case 15:
                coerceValue(value, myAvoidAttr);
                break;

        }
    }

    void        getParmValue(exint idx, exint &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, fpreal &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Vector2D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Vector3D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Vector4D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Matrix2D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Matrix3D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Matrix4D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_StringHolder &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_SharedPtr<UT_Ramp> &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, PRM_DataItemHandle &value) const
    { doGetParmValue(idx, value); }

    template <typename T>
    void
    doSetParmValue(exint idx, const T &value) 
    {
        switch (idx)
        {
            case 0:
                coerceValue(myGroup, value);
                break;
            case 1:
                coerceValue(myAvoidanceWeight, value);
                break;
            case 2:
                coerceValue(myBaseSplit, value);
                break;
            case 3:
                coerceValue(myDistortionTol, value);
                break;
            case 4:
                coerceValue(myBoundaryWeight, value);
                break;
            case 5:
                coerceValue(myUVAttrib, value);
                break;
            case 6:
                coerceValue(myUvtolerance, value);
                break;
            case 7:
                coerceValue(myMergemethod, value);
                break;
            case 8:
                coerceValue(myNum, value);
                break;
            case 9:
                coerceValue(mySeamsGroupName, value);
                break;
            case 10:
                coerceValue(myUseOutputIslandAttr, value);
                break;
            case 11:
                coerceValue(myOutputIslandAttr, value);
                break;
            case 12:
                coerceValue(myPreseams, value);
                break;
            case 13:
                coerceValue(myIslandAttr, value);
                break;
            case 14:
                coerceValue(myNonseams, value);
                break;
            case 15:
                coerceValue(myAvoidAttr, value);
                break;

        }
    }

    void        setParmValue(exint idx, const exint &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const fpreal &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Vector2D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Vector3D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Vector4D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Matrix2D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Matrix3D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Matrix4D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_StringHolder &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_SharedPtr<UT_Ramp> &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const PRM_DataItemHandle &value) 
    { doSetParmValue(idx, value); }

    virtual exint    getNumParms() const
    {
        return 16;
    }

    virtual const char *getParmName(exint fieldnum) const
    {
        switch (fieldnum)
        {
            case 0:
                return "group";
            case 1:
                return "avoidanceweight";
            case 2:
                return "basesplit";
            case 3:
                return "distortiontol";
            case 4:
                return "boundaryweight";
            case 5:
                return "uvattrib";
            case 6:
                return "uvtolerance";
            case 7:
                return "mergemethod";
            case 8:
                return "num";
            case 9:
                return "seamsgroupname";
            case 10:
                return "useoutputislandattr";
            case 11:
                return "outputislandattr";
            case 12:
                return "preseams";
            case 13:
                return "islandattr";
            case 14:
                return "nonseams";
            case 15:
                return "avoidattr";

        }
        return 0;
    }

    virtual ParmType getParmType(exint fieldnum) const
    {
        switch (fieldnum)
        {
                case 0:
                    return PARM_STRING;
                case 1:
                    return PARM_FLOAT;
                case 2:
                    return PARM_INTEGER;
                case 3:
                    return PARM_FLOAT;
                case 4:
                    return PARM_FLOAT;
                case 5:
                    return PARM_STRING;
                case 6:
                    return PARM_FLOAT;
                case 7:
                    return PARM_INTEGER;
                case 8:
                    return PARM_FLOAT;
                case 9:
                    return PARM_STRING;
                case 10:
                    return PARM_INTEGER;
                case 11:
                    return PARM_STRING;
                case 12:
                    return PARM_STRING;
                case 13:
                    return PARM_STRING;
                case 14:
                    return PARM_STRING;
                case 15:
                    return PARM_STRING;

        }
        return PARM_UNSUPPORTED;
    }

    // Boiler plate to load individual types.
    static void  loadData(UT_IStream &is, int64 &v)
    { is.bread(&v, 1); }
    static void  loadData(UT_IStream &is, bool &v)
    { int64     iv; is.bread(&iv, 1); v = iv; }
    static void  loadData(UT_IStream &is, fpreal64 &v)
    { is.bread<fpreal64>(&v, 1); }
    static void  loadData(UT_IStream &is, UT_Vector2D &v)
    { is.bread<fpreal64>(&v.x(), 1); is.bread<fpreal64>(&v.y(), 1); }
    static void  loadData(UT_IStream &is, UT_Vector3D &v)
    { is.bread<fpreal64>(&v.x(), 1); is.bread<fpreal64>(&v.y(), 1);
      is.bread<fpreal64>(&v.z(), 1); }
    static void  loadData(UT_IStream &is, UT_Vector4D &v)
    { is.bread<fpreal64>(&v.x(), 1); is.bread<fpreal64>(&v.y(), 1);
      is.bread<fpreal64>(&v.z(), 1); is.bread<fpreal64>(&v.w(), 1); }
    static void  loadData(UT_IStream &is, UT_Matrix2D &v)
    { for (int r = 0; r < 2; r++) for (int c = 0; c < 2; c++) is.bread<fpreal64>(&v(r, c), 1); }
    static void  loadData(UT_IStream &is, UT_Matrix3D &v)
    { for (int r = 0; r < 3; r++) for (int c = 0; c < 3; c++) is.bread<fpreal64>(&v(r, c), 1); }
    static void  loadData(UT_IStream &is, UT_Matrix4D &v)
    { for (int r = 0; r < 4; r++) for (int c = 0; c < 4; c++) is.bread<fpreal64>(&v(r, c), 1); }
    static void  loadData(UT_IStream &is, UT_Vector2I &v)
    { is.bread<int64>(&v.x(), 1); is.bread<int64>(&v.y(), 1); }
    static void  loadData(UT_IStream &is, UT_Vector3I &v)
    { is.bread<int64>(&v.x(), 1); is.bread<int64>(&v.y(), 1);
      is.bread<int64>(&v.z(), 1); }
    static void  loadData(UT_IStream &is, UT_Vector4I &v)
    { is.bread<int64>(&v.x(), 1); is.bread<int64>(&v.y(), 1);
      is.bread<int64>(&v.z(), 1); is.bread<int64>(&v.w(), 1); }
    static void  loadData(UT_IStream &is, UT_StringHolder &v)
    { is.bread(v); }
    static void  loadData(UT_IStream &is, UT_SharedPtr<UT_Ramp> &v)
    {   UT_StringHolder   rampdata;
        loadData(is, rampdata);
        if (rampdata.isstring())
        {
            v.reset(new UT_Ramp());
            UT_IStream  istr((const char *) rampdata, rampdata.length(), UT_ISTREAM_ASCII);
            v->load(istr);
        }
        else v.reset();
    }
    static void  loadData(UT_IStream &is, PRM_DataItemHandle &v)
    {   UT_StringHolder   data;
        loadData(is, data);
        if (data.isstring())
        {
            // Find the data type.
            char *colon = UT_StringWrap(data).findChar(':');
            if (colon)
            {
                int             typelen = colon - data.buffer();
                UT_WorkBuffer   type;
                type.strncpy(data.buffer(), typelen);
                UT_IStream  istr(((const char *) data) + typelen + 1, data.length() - (typelen + 1), UT_ISTREAM_BINARY);
                
                v = PRM_DataFactory::parseBinary(type.buffer(), istr);
            }
        }
        else v.reset();
    }

    static void  saveData(std::ostream &os, int64 v)
    { UTwrite(os, &v); }
    static void  saveData(std::ostream &os, bool v)
    { int64 iv = v; UTwrite(os, &iv); }
    static void  saveData(std::ostream &os, fpreal64 v)
    { UTwrite<fpreal64>(os, &v); }
    static void  saveData(std::ostream &os, UT_Vector2D v)
    { UTwrite<fpreal64>(os, &v.x()); UTwrite<fpreal64>(os, &v.y()); }
    static void  saveData(std::ostream &os, UT_Vector3D v)
    { UTwrite<fpreal64>(os, &v.x()); UTwrite<fpreal64>(os, &v.y());
      UTwrite<fpreal64>(os, &v.z()); }
    static void  saveData(std::ostream &os, UT_Vector4D v)
    { UTwrite<fpreal64>(os, &v.x()); UTwrite<fpreal64>(os, &v.y());
      UTwrite<fpreal64>(os, &v.z()); UTwrite<fpreal64>(os, &v.w()); }
    static void  saveData(std::ostream &os, UT_Matrix2D v)
    { for (int r = 0; r < 2; r++) for (int c = 0; c < 2; c++) UTwrite<fpreal64>(os, &v(r, c)); }
    static void  saveData(std::ostream &os, UT_Matrix3D v)
    { for (int r = 0; r < 3; r++) for (int c = 0; c < 3; c++) UTwrite<fpreal64>(os, &v(r, c)); }
    static void  saveData(std::ostream &os, UT_Matrix4D v)
    { for (int r = 0; r < 4; r++) for (int c = 0; c < 4; c++) UTwrite<fpreal64>(os, &v(r, c)); }
    static void  saveData(std::ostream &os, UT_StringHolder s)
    { UT_StringWrap(s).saveBinary(os); }
    static void  saveData(std::ostream &os, UT_SharedPtr<UT_Ramp> s)
    {   UT_StringHolder         result;
        UT_OStringStream        ostr;
        if (s) s->save(ostr);
        result = ostr.str();
        saveData(os, result);
    }
    static void  saveData(std::ostream &os, PRM_DataItemHandle s)
    {   UT_StringHolder         result;
        UT_OStringStream        ostr;
        if (s) 
        {
            ostr << s->getDataTypeToken();
            ostr << ":";
            s->saveBinary(ostr);
        }
        result = ostr.str();
        saveData(os, result);
    }


    void         save(std::ostream &os) const
    {
        int32           v = version();
        UTwrite(os, &v);
        saveData(os, myGroup);
        saveData(os, myAvoidanceWeight);
        saveData(os, myBaseSplit);
        saveData(os, myDistortionTol);
        saveData(os, myBoundaryWeight);
        saveData(os, myUVAttrib);
        saveData(os, myUvtolerance);
        saveData(os, myMergemethod);
        saveData(os, myNum);
        saveData(os, mySeamsGroupName);
        saveData(os, myUseOutputIslandAttr);
        saveData(os, myOutputIslandAttr);
        saveData(os, myPreseams);
        saveData(os, myIslandAttr);
        saveData(os, myNonseams);
        saveData(os, myAvoidAttr);

    }

    bool         load(UT_IStream &is)
    {
        int32           v;
        is.bread(&v, 1);
        if (version() != v)
        {
            // Fail incompatible versions
            return false;
        }
        loadData(is, myGroup);
        loadData(is, myAvoidanceWeight);
        loadData(is, myBaseSplit);
        loadData(is, myDistortionTol);
        loadData(is, myBoundaryWeight);
        loadData(is, myUVAttrib);
        loadData(is, myUvtolerance);
        loadData(is, myMergemethod);
        loadData(is, myNum);
        loadData(is, mySeamsGroupName);
        loadData(is, myUseOutputIslandAttr);
        loadData(is, myOutputIslandAttr);
        loadData(is, myPreseams);
        loadData(is, myIslandAttr);
        loadData(is, myNonseams);
        loadData(is, myAvoidAttr);

        return true;
    }

    const UT_StringHolder & getGroup() const { return myGroup; }
    void setGroup(const UT_StringHolder & val) { myGroup = val; }
    UT_StringHolder opGroup(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getGroup();
        UT_StringHolder result;
        OP_Utils::evalOpParm(result, thissop, "group", cookparms.getCookTime(), 0);
        return result;
    }
    fpreal64 getAvoidanceWeight() const { return myAvoidanceWeight; }
    void setAvoidanceWeight(fpreal64 val) { myAvoidanceWeight = val; }
    fpreal64 opAvoidanceWeight(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getAvoidanceWeight();
        fpreal64 result;
        OP_Utils::evalOpParm(result, thissop, "avoidanceweight", cookparms.getCookTime(), 0);
        return result;
    }
    BaseSplit getBaseSplit() const { return BaseSplit(myBaseSplit); }
    void setBaseSplit(BaseSplit val) { myBaseSplit = int64(val); }
    BaseSplit opBaseSplit(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getBaseSplit();
        int64 result;
        OP_Utils::evalOpParm(result, thissop, "basesplit", cookparms.getCookTime(), 0);
        return BaseSplit(result);
    }
    fpreal64 getDistortionTol() const { return myDistortionTol; }
    void setDistortionTol(fpreal64 val) { myDistortionTol = val; }
    fpreal64 opDistortionTol(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getDistortionTol();
        fpreal64 result;
        OP_Utils::evalOpParm(result, thissop, "distortiontol", cookparms.getCookTime(), 0);
        return result;
    }
    fpreal64 getBoundaryWeight() const { return myBoundaryWeight; }
    void setBoundaryWeight(fpreal64 val) { myBoundaryWeight = val; }
    fpreal64 opBoundaryWeight(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getBoundaryWeight();
        fpreal64 result;
        OP_Utils::evalOpParm(result, thissop, "boundaryweight", cookparms.getCookTime(), 0);
        return result;
    }
    const UT_StringHolder & getUVAttrib() const { return myUVAttrib; }
    void setUVAttrib(const UT_StringHolder & val) { myUVAttrib = val; }
    UT_StringHolder opUVAttrib(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getUVAttrib();
        UT_StringHolder result;
        OP_Utils::evalOpParm(result, thissop, "uvattrib", cookparms.getCookTime(), 0);
        return result;
    }
    fpreal64 getUvtolerance() const { return myUvtolerance; }
    void setUvtolerance(fpreal64 val) { myUvtolerance = val; }
    fpreal64 opUvtolerance(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getUvtolerance();
        fpreal64 result;
        OP_Utils::evalOpParm(result, thissop, "uvtolerance", cookparms.getCookTime(), 0);
        return result;
    }
    Mergemethod getMergemethod() const { return Mergemethod(myMergemethod); }
    void setMergemethod(Mergemethod val) { myMergemethod = int64(val); }
    Mergemethod opMergemethod(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getMergemethod();
        int64 result;
        OP_Utils::evalOpParm(result, thissop, "mergemethod", cookparms.getCookTime(), 0);
        return Mergemethod(result);
    }
    fpreal64 getNum() const { return myNum; }
    void setNum(fpreal64 val) { myNum = val; }
    fpreal64 opNum(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getNum();
        fpreal64 result;
        OP_Utils::evalOpParm(result, thissop, "num", cookparms.getCookTime(), 0);
        return result;
    }
    const UT_StringHolder & getSeamsGroupName() const { return mySeamsGroupName; }
    void setSeamsGroupName(const UT_StringHolder & val) { mySeamsGroupName = val; }
    UT_StringHolder opSeamsGroupName(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getSeamsGroupName();
        UT_StringHolder result;
        OP_Utils::evalOpParm(result, thissop, "seamsgroupname", cookparms.getCookTime(), 0);
        return result;
    }
    bool getUseOutputIslandAttr() const { return myUseOutputIslandAttr; }
    void setUseOutputIslandAttr(bool val) { myUseOutputIslandAttr = val; }
    bool opUseOutputIslandAttr(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getUseOutputIslandAttr();
        bool result;
        OP_Utils::evalOpParm(result, thissop, "useoutputislandattr", cookparms.getCookTime(), 0);
        return result;
    }
    const UT_StringHolder & getOutputIslandAttr() const { return myOutputIslandAttr; }
    void setOutputIslandAttr(const UT_StringHolder & val) { myOutputIslandAttr = val; }
    UT_StringHolder opOutputIslandAttr(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getOutputIslandAttr();
        UT_StringHolder result;
        OP_Utils::evalOpParm(result, thissop, "outputislandattr", cookparms.getCookTime(), 0);
        return result;
    }
    const UT_StringHolder & getPreseams() const { return myPreseams; }
    void setPreseams(const UT_StringHolder & val) { myPreseams = val; }
    UT_StringHolder opPreseams(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getPreseams();
        UT_StringHolder result;
        OP_Utils::evalOpParm(result, thissop, "preseams", cookparms.getCookTime(), 0);
        return result;
    }
    const UT_StringHolder & getIslandAttr() const { return myIslandAttr; }
    void setIslandAttr(const UT_StringHolder & val) { myIslandAttr = val; }
    UT_StringHolder opIslandAttr(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getIslandAttr();
        UT_StringHolder result;
        OP_Utils::evalOpParm(result, thissop, "islandattr", cookparms.getCookTime(), 0);
        return result;
    }
    const UT_StringHolder & getNonseams() const { return myNonseams; }
    void setNonseams(const UT_StringHolder & val) { myNonseams = val; }
    UT_StringHolder opNonseams(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getNonseams();
        UT_StringHolder result;
        OP_Utils::evalOpParm(result, thissop, "nonseams", cookparms.getCookTime(), 0);
        return result;
    }
    const UT_StringHolder & getAvoidAttr() const { return myAvoidAttr; }
    void setAvoidAttr(const UT_StringHolder & val) { myAvoidAttr = val; }
    UT_StringHolder opAvoidAttr(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getAvoidAttr();
        UT_StringHolder result;
        OP_Utils::evalOpParm(result, thissop, "avoidattr", cookparms.getCookTime(), 0);
        return result;
    }

private:
    UT_StringHolder myGroup;
    fpreal64 myAvoidanceWeight;
    int64 myBaseSplit;
    fpreal64 myDistortionTol;
    fpreal64 myBoundaryWeight;
    UT_StringHolder myUVAttrib;
    fpreal64 myUvtolerance;
    int64 myMergemethod;
    fpreal64 myNum;
    UT_StringHolder mySeamsGroupName;
    bool myUseOutputIslandAttr;
    UT_StringHolder myOutputIslandAttr;
    UT_StringHolder myPreseams;
    UT_StringHolder myIslandAttr;
    UT_StringHolder myNonseams;
    UT_StringHolder myAvoidAttr;

};
