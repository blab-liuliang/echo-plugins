/* Automagically Generated by generate_proto.py
 * Do not Edit
 */
#pragma once

#include <SOP/SOP_NodeVerb.h>
#include <OP/OP_Utils.h>
#include <PRM/PRM_Parm.h>
#include <UT/UT_IStream.h>
#include <UT/UT_NTStreamUtil.h>
#include <UT/UT_Ramp.h>
#include <UT/UT_SharedPtr.h>
#include <UT/UT_StringHolder.h>
#include <UT/UT_StringStream.h>
#include <UT/UT_VectorTypes.h>
#include <SYS/SYS_Types.h>

using namespace UT::Literal;

class DEP_MicroNode;

class SOP_API SOP_BoundParms  : public SOP_NodeParms
{
public:
    static int version() { return 1; }

    SOP_BoundParms()
    {
        myGroup = ""_sh;
        myGrouptype = 0;
        myKeeporiginal = false;
        myCreateempty = false;
        myBoundtype = 0;
        myDodivs = false;
        myMinsize = UT_Vector3D(0,0,0);
        myOrientedbbox = false;
        myDivs = UT_Vector3I(3,3,3);
        myRebar = false;
        myOrient = 1;
        myAccurate = false;
        myMinradius = 0;
        myMinpad = UT_Vector3D(0,0,0);
        myMaxpad = UT_Vector3D(0,0,0);

    }

    explicit SOP_BoundParms(const SOP_BoundParms &) = default;

    virtual ~SOP_BoundParms() {}

    bool operator==(const SOP_BoundParms &src) const
    {
        if (myGroup != src.myGroup) return false;
        if (myGrouptype != src.myGrouptype) return false;
        if (myKeeporiginal != src.myKeeporiginal) return false;
        if (myCreateempty != src.myCreateempty) return false;
        if (myBoundtype != src.myBoundtype) return false;
        if (myDodivs != src.myDodivs) return false;
        if (myMinsize != src.myMinsize) return false;
        if (myOrientedbbox != src.myOrientedbbox) return false;
        if (myDivs != src.myDivs) return false;
        if (myRebar != src.myRebar) return false;
        if (myOrient != src.myOrient) return false;
        if (myAccurate != src.myAccurate) return false;
        if (myMinradius != src.myMinradius) return false;
        if (myMinpad != src.myMinpad) return false;
        if (myMaxpad != src.myMaxpad) return false;

        return true;
    }
    bool operator!=(const SOP_BoundParms &src) const
    {
        return !operator==(src);
    }



    void        buildFromOp(const OP_Node *node, fpreal time, DEP_MicroNode *depnode)
    {
        if (true)
            OP_Utils::evalOpParm(myGroup, node, "group", time, 0);
        else myGroup = ""_sh;
        if (true)
            OP_Utils::evalOpParm(myGrouptype, node, "grouptype", time, 0);
        else myGrouptype = 0;
        if (true)
            OP_Utils::evalOpParm(myKeeporiginal, node, "keepOriginal", time, 0);
        else myKeeporiginal = false;
        if (true)
            OP_Utils::evalOpParm(myCreateempty, node, "createempty", time, 0);
        else myCreateempty = false;
        if (true)
            OP_Utils::evalOpParm(myBoundtype, node, "boundtype", time, 0);
        else myBoundtype = 0;
        if (true && ( (getBoundtype()==0) ) )
            OP_Utils::evalOpParm(myDodivs, node, "dodivs", time, 0);
        else myDodivs = false;
        if (true && ( (getBoundtype()==0) ) )
            OP_Utils::evalOpParm(myMinsize, node, "minsize", time, 0);
        else myMinsize = UT_Vector3D(0,0,0);
        if (true && ( (getBoundtype()==0) ) )
            OP_Utils::evalOpParm(myOrientedbbox, node, "orientedbbox", time, 0);
        else myOrientedbbox = false;
        if (true && ( (getBoundtype()==0&&getDodivs()!=0) ) )
            OP_Utils::evalOpParm(myDivs, node, "divs", time, 0);
        else myDivs = UT_Vector3I(3,3,3);
        if (true && ( (getBoundtype()==0&&getDodivs()!=0) ) )
            OP_Utils::evalOpParm(myRebar, node, "rebar", time, 0);
        else myRebar = false;
        if (true && ( (getBoundtype()==1) ) )
            OP_Utils::evalOpParm(myOrient, node, "orient", time, 0);
        else myOrient = 1;
        if (true && ( (getBoundtype()==1) ) )
            OP_Utils::evalOpParm(myAccurate, node, "accurate", time, 0);
        else myAccurate = false;
        if (true && ( (getBoundtype()==1) ) )
            OP_Utils::evalOpParm(myMinradius, node, "minradius", time, 0);
        else myMinradius = 0;
        if (true)
            OP_Utils::evalOpParm(myMinpad, node, "minpad", time, 0);
        else myMinpad = UT_Vector3D(0,0,0);
        if (true)
            OP_Utils::evalOpParm(myMaxpad, node, "maxpad", time, 0);
        else myMaxpad = UT_Vector3D(0,0,0);

    }


    virtual void loadFromOpSubclass(const LoadParms &loadparms)
    {
        buildFromOp(loadparms.node(), loadparms.context().getTime(), loadparms.depnode());
    }


    virtual void copyFrom(const SOP_NodeParms *src)
    {
        *this = *((const SOP_BoundParms *)src);
    }

    template <typename T>
    void
    doGetParmValue(exint idx, T &value) const
    {
        switch (idx)
        {
            case 0:
                coerceValue(value, myGroup);
                break;
            case 1:
                coerceValue(value, myGrouptype);
                break;
            case 2:
                coerceValue(value, myKeeporiginal);
                break;
            case 3:
                coerceValue(value, myCreateempty);
                break;
            case 4:
                coerceValue(value, myBoundtype);
                break;
            case 5:
                coerceValue(value, myDodivs);
                break;
            case 6:
                coerceValue(value, myMinsize);
                break;
            case 7:
                coerceValue(value, myOrientedbbox);
                break;
            case 8:
                coerceValue(value, myDivs);
                break;
            case 9:
                coerceValue(value, myRebar);
                break;
            case 10:
                coerceValue(value, myOrient);
                break;
            case 11:
                coerceValue(value, myAccurate);
                break;
            case 12:
                coerceValue(value, myMinradius);
                break;
            case 13:
                coerceValue(value, myMinpad);
                break;
            case 14:
                coerceValue(value, myMaxpad);
                break;

        }
    }

    void        getParmValue(exint idx, exint &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, fpreal &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Vector2D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Vector3D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Vector4D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Matrix2D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Matrix3D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Matrix4D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_StringHolder &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_SharedPtr<UT_Ramp> &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, PRM_DataItemHandle &value) const
    { doGetParmValue(idx, value); }

    template <typename T>
    void
    doSetParmValue(exint idx, const T &value) 
    {
        switch (idx)
        {
            case 0:
                coerceValue(myGroup, value);
                break;
            case 1:
                coerceValue(myGrouptype, value);
                break;
            case 2:
                coerceValue(myKeeporiginal, value);
                break;
            case 3:
                coerceValue(myCreateempty, value);
                break;
            case 4:
                coerceValue(myBoundtype, value);
                break;
            case 5:
                coerceValue(myDodivs, value);
                break;
            case 6:
                coerceValue(myMinsize, value);
                break;
            case 7:
                coerceValue(myOrientedbbox, value);
                break;
            case 8:
                coerceValue(myDivs, value);
                break;
            case 9:
                coerceValue(myRebar, value);
                break;
            case 10:
                coerceValue(myOrient, value);
                break;
            case 11:
                coerceValue(myAccurate, value);
                break;
            case 12:
                coerceValue(myMinradius, value);
                break;
            case 13:
                coerceValue(myMinpad, value);
                break;
            case 14:
                coerceValue(myMaxpad, value);
                break;

        }
    }

    void        setParmValue(exint idx, const exint &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const fpreal &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Vector2D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Vector3D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Vector4D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Matrix2D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Matrix3D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Matrix4D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_StringHolder &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_SharedPtr<UT_Ramp> &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const PRM_DataItemHandle &value) 
    { doSetParmValue(idx, value); }

    virtual exint    getNumParms() const
    {
        return 15;
    }

    virtual const char *getParmName(exint fieldnum) const
    {
        switch (fieldnum)
        {
            case 0:
                return "group";
            case 1:
                return "grouptype";
            case 2:
                return "keepOriginal";
            case 3:
                return "createempty";
            case 4:
                return "boundtype";
            case 5:
                return "dodivs";
            case 6:
                return "minsize";
            case 7:
                return "orientedbbox";
            case 8:
                return "divs";
            case 9:
                return "rebar";
            case 10:
                return "orient";
            case 11:
                return "accurate";
            case 12:
                return "minradius";
            case 13:
                return "minpad";
            case 14:
                return "maxpad";

        }
        return 0;
    }

    virtual ParmType getParmType(exint fieldnum) const
    {
        switch (fieldnum)
        {
                case 0:
                    return PARM_STRING;
                case 1:
                    return PARM_INTEGER;
                case 2:
                    return PARM_INTEGER;
                case 3:
                    return PARM_INTEGER;
                case 4:
                    return PARM_INTEGER;
                case 5:
                    return PARM_INTEGER;
                case 6:
                    return PARM_VECTOR3;
                case 7:
                    return PARM_INTEGER;
                case 8:
                    return PARM_VECTOR3;
                case 9:
                    return PARM_INTEGER;
                case 10:
                    return PARM_INTEGER;
                case 11:
                    return PARM_INTEGER;
                case 12:
                    return PARM_FLOAT;
                case 13:
                    return PARM_VECTOR3;
                case 14:
                    return PARM_VECTOR3;

        }
        return PARM_UNSUPPORTED;
    }

    // Boiler plate to load individual types.
    static void  loadData(UT_IStream &is, int64 &v)
    { is.bread(&v, 1); }
    static void  loadData(UT_IStream &is, bool &v)
    { int64     iv; is.bread(&iv, 1); v = iv; }
    static void  loadData(UT_IStream &is, fpreal64 &v)
    { is.bread<fpreal64>(&v, 1); }
    static void  loadData(UT_IStream &is, UT_Vector2D &v)
    { is.bread<fpreal64>(&v.x(), 1); is.bread<fpreal64>(&v.y(), 1); }
    static void  loadData(UT_IStream &is, UT_Vector3D &v)
    { is.bread<fpreal64>(&v.x(), 1); is.bread<fpreal64>(&v.y(), 1);
      is.bread<fpreal64>(&v.z(), 1); }
    static void  loadData(UT_IStream &is, UT_Vector4D &v)
    { is.bread<fpreal64>(&v.x(), 1); is.bread<fpreal64>(&v.y(), 1);
      is.bread<fpreal64>(&v.z(), 1); is.bread<fpreal64>(&v.w(), 1); }
    static void  loadData(UT_IStream &is, UT_Matrix2D &v)
    { for (int r = 0; r < 2; r++) for (int c = 0; c < 2; c++) is.bread<fpreal64>(&v(r, c), 1); }
    static void  loadData(UT_IStream &is, UT_Matrix3D &v)
    { for (int r = 0; r < 3; r++) for (int c = 0; c < 3; c++) is.bread<fpreal64>(&v(r, c), 1); }
    static void  loadData(UT_IStream &is, UT_Matrix4D &v)
    { for (int r = 0; r < 4; r++) for (int c = 0; c < 4; c++) is.bread<fpreal64>(&v(r, c), 1); }
    static void  loadData(UT_IStream &is, UT_Vector2I &v)
    { is.bread<int64>(&v.x(), 1); is.bread<int64>(&v.y(), 1); }
    static void  loadData(UT_IStream &is, UT_Vector3I &v)
    { is.bread<int64>(&v.x(), 1); is.bread<int64>(&v.y(), 1);
      is.bread<int64>(&v.z(), 1); }
    static void  loadData(UT_IStream &is, UT_Vector4I &v)
    { is.bread<int64>(&v.x(), 1); is.bread<int64>(&v.y(), 1);
      is.bread<int64>(&v.z(), 1); is.bread<int64>(&v.w(), 1); }
    static void  loadData(UT_IStream &is, UT_StringHolder &v)
    { is.bread(v); }
    static void  loadData(UT_IStream &is, UT_SharedPtr<UT_Ramp> &v)
    {   UT_StringHolder   rampdata;
        loadData(is, rampdata);
        if (rampdata.isstring())
        {
            v.reset(new UT_Ramp());
            UT_IStream  istr((const char *) rampdata, rampdata.length(), UT_ISTREAM_ASCII);
            v->load(istr);
        }
        else v.reset();
    }
    static void  loadData(UT_IStream &is, PRM_DataItemHandle &v)
    {   UT_StringHolder   data;
        loadData(is, data);
        if (data.isstring())
        {
            // Find the data type.
            char *colon = UT_StringWrap(data).findChar(':');
            if (colon)
            {
                int             typelen = colon - data.buffer();
                UT_WorkBuffer   type;
                type.strncpy(data.buffer(), typelen);
                UT_IStream  istr(((const char *) data) + typelen + 1, data.length() - (typelen + 1), UT_ISTREAM_BINARY);
                
                v = PRM_DataFactory::parseBinary(type.buffer(), istr);
            }
        }
        else v.reset();
    }

    static void  saveData(std::ostream &os, int64 v)
    { UTwrite(os, &v); }
    static void  saveData(std::ostream &os, bool v)
    { int64 iv = v; UTwrite(os, &iv); }
    static void  saveData(std::ostream &os, fpreal64 v)
    { UTwrite<fpreal64>(os, &v); }
    static void  saveData(std::ostream &os, UT_Vector2D v)
    { UTwrite<fpreal64>(os, &v.x()); UTwrite<fpreal64>(os, &v.y()); }
    static void  saveData(std::ostream &os, UT_Vector3D v)
    { UTwrite<fpreal64>(os, &v.x()); UTwrite<fpreal64>(os, &v.y());
      UTwrite<fpreal64>(os, &v.z()); }
    static void  saveData(std::ostream &os, UT_Vector4D v)
    { UTwrite<fpreal64>(os, &v.x()); UTwrite<fpreal64>(os, &v.y());
      UTwrite<fpreal64>(os, &v.z()); UTwrite<fpreal64>(os, &v.w()); }
    static void  saveData(std::ostream &os, UT_Matrix2D v)
    { for (int r = 0; r < 2; r++) for (int c = 0; c < 2; c++) UTwrite<fpreal64>(os, &v(r, c)); }
    static void  saveData(std::ostream &os, UT_Matrix3D v)
    { for (int r = 0; r < 3; r++) for (int c = 0; c < 3; c++) UTwrite<fpreal64>(os, &v(r, c)); }
    static void  saveData(std::ostream &os, UT_Matrix4D v)
    { for (int r = 0; r < 4; r++) for (int c = 0; c < 4; c++) UTwrite<fpreal64>(os, &v(r, c)); }
    static void  saveData(std::ostream &os, UT_StringHolder s)
    { UT_StringWrap(s).saveBinary(os); }
    static void  saveData(std::ostream &os, UT_SharedPtr<UT_Ramp> s)
    {   UT_StringHolder         result;
        UT_OStringStream        ostr;
        if (s) s->save(ostr);
        result = ostr.str();
        saveData(os, result);
    }
    static void  saveData(std::ostream &os, PRM_DataItemHandle s)
    {   UT_StringHolder         result;
        UT_OStringStream        ostr;
        if (s) 
        {
            ostr << s->getDataTypeToken();
            ostr << ":";
            s->saveBinary(ostr);
        }
        result = ostr.str();
        saveData(os, result);
    }


    void         save(std::ostream &os) const
    {
        int32           v = version();
        UTwrite(os, &v);
        saveData(os, myGroup);
        saveData(os, myGrouptype);
        saveData(os, myKeeporiginal);
        saveData(os, myCreateempty);
        saveData(os, myBoundtype);
        saveData(os, myDodivs);
        saveData(os, myMinsize);
        saveData(os, myOrientedbbox);
        saveData(os, myDivs);
        saveData(os, myRebar);
        saveData(os, myOrient);
        saveData(os, myAccurate);
        saveData(os, myMinradius);
        saveData(os, myMinpad);
        saveData(os, myMaxpad);

    }

    bool         load(UT_IStream &is)
    {
        int32           v;
        is.bread(&v, 1);
        if (version() != v)
        {
            // Fail incompatible versions
            return false;
        }
        loadData(is, myGroup);
        loadData(is, myGrouptype);
        loadData(is, myKeeporiginal);
        loadData(is, myCreateempty);
        loadData(is, myBoundtype);
        loadData(is, myDodivs);
        loadData(is, myMinsize);
        loadData(is, myOrientedbbox);
        loadData(is, myDivs);
        loadData(is, myRebar);
        loadData(is, myOrient);
        loadData(is, myAccurate);
        loadData(is, myMinradius);
        loadData(is, myMinpad);
        loadData(is, myMaxpad);

        return true;
    }

    const UT_StringHolder & getGroup() const { return myGroup; }
    void setGroup(const UT_StringHolder & val) { myGroup = val; }
    UT_StringHolder opGroup(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getGroup();
        UT_StringHolder result;
        OP_Utils::evalOpParm(result, thissop, "group", cookparms.getCookTime(), 0);
        return result;
    }
    int64 getGrouptype() const { return myGrouptype; }
    void setGrouptype(int64 val) { myGrouptype = val; }
    int64 opGrouptype(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getGrouptype();
        int64 result;
        OP_Utils::evalOpParm(result, thissop, "grouptype", cookparms.getCookTime(), 0);
        return result;
    }
    bool getKeeporiginal() const { return myKeeporiginal; }
    void setKeeporiginal(bool val) { myKeeporiginal = val; }
    bool opKeeporiginal(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getKeeporiginal();
        bool result;
        OP_Utils::evalOpParm(result, thissop, "keepOriginal", cookparms.getCookTime(), 0);
        return result;
    }
    bool getCreateempty() const { return myCreateempty; }
    void setCreateempty(bool val) { myCreateempty = val; }
    bool opCreateempty(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getCreateempty();
        bool result;
        OP_Utils::evalOpParm(result, thissop, "createempty", cookparms.getCookTime(), 0);
        return result;
    }
    int64 getBoundtype() const { return myBoundtype; }
    void setBoundtype(int64 val) { myBoundtype = val; }
    int64 opBoundtype(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getBoundtype();
        int64 result;
        OP_Utils::evalOpParm(result, thissop, "boundtype", cookparms.getCookTime(), 0);
        return result;
    }
    bool getDodivs() const { return myDodivs; }
    void setDodivs(bool val) { myDodivs = val; }
    bool opDodivs(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getDodivs();
        bool result;
        OP_Utils::evalOpParm(result, thissop, "dodivs", cookparms.getCookTime(), 0);
        return result;
    }
    UT_Vector3D getMinsize() const { return myMinsize; }
    void setMinsize(UT_Vector3D val) { myMinsize = val; }
    UT_Vector3D opMinsize(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getMinsize();
        UT_Vector3D result;
        OP_Utils::evalOpParm(result, thissop, "minsize", cookparms.getCookTime(), 0);
        return result;
    }
    bool getOrientedbbox() const { return myOrientedbbox; }
    void setOrientedbbox(bool val) { myOrientedbbox = val; }
    bool opOrientedbbox(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getOrientedbbox();
        bool result;
        OP_Utils::evalOpParm(result, thissop, "orientedbbox", cookparms.getCookTime(), 0);
        return result;
    }
    UT_Vector3I getDivs() const { return myDivs; }
    void setDivs(UT_Vector3I val) { myDivs = val; }
    UT_Vector3I opDivs(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getDivs();
        UT_Vector3I result;
        OP_Utils::evalOpParm(result, thissop, "divs", cookparms.getCookTime(), 0);
        return result;
    }
    bool getRebar() const { return myRebar; }
    void setRebar(bool val) { myRebar = val; }
    bool opRebar(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getRebar();
        bool result;
        OP_Utils::evalOpParm(result, thissop, "rebar", cookparms.getCookTime(), 0);
        return result;
    }
    int64 getOrient() const { return myOrient; }
    void setOrient(int64 val) { myOrient = val; }
    int64 opOrient(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getOrient();
        int64 result;
        OP_Utils::evalOpParm(result, thissop, "orient", cookparms.getCookTime(), 0);
        return result;
    }
    bool getAccurate() const { return myAccurate; }
    void setAccurate(bool val) { myAccurate = val; }
    bool opAccurate(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getAccurate();
        bool result;
        OP_Utils::evalOpParm(result, thissop, "accurate", cookparms.getCookTime(), 0);
        return result;
    }
    fpreal64 getMinradius() const { return myMinradius; }
    void setMinradius(fpreal64 val) { myMinradius = val; }
    fpreal64 opMinradius(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getMinradius();
        fpreal64 result;
        OP_Utils::evalOpParm(result, thissop, "minradius", cookparms.getCookTime(), 0);
        return result;
    }
    UT_Vector3D getMinpad() const { return myMinpad; }
    void setMinpad(UT_Vector3D val) { myMinpad = val; }
    UT_Vector3D opMinpad(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getMinpad();
        UT_Vector3D result;
        OP_Utils::evalOpParm(result, thissop, "minpad", cookparms.getCookTime(), 0);
        return result;
    }
    UT_Vector3D getMaxpad() const { return myMaxpad; }
    void setMaxpad(UT_Vector3D val) { myMaxpad = val; }
    UT_Vector3D opMaxpad(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getMaxpad();
        UT_Vector3D result;
        OP_Utils::evalOpParm(result, thissop, "maxpad", cookparms.getCookTime(), 0);
        return result;
    }

private:
    UT_StringHolder myGroup;
    int64 myGrouptype;
    bool myKeeporiginal;
    bool myCreateempty;
    int64 myBoundtype;
    bool myDodivs;
    UT_Vector3D myMinsize;
    bool myOrientedbbox;
    UT_Vector3I myDivs;
    bool myRebar;
    int64 myOrient;
    bool myAccurate;
    fpreal64 myMinradius;
    UT_Vector3D myMinpad;
    UT_Vector3D myMaxpad;

};
