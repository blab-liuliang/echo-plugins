/* Automagically Generated by generate_proto.py
 * Do not Edit
 */
#pragma once

#include <SOP/SOP_NodeVerb.h>
#include <OP/OP_Utils.h>
#include <PRM/PRM_Parm.h>
#include <UT/UT_IStream.h>
#include <UT/UT_NTStreamUtil.h>
#include <UT/UT_Ramp.h>
#include <UT/UT_SharedPtr.h>
#include <UT/UT_StringHolder.h>
#include <UT/UT_StringStream.h>
#include <UT/UT_VectorTypes.h>
#include <SYS/SYS_Types.h>

using namespace UT::Literal;

class DEP_MicroNode;
namespace SOP_ConvexDecompositionEnums
{
    enum class GeometryOutput
    {
        HULLS = 0,
        SEGMENTS
    };
}


class SOP_API SOP_ConvexDecompositionParms  : public SOP_NodeParms
{
public:
    static int version() { return 1; }

    SOP_ConvexDecompositionParms()
    {
        myGroup = ""_sh;
        myUsePieceAttrib = false;
        myPieceAttrib = "name"_sh;
        myMaxConcavity = 1;
        myTreatAsSolid = false;
        myMergeSegments = false;
        myGeometryOutput = 0;
        mySegmentAttrib = "segment"_sh;
        myInteriorGroupName = "convex_decomposition_interior"_sh;

    }

    explicit SOP_ConvexDecompositionParms(const SOP_ConvexDecompositionParms &) = default;

    virtual ~SOP_ConvexDecompositionParms() {}

    bool operator==(const SOP_ConvexDecompositionParms &src) const
    {
        if (myGroup != src.myGroup) return false;
        if (myUsePieceAttrib != src.myUsePieceAttrib) return false;
        if (myPieceAttrib != src.myPieceAttrib) return false;
        if (myMaxConcavity != src.myMaxConcavity) return false;
        if (myTreatAsSolid != src.myTreatAsSolid) return false;
        if (myMergeSegments != src.myMergeSegments) return false;
        if (myGeometryOutput != src.myGeometryOutput) return false;
        if (mySegmentAttrib != src.mySegmentAttrib) return false;
        if (myInteriorGroupName != src.myInteriorGroupName) return false;

        return true;
    }
    bool operator!=(const SOP_ConvexDecompositionParms &src) const
    {
        return !operator==(src);
    }
    using GeometryOutput = SOP_ConvexDecompositionEnums::GeometryOutput;



    void        buildFromOp(const OP_Node *node, fpreal time, DEP_MicroNode *depnode)
    {
        if (true)
            OP_Utils::evalOpParm(myGroup, node, "group", time, 0);
        else myGroup = ""_sh;
        if (true)
            OP_Utils::evalOpParm(myUsePieceAttrib, node, "usepieceattrib", time, 0);
        else myUsePieceAttrib = false;
        if (true && ( (!(((getUsePieceAttrib()==0)))) ) )
            OP_Utils::evalOpParm(myPieceAttrib, node, "pieceattrib", time, 0);
        else myPieceAttrib = "name"_sh;
        if (true)
            OP_Utils::evalOpParm(myMaxConcavity, node, "maxconcavity", time, 0);
        else myMaxConcavity = 1;
        if (true)
            OP_Utils::evalOpParm(myTreatAsSolid, node, "treatassolid", time, 0);
        else myTreatAsSolid = false;
        if (true)
            OP_Utils::evalOpParm(myMergeSegments, node, "mergesegments", time, 0);
        else myMergeSegments = false;
        if (true)
            OP_Utils::evalOpParm(myGeometryOutput, node, "geometryoutput", time, 0);
        else myGeometryOutput = 0;
        if (true)
            OP_Utils::evalOpParm(mySegmentAttrib, node, "segmentattrib", time, 0);
        else mySegmentAttrib = "segment"_sh;
        if (true && ( (!(((int64(getGeometryOutput())!=1)))) ) )
            OP_Utils::evalOpParm(myInteriorGroupName, node, "interiorgroupname", time, 0);
        else myInteriorGroupName = "convex_decomposition_interior"_sh;

    }


    virtual void loadFromOpSubclass(const LoadParms &loadparms)
    {
        buildFromOp(loadparms.node(), loadparms.context().getTime(), loadparms.depnode());
    }


    virtual void copyFrom(const SOP_NodeParms *src)
    {
        *this = *((const SOP_ConvexDecompositionParms *)src);
    }

    template <typename T>
    void
    doGetParmValue(exint idx, T &value) const
    {
        switch (idx)
        {
            case 0:
                coerceValue(value, myGroup);
                break;
            case 1:
                coerceValue(value, myUsePieceAttrib);
                break;
            case 2:
                coerceValue(value, myPieceAttrib);
                break;
            case 3:
                coerceValue(value, myMaxConcavity);
                break;
            case 4:
                coerceValue(value, myTreatAsSolid);
                break;
            case 5:
                coerceValue(value, myMergeSegments);
                break;
            case 6:
                coerceValue(value, myGeometryOutput);
                break;
            case 7:
                coerceValue(value, mySegmentAttrib);
                break;
            case 8:
                coerceValue(value, myInteriorGroupName);
                break;

        }
    }

    void        getParmValue(exint idx, exint &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, fpreal &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Vector2D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Vector3D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Vector4D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Matrix2D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Matrix3D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Matrix4D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_StringHolder &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_SharedPtr<UT_Ramp> &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, PRM_DataItemHandle &value) const
    { doGetParmValue(idx, value); }

    template <typename T>
    void
    doSetParmValue(exint idx, const T &value) 
    {
        switch (idx)
        {
            case 0:
                coerceValue(myGroup, value);
                break;
            case 1:
                coerceValue(myUsePieceAttrib, value);
                break;
            case 2:
                coerceValue(myPieceAttrib, value);
                break;
            case 3:
                coerceValue(myMaxConcavity, value);
                break;
            case 4:
                coerceValue(myTreatAsSolid, value);
                break;
            case 5:
                coerceValue(myMergeSegments, value);
                break;
            case 6:
                coerceValue(myGeometryOutput, value);
                break;
            case 7:
                coerceValue(mySegmentAttrib, value);
                break;
            case 8:
                coerceValue(myInteriorGroupName, value);
                break;

        }
    }

    void        setParmValue(exint idx, const exint &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const fpreal &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Vector2D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Vector3D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Vector4D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Matrix2D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Matrix3D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Matrix4D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_StringHolder &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_SharedPtr<UT_Ramp> &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const PRM_DataItemHandle &value) 
    { doSetParmValue(idx, value); }

    virtual exint    getNumParms() const
    {
        return 9;
    }

    virtual const char *getParmName(exint fieldnum) const
    {
        switch (fieldnum)
        {
            case 0:
                return "group";
            case 1:
                return "usepieceattrib";
            case 2:
                return "pieceattrib";
            case 3:
                return "maxconcavity";
            case 4:
                return "treatassolid";
            case 5:
                return "mergesegments";
            case 6:
                return "geometryoutput";
            case 7:
                return "segmentattrib";
            case 8:
                return "interiorgroupname";

        }
        return 0;
    }

    virtual ParmType getParmType(exint fieldnum) const
    {
        switch (fieldnum)
        {
                case 0:
                    return PARM_STRING;
                case 1:
                    return PARM_INTEGER;
                case 2:
                    return PARM_STRING;
                case 3:
                    return PARM_FLOAT;
                case 4:
                    return PARM_INTEGER;
                case 5:
                    return PARM_INTEGER;
                case 6:
                    return PARM_INTEGER;
                case 7:
                    return PARM_STRING;
                case 8:
                    return PARM_STRING;

        }
        return PARM_UNSUPPORTED;
    }

    // Boiler plate to load individual types.
    static void  loadData(UT_IStream &is, int64 &v)
    { is.bread(&v, 1); }
    static void  loadData(UT_IStream &is, bool &v)
    { int64     iv; is.bread(&iv, 1); v = iv; }
    static void  loadData(UT_IStream &is, fpreal64 &v)
    { is.bread<fpreal64>(&v, 1); }
    static void  loadData(UT_IStream &is, UT_Vector2D &v)
    { is.bread<fpreal64>(&v.x(), 1); is.bread<fpreal64>(&v.y(), 1); }
    static void  loadData(UT_IStream &is, UT_Vector3D &v)
    { is.bread<fpreal64>(&v.x(), 1); is.bread<fpreal64>(&v.y(), 1);
      is.bread<fpreal64>(&v.z(), 1); }
    static void  loadData(UT_IStream &is, UT_Vector4D &v)
    { is.bread<fpreal64>(&v.x(), 1); is.bread<fpreal64>(&v.y(), 1);
      is.bread<fpreal64>(&v.z(), 1); is.bread<fpreal64>(&v.w(), 1); }
    static void  loadData(UT_IStream &is, UT_Matrix2D &v)
    { for (int r = 0; r < 2; r++) for (int c = 0; c < 2; c++) is.bread<fpreal64>(&v(r, c), 1); }
    static void  loadData(UT_IStream &is, UT_Matrix3D &v)
    { for (int r = 0; r < 3; r++) for (int c = 0; c < 3; c++) is.bread<fpreal64>(&v(r, c), 1); }
    static void  loadData(UT_IStream &is, UT_Matrix4D &v)
    { for (int r = 0; r < 4; r++) for (int c = 0; c < 4; c++) is.bread<fpreal64>(&v(r, c), 1); }
    static void  loadData(UT_IStream &is, UT_Vector2I &v)
    { is.bread<int64>(&v.x(), 1); is.bread<int64>(&v.y(), 1); }
    static void  loadData(UT_IStream &is, UT_Vector3I &v)
    { is.bread<int64>(&v.x(), 1); is.bread<int64>(&v.y(), 1);
      is.bread<int64>(&v.z(), 1); }
    static void  loadData(UT_IStream &is, UT_Vector4I &v)
    { is.bread<int64>(&v.x(), 1); is.bread<int64>(&v.y(), 1);
      is.bread<int64>(&v.z(), 1); is.bread<int64>(&v.w(), 1); }
    static void  loadData(UT_IStream &is, UT_StringHolder &v)
    { is.bread(v); }
    static void  loadData(UT_IStream &is, UT_SharedPtr<UT_Ramp> &v)
    {   UT_StringHolder   rampdata;
        loadData(is, rampdata);
        if (rampdata.isstring())
        {
            v.reset(new UT_Ramp());
            UT_IStream  istr((const char *) rampdata, rampdata.length(), UT_ISTREAM_ASCII);
            v->load(istr);
        }
        else v.reset();
    }
    static void  loadData(UT_IStream &is, PRM_DataItemHandle &v)
    {   UT_StringHolder   data;
        loadData(is, data);
        if (data.isstring())
        {
            // Find the data type.
            char *colon = UT_StringWrap(data).findChar(':');
            if (colon)
            {
                int             typelen = colon - data.buffer();
                UT_WorkBuffer   type;
                type.strncpy(data.buffer(), typelen);
                UT_IStream  istr(((const char *) data) + typelen + 1, data.length() - (typelen + 1), UT_ISTREAM_BINARY);
                
                v = PRM_DataFactory::parseBinary(type.buffer(), istr);
            }
        }
        else v.reset();
    }

    static void  saveData(std::ostream &os, int64 v)
    { UTwrite(os, &v); }
    static void  saveData(std::ostream &os, bool v)
    { int64 iv = v; UTwrite(os, &iv); }
    static void  saveData(std::ostream &os, fpreal64 v)
    { UTwrite<fpreal64>(os, &v); }
    static void  saveData(std::ostream &os, UT_Vector2D v)
    { UTwrite<fpreal64>(os, &v.x()); UTwrite<fpreal64>(os, &v.y()); }
    static void  saveData(std::ostream &os, UT_Vector3D v)
    { UTwrite<fpreal64>(os, &v.x()); UTwrite<fpreal64>(os, &v.y());
      UTwrite<fpreal64>(os, &v.z()); }
    static void  saveData(std::ostream &os, UT_Vector4D v)
    { UTwrite<fpreal64>(os, &v.x()); UTwrite<fpreal64>(os, &v.y());
      UTwrite<fpreal64>(os, &v.z()); UTwrite<fpreal64>(os, &v.w()); }
    static void  saveData(std::ostream &os, UT_Matrix2D v)
    { for (int r = 0; r < 2; r++) for (int c = 0; c < 2; c++) UTwrite<fpreal64>(os, &v(r, c)); }
    static void  saveData(std::ostream &os, UT_Matrix3D v)
    { for (int r = 0; r < 3; r++) for (int c = 0; c < 3; c++) UTwrite<fpreal64>(os, &v(r, c)); }
    static void  saveData(std::ostream &os, UT_Matrix4D v)
    { for (int r = 0; r < 4; r++) for (int c = 0; c < 4; c++) UTwrite<fpreal64>(os, &v(r, c)); }
    static void  saveData(std::ostream &os, UT_StringHolder s)
    { UT_StringWrap(s).saveBinary(os); }
    static void  saveData(std::ostream &os, UT_SharedPtr<UT_Ramp> s)
    {   UT_StringHolder         result;
        UT_OStringStream        ostr;
        if (s) s->save(ostr);
        result = ostr.str();
        saveData(os, result);
    }
    static void  saveData(std::ostream &os, PRM_DataItemHandle s)
    {   UT_StringHolder         result;
        UT_OStringStream        ostr;
        if (s) 
        {
            ostr << s->getDataTypeToken();
            ostr << ":";
            s->saveBinary(ostr);
        }
        result = ostr.str();
        saveData(os, result);
    }


    void         save(std::ostream &os) const
    {
        int32           v = version();
        UTwrite(os, &v);
        saveData(os, myGroup);
        saveData(os, myUsePieceAttrib);
        saveData(os, myPieceAttrib);
        saveData(os, myMaxConcavity);
        saveData(os, myTreatAsSolid);
        saveData(os, myMergeSegments);
        saveData(os, myGeometryOutput);
        saveData(os, mySegmentAttrib);
        saveData(os, myInteriorGroupName);

    }

    bool         load(UT_IStream &is)
    {
        int32           v;
        is.bread(&v, 1);
        if (version() != v)
        {
            // Fail incompatible versions
            return false;
        }
        loadData(is, myGroup);
        loadData(is, myUsePieceAttrib);
        loadData(is, myPieceAttrib);
        loadData(is, myMaxConcavity);
        loadData(is, myTreatAsSolid);
        loadData(is, myMergeSegments);
        loadData(is, myGeometryOutput);
        loadData(is, mySegmentAttrib);
        loadData(is, myInteriorGroupName);

        return true;
    }

    const UT_StringHolder & getGroup() const { return myGroup; }
    void setGroup(const UT_StringHolder & val) { myGroup = val; }
    UT_StringHolder opGroup(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getGroup();
        UT_StringHolder result;
        OP_Utils::evalOpParm(result, thissop, "group", cookparms.getCookTime(), 0);
        return result;
    }
    bool getUsePieceAttrib() const { return myUsePieceAttrib; }
    void setUsePieceAttrib(bool val) { myUsePieceAttrib = val; }
    bool opUsePieceAttrib(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getUsePieceAttrib();
        bool result;
        OP_Utils::evalOpParm(result, thissop, "usepieceattrib", cookparms.getCookTime(), 0);
        return result;
    }
    const UT_StringHolder & getPieceAttrib() const { return myPieceAttrib; }
    void setPieceAttrib(const UT_StringHolder & val) { myPieceAttrib = val; }
    UT_StringHolder opPieceAttrib(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getPieceAttrib();
        UT_StringHolder result;
        OP_Utils::evalOpParm(result, thissop, "pieceattrib", cookparms.getCookTime(), 0);
        return result;
    }
    fpreal64 getMaxConcavity() const { return myMaxConcavity; }
    void setMaxConcavity(fpreal64 val) { myMaxConcavity = val; }
    fpreal64 opMaxConcavity(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getMaxConcavity();
        fpreal64 result;
        OP_Utils::evalOpParm(result, thissop, "maxconcavity", cookparms.getCookTime(), 0);
        return result;
    }
    bool getTreatAsSolid() const { return myTreatAsSolid; }
    void setTreatAsSolid(bool val) { myTreatAsSolid = val; }
    bool opTreatAsSolid(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getTreatAsSolid();
        bool result;
        OP_Utils::evalOpParm(result, thissop, "treatassolid", cookparms.getCookTime(), 0);
        return result;
    }
    bool getMergeSegments() const { return myMergeSegments; }
    void setMergeSegments(bool val) { myMergeSegments = val; }
    bool opMergeSegments(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getMergeSegments();
        bool result;
        OP_Utils::evalOpParm(result, thissop, "mergesegments", cookparms.getCookTime(), 0);
        return result;
    }
    GeometryOutput getGeometryOutput() const { return GeometryOutput(myGeometryOutput); }
    void setGeometryOutput(GeometryOutput val) { myGeometryOutput = int64(val); }
    GeometryOutput opGeometryOutput(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getGeometryOutput();
        int64 result;
        OP_Utils::evalOpParm(result, thissop, "geometryoutput", cookparms.getCookTime(), 0);
        return GeometryOutput(result);
    }
    const UT_StringHolder & getSegmentAttrib() const { return mySegmentAttrib; }
    void setSegmentAttrib(const UT_StringHolder & val) { mySegmentAttrib = val; }
    UT_StringHolder opSegmentAttrib(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getSegmentAttrib();
        UT_StringHolder result;
        OP_Utils::evalOpParm(result, thissop, "segmentattrib", cookparms.getCookTime(), 0);
        return result;
    }
    const UT_StringHolder & getInteriorGroupName() const { return myInteriorGroupName; }
    void setInteriorGroupName(const UT_StringHolder & val) { myInteriorGroupName = val; }
    UT_StringHolder opInteriorGroupName(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getInteriorGroupName();
        UT_StringHolder result;
        OP_Utils::evalOpParm(result, thissop, "interiorgroupname", cookparms.getCookTime(), 0);
        return result;
    }

private:
    UT_StringHolder myGroup;
    bool myUsePieceAttrib;
    UT_StringHolder myPieceAttrib;
    fpreal64 myMaxConcavity;
    bool myTreatAsSolid;
    bool myMergeSegments;
    int64 myGeometryOutput;
    UT_StringHolder mySegmentAttrib;
    UT_StringHolder myInteriorGroupName;

};
