/* Automagically Generated by generate_proto.py
 * Do not Edit
 */
#pragma once

#include <SOP/SOP_NodeVerb.h>
#include <OP/OP_Utils.h>
#include <PRM/PRM_Parm.h>
#include <UT/UT_IStream.h>
#include <UT/UT_NTStreamUtil.h>
#include <UT/UT_Ramp.h>
#include <UT/UT_SharedPtr.h>
#include <UT/UT_StringHolder.h>
#include <UT/UT_StringStream.h>
#include <UT/UT_VectorTypes.h>
#include <SYS/SYS_Types.h>

using namespace UT::Literal;

class DEP_MicroNode;
namespace SOP_Dissolve_2_0Enums
{
    enum class InvertSelection
    {
        DELETE = 0,
        KEEP
    };
    enum class Bridge
    {
        BRIDGE = 0,
        DISJOINT,
        DELETE
    };
}


class SOP_API SOP_Dissolve_2_0Parms  : public SOP_NodeParms
{
public:
    static int version() { return 1; }

    SOP_Dissolve_2_0Parms()
    {
        myGroup = ""_sh;
        myInvertSelection = 0;
        myRecomputeNormals = false;
        myRemoveInlinePoints = false;
        myInlineTolerance = 45;
        myRemoveUnusedPoints = false;
        myBridge = 0;
        myRemoveDegenerateBridges = false;
        myBoundaryCurves = false;

    }

    explicit SOP_Dissolve_2_0Parms(const SOP_Dissolve_2_0Parms &) = default;

    virtual ~SOP_Dissolve_2_0Parms() {}

    bool operator==(const SOP_Dissolve_2_0Parms &src) const
    {
        if (myGroup != src.myGroup) return false;
        if (myInvertSelection != src.myInvertSelection) return false;
        if (myRecomputeNormals != src.myRecomputeNormals) return false;
        if (myRemoveInlinePoints != src.myRemoveInlinePoints) return false;
        if (myInlineTolerance != src.myInlineTolerance) return false;
        if (myRemoveUnusedPoints != src.myRemoveUnusedPoints) return false;
        if (myBridge != src.myBridge) return false;
        if (myRemoveDegenerateBridges != src.myRemoveDegenerateBridges) return false;
        if (myBoundaryCurves != src.myBoundaryCurves) return false;

        return true;
    }
    bool operator!=(const SOP_Dissolve_2_0Parms &src) const
    {
        return !operator==(src);
    }
    using InvertSelection = SOP_Dissolve_2_0Enums::InvertSelection;
    using Bridge = SOP_Dissolve_2_0Enums::Bridge;



    void        buildFromOp(const OP_Node *node, fpreal time, DEP_MicroNode *depnode)
    {
        if (true)
            OP_Utils::evalOpParm(myGroup, node, "group", time, 0);
        else myGroup = ""_sh;
        if (true)
            OP_Utils::evalOpParm(myInvertSelection, node, "invertsel", time, 0);
        else myInvertSelection = 0;
        if (true)
            OP_Utils::evalOpParm(myRecomputeNormals, node, "compnorms", time, 0);
        else myRecomputeNormals = false;
        if (true)
            OP_Utils::evalOpParm(myRemoveInlinePoints, node, "reminlinepts", time, 0);
        else myRemoveInlinePoints = false;
        if (true && ( (!(((getRemoveInlinePoints()==0)))) ) )
            OP_Utils::evalOpParm(myInlineTolerance, node, "coltol", time, 0);
        else myInlineTolerance = 45;
        if (true)
            OP_Utils::evalOpParm(myRemoveUnusedPoints, node, "remunusedpts", time, 0);
        else myRemoveUnusedPoints = false;
        if (true)
            OP_Utils::evalOpParm(myBridge, node, "bridge", time, 0);
        else myBridge = 0;
        if (true)
            OP_Utils::evalOpParm(myRemoveDegenerateBridges, node, "deldegeneratebridges", time, 0);
        else myRemoveDegenerateBridges = false;
        if (true)
            OP_Utils::evalOpParm(myBoundaryCurves, node, "boundarycurves", time, 0);
        else myBoundaryCurves = false;

    }


    virtual void loadFromOpSubclass(const LoadParms &loadparms)
    {
        buildFromOp(loadparms.node(), loadparms.context().getTime(), loadparms.depnode());
    }


    virtual void copyFrom(const SOP_NodeParms *src)
    {
        *this = *((const SOP_Dissolve_2_0Parms *)src);
    }

    template <typename T>
    void
    doGetParmValue(exint idx, T &value) const
    {
        switch (idx)
        {
            case 0:
                coerceValue(value, myGroup);
                break;
            case 1:
                coerceValue(value, myInvertSelection);
                break;
            case 2:
                coerceValue(value, myRecomputeNormals);
                break;
            case 3:
                coerceValue(value, myRemoveInlinePoints);
                break;
            case 4:
                coerceValue(value, myInlineTolerance);
                break;
            case 5:
                coerceValue(value, myRemoveUnusedPoints);
                break;
            case 6:
                coerceValue(value, myBridge);
                break;
            case 7:
                coerceValue(value, myRemoveDegenerateBridges);
                break;
            case 8:
                coerceValue(value, myBoundaryCurves);
                break;

        }
    }

    void        getParmValue(exint idx, exint &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, fpreal &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Vector2D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Vector3D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Vector4D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Matrix2D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Matrix3D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Matrix4D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_StringHolder &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_SharedPtr<UT_Ramp> &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, PRM_DataItemHandle &value) const
    { doGetParmValue(idx, value); }

    template <typename T>
    void
    doSetParmValue(exint idx, const T &value) 
    {
        switch (idx)
        {
            case 0:
                coerceValue(myGroup, value);
                break;
            case 1:
                coerceValue(myInvertSelection, value);
                break;
            case 2:
                coerceValue(myRecomputeNormals, value);
                break;
            case 3:
                coerceValue(myRemoveInlinePoints, value);
                break;
            case 4:
                coerceValue(myInlineTolerance, value);
                break;
            case 5:
                coerceValue(myRemoveUnusedPoints, value);
                break;
            case 6:
                coerceValue(myBridge, value);
                break;
            case 7:
                coerceValue(myRemoveDegenerateBridges, value);
                break;
            case 8:
                coerceValue(myBoundaryCurves, value);
                break;

        }
    }

    void        setParmValue(exint idx, const exint &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const fpreal &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Vector2D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Vector3D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Vector4D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Matrix2D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Matrix3D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Matrix4D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_StringHolder &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_SharedPtr<UT_Ramp> &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const PRM_DataItemHandle &value) 
    { doSetParmValue(idx, value); }

    virtual exint    getNumParms() const
    {
        return 9;
    }

    virtual const char *getParmName(exint fieldnum) const
    {
        switch (fieldnum)
        {
            case 0:
                return "group";
            case 1:
                return "invertsel";
            case 2:
                return "compnorms";
            case 3:
                return "reminlinepts";
            case 4:
                return "coltol";
            case 5:
                return "remunusedpts";
            case 6:
                return "bridge";
            case 7:
                return "deldegeneratebridges";
            case 8:
                return "boundarycurves";

        }
        return 0;
    }

    virtual ParmType getParmType(exint fieldnum) const
    {
        switch (fieldnum)
        {
                case 0:
                    return PARM_STRING;
                case 1:
                    return PARM_INTEGER;
                case 2:
                    return PARM_INTEGER;
                case 3:
                    return PARM_INTEGER;
                case 4:
                    return PARM_FLOAT;
                case 5:
                    return PARM_INTEGER;
                case 6:
                    return PARM_INTEGER;
                case 7:
                    return PARM_INTEGER;
                case 8:
                    return PARM_INTEGER;

        }
        return PARM_UNSUPPORTED;
    }

    // Boiler plate to load individual types.
    static void  loadData(UT_IStream &is, int64 &v)
    { is.bread(&v, 1); }
    static void  loadData(UT_IStream &is, bool &v)
    { int64     iv; is.bread(&iv, 1); v = iv; }
    static void  loadData(UT_IStream &is, fpreal64 &v)
    { is.bread<fpreal64>(&v, 1); }
    static void  loadData(UT_IStream &is, UT_Vector2D &v)
    { is.bread<fpreal64>(&v.x(), 1); is.bread<fpreal64>(&v.y(), 1); }
    static void  loadData(UT_IStream &is, UT_Vector3D &v)
    { is.bread<fpreal64>(&v.x(), 1); is.bread<fpreal64>(&v.y(), 1);
      is.bread<fpreal64>(&v.z(), 1); }
    static void  loadData(UT_IStream &is, UT_Vector4D &v)
    { is.bread<fpreal64>(&v.x(), 1); is.bread<fpreal64>(&v.y(), 1);
      is.bread<fpreal64>(&v.z(), 1); is.bread<fpreal64>(&v.w(), 1); }
    static void  loadData(UT_IStream &is, UT_Matrix2D &v)
    { for (int r = 0; r < 2; r++) for (int c = 0; c < 2; c++) is.bread<fpreal64>(&v(r, c), 1); }
    static void  loadData(UT_IStream &is, UT_Matrix3D &v)
    { for (int r = 0; r < 3; r++) for (int c = 0; c < 3; c++) is.bread<fpreal64>(&v(r, c), 1); }
    static void  loadData(UT_IStream &is, UT_Matrix4D &v)
    { for (int r = 0; r < 4; r++) for (int c = 0; c < 4; c++) is.bread<fpreal64>(&v(r, c), 1); }
    static void  loadData(UT_IStream &is, UT_Vector2I &v)
    { is.bread<int64>(&v.x(), 1); is.bread<int64>(&v.y(), 1); }
    static void  loadData(UT_IStream &is, UT_Vector3I &v)
    { is.bread<int64>(&v.x(), 1); is.bread<int64>(&v.y(), 1);
      is.bread<int64>(&v.z(), 1); }
    static void  loadData(UT_IStream &is, UT_Vector4I &v)
    { is.bread<int64>(&v.x(), 1); is.bread<int64>(&v.y(), 1);
      is.bread<int64>(&v.z(), 1); is.bread<int64>(&v.w(), 1); }
    static void  loadData(UT_IStream &is, UT_StringHolder &v)
    { is.bread(v); }
    static void  loadData(UT_IStream &is, UT_SharedPtr<UT_Ramp> &v)
    {   UT_StringHolder   rampdata;
        loadData(is, rampdata);
        if (rampdata.isstring())
        {
            v.reset(new UT_Ramp());
            UT_IStream  istr((const char *) rampdata, rampdata.length(), UT_ISTREAM_ASCII);
            v->load(istr);
        }
        else v.reset();
    }
    static void  loadData(UT_IStream &is, PRM_DataItemHandle &v)
    {   UT_StringHolder   data;
        loadData(is, data);
        if (data.isstring())
        {
            // Find the data type.
            char *colon = UT_StringWrap(data).findChar(':');
            if (colon)
            {
                int             typelen = colon - data.buffer();
                UT_WorkBuffer   type;
                type.strncpy(data.buffer(), typelen);
                UT_IStream  istr(((const char *) data) + typelen + 1, data.length() - (typelen + 1), UT_ISTREAM_BINARY);
                
                v = PRM_DataFactory::parseBinary(type.buffer(), istr);
            }
        }
        else v.reset();
    }

    static void  saveData(std::ostream &os, int64 v)
    { UTwrite(os, &v); }
    static void  saveData(std::ostream &os, bool v)
    { int64 iv = v; UTwrite(os, &iv); }
    static void  saveData(std::ostream &os, fpreal64 v)
    { UTwrite<fpreal64>(os, &v); }
    static void  saveData(std::ostream &os, UT_Vector2D v)
    { UTwrite<fpreal64>(os, &v.x()); UTwrite<fpreal64>(os, &v.y()); }
    static void  saveData(std::ostream &os, UT_Vector3D v)
    { UTwrite<fpreal64>(os, &v.x()); UTwrite<fpreal64>(os, &v.y());
      UTwrite<fpreal64>(os, &v.z()); }
    static void  saveData(std::ostream &os, UT_Vector4D v)
    { UTwrite<fpreal64>(os, &v.x()); UTwrite<fpreal64>(os, &v.y());
      UTwrite<fpreal64>(os, &v.z()); UTwrite<fpreal64>(os, &v.w()); }
    static void  saveData(std::ostream &os, UT_Matrix2D v)
    { for (int r = 0; r < 2; r++) for (int c = 0; c < 2; c++) UTwrite<fpreal64>(os, &v(r, c)); }
    static void  saveData(std::ostream &os, UT_Matrix3D v)
    { for (int r = 0; r < 3; r++) for (int c = 0; c < 3; c++) UTwrite<fpreal64>(os, &v(r, c)); }
    static void  saveData(std::ostream &os, UT_Matrix4D v)
    { for (int r = 0; r < 4; r++) for (int c = 0; c < 4; c++) UTwrite<fpreal64>(os, &v(r, c)); }
    static void  saveData(std::ostream &os, UT_StringHolder s)
    { UT_StringWrap(s).saveBinary(os); }
    static void  saveData(std::ostream &os, UT_SharedPtr<UT_Ramp> s)
    {   UT_StringHolder         result;
        UT_OStringStream        ostr;
        if (s) s->save(ostr);
        result = ostr.str();
        saveData(os, result);
    }
    static void  saveData(std::ostream &os, PRM_DataItemHandle s)
    {   UT_StringHolder         result;
        UT_OStringStream        ostr;
        if (s) 
        {
            ostr << s->getDataTypeToken();
            ostr << ":";
            s->saveBinary(ostr);
        }
        result = ostr.str();
        saveData(os, result);
    }


    void         save(std::ostream &os) const
    {
        int32           v = version();
        UTwrite(os, &v);
        saveData(os, myGroup);
        saveData(os, myInvertSelection);
        saveData(os, myRecomputeNormals);
        saveData(os, myRemoveInlinePoints);
        saveData(os, myInlineTolerance);
        saveData(os, myRemoveUnusedPoints);
        saveData(os, myBridge);
        saveData(os, myRemoveDegenerateBridges);
        saveData(os, myBoundaryCurves);

    }

    bool         load(UT_IStream &is)
    {
        int32           v;
        is.bread(&v, 1);
        if (version() != v)
        {
            // Fail incompatible versions
            return false;
        }
        loadData(is, myGroup);
        loadData(is, myInvertSelection);
        loadData(is, myRecomputeNormals);
        loadData(is, myRemoveInlinePoints);
        loadData(is, myInlineTolerance);
        loadData(is, myRemoveUnusedPoints);
        loadData(is, myBridge);
        loadData(is, myRemoveDegenerateBridges);
        loadData(is, myBoundaryCurves);

        return true;
    }

    const UT_StringHolder & getGroup() const { return myGroup; }
    void setGroup(const UT_StringHolder & val) { myGroup = val; }
    UT_StringHolder opGroup(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getGroup();
        UT_StringHolder result;
        OP_Utils::evalOpParm(result, thissop, "group", cookparms.getCookTime(), 0);
        return result;
    }
    InvertSelection getInvertSelection() const { return InvertSelection(myInvertSelection); }
    void setInvertSelection(InvertSelection val) { myInvertSelection = int64(val); }
    InvertSelection opInvertSelection(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getInvertSelection();
        int64 result;
        OP_Utils::evalOpParm(result, thissop, "invertsel", cookparms.getCookTime(), 0);
        return InvertSelection(result);
    }
    bool getRecomputeNormals() const { return myRecomputeNormals; }
    void setRecomputeNormals(bool val) { myRecomputeNormals = val; }
    bool opRecomputeNormals(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getRecomputeNormals();
        bool result;
        OP_Utils::evalOpParm(result, thissop, "compnorms", cookparms.getCookTime(), 0);
        return result;
    }
    bool getRemoveInlinePoints() const { return myRemoveInlinePoints; }
    void setRemoveInlinePoints(bool val) { myRemoveInlinePoints = val; }
    bool opRemoveInlinePoints(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getRemoveInlinePoints();
        bool result;
        OP_Utils::evalOpParm(result, thissop, "reminlinepts", cookparms.getCookTime(), 0);
        return result;
    }
    fpreal64 getInlineTolerance() const { return myInlineTolerance; }
    void setInlineTolerance(fpreal64 val) { myInlineTolerance = val; }
    fpreal64 opInlineTolerance(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getInlineTolerance();
        fpreal64 result;
        OP_Utils::evalOpParm(result, thissop, "coltol", cookparms.getCookTime(), 0);
        return result;
    }
    bool getRemoveUnusedPoints() const { return myRemoveUnusedPoints; }
    void setRemoveUnusedPoints(bool val) { myRemoveUnusedPoints = val; }
    bool opRemoveUnusedPoints(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getRemoveUnusedPoints();
        bool result;
        OP_Utils::evalOpParm(result, thissop, "remunusedpts", cookparms.getCookTime(), 0);
        return result;
    }
    Bridge getBridge() const { return Bridge(myBridge); }
    void setBridge(Bridge val) { myBridge = int64(val); }
    Bridge opBridge(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getBridge();
        int64 result;
        OP_Utils::evalOpParm(result, thissop, "bridge", cookparms.getCookTime(), 0);
        return Bridge(result);
    }
    bool getRemoveDegenerateBridges() const { return myRemoveDegenerateBridges; }
    void setRemoveDegenerateBridges(bool val) { myRemoveDegenerateBridges = val; }
    bool opRemoveDegenerateBridges(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getRemoveDegenerateBridges();
        bool result;
        OP_Utils::evalOpParm(result, thissop, "deldegeneratebridges", cookparms.getCookTime(), 0);
        return result;
    }
    bool getBoundaryCurves() const { return myBoundaryCurves; }
    void setBoundaryCurves(bool val) { myBoundaryCurves = val; }
    bool opBoundaryCurves(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getBoundaryCurves();
        bool result;
        OP_Utils::evalOpParm(result, thissop, "boundarycurves", cookparms.getCookTime(), 0);
        return result;
    }

private:
    UT_StringHolder myGroup;
    int64 myInvertSelection;
    bool myRecomputeNormals;
    bool myRemoveInlinePoints;
    fpreal64 myInlineTolerance;
    bool myRemoveUnusedPoints;
    int64 myBridge;
    bool myRemoveDegenerateBridges;
    bool myBoundaryCurves;

};
