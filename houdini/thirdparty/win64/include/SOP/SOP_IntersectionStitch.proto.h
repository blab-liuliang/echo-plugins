/* Automagically Generated by generate_proto.py
 * Do not Edit
 */
#pragma once

#include <SOP/SOP_NodeVerb.h>
#include <OP/OP_Utils.h>
#include <PRM/PRM_Parm.h>
#include <UT/UT_IStream.h>
#include <UT/UT_NTStreamUtil.h>
#include <UT/UT_Ramp.h>
#include <UT/UT_SharedPtr.h>
#include <UT/UT_StringHolder.h>
#include <UT/UT_StringStream.h>
#include <UT/UT_VectorTypes.h>
#include <SYS/SYS_Types.h>

using namespace UT::Literal;

class DEP_MicroNode;

class SOP_API SOP_IntersectionStitchParms  : public SOP_NodeParms
{
public:
    static int version() { return 1; }

    SOP_IntersectionStitchParms()
    {
        myAgroup = ""_sh;
        myBgroup = ""_sh;
        myUseproxtol = true;
        myProxtol = 0.01;
        mySplitcurves = true;
        myInputnumattrib = "sourceinput"_sh;
        myPrimnumattrib = "sourceprim"_sh;
        myPrimuvwattrib = "sourceprimuv"_sh;
        myKeeppointattribs = true;

    }

    explicit SOP_IntersectionStitchParms(const SOP_IntersectionStitchParms &) = default;

    virtual ~SOP_IntersectionStitchParms() {}

    bool operator==(const SOP_IntersectionStitchParms &src) const
    {
        if (myAgroup != src.myAgroup) return false;
        if (myBgroup != src.myBgroup) return false;
        if (myUseproxtol != src.myUseproxtol) return false;
        if (myProxtol != src.myProxtol) return false;
        if (mySplitcurves != src.mySplitcurves) return false;
        if (myInputnumattrib != src.myInputnumattrib) return false;
        if (myPrimnumattrib != src.myPrimnumattrib) return false;
        if (myPrimuvwattrib != src.myPrimuvwattrib) return false;
        if (myKeeppointattribs != src.myKeeppointattribs) return false;

        return true;
    }
    bool operator!=(const SOP_IntersectionStitchParms &src) const
    {
        return !operator==(src);
    }



    void        buildFromOp(const OP_Node *node, fpreal time, DEP_MicroNode *depnode)
    {
        if (true)
            OP_Utils::evalOpParm(myAgroup, node, "agroup", time, 0);
        else myAgroup = ""_sh;
        if (true)
            OP_Utils::evalOpParm(myBgroup, node, "bgroup", time, 0);
        else myBgroup = ""_sh;
        if (true)
            OP_Utils::evalOpParm(myUseproxtol, node, "useproxtol", time, 0);
        else myUseproxtol = true;
        if (true && ( (!(((getUseproxtol()==0)))) ) )
            OP_Utils::evalOpParm(myProxtol, node, "proxtol", time, 0);
        else myProxtol = 0.01;
        if (true)
            OP_Utils::evalOpParm(mySplitcurves, node, "splitcurves", time, 0);
        else mySplitcurves = true;
        if (true && ( (!((((node->getInput(2)!=0)==0)))) ) )
            OP_Utils::evalOpParm(myInputnumattrib, node, "inputnumattrib", time, 0);
        else myInputnumattrib = "sourceinput"_sh;
        if (true && ( (!((((node->getInput(2)!=0)==0)))) ) )
            OP_Utils::evalOpParm(myPrimnumattrib, node, "primnumattrib", time, 0);
        else myPrimnumattrib = "sourceprim"_sh;
        if (true && ( (!((((node->getInput(2)!=0)==0)))) ) )
            OP_Utils::evalOpParm(myPrimuvwattrib, node, "primuvwattrib", time, 0);
        else myPrimuvwattrib = "sourceprimuv"_sh;
        if (true && ( (!((((node->getInput(2)!=0)==0)))) ) )
            OP_Utils::evalOpParm(myKeeppointattribs, node, "keeppointattribs", time, 0);
        else myKeeppointattribs = true;

    }


    virtual void loadFromOpSubclass(const LoadParms &loadparms)
    {
        buildFromOp(loadparms.node(), loadparms.context().getTime(), loadparms.depnode());
    }


    virtual void copyFrom(const SOP_NodeParms *src)
    {
        *this = *((const SOP_IntersectionStitchParms *)src);
    }

    template <typename T>
    void
    doGetParmValue(exint idx, T &value) const
    {
        switch (idx)
        {
            case 0:
                coerceValue(value, myAgroup);
                break;
            case 1:
                coerceValue(value, myBgroup);
                break;
            case 2:
                coerceValue(value, myUseproxtol);
                break;
            case 3:
                coerceValue(value, myProxtol);
                break;
            case 4:
                coerceValue(value, mySplitcurves);
                break;
            case 5:
                coerceValue(value, myInputnumattrib);
                break;
            case 6:
                coerceValue(value, myPrimnumattrib);
                break;
            case 7:
                coerceValue(value, myPrimuvwattrib);
                break;
            case 8:
                coerceValue(value, myKeeppointattribs);
                break;

        }
    }

    void        getParmValue(exint idx, exint &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, fpreal &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Vector2D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Vector3D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Vector4D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Matrix2D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Matrix3D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Matrix4D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_StringHolder &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_SharedPtr<UT_Ramp> &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, PRM_DataItemHandle &value) const
    { doGetParmValue(idx, value); }

    template <typename T>
    void
    doSetParmValue(exint idx, const T &value) 
    {
        switch (idx)
        {
            case 0:
                coerceValue(myAgroup, value);
                break;
            case 1:
                coerceValue(myBgroup, value);
                break;
            case 2:
                coerceValue(myUseproxtol, value);
                break;
            case 3:
                coerceValue(myProxtol, value);
                break;
            case 4:
                coerceValue(mySplitcurves, value);
                break;
            case 5:
                coerceValue(myInputnumattrib, value);
                break;
            case 6:
                coerceValue(myPrimnumattrib, value);
                break;
            case 7:
                coerceValue(myPrimuvwattrib, value);
                break;
            case 8:
                coerceValue(myKeeppointattribs, value);
                break;

        }
    }

    void        setParmValue(exint idx, const exint &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const fpreal &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Vector2D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Vector3D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Vector4D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Matrix2D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Matrix3D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Matrix4D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_StringHolder &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_SharedPtr<UT_Ramp> &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const PRM_DataItemHandle &value) 
    { doSetParmValue(idx, value); }

    virtual exint    getNumParms() const
    {
        return 9;
    }

    virtual const char *getParmName(exint fieldnum) const
    {
        switch (fieldnum)
        {
            case 0:
                return "agroup";
            case 1:
                return "bgroup";
            case 2:
                return "useproxtol";
            case 3:
                return "proxtol";
            case 4:
                return "splitcurves";
            case 5:
                return "inputnumattrib";
            case 6:
                return "primnumattrib";
            case 7:
                return "primuvwattrib";
            case 8:
                return "keeppointattribs";

        }
        return 0;
    }

    virtual ParmType getParmType(exint fieldnum) const
    {
        switch (fieldnum)
        {
                case 0:
                    return PARM_STRING;
                case 1:
                    return PARM_STRING;
                case 2:
                    return PARM_INTEGER;
                case 3:
                    return PARM_FLOAT;
                case 4:
                    return PARM_INTEGER;
                case 5:
                    return PARM_STRING;
                case 6:
                    return PARM_STRING;
                case 7:
                    return PARM_STRING;
                case 8:
                    return PARM_INTEGER;

        }
        return PARM_UNSUPPORTED;
    }

    // Boiler plate to load individual types.
    static void  loadData(UT_IStream &is, int64 &v)
    { is.bread(&v, 1); }
    static void  loadData(UT_IStream &is, bool &v)
    { int64     iv; is.bread(&iv, 1); v = iv; }
    static void  loadData(UT_IStream &is, fpreal64 &v)
    { is.bread<fpreal64>(&v, 1); }
    static void  loadData(UT_IStream &is, UT_Vector2D &v)
    { is.bread<fpreal64>(&v.x(), 1); is.bread<fpreal64>(&v.y(), 1); }
    static void  loadData(UT_IStream &is, UT_Vector3D &v)
    { is.bread<fpreal64>(&v.x(), 1); is.bread<fpreal64>(&v.y(), 1);
      is.bread<fpreal64>(&v.z(), 1); }
    static void  loadData(UT_IStream &is, UT_Vector4D &v)
    { is.bread<fpreal64>(&v.x(), 1); is.bread<fpreal64>(&v.y(), 1);
      is.bread<fpreal64>(&v.z(), 1); is.bread<fpreal64>(&v.w(), 1); }
    static void  loadData(UT_IStream &is, UT_Matrix2D &v)
    { for (int r = 0; r < 2; r++) for (int c = 0; c < 2; c++) is.bread<fpreal64>(&v(r, c), 1); }
    static void  loadData(UT_IStream &is, UT_Matrix3D &v)
    { for (int r = 0; r < 3; r++) for (int c = 0; c < 3; c++) is.bread<fpreal64>(&v(r, c), 1); }
    static void  loadData(UT_IStream &is, UT_Matrix4D &v)
    { for (int r = 0; r < 4; r++) for (int c = 0; c < 4; c++) is.bread<fpreal64>(&v(r, c), 1); }
    static void  loadData(UT_IStream &is, UT_Vector2I &v)
    { is.bread<int64>(&v.x(), 1); is.bread<int64>(&v.y(), 1); }
    static void  loadData(UT_IStream &is, UT_Vector3I &v)
    { is.bread<int64>(&v.x(), 1); is.bread<int64>(&v.y(), 1);
      is.bread<int64>(&v.z(), 1); }
    static void  loadData(UT_IStream &is, UT_Vector4I &v)
    { is.bread<int64>(&v.x(), 1); is.bread<int64>(&v.y(), 1);
      is.bread<int64>(&v.z(), 1); is.bread<int64>(&v.w(), 1); }
    static void  loadData(UT_IStream &is, UT_StringHolder &v)
    { is.bread(v); }
    static void  loadData(UT_IStream &is, UT_SharedPtr<UT_Ramp> &v)
    {   UT_StringHolder   rampdata;
        loadData(is, rampdata);
        if (rampdata.isstring())
        {
            v.reset(new UT_Ramp());
            UT_IStream  istr((const char *) rampdata, rampdata.length(), UT_ISTREAM_ASCII);
            v->load(istr);
        }
        else v.reset();
    }
    static void  loadData(UT_IStream &is, PRM_DataItemHandle &v)
    {   UT_StringHolder   data;
        loadData(is, data);
        if (data.isstring())
        {
            // Find the data type.
            char *colon = UT_StringWrap(data).findChar(':');
            if (colon)
            {
                int             typelen = colon - data.buffer();
                UT_WorkBuffer   type;
                type.strncpy(data.buffer(), typelen);
                UT_IStream  istr(((const char *) data) + typelen + 1, data.length() - (typelen + 1), UT_ISTREAM_BINARY);
                
                v = PRM_DataFactory::parseBinary(type.buffer(), istr);
            }
        }
        else v.reset();
    }

    static void  saveData(std::ostream &os, int64 v)
    { UTwrite(os, &v); }
    static void  saveData(std::ostream &os, bool v)
    { int64 iv = v; UTwrite(os, &iv); }
    static void  saveData(std::ostream &os, fpreal64 v)
    { UTwrite<fpreal64>(os, &v); }
    static void  saveData(std::ostream &os, UT_Vector2D v)
    { UTwrite<fpreal64>(os, &v.x()); UTwrite<fpreal64>(os, &v.y()); }
    static void  saveData(std::ostream &os, UT_Vector3D v)
    { UTwrite<fpreal64>(os, &v.x()); UTwrite<fpreal64>(os, &v.y());
      UTwrite<fpreal64>(os, &v.z()); }
    static void  saveData(std::ostream &os, UT_Vector4D v)
    { UTwrite<fpreal64>(os, &v.x()); UTwrite<fpreal64>(os, &v.y());
      UTwrite<fpreal64>(os, &v.z()); UTwrite<fpreal64>(os, &v.w()); }
    static void  saveData(std::ostream &os, UT_Matrix2D v)
    { for (int r = 0; r < 2; r++) for (int c = 0; c < 2; c++) UTwrite<fpreal64>(os, &v(r, c)); }
    static void  saveData(std::ostream &os, UT_Matrix3D v)
    { for (int r = 0; r < 3; r++) for (int c = 0; c < 3; c++) UTwrite<fpreal64>(os, &v(r, c)); }
    static void  saveData(std::ostream &os, UT_Matrix4D v)
    { for (int r = 0; r < 4; r++) for (int c = 0; c < 4; c++) UTwrite<fpreal64>(os, &v(r, c)); }
    static void  saveData(std::ostream &os, UT_StringHolder s)
    { UT_StringWrap(s).saveBinary(os); }
    static void  saveData(std::ostream &os, UT_SharedPtr<UT_Ramp> s)
    {   UT_StringHolder         result;
        UT_OStringStream        ostr;
        if (s) s->save(ostr);
        result = ostr.str();
        saveData(os, result);
    }
    static void  saveData(std::ostream &os, PRM_DataItemHandle s)
    {   UT_StringHolder         result;
        UT_OStringStream        ostr;
        if (s) 
        {
            ostr << s->getDataTypeToken();
            ostr << ":";
            s->saveBinary(ostr);
        }
        result = ostr.str();
        saveData(os, result);
    }


    void         save(std::ostream &os) const
    {
        int32           v = version();
        UTwrite(os, &v);
        saveData(os, myAgroup);
        saveData(os, myBgroup);
        saveData(os, myUseproxtol);
        saveData(os, myProxtol);
        saveData(os, mySplitcurves);
        saveData(os, myInputnumattrib);
        saveData(os, myPrimnumattrib);
        saveData(os, myPrimuvwattrib);
        saveData(os, myKeeppointattribs);

    }

    bool         load(UT_IStream &is)
    {
        int32           v;
        is.bread(&v, 1);
        if (version() != v)
        {
            // Fail incompatible versions
            return false;
        }
        loadData(is, myAgroup);
        loadData(is, myBgroup);
        loadData(is, myUseproxtol);
        loadData(is, myProxtol);
        loadData(is, mySplitcurves);
        loadData(is, myInputnumattrib);
        loadData(is, myPrimnumattrib);
        loadData(is, myPrimuvwattrib);
        loadData(is, myKeeppointattribs);

        return true;
    }

    const UT_StringHolder & getAgroup() const { return myAgroup; }
    void setAgroup(const UT_StringHolder & val) { myAgroup = val; }
    UT_StringHolder opAgroup(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getAgroup();
        UT_StringHolder result;
        OP_Utils::evalOpParm(result, thissop, "agroup", cookparms.getCookTime(), 0);
        return result;
    }
    const UT_StringHolder & getBgroup() const { return myBgroup; }
    void setBgroup(const UT_StringHolder & val) { myBgroup = val; }
    UT_StringHolder opBgroup(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getBgroup();
        UT_StringHolder result;
        OP_Utils::evalOpParm(result, thissop, "bgroup", cookparms.getCookTime(), 0);
        return result;
    }
    bool getUseproxtol() const { return myUseproxtol; }
    void setUseproxtol(bool val) { myUseproxtol = val; }
    bool opUseproxtol(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getUseproxtol();
        bool result;
        OP_Utils::evalOpParm(result, thissop, "useproxtol", cookparms.getCookTime(), 0);
        return result;
    }
    fpreal64 getProxtol() const { return myProxtol; }
    void setProxtol(fpreal64 val) { myProxtol = val; }
    fpreal64 opProxtol(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getProxtol();
        fpreal64 result;
        OP_Utils::evalOpParm(result, thissop, "proxtol", cookparms.getCookTime(), 0);
        return result;
    }
    bool getSplitcurves() const { return mySplitcurves; }
    void setSplitcurves(bool val) { mySplitcurves = val; }
    bool opSplitcurves(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getSplitcurves();
        bool result;
        OP_Utils::evalOpParm(result, thissop, "splitcurves", cookparms.getCookTime(), 0);
        return result;
    }
    const UT_StringHolder & getInputnumattrib() const { return myInputnumattrib; }
    void setInputnumattrib(const UT_StringHolder & val) { myInputnumattrib = val; }
    UT_StringHolder opInputnumattrib(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getInputnumattrib();
        UT_StringHolder result;
        OP_Utils::evalOpParm(result, thissop, "inputnumattrib", cookparms.getCookTime(), 0);
        return result;
    }
    const UT_StringHolder & getPrimnumattrib() const { return myPrimnumattrib; }
    void setPrimnumattrib(const UT_StringHolder & val) { myPrimnumattrib = val; }
    UT_StringHolder opPrimnumattrib(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getPrimnumattrib();
        UT_StringHolder result;
        OP_Utils::evalOpParm(result, thissop, "primnumattrib", cookparms.getCookTime(), 0);
        return result;
    }
    const UT_StringHolder & getPrimuvwattrib() const { return myPrimuvwattrib; }
    void setPrimuvwattrib(const UT_StringHolder & val) { myPrimuvwattrib = val; }
    UT_StringHolder opPrimuvwattrib(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getPrimuvwattrib();
        UT_StringHolder result;
        OP_Utils::evalOpParm(result, thissop, "primuvwattrib", cookparms.getCookTime(), 0);
        return result;
    }
    bool getKeeppointattribs() const { return myKeeppointattribs; }
    void setKeeppointattribs(bool val) { myKeeppointattribs = val; }
    bool opKeeppointattribs(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getKeeppointattribs();
        bool result;
        OP_Utils::evalOpParm(result, thissop, "keeppointattribs", cookparms.getCookTime(), 0);
        return result;
    }

private:
    UT_StringHolder myAgroup;
    UT_StringHolder myBgroup;
    bool myUseproxtol;
    fpreal64 myProxtol;
    bool mySplitcurves;
    UT_StringHolder myInputnumattrib;
    UT_StringHolder myPrimnumattrib;
    UT_StringHolder myPrimuvwattrib;
    bool myKeeppointattribs;

};
