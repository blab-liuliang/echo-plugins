/* Automagically Generated by generate_proto.py
 * Do not Edit
 */
#pragma once

#include <SOP/SOP_NodeVerb.h>
#include <OP/OP_Utils.h>
#include <PRM/PRM_Parm.h>
#include <UT/UT_IStream.h>
#include <UT/UT_NTStreamUtil.h>
#include <UT/UT_Ramp.h>
#include <UT/UT_SharedPtr.h>
#include <UT/UT_StringHolder.h>
#include <UT/UT_StringStream.h>
#include <UT/UT_VectorTypes.h>
#include <SYS/SYS_Types.h>

using namespace UT::Literal;

class DEP_MicroNode;

class SOP_API SOP_CarveParms  : public SOP_NodeParms
{
public:
    static int version() { return 1; }

    SOP_CarveParms()
    {
        myGroup = ""_sh;
        myFirstU = true;
        myDomainU1 = 0.25;
        mySecondU = false;
        myDomainU2 = 0.75;
        myFirstV = false;
        myDomainV1 = 0.25;
        mySecondV = false;
        myDomainV2 = 0.75;
        myOnlyBreakpoints = 0;
        myDivsU = 2;
        myDivsV = 2;
        myAllUBreakpoints = false;
        myAllVBreakpoints = false;
        myFunction = 0;
        myKeepIn = true;
        myKeepOut = false;
        myExtractOp = 0;
        myKeepOriginal = false;

    }

    explicit SOP_CarveParms(const SOP_CarveParms &) = default;

    virtual ~SOP_CarveParms() {}

    bool operator==(const SOP_CarveParms &src) const
    {
        if (myGroup != src.myGroup) return false;
        if (myFirstU != src.myFirstU) return false;
        if (myDomainU1 != src.myDomainU1) return false;
        if (mySecondU != src.mySecondU) return false;
        if (myDomainU2 != src.myDomainU2) return false;
        if (myFirstV != src.myFirstV) return false;
        if (myDomainV1 != src.myDomainV1) return false;
        if (mySecondV != src.mySecondV) return false;
        if (myDomainV2 != src.myDomainV2) return false;
        if (myOnlyBreakpoints != src.myOnlyBreakpoints) return false;
        if (myDivsU != src.myDivsU) return false;
        if (myDivsV != src.myDivsV) return false;
        if (myAllUBreakpoints != src.myAllUBreakpoints) return false;
        if (myAllVBreakpoints != src.myAllVBreakpoints) return false;
        if (myFunction != src.myFunction) return false;
        if (myKeepIn != src.myKeepIn) return false;
        if (myKeepOut != src.myKeepOut) return false;
        if (myExtractOp != src.myExtractOp) return false;
        if (myKeepOriginal != src.myKeepOriginal) return false;

        return true;
    }
    bool operator!=(const SOP_CarveParms &src) const
    {
        return !operator==(src);
    }



    void        buildFromOp(const OP_Node *node, fpreal time, DEP_MicroNode *depnode)
    {
        if (true)
            OP_Utils::evalOpParm(myGroup, node, "group", time, 0);
        else myGroup = ""_sh;
        if (true)
            OP_Utils::evalOpParm(myFirstU, node, "firstu", time, 0);
        else myFirstU = true;
        if (true)
            OP_Utils::evalOpParm(myDomainU1, node, "domainu1", time, 0);
        else myDomainU1 = 0.25;
        if (true)
            OP_Utils::evalOpParm(mySecondU, node, "secondu", time, 0);
        else mySecondU = false;
        if (true)
            OP_Utils::evalOpParm(myDomainU2, node, "domainu2", time, 0);
        else myDomainU2 = 0.75;
        if (true)
            OP_Utils::evalOpParm(myFirstV, node, "firstv", time, 0);
        else myFirstV = false;
        if (true)
            OP_Utils::evalOpParm(myDomainV1, node, "domainv1", time, 0);
        else myDomainV1 = 0.25;
        if (true)
            OP_Utils::evalOpParm(mySecondV, node, "secondv", time, 0);
        else mySecondV = false;
        if (true)
            OP_Utils::evalOpParm(myDomainV2, node, "domainv2", time, 0);
        else myDomainV2 = 0.75;
        if (true)
            OP_Utils::evalOpParm(myOnlyBreakpoints, node, "onlybreakpoints", time, 0);
        else myOnlyBreakpoints = 0;
        if (true && ( (getOnlyBreakpoints()==0) ) )
            OP_Utils::evalOpParm(myDivsU, node, "divsu", time, 0);
        else myDivsU = 2;
        if (true && ( (getOnlyBreakpoints()==0) ) )
            OP_Utils::evalOpParm(myDivsV, node, "divsv", time, 0);
        else myDivsV = 2;
        if (true && ( (getOnlyBreakpoints()==1) ) )
            OP_Utils::evalOpParm(myAllUBreakpoints, node, "allubreakpoints", time, 0);
        else myAllUBreakpoints = false;
        if (true && ( (getOnlyBreakpoints()==1) ) )
            OP_Utils::evalOpParm(myAllVBreakpoints, node, "allvbreakpoints", time, 0);
        else myAllVBreakpoints = false;
        if (true)
            OP_Utils::evalOpParm(myFunction, node, "stdswitcher", time, 0);
        else myFunction = 0;
        if (true && ( (getFunction()==0) ) )
            OP_Utils::evalOpParm(myKeepIn, node, "keepin", time, 0);
        else myKeepIn = true;
        if (true && ( (getFunction()==0) ) )
            OP_Utils::evalOpParm(myKeepOut, node, "keepout", time, 0);
        else myKeepOut = false;
        if (true && ( (getFunction()==1) ) )
            OP_Utils::evalOpParm(myExtractOp, node, "extractop", time, 0);
        else myExtractOp = 0;
        if (true && ( (getFunction()==1) ) )
            OP_Utils::evalOpParm(myKeepOriginal, node, "keepOriginal", time, 0);
        else myKeepOriginal = false;

    }


    virtual void loadFromOpSubclass(const LoadParms &loadparms)
    {
        buildFromOp(loadparms.node(), loadparms.context().getTime(), loadparms.depnode());
    }


    virtual void copyFrom(const SOP_NodeParms *src)
    {
        *this = *((const SOP_CarveParms *)src);
    }

    template <typename T>
    void
    doGetParmValue(exint idx, T &value) const
    {
        switch (idx)
        {
            case 0:
                coerceValue(value, myGroup);
                break;
            case 1:
                coerceValue(value, myFirstU);
                break;
            case 2:
                coerceValue(value, myDomainU1);
                break;
            case 3:
                coerceValue(value, mySecondU);
                break;
            case 4:
                coerceValue(value, myDomainU2);
                break;
            case 5:
                coerceValue(value, myFirstV);
                break;
            case 6:
                coerceValue(value, myDomainV1);
                break;
            case 7:
                coerceValue(value, mySecondV);
                break;
            case 8:
                coerceValue(value, myDomainV2);
                break;
            case 9:
                coerceValue(value, myOnlyBreakpoints);
                break;
            case 10:
                coerceValue(value, myDivsU);
                break;
            case 11:
                coerceValue(value, myDivsV);
                break;
            case 12:
                coerceValue(value, myAllUBreakpoints);
                break;
            case 13:
                coerceValue(value, myAllVBreakpoints);
                break;
            case 14:
                coerceValue(value, myFunction);
                break;
            case 15:
                coerceValue(value, myKeepIn);
                break;
            case 16:
                coerceValue(value, myKeepOut);
                break;
            case 17:
                coerceValue(value, myExtractOp);
                break;
            case 18:
                coerceValue(value, myKeepOriginal);
                break;

        }
    }

    void        getParmValue(exint idx, exint &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, fpreal &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Vector2D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Vector3D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Vector4D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Matrix2D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Matrix3D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Matrix4D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_StringHolder &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_SharedPtr<UT_Ramp> &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, PRM_DataItemHandle &value) const
    { doGetParmValue(idx, value); }

    template <typename T>
    void
    doSetParmValue(exint idx, const T &value) 
    {
        switch (idx)
        {
            case 0:
                coerceValue(myGroup, value);
                break;
            case 1:
                coerceValue(myFirstU, value);
                break;
            case 2:
                coerceValue(myDomainU1, value);
                break;
            case 3:
                coerceValue(mySecondU, value);
                break;
            case 4:
                coerceValue(myDomainU2, value);
                break;
            case 5:
                coerceValue(myFirstV, value);
                break;
            case 6:
                coerceValue(myDomainV1, value);
                break;
            case 7:
                coerceValue(mySecondV, value);
                break;
            case 8:
                coerceValue(myDomainV2, value);
                break;
            case 9:
                coerceValue(myOnlyBreakpoints, value);
                break;
            case 10:
                coerceValue(myDivsU, value);
                break;
            case 11:
                coerceValue(myDivsV, value);
                break;
            case 12:
                coerceValue(myAllUBreakpoints, value);
                break;
            case 13:
                coerceValue(myAllVBreakpoints, value);
                break;
            case 14:
                coerceValue(myFunction, value);
                break;
            case 15:
                coerceValue(myKeepIn, value);
                break;
            case 16:
                coerceValue(myKeepOut, value);
                break;
            case 17:
                coerceValue(myExtractOp, value);
                break;
            case 18:
                coerceValue(myKeepOriginal, value);
                break;

        }
    }

    void        setParmValue(exint idx, const exint &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const fpreal &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Vector2D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Vector3D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Vector4D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Matrix2D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Matrix3D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Matrix4D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_StringHolder &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_SharedPtr<UT_Ramp> &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const PRM_DataItemHandle &value) 
    { doSetParmValue(idx, value); }

    virtual exint    getNumParms() const
    {
        return 19;
    }

    virtual const char *getParmName(exint fieldnum) const
    {
        switch (fieldnum)
        {
            case 0:
                return "group";
            case 1:
                return "firstu";
            case 2:
                return "domainu1";
            case 3:
                return "secondu";
            case 4:
                return "domainu2";
            case 5:
                return "firstv";
            case 6:
                return "domainv1";
            case 7:
                return "secondv";
            case 8:
                return "domainv2";
            case 9:
                return "onlybreakpoints";
            case 10:
                return "divsu";
            case 11:
                return "divsv";
            case 12:
                return "allubreakpoints";
            case 13:
                return "allvbreakpoints";
            case 14:
                return "stdswitcher";
            case 15:
                return "keepin";
            case 16:
                return "keepout";
            case 17:
                return "extractop";
            case 18:
                return "keepOriginal";

        }
        return 0;
    }

    virtual ParmType getParmType(exint fieldnum) const
    {
        switch (fieldnum)
        {
                case 0:
                    return PARM_STRING;
                case 1:
                    return PARM_INTEGER;
                case 2:
                    return PARM_FLOAT;
                case 3:
                    return PARM_INTEGER;
                case 4:
                    return PARM_FLOAT;
                case 5:
                    return PARM_INTEGER;
                case 6:
                    return PARM_FLOAT;
                case 7:
                    return PARM_INTEGER;
                case 8:
                    return PARM_FLOAT;
                case 9:
                    return PARM_INTEGER;
                case 10:
                    return PARM_INTEGER;
                case 11:
                    return PARM_INTEGER;
                case 12:
                    return PARM_INTEGER;
                case 13:
                    return PARM_INTEGER;
                case 14:
                    return PARM_INTEGER;
                case 15:
                    return PARM_INTEGER;
                case 16:
                    return PARM_INTEGER;
                case 17:
                    return PARM_INTEGER;
                case 18:
                    return PARM_INTEGER;

        }
        return PARM_UNSUPPORTED;
    }

    // Boiler plate to load individual types.
    static void  loadData(UT_IStream &is, int64 &v)
    { is.bread(&v, 1); }
    static void  loadData(UT_IStream &is, bool &v)
    { int64     iv; is.bread(&iv, 1); v = iv; }
    static void  loadData(UT_IStream &is, fpreal64 &v)
    { is.bread<fpreal64>(&v, 1); }
    static void  loadData(UT_IStream &is, UT_Vector2D &v)
    { is.bread<fpreal64>(&v.x(), 1); is.bread<fpreal64>(&v.y(), 1); }
    static void  loadData(UT_IStream &is, UT_Vector3D &v)
    { is.bread<fpreal64>(&v.x(), 1); is.bread<fpreal64>(&v.y(), 1);
      is.bread<fpreal64>(&v.z(), 1); }
    static void  loadData(UT_IStream &is, UT_Vector4D &v)
    { is.bread<fpreal64>(&v.x(), 1); is.bread<fpreal64>(&v.y(), 1);
      is.bread<fpreal64>(&v.z(), 1); is.bread<fpreal64>(&v.w(), 1); }
    static void  loadData(UT_IStream &is, UT_Matrix2D &v)
    { for (int r = 0; r < 2; r++) for (int c = 0; c < 2; c++) is.bread<fpreal64>(&v(r, c), 1); }
    static void  loadData(UT_IStream &is, UT_Matrix3D &v)
    { for (int r = 0; r < 3; r++) for (int c = 0; c < 3; c++) is.bread<fpreal64>(&v(r, c), 1); }
    static void  loadData(UT_IStream &is, UT_Matrix4D &v)
    { for (int r = 0; r < 4; r++) for (int c = 0; c < 4; c++) is.bread<fpreal64>(&v(r, c), 1); }
    static void  loadData(UT_IStream &is, UT_Vector2I &v)
    { is.bread<int64>(&v.x(), 1); is.bread<int64>(&v.y(), 1); }
    static void  loadData(UT_IStream &is, UT_Vector3I &v)
    { is.bread<int64>(&v.x(), 1); is.bread<int64>(&v.y(), 1);
      is.bread<int64>(&v.z(), 1); }
    static void  loadData(UT_IStream &is, UT_Vector4I &v)
    { is.bread<int64>(&v.x(), 1); is.bread<int64>(&v.y(), 1);
      is.bread<int64>(&v.z(), 1); is.bread<int64>(&v.w(), 1); }
    static void  loadData(UT_IStream &is, UT_StringHolder &v)
    { is.bread(v); }
    static void  loadData(UT_IStream &is, UT_SharedPtr<UT_Ramp> &v)
    {   UT_StringHolder   rampdata;
        loadData(is, rampdata);
        if (rampdata.isstring())
        {
            v.reset(new UT_Ramp());
            UT_IStream  istr((const char *) rampdata, rampdata.length(), UT_ISTREAM_ASCII);
            v->load(istr);
        }
        else v.reset();
    }
    static void  loadData(UT_IStream &is, PRM_DataItemHandle &v)
    {   UT_StringHolder   data;
        loadData(is, data);
        if (data.isstring())
        {
            // Find the data type.
            char *colon = UT_StringWrap(data).findChar(':');
            if (colon)
            {
                int             typelen = colon - data.buffer();
                UT_WorkBuffer   type;
                type.strncpy(data.buffer(), typelen);
                UT_IStream  istr(((const char *) data) + typelen + 1, data.length() - (typelen + 1), UT_ISTREAM_BINARY);
                
                v = PRM_DataFactory::parseBinary(type.buffer(), istr);
            }
        }
        else v.reset();
    }

    static void  saveData(std::ostream &os, int64 v)
    { UTwrite(os, &v); }
    static void  saveData(std::ostream &os, bool v)
    { int64 iv = v; UTwrite(os, &iv); }
    static void  saveData(std::ostream &os, fpreal64 v)
    { UTwrite<fpreal64>(os, &v); }
    static void  saveData(std::ostream &os, UT_Vector2D v)
    { UTwrite<fpreal64>(os, &v.x()); UTwrite<fpreal64>(os, &v.y()); }
    static void  saveData(std::ostream &os, UT_Vector3D v)
    { UTwrite<fpreal64>(os, &v.x()); UTwrite<fpreal64>(os, &v.y());
      UTwrite<fpreal64>(os, &v.z()); }
    static void  saveData(std::ostream &os, UT_Vector4D v)
    { UTwrite<fpreal64>(os, &v.x()); UTwrite<fpreal64>(os, &v.y());
      UTwrite<fpreal64>(os, &v.z()); UTwrite<fpreal64>(os, &v.w()); }
    static void  saveData(std::ostream &os, UT_Matrix2D v)
    { for (int r = 0; r < 2; r++) for (int c = 0; c < 2; c++) UTwrite<fpreal64>(os, &v(r, c)); }
    static void  saveData(std::ostream &os, UT_Matrix3D v)
    { for (int r = 0; r < 3; r++) for (int c = 0; c < 3; c++) UTwrite<fpreal64>(os, &v(r, c)); }
    static void  saveData(std::ostream &os, UT_Matrix4D v)
    { for (int r = 0; r < 4; r++) for (int c = 0; c < 4; c++) UTwrite<fpreal64>(os, &v(r, c)); }
    static void  saveData(std::ostream &os, UT_StringHolder s)
    { UT_StringWrap(s).saveBinary(os); }
    static void  saveData(std::ostream &os, UT_SharedPtr<UT_Ramp> s)
    {   UT_StringHolder         result;
        UT_OStringStream        ostr;
        if (s) s->save(ostr);
        result = ostr.str();
        saveData(os, result);
    }
    static void  saveData(std::ostream &os, PRM_DataItemHandle s)
    {   UT_StringHolder         result;
        UT_OStringStream        ostr;
        if (s) 
        {
            ostr << s->getDataTypeToken();
            ostr << ":";
            s->saveBinary(ostr);
        }
        result = ostr.str();
        saveData(os, result);
    }


    void         save(std::ostream &os) const
    {
        int32           v = version();
        UTwrite(os, &v);
        saveData(os, myGroup);
        saveData(os, myFirstU);
        saveData(os, myDomainU1);
        saveData(os, mySecondU);
        saveData(os, myDomainU2);
        saveData(os, myFirstV);
        saveData(os, myDomainV1);
        saveData(os, mySecondV);
        saveData(os, myDomainV2);
        saveData(os, myOnlyBreakpoints);
        saveData(os, myDivsU);
        saveData(os, myDivsV);
        saveData(os, myAllUBreakpoints);
        saveData(os, myAllVBreakpoints);
        saveData(os, myFunction);
        saveData(os, myKeepIn);
        saveData(os, myKeepOut);
        saveData(os, myExtractOp);
        saveData(os, myKeepOriginal);

    }

    bool         load(UT_IStream &is)
    {
        int32           v;
        is.bread(&v, 1);
        if (version() != v)
        {
            // Fail incompatible versions
            return false;
        }
        loadData(is, myGroup);
        loadData(is, myFirstU);
        loadData(is, myDomainU1);
        loadData(is, mySecondU);
        loadData(is, myDomainU2);
        loadData(is, myFirstV);
        loadData(is, myDomainV1);
        loadData(is, mySecondV);
        loadData(is, myDomainV2);
        loadData(is, myOnlyBreakpoints);
        loadData(is, myDivsU);
        loadData(is, myDivsV);
        loadData(is, myAllUBreakpoints);
        loadData(is, myAllVBreakpoints);
        loadData(is, myFunction);
        loadData(is, myKeepIn);
        loadData(is, myKeepOut);
        loadData(is, myExtractOp);
        loadData(is, myKeepOriginal);

        return true;
    }

    const UT_StringHolder & getGroup() const { return myGroup; }
    void setGroup(const UT_StringHolder & val) { myGroup = val; }
    UT_StringHolder opGroup(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getGroup();
        UT_StringHolder result;
        OP_Utils::evalOpParm(result, thissop, "group", cookparms.getCookTime(), 0);
        return result;
    }
    bool getFirstU() const { return myFirstU; }
    void setFirstU(bool val) { myFirstU = val; }
    bool opFirstU(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getFirstU();
        bool result;
        OP_Utils::evalOpParm(result, thissop, "firstu", cookparms.getCookTime(), 0);
        return result;
    }
    fpreal64 getDomainU1() const { return myDomainU1; }
    void setDomainU1(fpreal64 val) { myDomainU1 = val; }
    fpreal64 opDomainU1(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getDomainU1();
        fpreal64 result;
        OP_Utils::evalOpParm(result, thissop, "domainu1", cookparms.getCookTime(), 0);
        return result;
    }
    bool getSecondU() const { return mySecondU; }
    void setSecondU(bool val) { mySecondU = val; }
    bool opSecondU(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getSecondU();
        bool result;
        OP_Utils::evalOpParm(result, thissop, "secondu", cookparms.getCookTime(), 0);
        return result;
    }
    fpreal64 getDomainU2() const { return myDomainU2; }
    void setDomainU2(fpreal64 val) { myDomainU2 = val; }
    fpreal64 opDomainU2(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getDomainU2();
        fpreal64 result;
        OP_Utils::evalOpParm(result, thissop, "domainu2", cookparms.getCookTime(), 0);
        return result;
    }
    bool getFirstV() const { return myFirstV; }
    void setFirstV(bool val) { myFirstV = val; }
    bool opFirstV(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getFirstV();
        bool result;
        OP_Utils::evalOpParm(result, thissop, "firstv", cookparms.getCookTime(), 0);
        return result;
    }
    fpreal64 getDomainV1() const { return myDomainV1; }
    void setDomainV1(fpreal64 val) { myDomainV1 = val; }
    fpreal64 opDomainV1(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getDomainV1();
        fpreal64 result;
        OP_Utils::evalOpParm(result, thissop, "domainv1", cookparms.getCookTime(), 0);
        return result;
    }
    bool getSecondV() const { return mySecondV; }
    void setSecondV(bool val) { mySecondV = val; }
    bool opSecondV(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getSecondV();
        bool result;
        OP_Utils::evalOpParm(result, thissop, "secondv", cookparms.getCookTime(), 0);
        return result;
    }
    fpreal64 getDomainV2() const { return myDomainV2; }
    void setDomainV2(fpreal64 val) { myDomainV2 = val; }
    fpreal64 opDomainV2(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getDomainV2();
        fpreal64 result;
        OP_Utils::evalOpParm(result, thissop, "domainv2", cookparms.getCookTime(), 0);
        return result;
    }
    int64 getOnlyBreakpoints() const { return myOnlyBreakpoints; }
    void setOnlyBreakpoints(int64 val) { myOnlyBreakpoints = val; }
    int64 opOnlyBreakpoints(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getOnlyBreakpoints();
        int64 result;
        OP_Utils::evalOpParm(result, thissop, "onlybreakpoints", cookparms.getCookTime(), 0);
        return result;
    }
    int64 getDivsU() const { return myDivsU; }
    void setDivsU(int64 val) { myDivsU = val; }
    int64 opDivsU(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getDivsU();
        int64 result;
        OP_Utils::evalOpParm(result, thissop, "divsu", cookparms.getCookTime(), 0);
        return result;
    }
    int64 getDivsV() const { return myDivsV; }
    void setDivsV(int64 val) { myDivsV = val; }
    int64 opDivsV(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getDivsV();
        int64 result;
        OP_Utils::evalOpParm(result, thissop, "divsv", cookparms.getCookTime(), 0);
        return result;
    }
    bool getAllUBreakpoints() const { return myAllUBreakpoints; }
    void setAllUBreakpoints(bool val) { myAllUBreakpoints = val; }
    bool opAllUBreakpoints(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getAllUBreakpoints();
        bool result;
        OP_Utils::evalOpParm(result, thissop, "allubreakpoints", cookparms.getCookTime(), 0);
        return result;
    }
    bool getAllVBreakpoints() const { return myAllVBreakpoints; }
    void setAllVBreakpoints(bool val) { myAllVBreakpoints = val; }
    bool opAllVBreakpoints(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getAllVBreakpoints();
        bool result;
        OP_Utils::evalOpParm(result, thissop, "allvbreakpoints", cookparms.getCookTime(), 0);
        return result;
    }
    int64 getFunction() const { return myFunction; }
    void setFunction(int64 val) { myFunction = val; }
    int64 opFunction(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getFunction();
        int64 result;
        OP_Utils::evalOpParm(result, thissop, "stdswitcher", cookparms.getCookTime(), 0);
        return result;
    }
    bool getKeepIn() const { return myKeepIn; }
    void setKeepIn(bool val) { myKeepIn = val; }
    bool opKeepIn(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getKeepIn();
        bool result;
        OP_Utils::evalOpParm(result, thissop, "keepin", cookparms.getCookTime(), 0);
        return result;
    }
    bool getKeepOut() const { return myKeepOut; }
    void setKeepOut(bool val) { myKeepOut = val; }
    bool opKeepOut(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getKeepOut();
        bool result;
        OP_Utils::evalOpParm(result, thissop, "keepout", cookparms.getCookTime(), 0);
        return result;
    }
    int64 getExtractOp() const { return myExtractOp; }
    void setExtractOp(int64 val) { myExtractOp = val; }
    int64 opExtractOp(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getExtractOp();
        int64 result;
        OP_Utils::evalOpParm(result, thissop, "extractop", cookparms.getCookTime(), 0);
        return result;
    }
    bool getKeepOriginal() const { return myKeepOriginal; }
    void setKeepOriginal(bool val) { myKeepOriginal = val; }
    bool opKeepOriginal(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getKeepOriginal();
        bool result;
        OP_Utils::evalOpParm(result, thissop, "keepOriginal", cookparms.getCookTime(), 0);
        return result;
    }

private:
    UT_StringHolder myGroup;
    bool myFirstU;
    fpreal64 myDomainU1;
    bool mySecondU;
    fpreal64 myDomainU2;
    bool myFirstV;
    fpreal64 myDomainV1;
    bool mySecondV;
    fpreal64 myDomainV2;
    int64 myOnlyBreakpoints;
    int64 myDivsU;
    int64 myDivsV;
    bool myAllUBreakpoints;
    bool myAllVBreakpoints;
    int64 myFunction;
    bool myKeepIn;
    bool myKeepOut;
    int64 myExtractOp;
    bool myKeepOriginal;

};
