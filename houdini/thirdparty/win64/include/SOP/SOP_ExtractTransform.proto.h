/* Automagically Generated by generate_proto.py
 * Do not Edit
 */
#pragma once

#include <SOP/SOP_NodeVerb.h>
#include <OP/OP_Utils.h>
#include <PRM/PRM_Parm.h>
#include <UT/UT_IStream.h>
#include <UT/UT_NTStreamUtil.h>
#include <UT/UT_Ramp.h>
#include <UT/UT_SharedPtr.h>
#include <UT/UT_StringHolder.h>
#include <UT/UT_StringStream.h>
#include <UT/UT_VectorTypes.h>
#include <SYS/SYS_Types.h>

using namespace UT::Literal;

class DEP_MicroNode;
namespace SOP_ExtractTransformEnums
{
    enum class PieceAttribClass
    {
        PRIMITIVE = 0,
        POINT
    };
    enum class ExtractionMethod
    {
        RIGID = 0,
        UNIFORMSCALE
    };
}


class SOP_API SOP_ExtractTransformParms  : public SOP_NodeParms
{
public:
    static int version() { return 1; }

    SOP_ExtractTransformParms()
    {
        myUsePieceAttrib = false;
        myPieceAttrib = "name"_sh;
        myPieceAttribClass = 0;
        myExtractionMethod = 0;
        myComputeDistortion = false;
        myDistortionAttrib = "distortion"_sh;

    }

    explicit SOP_ExtractTransformParms(const SOP_ExtractTransformParms &) = default;

    virtual ~SOP_ExtractTransformParms() {}

    bool operator==(const SOP_ExtractTransformParms &src) const
    {
        if (myUsePieceAttrib != src.myUsePieceAttrib) return false;
        if (myPieceAttrib != src.myPieceAttrib) return false;
        if (myPieceAttribClass != src.myPieceAttribClass) return false;
        if (myExtractionMethod != src.myExtractionMethod) return false;
        if (myComputeDistortion != src.myComputeDistortion) return false;
        if (myDistortionAttrib != src.myDistortionAttrib) return false;

        return true;
    }
    bool operator!=(const SOP_ExtractTransformParms &src) const
    {
        return !operator==(src);
    }
    using PieceAttribClass = SOP_ExtractTransformEnums::PieceAttribClass;
    using ExtractionMethod = SOP_ExtractTransformEnums::ExtractionMethod;



    void        buildFromOp(const OP_Node *node, fpreal time, DEP_MicroNode *depnode)
    {
        if (true)
            OP_Utils::evalOpParm(myUsePieceAttrib, node, "usepieceattrib", time, 0);
        else myUsePieceAttrib = false;
        if (true && ( (!(((getUsePieceAttrib()==0)))) ) )
            OP_Utils::evalOpParm(myPieceAttrib, node, "pieceattrib", time, 0);
        else myPieceAttrib = "name"_sh;
        if (true && ( (!(((getUsePieceAttrib()==0)))) ) )
            OP_Utils::evalOpParm(myPieceAttribClass, node, "pieceattribclass", time, 0);
        else myPieceAttribClass = 0;
        if (true)
            OP_Utils::evalOpParm(myExtractionMethod, node, "extractionmethod", time, 0);
        else myExtractionMethod = 0;
        if (true)
            OP_Utils::evalOpParm(myComputeDistortion, node, "computedistortion", time, 0);
        else myComputeDistortion = false;
        if (true && ( (!(((getComputeDistortion()==0)))) ) )
            OP_Utils::evalOpParm(myDistortionAttrib, node, "distortionattrib", time, 0);
        else myDistortionAttrib = "distortion"_sh;

    }


    virtual void loadFromOpSubclass(const LoadParms &loadparms)
    {
        buildFromOp(loadparms.node(), loadparms.context().getTime(), loadparms.depnode());
    }


    virtual void copyFrom(const SOP_NodeParms *src)
    {
        *this = *((const SOP_ExtractTransformParms *)src);
    }

    template <typename T>
    void
    doGetParmValue(exint idx, T &value) const
    {
        switch (idx)
        {
            case 0:
                coerceValue(value, myUsePieceAttrib);
                break;
            case 1:
                coerceValue(value, myPieceAttrib);
                break;
            case 2:
                coerceValue(value, myPieceAttribClass);
                break;
            case 3:
                coerceValue(value, myExtractionMethod);
                break;
            case 4:
                coerceValue(value, myComputeDistortion);
                break;
            case 5:
                coerceValue(value, myDistortionAttrib);
                break;

        }
    }

    void        getParmValue(exint idx, exint &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, fpreal &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Vector2D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Vector3D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Vector4D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Matrix2D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Matrix3D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_Matrix4D &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_StringHolder &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, UT_SharedPtr<UT_Ramp> &value) const
    { doGetParmValue(idx, value); }
    void        getParmValue(exint idx, PRM_DataItemHandle &value) const
    { doGetParmValue(idx, value); }

    template <typename T>
    void
    doSetParmValue(exint idx, const T &value) 
    {
        switch (idx)
        {
            case 0:
                coerceValue(myUsePieceAttrib, value);
                break;
            case 1:
                coerceValue(myPieceAttrib, value);
                break;
            case 2:
                coerceValue(myPieceAttribClass, value);
                break;
            case 3:
                coerceValue(myExtractionMethod, value);
                break;
            case 4:
                coerceValue(myComputeDistortion, value);
                break;
            case 5:
                coerceValue(myDistortionAttrib, value);
                break;

        }
    }

    void        setParmValue(exint idx, const exint &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const fpreal &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Vector2D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Vector3D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Vector4D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Matrix2D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Matrix3D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_Matrix4D &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_StringHolder &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const UT_SharedPtr<UT_Ramp> &value) 
    { doSetParmValue(idx, value); }
    void        setParmValue(exint idx, const PRM_DataItemHandle &value) 
    { doSetParmValue(idx, value); }

    virtual exint    getNumParms() const
    {
        return 6;
    }

    virtual const char *getParmName(exint fieldnum) const
    {
        switch (fieldnum)
        {
            case 0:
                return "usepieceattrib";
            case 1:
                return "pieceattrib";
            case 2:
                return "pieceattribclass";
            case 3:
                return "extractionmethod";
            case 4:
                return "computedistortion";
            case 5:
                return "distortionattrib";

        }
        return 0;
    }

    virtual ParmType getParmType(exint fieldnum) const
    {
        switch (fieldnum)
        {
                case 0:
                    return PARM_INTEGER;
                case 1:
                    return PARM_STRING;
                case 2:
                    return PARM_INTEGER;
                case 3:
                    return PARM_INTEGER;
                case 4:
                    return PARM_INTEGER;
                case 5:
                    return PARM_STRING;

        }
        return PARM_UNSUPPORTED;
    }

    // Boiler plate to load individual types.
    static void  loadData(UT_IStream &is, int64 &v)
    { is.bread(&v, 1); }
    static void  loadData(UT_IStream &is, bool &v)
    { int64     iv; is.bread(&iv, 1); v = iv; }
    static void  loadData(UT_IStream &is, fpreal64 &v)
    { is.bread<fpreal64>(&v, 1); }
    static void  loadData(UT_IStream &is, UT_Vector2D &v)
    { is.bread<fpreal64>(&v.x(), 1); is.bread<fpreal64>(&v.y(), 1); }
    static void  loadData(UT_IStream &is, UT_Vector3D &v)
    { is.bread<fpreal64>(&v.x(), 1); is.bread<fpreal64>(&v.y(), 1);
      is.bread<fpreal64>(&v.z(), 1); }
    static void  loadData(UT_IStream &is, UT_Vector4D &v)
    { is.bread<fpreal64>(&v.x(), 1); is.bread<fpreal64>(&v.y(), 1);
      is.bread<fpreal64>(&v.z(), 1); is.bread<fpreal64>(&v.w(), 1); }
    static void  loadData(UT_IStream &is, UT_Matrix2D &v)
    { for (int r = 0; r < 2; r++) for (int c = 0; c < 2; c++) is.bread<fpreal64>(&v(r, c), 1); }
    static void  loadData(UT_IStream &is, UT_Matrix3D &v)
    { for (int r = 0; r < 3; r++) for (int c = 0; c < 3; c++) is.bread<fpreal64>(&v(r, c), 1); }
    static void  loadData(UT_IStream &is, UT_Matrix4D &v)
    { for (int r = 0; r < 4; r++) for (int c = 0; c < 4; c++) is.bread<fpreal64>(&v(r, c), 1); }
    static void  loadData(UT_IStream &is, UT_Vector2I &v)
    { is.bread<int64>(&v.x(), 1); is.bread<int64>(&v.y(), 1); }
    static void  loadData(UT_IStream &is, UT_Vector3I &v)
    { is.bread<int64>(&v.x(), 1); is.bread<int64>(&v.y(), 1);
      is.bread<int64>(&v.z(), 1); }
    static void  loadData(UT_IStream &is, UT_Vector4I &v)
    { is.bread<int64>(&v.x(), 1); is.bread<int64>(&v.y(), 1);
      is.bread<int64>(&v.z(), 1); is.bread<int64>(&v.w(), 1); }
    static void  loadData(UT_IStream &is, UT_StringHolder &v)
    { is.bread(v); }
    static void  loadData(UT_IStream &is, UT_SharedPtr<UT_Ramp> &v)
    {   UT_StringHolder   rampdata;
        loadData(is, rampdata);
        if (rampdata.isstring())
        {
            v.reset(new UT_Ramp());
            UT_IStream  istr((const char *) rampdata, rampdata.length(), UT_ISTREAM_ASCII);
            v->load(istr);
        }
        else v.reset();
    }
    static void  loadData(UT_IStream &is, PRM_DataItemHandle &v)
    {   UT_StringHolder   data;
        loadData(is, data);
        if (data.isstring())
        {
            // Find the data type.
            char *colon = UT_StringWrap(data).findChar(':');
            if (colon)
            {
                int             typelen = colon - data.buffer();
                UT_WorkBuffer   type;
                type.strncpy(data.buffer(), typelen);
                UT_IStream  istr(((const char *) data) + typelen + 1, data.length() - (typelen + 1), UT_ISTREAM_BINARY);
                
                v = PRM_DataFactory::parseBinary(type.buffer(), istr);
            }
        }
        else v.reset();
    }

    static void  saveData(std::ostream &os, int64 v)
    { UTwrite(os, &v); }
    static void  saveData(std::ostream &os, bool v)
    { int64 iv = v; UTwrite(os, &iv); }
    static void  saveData(std::ostream &os, fpreal64 v)
    { UTwrite<fpreal64>(os, &v); }
    static void  saveData(std::ostream &os, UT_Vector2D v)
    { UTwrite<fpreal64>(os, &v.x()); UTwrite<fpreal64>(os, &v.y()); }
    static void  saveData(std::ostream &os, UT_Vector3D v)
    { UTwrite<fpreal64>(os, &v.x()); UTwrite<fpreal64>(os, &v.y());
      UTwrite<fpreal64>(os, &v.z()); }
    static void  saveData(std::ostream &os, UT_Vector4D v)
    { UTwrite<fpreal64>(os, &v.x()); UTwrite<fpreal64>(os, &v.y());
      UTwrite<fpreal64>(os, &v.z()); UTwrite<fpreal64>(os, &v.w()); }
    static void  saveData(std::ostream &os, UT_Matrix2D v)
    { for (int r = 0; r < 2; r++) for (int c = 0; c < 2; c++) UTwrite<fpreal64>(os, &v(r, c)); }
    static void  saveData(std::ostream &os, UT_Matrix3D v)
    { for (int r = 0; r < 3; r++) for (int c = 0; c < 3; c++) UTwrite<fpreal64>(os, &v(r, c)); }
    static void  saveData(std::ostream &os, UT_Matrix4D v)
    { for (int r = 0; r < 4; r++) for (int c = 0; c < 4; c++) UTwrite<fpreal64>(os, &v(r, c)); }
    static void  saveData(std::ostream &os, UT_StringHolder s)
    { UT_StringWrap(s).saveBinary(os); }
    static void  saveData(std::ostream &os, UT_SharedPtr<UT_Ramp> s)
    {   UT_StringHolder         result;
        UT_OStringStream        ostr;
        if (s) s->save(ostr);
        result = ostr.str();
        saveData(os, result);
    }
    static void  saveData(std::ostream &os, PRM_DataItemHandle s)
    {   UT_StringHolder         result;
        UT_OStringStream        ostr;
        if (s) 
        {
            ostr << s->getDataTypeToken();
            ostr << ":";
            s->saveBinary(ostr);
        }
        result = ostr.str();
        saveData(os, result);
    }


    void         save(std::ostream &os) const
    {
        int32           v = version();
        UTwrite(os, &v);
        saveData(os, myUsePieceAttrib);
        saveData(os, myPieceAttrib);
        saveData(os, myPieceAttribClass);
        saveData(os, myExtractionMethod);
        saveData(os, myComputeDistortion);
        saveData(os, myDistortionAttrib);

    }

    bool         load(UT_IStream &is)
    {
        int32           v;
        is.bread(&v, 1);
        if (version() != v)
        {
            // Fail incompatible versions
            return false;
        }
        loadData(is, myUsePieceAttrib);
        loadData(is, myPieceAttrib);
        loadData(is, myPieceAttribClass);
        loadData(is, myExtractionMethod);
        loadData(is, myComputeDistortion);
        loadData(is, myDistortionAttrib);

        return true;
    }

    bool getUsePieceAttrib() const { return myUsePieceAttrib; }
    void setUsePieceAttrib(bool val) { myUsePieceAttrib = val; }
    bool opUsePieceAttrib(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getUsePieceAttrib();
        bool result;
        OP_Utils::evalOpParm(result, thissop, "usepieceattrib", cookparms.getCookTime(), 0);
        return result;
    }
    const UT_StringHolder & getPieceAttrib() const { return myPieceAttrib; }
    void setPieceAttrib(const UT_StringHolder & val) { myPieceAttrib = val; }
    UT_StringHolder opPieceAttrib(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getPieceAttrib();
        UT_StringHolder result;
        OP_Utils::evalOpParm(result, thissop, "pieceattrib", cookparms.getCookTime(), 0);
        return result;
    }
    PieceAttribClass getPieceAttribClass() const { return PieceAttribClass(myPieceAttribClass); }
    void setPieceAttribClass(PieceAttribClass val) { myPieceAttribClass = int64(val); }
    PieceAttribClass opPieceAttribClass(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getPieceAttribClass();
        int64 result;
        OP_Utils::evalOpParm(result, thissop, "pieceattribclass", cookparms.getCookTime(), 0);
        return PieceAttribClass(result);
    }
    ExtractionMethod getExtractionMethod() const { return ExtractionMethod(myExtractionMethod); }
    void setExtractionMethod(ExtractionMethod val) { myExtractionMethod = int64(val); }
    ExtractionMethod opExtractionMethod(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getExtractionMethod();
        int64 result;
        OP_Utils::evalOpParm(result, thissop, "extractionmethod", cookparms.getCookTime(), 0);
        return ExtractionMethod(result);
    }
    bool getComputeDistortion() const { return myComputeDistortion; }
    void setComputeDistortion(bool val) { myComputeDistortion = val; }
    bool opComputeDistortion(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getComputeDistortion();
        bool result;
        OP_Utils::evalOpParm(result, thissop, "computedistortion", cookparms.getCookTime(), 0);
        return result;
    }
    const UT_StringHolder & getDistortionAttrib() const { return myDistortionAttrib; }
    void setDistortionAttrib(const UT_StringHolder & val) { myDistortionAttrib = val; }
    UT_StringHolder opDistortionAttrib(const SOP_NodeVerb::CookParms &cookparms) const
    { 
        SOP_Node *thissop = cookparms.getNode();
        if (!thissop) return getDistortionAttrib();
        UT_StringHolder result;
        OP_Utils::evalOpParm(result, thissop, "distortionattrib", cookparms.getCookTime(), 0);
        return result;
    }

private:
    bool myUsePieceAttrib;
    UT_StringHolder myPieceAttrib;
    int64 myPieceAttribClass;
    int64 myExtractionMethod;
    bool myComputeDistortion;
    UT_StringHolder myDistortionAttrib;

};
