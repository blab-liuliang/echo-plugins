/*
 * PROPRIETARY INFORMATION.  This software is proprietary to
 * Side Effects Software Inc., and is not to be reproduced,
 * transmitted, or disclosed in any way without written permission.
 *
 * NAME:	RE_OGLQuery.h ( RE Library, C++)
 *
 * COMMENTS:
 *    Base class for GL queries (timer, occlusion, transform feedback prims)
 */
#ifndef RE_OGLQuery_h
#define RE_OGLQuery_h

#include "RE_ContextSpecificObject.h"

class RE_API RE_OGLQuery : public RE_ContextSpecificObject
{
public:
   virtual     ~RE_OGLQuery();

   /// Create the query. A query cannot be created if another query is active.
   virtual bool init(RE_Render *r);
   
   /// Bracket the draw calls to measure with begin and end.
   /// @{
   virtual bool	begin(RE_Render *r);
   virtual void	end(RE_Render *r);
   /// @}

   /// Returns true if the query result is available from the GL server.
   bool		isResultAvailable(RE_Render *r) const;
   
   /// returns true if a query block has been executed in the past.
   bool		isQueryBlockDone() const	{ return myQueryPerformed; }

   /// Get Raw GL ID of the query object
   int		getID() const			{ return myID; }

   /// resets the query object so that isQueryBlockDone() returns false, as if
   /// a query had never been performed.
   void		reset();

   /// Deletes the query ID. init() must be called again.
   void		destroy();
   
protected:
   
		RE_OGLQuery(RE_Extension extension_type,
			    int gl_query_type,
			    int stream_num,
			    RE_Extension alternate_extension = RE_EXT_INVALID,
			    int alt_gl_query_type = 0);

   int		getIntResult(RE_Render *r);
   int64	getLongResult(RE_Render *r);

   bool		queryCounter(RE_Render *r);
   
private:
   RE_Extension myExtension;
   RE_Extension myAltExtension;
   bool		myActiveQuery;
   bool		myQueryPerformed;
   bool		myHasResult;
   unsigned int	myID;
   int		myQueryType;
   int		myAltQueryType;
   int		myStreamNum;

   union {
       int	myInt;
       int64	myInt64;
   } myResult;
};

class RE_API RE_PrimitivesGeneratedQuery : public RE_OGLQuery
{
public:
		RE_PrimitivesGeneratedQuery(int stream = 0);

    /// Fetch the number of primitives generated by the GPU
    int		getNumPrimitives(RE_Render *r) { return getIntResult(r); }
};

// No RE_API - used by RE_Render only.
class RE_FeedbackPrimitivesWrittenQuery : public RE_OGLQuery 
{
public:
		RE_FeedbackPrimitivesWrittenQuery(int stream = 0);

    /// Fetch the number of primitives captured by transform feedback
    int		getNumPrimitives(RE_Render *r) { return getIntResult(r); }
};

#endif
