/*
 * PROPRIETARY INFORMATION.  This software is proprietary to
 * Side Effects Software Inc., and is not to be reproduced,
 * transmitted, or disclosed in any way without written permission.
 *
 * NAME:	GT_Refine.h ( GT Library, C++)
 *
 * COMMENTS:
 */

#ifndef __GT_Refine__
#define __GT_Refine__

#include "GT_API.h"
#include "GT_Handles.h"
#include <SYS/SYS_Types.h>
#include <UT/UT_ParallelUtil.h>

///@brief Processes primitives generated by refinement process
class GT_API GT_Refine {
public:
    /// Default constructor
    GT_Refine() {}

    /// Destructor
    virtual ~GT_Refine();

    /// Return true if the refinement allows threaded refinement of primitives
    virtual bool	allowThreading() const	{ return true; }

    /// This method is called for all primitives generated during the
    /// refinement process.
    virtual void	addPrimitive(const GT_PrimitiveHandle &prim) = 0;

    /// Convenience method called by primitives which support parallel for
    /// loops for refinement.
    template <typename Range, typename Body>
    void		refineRange(const Range &range, const Body &body)
			{
			    if (allowThreading())
				UTparallelFor(range, body);
			    else
				UTserialFor(range, body);
			}

public:
    /// @{
    /// For memory tracking, we override the new/delete operators
    static void	*operator	new(size_t size);
    static void	*operator	new(size_t size, void *p);
    static void	 operator	delete(void *p, size_t size);
    /// @}

protected:
};

#endif
