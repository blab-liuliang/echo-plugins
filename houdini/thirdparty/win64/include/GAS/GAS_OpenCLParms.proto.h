/* Automagically Generated by generate_proto.py
 * Do not Edit
 */
#pragma once


#include <OP/OP_Utils.h>
#include <PRM/PRM_Parm.h>
#include <UT/UT_IStream.h>
#include <UT/UT_NTStreamUtil.h>
#include <UT/UT_Ramp.h>
#include <UT/UT_SharedPtr.h>
#include <UT/UT_StringHolder.h>
#include <UT/UT_StringStream.h>
#include <UT/UT_VectorTypes.h>
#include <SYS/SYS_Types.h>

using namespace UT::Literal;

class DEP_MicroNode;

class GAS_API GAS_OpenCLParms 
{
public:
    static int version() { return 3; }
    struct Bindings
    {
        UT_StringHolder name;
        int64 type;
        int64 intval;
        fpreal64 fval;
        UT_Vector3D v3val;
        UT_Vector4D v4val;
        int64 timescale;
        UT_StringHolder fieldname;
        bool fieldoffsets;
        UT_SharedPtr<UT_Ramp> ramp;
        int64 rampsize;
        UT_StringHolder geometry;
        UT_StringHolder attribute;
        int64 attribclass;
        int64 attribtype;
        int64 attribsize;
        bool readable;
        bool writeable;
        bool optional;


        Bindings()
        {
            name = ""_sh;
            type = 0;
            intval = 0;
            fval = 0;
            v3val = 0;
            v4val = 0;
            timescale = 0;
            fieldname = ""_sh;
            fieldoffsets = false;
            ramp = UT_SharedPtr<UT_Ramp>(0);
            rampsize = 0;
            geometry = ""_sh;
            attribute = ""_sh;
            attribclass = 0;
            attribtype = 0;
            attribsize = 0;
            readable = false;
            writeable = false;
            optional = false;

        }

        bool operator==(const Bindings &src) const
        {
            if (name != src.name) return false;
            if (type != src.type) return false;
            if (intval != src.intval) return false;
            if (fval != src.fval) return false;
            if (v3val != src.v3val) return false;
            if (v4val != src.v4val) return false;
            if (timescale != src.timescale) return false;
            if (fieldname != src.fieldname) return false;
            if (fieldoffsets != src.fieldoffsets) return false;
            if (ramp != src.ramp)
            { if (!ramp || !src.ramp || !(*ramp == *src.ramp)) return false; }
            if (rampsize != src.rampsize) return false;
            if (geometry != src.geometry) return false;
            if (attribute != src.attribute) return false;
            if (attribclass != src.attribclass) return false;
            if (attribtype != src.attribtype) return false;
            if (attribsize != src.attribsize) return false;
            if (readable != src.readable) return false;
            if (writeable != src.writeable) return false;
            if (optional != src.optional) return false;

            return true;
        }
        bool operator!=(const Bindings &src) const
        {
            return !operator==(src);
        }

    };

    UT_StringHolder createString(const UT_Array<Bindings> &list) const
    {
        UT_WorkBuffer   buf;

        buf.strcat("[ ");
        for (int i = 0; i < list.entries(); i++)
        {
            if (i)
                buf.strcat(", ");
            buf.strcat("( ");
            buf.append("");
            { UT_String tmp; tmp = UT_StringWrap(list(i).name).makeQuotedString('"'); buf.strcat(tmp); }
            buf.append(", ");
            buf.appendSprintf("%d", (int) list(i).type);
            buf.append(", ");
            buf.appendSprintf("%d", (int) list(i).intval);
            buf.append(", ");
            buf.appendSprintf("%f", (list(i).fval));
            buf.append(", ");
            buf.appendSprintf("(%f, %f, %f)", list(i).v3val.x(), list(i).v3val.y(), list(i).v3val.z());
            buf.append(", ");
            buf.appendSprintf("(%f, %f, %f, %f)", list(i).v4val.x(), list(i).v4val.y(), list(i).v4val.z(), list(i).v4val.w());
            buf.append(", ");
            buf.appendSprintf("%d", (int) list(i).timescale);
            buf.append(", ");
            { UT_String tmp; tmp = UT_StringWrap(list(i).fieldname).makeQuotedString('"'); buf.strcat(tmp); }
            buf.append(", ");
            buf.appendSprintf("%s", (list(i).fieldoffsets) ? "true" : "false");
            buf.append(", ");
            if (list(i).ramp)
            {
                UT_OStringStream os;
                UT_String tmp;
                list(i).ramp->save(os);
                tmp = UT_StringWrap(os.str().buffer()).makeQuotedString('"');
                buf.strcat(tmp);
            }
            else buf.strcat("""");
            buf.append(", ");
            buf.appendSprintf("%d", (int) list(i).rampsize);
            buf.append(", ");
            { UT_String tmp; tmp = UT_StringWrap(list(i).geometry).makeQuotedString('"'); buf.strcat(tmp); }
            buf.append(", ");
            { UT_String tmp; tmp = UT_StringWrap(list(i).attribute).makeQuotedString('"'); buf.strcat(tmp); }
            buf.append(", ");
            buf.appendSprintf("%d", (int) list(i).attribclass);
            buf.append(", ");
            buf.appendSprintf("%d", (int) list(i).attribtype);
            buf.append(", ");
            buf.appendSprintf("%d", (int) list(i).attribsize);
            buf.append(", ");
            buf.appendSprintf("%s", (list(i).readable) ? "true" : "false");
            buf.append(", ");
            buf.appendSprintf("%s", (list(i).writeable) ? "true" : "false");
            buf.append(", ");
            buf.appendSprintf("%s", (list(i).optional) ? "true" : "false");

            buf.strcat(" )");
        }
        buf.strcat(" ]");

        UT_StringHolder result = buf;
        return result;
    }

    GAS_OpenCLParms()
    {
        myRunOver = 0;
        myAlign = false;
        myUseCode = false;
        myKernelName = ""_sh;
        myKernelFile = ""_sh;
        myKernelCode = ""_sh;
        myKernelOptions = ""_sh;
        myRecompile = false;
        myOrigin = false;
        mySize = false;
        myVoxelSize = false;
        myTime = false;
        myTimeInc = false;
        myFlushAttributes = false;
        myFinish = false;
        myTimeScale = 0;
        myTimeMethod = 0;
        myXNoise = false;
        myWorksetsGeometry = ""_sh;
        myWorksetsBeginAttr = ""_sh;
        myWorksetsLengthAttr = ""_sh;
        myWarnMissing = false;
        mySingleWorkgroup = false;

    }

    explicit GAS_OpenCLParms(const GAS_OpenCLParms &) = default;

    ~GAS_OpenCLParms() {}

    bool operator==(const GAS_OpenCLParms &src) const
    {
        if (myRunOver != src.myRunOver) return false;
        if (myAlign != src.myAlign) return false;
        if (myUseCode != src.myUseCode) return false;
        if (myKernelName != src.myKernelName) return false;
        if (myKernelFile != src.myKernelFile) return false;
        if (myKernelCode != src.myKernelCode) return false;
        if (myKernelOptions != src.myKernelOptions) return false;
        if (myRecompile != src.myRecompile) return false;
        if (myOrigin != src.myOrigin) return false;
        if (mySize != src.mySize) return false;
        if (myVoxelSize != src.myVoxelSize) return false;
        if (myTime != src.myTime) return false;
        if (myTimeInc != src.myTimeInc) return false;
        if (myFlushAttributes != src.myFlushAttributes) return false;
        if (myFinish != src.myFinish) return false;
        if (myTimeScale != src.myTimeScale) return false;
        if (myTimeMethod != src.myTimeMethod) return false;
        if (myXNoise != src.myXNoise) return false;
        if (myWorksetsGeometry != src.myWorksetsGeometry) return false;
        if (myWorksetsBeginAttr != src.myWorksetsBeginAttr) return false;
        if (myWorksetsLengthAttr != src.myWorksetsLengthAttr) return false;
        if (myWarnMissing != src.myWarnMissing) return false;
        if (mySingleWorkgroup != src.mySingleWorkgroup) return false;
        if (myBindings != src.myBindings) return false;

        return true;
    }
    bool operator!=(const GAS_OpenCLParms &src) const
    {
        return !operator==(src);
    }


    class Query : public SIM_Query
    {
    public:
        explicit Query(const SIM_Data *owner, const GAS_OpenCLParms &parms) 
                    : SIM_Query(owner)
                    , myParms(parms)
        { }
        virtual ~Query() {}

    protected:
        bool            isMyRecord(const char *recordtype) const
        { return !strcmp(recordtype, "Params"); }

        virtual int     getNumRecordTypesSubclass() const { return 1; }
        virtual const char *getRecordTypeNameSubclass(int recordtypenum) const
        { 
            if (recordtypenum == 0) return "Params"; 
            return 0; 
        }
        virtual int     getNumRecordsSubclass(const char *recordtype) const
        { 
            if (isMyRecord(recordtype)) return 1; 
            return 0; 
        }
        virtual int     getNumFieldsSubclass(const char *recordtype) const
        {
            if (isMyRecord(recordtype))
                return 24;
            return 0;
        }

        virtual const char *getFieldNameSubclass(const char *recordtype,
                                        int fieldnum) const
        {
            if (!isMyRecord(recordtype))
                return 0;

            switch (fieldnum)
            {
            case 0:
                return "runover";
            case 1:
                return "align";
            case 2:
                return "usecode";
            case 3:
                return "kernelname";
            case 4:
                return "kernelfile";
            case 5:
                return "kernelcode";
            case 6:
                return "kerneloptions";
            case 7:
                return "recompile";
            case 8:
                return "origin";
            case 9:
                return "size";
            case 10:
                return "voxelsize";
            case 11:
                return "time";
            case 12:
                return "timeinc";
            case 13:
                return "flushattrib";
            case 14:
                return "finish";
            case 15:
                return "timescale";
            case 16:
                return "timemethod";
            case 17:
                return "xnoise";
            case 18:
                return "worksets_geo";
            case 19:
                return "worksets_begin";
            case 20:
                return "worksets_length";
            case 21:
                return "warnmissing";
            case 22:
                return "singleworkgroup";
                case 23:
                    return "bindings";

            }
            return 0;
        }
        virtual UT_OptionType getFieldTypeSubclass(const char *recordtype,
                                        int fieldnum) const
        {
            if (!isMyRecord(recordtype))
                return UT_OPTION_INVALID;

            switch (fieldnum)
            {
            case 0:
                return UT_OPTION_INT;
            case 1:
                return UT_OPTION_BOOL;
            case 2:
                return UT_OPTION_BOOL;
            case 3:
                return UT_OPTION_STRING;
            case 4:
                return UT_OPTION_STRING;
            case 5:
                return UT_OPTION_STRING;
            case 6:
                return UT_OPTION_STRING;
            case 7:
                return UT_OPTION_BOOL;
            case 8:
                return UT_OPTION_BOOL;
            case 9:
                return UT_OPTION_BOOL;
            case 10:
                return UT_OPTION_BOOL;
            case 11:
                return UT_OPTION_BOOL;
            case 12:
                return UT_OPTION_BOOL;
            case 13:
                return UT_OPTION_BOOL;
            case 14:
                return UT_OPTION_BOOL;
            case 15:
                return UT_OPTION_FPREAL;
            case 16:
                return UT_OPTION_INT;
            case 17:
                return UT_OPTION_BOOL;
            case 18:
                return UT_OPTION_STRING;
            case 19:
                return UT_OPTION_STRING;
            case 20:
                return UT_OPTION_STRING;
            case 21:
                return UT_OPTION_BOOL;
            case 22:
                return UT_OPTION_BOOL;
                case 23:
                    return UT_OPTION_STRING;

            }
            return UT_OPTION_INVALID;
        }

        virtual bool getFieldRawSubclass(const char *recordtype,
                                        int recordnum,
                                        const char *fieldname,
                                        UT_OptionEntry *&result) const
        {
            if (!isMyRecord(recordtype))
                return false;
            if (recordnum != 0)
                return false;
            // This is less optimal, but if we are in SIM_Query
            // land we have already given up on performance.
            if (!strcmp(fieldname, "runover"))
            {
                result = new UT_OptionInt(myParms.myRunOver);
                return true;
            }
            if (!strcmp(fieldname, "align"))
            {
                result = new UT_OptionBool(myParms.myAlign);
                return true;
            }
            if (!strcmp(fieldname, "usecode"))
            {
                result = new UT_OptionBool(myParms.myUseCode);
                return true;
            }
            if (!strcmp(fieldname, "kernelname"))
            {
                result = new UT_OptionString(myParms.myKernelName);
                return true;
            }
            if (!strcmp(fieldname, "kernelfile"))
            {
                result = new UT_OptionString(myParms.myKernelFile);
                return true;
            }
            if (!strcmp(fieldname, "kernelcode"))
            {
                result = new UT_OptionString(myParms.myKernelCode);
                return true;
            }
            if (!strcmp(fieldname, "kerneloptions"))
            {
                result = new UT_OptionString(myParms.myKernelOptions);
                return true;
            }
            if (!strcmp(fieldname, "recompile"))
            {
                result = new UT_OptionBool(myParms.myRecompile);
                return true;
            }
            if (!strcmp(fieldname, "origin"))
            {
                result = new UT_OptionBool(myParms.myOrigin);
                return true;
            }
            if (!strcmp(fieldname, "size"))
            {
                result = new UT_OptionBool(myParms.mySize);
                return true;
            }
            if (!strcmp(fieldname, "voxelsize"))
            {
                result = new UT_OptionBool(myParms.myVoxelSize);
                return true;
            }
            if (!strcmp(fieldname, "time"))
            {
                result = new UT_OptionBool(myParms.myTime);
                return true;
            }
            if (!strcmp(fieldname, "timeinc"))
            {
                result = new UT_OptionBool(myParms.myTimeInc);
                return true;
            }
            if (!strcmp(fieldname, "flushattrib"))
            {
                result = new UT_OptionBool(myParms.myFlushAttributes);
                return true;
            }
            if (!strcmp(fieldname, "finish"))
            {
                result = new UT_OptionBool(myParms.myFinish);
                return true;
            }
            if (!strcmp(fieldname, "timescale"))
            {
                result = new UT_OptionFpreal(myParms.myTimeScale);
                return true;
            }
            if (!strcmp(fieldname, "timemethod"))
            {
                result = new UT_OptionInt(myParms.myTimeMethod);
                return true;
            }
            if (!strcmp(fieldname, "xnoise"))
            {
                result = new UT_OptionBool(myParms.myXNoise);
                return true;
            }
            if (!strcmp(fieldname, "worksets_geo"))
            {
                result = new UT_OptionString(myParms.myWorksetsGeometry);
                return true;
            }
            if (!strcmp(fieldname, "worksets_begin"))
            {
                result = new UT_OptionString(myParms.myWorksetsBeginAttr);
                return true;
            }
            if (!strcmp(fieldname, "worksets_length"))
            {
                result = new UT_OptionString(myParms.myWorksetsLengthAttr);
                return true;
            }
            if (!strcmp(fieldname, "warnmissing"))
            {
                result = new UT_OptionBool(myParms.myWarnMissing);
                return true;
            }
            if (!strcmp(fieldname, "singleworkgroup"))
            {
                result = new UT_OptionBool(myParms.mySingleWorkgroup);
                return true;
            }
            if (!strcmp(fieldname, "bindings"))
            {
                result = new UT_OptionString(myParms.createString(myParms.myBindings));
                return true;
            }

            // Failed to find
            return false;
        }

        const GAS_OpenCLParms &myParms;
    };

    SIM_Query   *createQueryObject(const SIM_Data *owner) const
    { return new Query(owner, *this); }




    // Boiler plate to load individual types.
    static void  loadData(UT_IStream &is, int64 &v)
    { is.bread(&v, 1); }
    static void  loadData(UT_IStream &is, bool &v)
    { int64     iv; is.bread(&iv, 1); v = iv; }
    static void  loadData(UT_IStream &is, fpreal64 &v)
    { is.bread<fpreal64>(&v, 1); }
    static void  loadData(UT_IStream &is, UT_Vector2D &v)
    { is.bread<fpreal64>(&v.x(), 1); is.bread<fpreal64>(&v.y(), 1); }
    static void  loadData(UT_IStream &is, UT_Vector3D &v)
    { is.bread<fpreal64>(&v.x(), 1); is.bread<fpreal64>(&v.y(), 1);
      is.bread<fpreal64>(&v.z(), 1); }
    static void  loadData(UT_IStream &is, UT_Vector4D &v)
    { is.bread<fpreal64>(&v.x(), 1); is.bread<fpreal64>(&v.y(), 1);
      is.bread<fpreal64>(&v.z(), 1); is.bread<fpreal64>(&v.w(), 1); }
    static void  loadData(UT_IStream &is, UT_Matrix2D &v)
    { for (int r = 0; r < 2; r++) for (int c = 0; c < 2; c++) is.bread<fpreal64>(&v(r, c), 1); }
    static void  loadData(UT_IStream &is, UT_Matrix3D &v)
    { for (int r = 0; r < 3; r++) for (int c = 0; c < 3; c++) is.bread<fpreal64>(&v(r, c), 1); }
    static void  loadData(UT_IStream &is, UT_Matrix4D &v)
    { for (int r = 0; r < 4; r++) for (int c = 0; c < 4; c++) is.bread<fpreal64>(&v(r, c), 1); }
    static void  loadData(UT_IStream &is, UT_Vector2I &v)
    { is.bread<int64>(&v.x(), 1); is.bread<int64>(&v.y(), 1); }
    static void  loadData(UT_IStream &is, UT_Vector3I &v)
    { is.bread<int64>(&v.x(), 1); is.bread<int64>(&v.y(), 1);
      is.bread<int64>(&v.z(), 1); }
    static void  loadData(UT_IStream &is, UT_Vector4I &v)
    { is.bread<int64>(&v.x(), 1); is.bread<int64>(&v.y(), 1);
      is.bread<int64>(&v.z(), 1); is.bread<int64>(&v.w(), 1); }
    static void  loadData(UT_IStream &is, UT_StringHolder &v)
    { is.bread(v); }
    static void  loadData(UT_IStream &is, UT_SharedPtr<UT_Ramp> &v)
    {   UT_StringHolder   rampdata;
        loadData(is, rampdata);
        if (rampdata.isstring())
        {
            v.reset(new UT_Ramp());
            UT_IStream  istr((const char *) rampdata, rampdata.length(), UT_ISTREAM_ASCII);
            v->load(istr);
        }
        else v.reset();
    }
    static void  loadData(UT_IStream &is, PRM_DataItemHandle &v)
    {   UT_StringHolder   data;
        loadData(is, data);
        if (data.isstring())
        {
            // Find the data type.
            char *colon = UT_StringWrap(data).findChar(':');
            if (colon)
            {
                int             typelen = colon - data.buffer();
                UT_WorkBuffer   type;
                type.strncpy(data.buffer(), typelen);
                UT_IStream  istr(((const char *) data) + typelen + 1, data.length() - (typelen + 1), UT_ISTREAM_BINARY);
                
                v = PRM_DataFactory::parseBinary(type.buffer(), istr);
            }
        }
        else v.reset();
    }

    static void  saveData(std::ostream &os, int64 v)
    { UTwrite(os, &v); }
    static void  saveData(std::ostream &os, bool v)
    { int64 iv = v; UTwrite(os, &iv); }
    static void  saveData(std::ostream &os, fpreal64 v)
    { UTwrite<fpreal64>(os, &v); }
    static void  saveData(std::ostream &os, UT_Vector2D v)
    { UTwrite<fpreal64>(os, &v.x()); UTwrite<fpreal64>(os, &v.y()); }
    static void  saveData(std::ostream &os, UT_Vector3D v)
    { UTwrite<fpreal64>(os, &v.x()); UTwrite<fpreal64>(os, &v.y());
      UTwrite<fpreal64>(os, &v.z()); }
    static void  saveData(std::ostream &os, UT_Vector4D v)
    { UTwrite<fpreal64>(os, &v.x()); UTwrite<fpreal64>(os, &v.y());
      UTwrite<fpreal64>(os, &v.z()); UTwrite<fpreal64>(os, &v.w()); }
    static void  saveData(std::ostream &os, UT_Matrix2D v)
    { for (int r = 0; r < 2; r++) for (int c = 0; c < 2; c++) UTwrite<fpreal64>(os, &v(r, c)); }
    static void  saveData(std::ostream &os, UT_Matrix3D v)
    { for (int r = 0; r < 3; r++) for (int c = 0; c < 3; c++) UTwrite<fpreal64>(os, &v(r, c)); }
    static void  saveData(std::ostream &os, UT_Matrix4D v)
    { for (int r = 0; r < 4; r++) for (int c = 0; c < 4; c++) UTwrite<fpreal64>(os, &v(r, c)); }
    static void  saveData(std::ostream &os, UT_StringHolder s)
    { UT_StringWrap(s).saveBinary(os); }
    static void  saveData(std::ostream &os, UT_SharedPtr<UT_Ramp> s)
    {   UT_StringHolder         result;
        UT_OStringStream        ostr;
        if (s) s->save(ostr);
        result = ostr.str();
        saveData(os, result);
    }
    static void  saveData(std::ostream &os, PRM_DataItemHandle s)
    {   UT_StringHolder         result;
        UT_OStringStream        ostr;
        if (s) 
        {
            ostr << s->getDataTypeToken();
            ostr << ":";
            s->saveBinary(ostr);
        }
        result = ostr.str();
        saveData(os, result);
    }


    void         save(std::ostream &os) const
    {
        int32           v = version();
        UTwrite(os, &v);
        saveData(os, myRunOver);
        saveData(os, myAlign);
        saveData(os, myUseCode);
        saveData(os, myKernelName);
        saveData(os, myKernelFile);
        saveData(os, myKernelCode);
        saveData(os, myKernelOptions);
        saveData(os, myRecompile);
        saveData(os, myOrigin);
        saveData(os, mySize);
        saveData(os, myVoxelSize);
        saveData(os, myTime);
        saveData(os, myTimeInc);
        saveData(os, myFlushAttributes);
        saveData(os, myFinish);
        saveData(os, myTimeScale);
        saveData(os, myTimeMethod);
        saveData(os, myXNoise);
        saveData(os, myWorksetsGeometry);
        saveData(os, myWorksetsBeginAttr);
        saveData(os, myWorksetsLengthAttr);
        saveData(os, myWarnMissing);
        saveData(os, mySingleWorkgroup);
        {
            int64   length = myBindings.entries();
            UTwrite(os, &length);
            for (exint i = 0; i < length; i++)
            {
                saveData(os, myBindings(i).name);
                saveData(os, myBindings(i).type);
                saveData(os, myBindings(i).intval);
                saveData(os, myBindings(i).fval);
                saveData(os, myBindings(i).v3val);
                saveData(os, myBindings(i).v4val);
                saveData(os, myBindings(i).timescale);
                saveData(os, myBindings(i).fieldname);
                saveData(os, myBindings(i).fieldoffsets);
                saveData(os, myBindings(i).ramp);
                saveData(os, myBindings(i).rampsize);
                saveData(os, myBindings(i).geometry);
                saveData(os, myBindings(i).attribute);
                saveData(os, myBindings(i).attribclass);
                saveData(os, myBindings(i).attribtype);
                saveData(os, myBindings(i).attribsize);
                saveData(os, myBindings(i).readable);
                saveData(os, myBindings(i).writeable);
                saveData(os, myBindings(i).optional);

            }
        }

    }

    bool         load(UT_IStream &is)
    {
        int32           v;
        is.bread(&v, 1);
        if (version() != v)
        {
            // Fail incompatible versions
            return false;
        }
        loadData(is, myRunOver);
        loadData(is, myAlign);
        loadData(is, myUseCode);
        loadData(is, myKernelName);
        loadData(is, myKernelFile);
        loadData(is, myKernelCode);
        loadData(is, myKernelOptions);
        loadData(is, myRecompile);
        loadData(is, myOrigin);
        loadData(is, mySize);
        loadData(is, myVoxelSize);
        loadData(is, myTime);
        loadData(is, myTimeInc);
        loadData(is, myFlushAttributes);
        loadData(is, myFinish);
        loadData(is, myTimeScale);
        loadData(is, myTimeMethod);
        loadData(is, myXNoise);
        loadData(is, myWorksetsGeometry);
        loadData(is, myWorksetsBeginAttr);
        loadData(is, myWorksetsLengthAttr);
        loadData(is, myWarnMissing);
        loadData(is, mySingleWorkgroup);
        {
            int64   length;
            is.read(&length, 1);
            myBindings.entries(length);
            for (exint i = 0; i < length; i++)
            {
                loadData(is, myBindings(i).name);
                loadData(is, myBindings(i).type);
                loadData(is, myBindings(i).intval);
                loadData(is, myBindings(i).fval);
                loadData(is, myBindings(i).v3val);
                loadData(is, myBindings(i).v4val);
                loadData(is, myBindings(i).timescale);
                loadData(is, myBindings(i).fieldname);
                loadData(is, myBindings(i).fieldoffsets);
                loadData(is, myBindings(i).ramp);
                loadData(is, myBindings(i).rampsize);
                loadData(is, myBindings(i).geometry);
                loadData(is, myBindings(i).attribute);
                loadData(is, myBindings(i).attribclass);
                loadData(is, myBindings(i).attribtype);
                loadData(is, myBindings(i).attribsize);
                loadData(is, myBindings(i).readable);
                loadData(is, myBindings(i).writeable);
                loadData(is, myBindings(i).optional);

            }
        }

        return true;
    }

    int64 getRunOver() const { return myRunOver; }
    void setRunOver(int64 val) { myRunOver = val; }
    bool getAlign() const { return myAlign; }
    void setAlign(bool val) { myAlign = val; }
    bool getUseCode() const { return myUseCode; }
    void setUseCode(bool val) { myUseCode = val; }
    const UT_StringHolder & getKernelName() const { return myKernelName; }
    void setKernelName(const UT_StringHolder & val) { myKernelName = val; }
    const UT_StringHolder & getKernelFile() const { return myKernelFile; }
    void setKernelFile(const UT_StringHolder & val) { myKernelFile = val; }
    const UT_StringHolder & getKernelCode() const { return myKernelCode; }
    void setKernelCode(const UT_StringHolder & val) { myKernelCode = val; }
    const UT_StringHolder & getKernelOptions() const { return myKernelOptions; }
    void setKernelOptions(const UT_StringHolder & val) { myKernelOptions = val; }
    bool getRecompile() const { return myRecompile; }
    void setRecompile(bool val) { myRecompile = val; }
    bool getOrigin() const { return myOrigin; }
    void setOrigin(bool val) { myOrigin = val; }
    bool getSize() const { return mySize; }
    void setSize(bool val) { mySize = val; }
    bool getVoxelSize() const { return myVoxelSize; }
    void setVoxelSize(bool val) { myVoxelSize = val; }
    bool getTime() const { return myTime; }
    void setTime(bool val) { myTime = val; }
    bool getTimeInc() const { return myTimeInc; }
    void setTimeInc(bool val) { myTimeInc = val; }
    bool getFlushAttributes() const { return myFlushAttributes; }
    void setFlushAttributes(bool val) { myFlushAttributes = val; }
    bool getFinish() const { return myFinish; }
    void setFinish(bool val) { myFinish = val; }
    fpreal64 getTimeScale() const { return myTimeScale; }
    void setTimeScale(fpreal64 val) { myTimeScale = val; }
    int64 getTimeMethod() const { return myTimeMethod; }
    void setTimeMethod(int64 val) { myTimeMethod = val; }
    bool getXNoise() const { return myXNoise; }
    void setXNoise(bool val) { myXNoise = val; }
    const UT_StringHolder & getWorksetsGeometry() const { return myWorksetsGeometry; }
    void setWorksetsGeometry(const UT_StringHolder & val) { myWorksetsGeometry = val; }
    const UT_StringHolder & getWorksetsBeginAttr() const { return myWorksetsBeginAttr; }
    void setWorksetsBeginAttr(const UT_StringHolder & val) { myWorksetsBeginAttr = val; }
    const UT_StringHolder & getWorksetsLengthAttr() const { return myWorksetsLengthAttr; }
    void setWorksetsLengthAttr(const UT_StringHolder & val) { myWorksetsLengthAttr = val; }
    bool getWarnMissing() const { return myWarnMissing; }
    void setWarnMissing(bool val) { myWarnMissing = val; }
    bool getSingleWorkgroup() const { return mySingleWorkgroup; }
    void setSingleWorkgroup(bool val) { mySingleWorkgroup = val; }
    const UT_Array<Bindings> &getBindings() const { return myBindings; }
    void setBindings(const UT_Array<Bindings> &val) { myBindings = val; }

private:
    int64 myRunOver;
    bool myAlign;
    bool myUseCode;
    UT_StringHolder myKernelName;
    UT_StringHolder myKernelFile;
    UT_StringHolder myKernelCode;
    UT_StringHolder myKernelOptions;
    bool myRecompile;
    bool myOrigin;
    bool mySize;
    bool myVoxelSize;
    bool myTime;
    bool myTimeInc;
    bool myFlushAttributes;
    bool myFinish;
    fpreal64 myTimeScale;
    int64 myTimeMethod;
    bool myXNoise;
    UT_StringHolder myWorksetsGeometry;
    UT_StringHolder myWorksetsBeginAttr;
    UT_StringHolder myWorksetsLengthAttr;
    bool myWarnMissing;
    bool mySingleWorkgroup;
    UT_Array<Bindings> myBindings;

};
