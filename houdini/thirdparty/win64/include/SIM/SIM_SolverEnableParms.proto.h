/* Automagically Generated by generate_proto.py
 * Do not Edit
 */
#pragma once


#include <OP/OP_Utils.h>
#include <PRM/PRM_Parm.h>
#include <UT/UT_IStream.h>
#include <UT/UT_NTStreamUtil.h>
#include <UT/UT_Ramp.h>
#include <UT/UT_SharedPtr.h>
#include <UT/UT_StringHolder.h>
#include <UT/UT_StringStream.h>
#include <UT/UT_VectorTypes.h>
#include <SYS/SYS_Types.h>

using namespace UT::Literal;

class DEP_MicroNode;

class SIM_API SIM_SolverEnableParms 
{
public:
    static int version() { return 1; }

    SIM_SolverEnableParms()
    {
        myEnableSolvers = 0;
        myEnableAttribClass = 0;
        myEnableAttrib = ""_sh;
        myEnableData = ""_sh;
        myEnableDataMode = 0;
        myEnableAttribMode = 0;

    }

    explicit SIM_SolverEnableParms(const SIM_SolverEnableParms &) = default;

    ~SIM_SolverEnableParms() {}

    bool operator==(const SIM_SolverEnableParms &src) const
    {
        if (myEnableSolvers != src.myEnableSolvers) return false;
        if (myEnableAttribClass != src.myEnableAttribClass) return false;
        if (myEnableAttrib != src.myEnableAttrib) return false;
        if (myEnableData != src.myEnableData) return false;
        if (myEnableDataMode != src.myEnableDataMode) return false;
        if (myEnableAttribMode != src.myEnableAttribMode) return false;

        return true;
    }
    bool operator!=(const SIM_SolverEnableParms &src) const
    {
        return !operator==(src);
    }


    class Query : public SIM_Query
    {
    public:
        explicit Query(const SIM_Data *owner, const SIM_SolverEnableParms &parms) 
                    : SIM_Query(owner)
                    , myParms(parms)
        { }
        virtual ~Query() {}

    protected:
        bool            isMyRecord(const char *recordtype) const
        { return !strcmp(recordtype, "Params"); }

        virtual int     getNumRecordTypesSubclass() const { return 1; }
        virtual const char *getRecordTypeNameSubclass(int recordtypenum) const
        { 
            if (recordtypenum == 0) return "Params"; 
            return 0; 
        }
        virtual int     getNumRecordsSubclass(const char *recordtype) const
        { 
            if (isMyRecord(recordtype)) return 1; 
            return 0; 
        }
        virtual int     getNumFieldsSubclass(const char *recordtype) const
        {
            if (isMyRecord(recordtype))
                return 6;
            return 0;
        }

        virtual const char *getFieldNameSubclass(const char *recordtype,
                                        int fieldnum) const
        {
            if (!isMyRecord(recordtype))
                return 0;

            switch (fieldnum)
            {
            case 0:
                return "enable";
            case 1:
                return "enableattribclass";
            case 2:
                return "enableattrib";
            case 3:
                return "enabledata";
            case 4:
                return "enabledatamode";
            case 5:
                return "enableattribmode";

            }
            return 0;
        }
        virtual UT_OptionType getFieldTypeSubclass(const char *recordtype,
                                        int fieldnum) const
        {
            if (!isMyRecord(recordtype))
                return UT_OPTION_INVALID;

            switch (fieldnum)
            {
            case 0:
                return UT_OPTION_INT;
            case 1:
                return UT_OPTION_INT;
            case 2:
                return UT_OPTION_STRING;
            case 3:
                return UT_OPTION_STRING;
            case 4:
                return UT_OPTION_INT;
            case 5:
                return UT_OPTION_INT;

            }
            return UT_OPTION_INVALID;
        }

        virtual bool getFieldRawSubclass(const char *recordtype,
                                        int recordnum,
                                        const char *fieldname,
                                        UT_OptionEntry *&result) const
        {
            if (!isMyRecord(recordtype))
                return false;
            if (recordnum != 0)
                return false;
            // This is less optimal, but if we are in SIM_Query
            // land we have already given up on performance.
            if (!strcmp(fieldname, "enable"))
            {
                result = new UT_OptionInt(myParms.myEnableSolvers);
                return true;
            }
            if (!strcmp(fieldname, "enableattribclass"))
            {
                result = new UT_OptionInt(myParms.myEnableAttribClass);
                return true;
            }
            if (!strcmp(fieldname, "enableattrib"))
            {
                result = new UT_OptionString(myParms.myEnableAttrib);
                return true;
            }
            if (!strcmp(fieldname, "enabledata"))
            {
                result = new UT_OptionString(myParms.myEnableData);
                return true;
            }
            if (!strcmp(fieldname, "enabledatamode"))
            {
                result = new UT_OptionInt(myParms.myEnableDataMode);
                return true;
            }
            if (!strcmp(fieldname, "enableattribmode"))
            {
                result = new UT_OptionInt(myParms.myEnableAttribMode);
                return true;
            }

            // Failed to find
            return false;
        }

        const SIM_SolverEnableParms &myParms;
    };

    SIM_Query   *createQueryObject(const SIM_Data *owner) const
    { return new Query(owner, *this); }




    // Boiler plate to load individual types.
    static void  loadData(UT_IStream &is, int64 &v)
    { is.bread(&v, 1); }
    static void  loadData(UT_IStream &is, bool &v)
    { int64     iv; is.bread(&iv, 1); v = iv; }
    static void  loadData(UT_IStream &is, fpreal64 &v)
    { is.bread<fpreal64>(&v, 1); }
    static void  loadData(UT_IStream &is, UT_Vector2D &v)
    { is.bread<fpreal64>(&v.x(), 1); is.bread<fpreal64>(&v.y(), 1); }
    static void  loadData(UT_IStream &is, UT_Vector3D &v)
    { is.bread<fpreal64>(&v.x(), 1); is.bread<fpreal64>(&v.y(), 1);
      is.bread<fpreal64>(&v.z(), 1); }
    static void  loadData(UT_IStream &is, UT_Vector4D &v)
    { is.bread<fpreal64>(&v.x(), 1); is.bread<fpreal64>(&v.y(), 1);
      is.bread<fpreal64>(&v.z(), 1); is.bread<fpreal64>(&v.w(), 1); }
    static void  loadData(UT_IStream &is, UT_Matrix2D &v)
    { for (int r = 0; r < 2; r++) for (int c = 0; c < 2; c++) is.bread<fpreal64>(&v(r, c), 1); }
    static void  loadData(UT_IStream &is, UT_Matrix3D &v)
    { for (int r = 0; r < 3; r++) for (int c = 0; c < 3; c++) is.bread<fpreal64>(&v(r, c), 1); }
    static void  loadData(UT_IStream &is, UT_Matrix4D &v)
    { for (int r = 0; r < 4; r++) for (int c = 0; c < 4; c++) is.bread<fpreal64>(&v(r, c), 1); }
    static void  loadData(UT_IStream &is, UT_Vector2I &v)
    { is.bread<int64>(&v.x(), 1); is.bread<int64>(&v.y(), 1); }
    static void  loadData(UT_IStream &is, UT_Vector3I &v)
    { is.bread<int64>(&v.x(), 1); is.bread<int64>(&v.y(), 1);
      is.bread<int64>(&v.z(), 1); }
    static void  loadData(UT_IStream &is, UT_Vector4I &v)
    { is.bread<int64>(&v.x(), 1); is.bread<int64>(&v.y(), 1);
      is.bread<int64>(&v.z(), 1); is.bread<int64>(&v.w(), 1); }
    static void  loadData(UT_IStream &is, UT_StringHolder &v)
    { is.bread(v); }
    static void  loadData(UT_IStream &is, UT_SharedPtr<UT_Ramp> &v)
    {   UT_StringHolder   rampdata;
        loadData(is, rampdata);
        if (rampdata.isstring())
        {
            v.reset(new UT_Ramp());
            UT_IStream  istr((const char *) rampdata, rampdata.length(), UT_ISTREAM_ASCII);
            v->load(istr);
        }
        else v.reset();
    }
    static void  loadData(UT_IStream &is, PRM_DataItemHandle &v)
    {   UT_StringHolder   data;
        loadData(is, data);
        if (data.isstring())
        {
            // Find the data type.
            char *colon = UT_StringWrap(data).findChar(':');
            if (colon)
            {
                int             typelen = colon - data.buffer();
                UT_WorkBuffer   type;
                type.strncpy(data.buffer(), typelen);
                UT_IStream  istr(((const char *) data) + typelen + 1, data.length() - (typelen + 1), UT_ISTREAM_BINARY);
                
                v = PRM_DataFactory::parseBinary(type.buffer(), istr);
            }
        }
        else v.reset();
    }

    static void  saveData(std::ostream &os, int64 v)
    { UTwrite(os, &v); }
    static void  saveData(std::ostream &os, bool v)
    { int64 iv = v; UTwrite(os, &iv); }
    static void  saveData(std::ostream &os, fpreal64 v)
    { UTwrite<fpreal64>(os, &v); }
    static void  saveData(std::ostream &os, UT_Vector2D v)
    { UTwrite<fpreal64>(os, &v.x()); UTwrite<fpreal64>(os, &v.y()); }
    static void  saveData(std::ostream &os, UT_Vector3D v)
    { UTwrite<fpreal64>(os, &v.x()); UTwrite<fpreal64>(os, &v.y());
      UTwrite<fpreal64>(os, &v.z()); }
    static void  saveData(std::ostream &os, UT_Vector4D v)
    { UTwrite<fpreal64>(os, &v.x()); UTwrite<fpreal64>(os, &v.y());
      UTwrite<fpreal64>(os, &v.z()); UTwrite<fpreal64>(os, &v.w()); }
    static void  saveData(std::ostream &os, UT_Matrix2D v)
    { for (int r = 0; r < 2; r++) for (int c = 0; c < 2; c++) UTwrite<fpreal64>(os, &v(r, c)); }
    static void  saveData(std::ostream &os, UT_Matrix3D v)
    { for (int r = 0; r < 3; r++) for (int c = 0; c < 3; c++) UTwrite<fpreal64>(os, &v(r, c)); }
    static void  saveData(std::ostream &os, UT_Matrix4D v)
    { for (int r = 0; r < 4; r++) for (int c = 0; c < 4; c++) UTwrite<fpreal64>(os, &v(r, c)); }
    static void  saveData(std::ostream &os, UT_StringHolder s)
    { UT_StringWrap(s).saveBinary(os); }
    static void  saveData(std::ostream &os, UT_SharedPtr<UT_Ramp> s)
    {   UT_StringHolder         result;
        UT_OStringStream        ostr;
        if (s) s->save(ostr);
        result = ostr.str();
        saveData(os, result);
    }
    static void  saveData(std::ostream &os, PRM_DataItemHandle s)
    {   UT_StringHolder         result;
        UT_OStringStream        ostr;
        if (s) 
        {
            ostr << s->getDataTypeToken();
            ostr << ":";
            s->saveBinary(ostr);
        }
        result = ostr.str();
        saveData(os, result);
    }


    void         save(std::ostream &os) const
    {
        int32           v = version();
        UTwrite(os, &v);
        saveData(os, myEnableSolvers);
        saveData(os, myEnableAttribClass);
        saveData(os, myEnableAttrib);
        saveData(os, myEnableData);
        saveData(os, myEnableDataMode);
        saveData(os, myEnableAttribMode);

    }

    bool         load(UT_IStream &is)
    {
        int32           v;
        is.bread(&v, 1);
        if (version() != v)
        {
            // Fail incompatible versions
            return false;
        }
        loadData(is, myEnableSolvers);
        loadData(is, myEnableAttribClass);
        loadData(is, myEnableAttrib);
        loadData(is, myEnableData);
        loadData(is, myEnableDataMode);
        loadData(is, myEnableAttribMode);

        return true;
    }

    int64 getEnableSolvers() const { return myEnableSolvers; }
    void setEnableSolvers(int64 val) { myEnableSolvers = val; }
    int64 getEnableAttribClass() const { return myEnableAttribClass; }
    void setEnableAttribClass(int64 val) { myEnableAttribClass = val; }
    const UT_StringHolder & getEnableAttrib() const { return myEnableAttrib; }
    void setEnableAttrib(const UT_StringHolder & val) { myEnableAttrib = val; }
    const UT_StringHolder & getEnableData() const { return myEnableData; }
    void setEnableData(const UT_StringHolder & val) { myEnableData = val; }
    int64 getEnableDataMode() const { return myEnableDataMode; }
    void setEnableDataMode(int64 val) { myEnableDataMode = val; }
    int64 getEnableAttribMode() const { return myEnableAttribMode; }
    void setEnableAttribMode(int64 val) { myEnableAttribMode = val; }

private:
    int64 myEnableSolvers;
    int64 myEnableAttribClass;
    UT_StringHolder myEnableAttrib;
    UT_StringHolder myEnableData;
    int64 myEnableDataMode;
    int64 myEnableAttribMode;

};
