/*
 * PROPRIETARY INFORMATION.  This software is proprietary to
 * Side Effects Software Inc., and is not to be reproduced,
 * transmitted, or disclosed in any way without written permission.
 *
 */

#ifndef __SIM_Noise_h__
#define __SIM_Noise_h__

#include "SIM_API.h"
#include "SIM_DataUtils.h"
#include "SIM_OptionsUser.h"
#include "SIM_PhysicalParms.h"

class SIM_NoiseResolver;
class SIM_NoiseResolverGeneric;

/// This class defines the interface for noise generation functions.
class SIM_API SIM_Noise : public SIM_Data,
			  public SIM_OptionsUser
{
public:
    GETSET_DATA_FUNCS_V3(SIM_NAME_MINVALUE, MinValue);
    GETSET_DATA_FUNCS_V3(SIM_NAME_MAXVALUE, MaxValue);
    GETSET_DATA_FUNCS_B(SIM_NAME_SCALARNOISE, ScalarNoise);

    /// Gets the 1D value of the noise field at the specified position.
    /// The returned value is between the minvalue and the maxvalue.
    fpreal		 getNoise(const UT_Vector3 &pos) const;
    /// Gets the 3D value of the noise field at the specified position.
    /// The returned value is between the minvalue and the maxvalue.
    void		 getNoise(const UT_Vector3 &pos,
				  UT_Vector3 &noise) const;

    /// Returns an accelerated property resolver to get the noise
    /// at any given place in a hopefully threadsafe manner.
    SIM_PropertyResolver *getNoiseResolver() const;

protected:
    explicit		 SIM_Noise(const SIM_DataFactory *factory);
    virtual		~SIM_Noise();

    /// Get the extents of the values generated by the noise function.
    /// These values are required to properly scale the returned values.
    void		 getNoiseLimits(fpreal &min, fpreal &max) const;

    /// Override this function to return the actual bounds of the noise.
    virtual void	 getNoiseLimitsSubclass(fpreal &min,
						fpreal &max) const = 0;
    /// Override this function to implement a new noise function.
    /// The returned value must be in the range [0..1].
    /// The default implementation returns the X component of the 3D noise.
    virtual fpreal	 getNoiseSubclass(const UT_Vector3 &pos) const;
    /// Override this function to implement a new noise function.
    /// The returned values must all be in the range [0..1].
    /// The default implementation returns the 1D noise value for all
    /// three components.
    virtual void	 getNoiseSubclass(const UT_Vector3 &pos,
					  UT_Vector3 &noise) const;
    /// Create a SIM_PropertyResolver to quickly compute the noise,
    /// defaults to a generic one that just calls back to SIM_Noise.
    virtual SIM_PropertyResolver *getNoiseResolverSubclass() const;

private:
    DECLARE_STANDARD_GETCASTTOTYPE();
    DECLARE_CLASSNAME(SIM_Noise, SIM_Data);

    friend class SIM_NoiseResolverGeneric;
    friend class SIM_NoiseResolver;
};

class SIM_API SIM_NoiseResolver : public SIM_PropertyResolver
{
public:
	    SIM_NoiseResolver(const SIM_Noise *noise);

    /// Handles the resizing to the given range using the min/max,
    /// and proper support of scalar fields being set.
    virtual fpreal	getF(const UT_Vector3 &pos);
    virtual UT_Vector3	getV3(const UT_Vector3 &pos);

    /// These are the methods to override with the noise-specific
    /// behaviour.  They should behave like SIM_Noise::getNoiseSubclass
    virtual fpreal	getNoiseF(const UT_Vector3 &pos) = 0;
    virtual UT_Vector3	getNoiseV3(const UT_Vector3 &pos) = 0;

protected:
    bool		myIsScalar;
    UT_Vector3		myMaxValue, myMinValue;
    fpreal		myNoiseLimitsMin, myNoiseLimitsMax;
};

#endif
