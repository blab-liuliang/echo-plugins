/*
 * PROPRIETARY INFORMATION.  This software is proprietary to
 * Side Effects Software Inc., and is not to be reproduced,
 * transmitted, or disclosed in any way without written permission.
 *
 * NAME:	VISF_Primitive.h (VISF Library, C++)
 *
 * COMMENTS:
 * 	A subclass of GR_Primitive, the class VISF_Primitive is a wrapper
 * 	for geometries generated by visualizers. It control the rendering
 * 	these geometries according to the activation state of the associated
 * 	visualizer.
 */

#ifndef __VISF_Primitive__
#define __VISF_Primitive__

#include "VISF_API.h"

#include <GUI/GUI_GeoRender.h>
#include <GR/GR_Defines.h>
#include <GR/GR_Primitive.h>
#include <VIS/VIS_Handle.h>

class VISF_API VISF_Primitive : public GR_Primitive
{
public:
			 VISF_Primitive(const GR_RenderInfo *info,
				 const char *cache_name);

    virtual		~VISF_Primitive();

    virtual
    GR_BasePrimType	 getBasePrimType() const
    			    { return GR_BASE_PRIM_VISUALIZE; }

    virtual const char 	*className() const { return "VISF_Primitive"; }

    virtual void	 updateVisualizer(RE_Render *r,
				const GT_PrimitiveHandle &primh,
				const GR_UpdateParms &update_parms) = 0;

    virtual void	 renderVisualizer(RE_Render *r,
					  GR_RenderMode render_mode,
					  GR_RenderFlags render_flags,
					  GR_DrawParms dp) = 0;

    virtual int	    	 renderVisualizerPick(RE_Render *r,
				const GR_DisplayOption *opt,
				unsigned int pick_type,
				GR_PickStyle pick_style,
				bool has_pick_map) = 0;

    virtual void	 renderVisualizerDecoration(RE_Render *r,
				GR_Decoration decor,
				const GR_DecorationParms &parms) = 0;

    virtual
    GR_PrimAcceptResult	 collectPrimitive(GT_PrimitiveType t, int geo_type,
    				const GT_PrimitiveHandle &gt_prim,
    				const GEO_Primitive *geo_prim,
    				const GR_Primitive *gr_prim);

    void		 setVisHandle(VIS_Handle vh);


    bool		 isObjectSelected()
			    { return myObjectSelected; }

    OP_Node		*getOpNode()
			    { return myOpNode; }

    GU_ConstDetailHandle getDetail()
			    { return myDetail; }
private:
    // Treat the following virtuals as final and override those above instead!
    // TODO: Turn all these virtuals "final" when we have the compiler support.

    virtual void	 render(RE_Render *r,
				GR_RenderMode render_mode,
				GR_RenderFlags flags,
				GR_DrawParms dp);

    virtual int 	 renderPick(RE_Render *r,
				 const GR_DisplayOption *opt,
				 unsigned int pick_type,
				 GR_PickStyle pick_style,
				 bool has_pick_map);

    virtual void	 renderDecoration(RE_Render *r,
				 GR_Decoration decor,
				 const GR_DecorationParms &p);

    virtual
    GR_PrimAcceptResult	 acceptPrimitive(GT_PrimitiveType t,
				 int geo_type,
				 const GT_PrimitiveHandle &ph,
				 const GEO_Primitive *prim);

    virtual void	 update(RE_Render *r,
				const GT_PrimitiveHandle &primh,
				const GR_UpdateParms &update_parms);

    bool		 shouldRender(const GR_DisplayOption *opt);

    VIS_Handle 		 myVisHandle;
    int			 myVisSerialNum;

    // parameters cached from the update parms during update; these can
    // be queried by the visualizer using the provided accessors.

    bool		 myObjectSelected;
    OP_Node 		*myOpNode;
    GU_ConstDetailHandle myDetail;
};

#endif
